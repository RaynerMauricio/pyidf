from collections import OrderedDict

class FluidPropertiesName(object):
    """ Corresponds to IDD object `FluidProperties:Name`
        potential fluid name/type in the input file
        repeat this object for each fluid
    
    """
    internal_name = "FluidProperties:Name"
    field_count = 2
    required_fields = ["Fluid Name", "Fluid Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FluidProperties:Name`
        """
        self._data = OrderedDict()
        self._data["Fluid Name"] = None
        self._data["Fluid Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.fluid_name = None
        else:
            self.fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_type = None
        else:
            self.fluid_type = vals[i]
        i += 1

    @property
    def fluid_name(self):
        """Get fluid_name

        Returns:
            str: the value of `fluid_name` or None if not set
        """
        return self._data["Fluid Name"]

    @fluid_name.setter
    def fluid_name(self, value=None):
        """  Corresponds to IDD Field `fluid_name`

        Args:
            value (str): value for IDD Field `fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_name`')

        self._data["Fluid Name"] = value

    @property
    def fluid_type(self):
        """Get fluid_type

        Returns:
            str: the value of `fluid_type` or None if not set
        """
        return self._data["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value=None):
        """  Corresponds to IDD Field `fluid_type`

        Args:
            value (str): value for IDD Field `fluid_type`
                Accepted values are:
                      - Refrigerant
                      - Glycol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_type`')
            vals = set()
            vals.add("Refrigerant")
            vals.add("Glycol")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_type`'.format(value))

        self._data["Fluid Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.fluid_name))
        out.append(self._to_str(self.fluid_type))
        return ",".join(out)

class FluidPropertiesGlycolConcentration(object):
    """ Corresponds to IDD object `FluidProperties:GlycolConcentration`
        glycol and what concentration it is
    
    """
    internal_name = "FluidProperties:GlycolConcentration"
    field_count = 4
    required_fields = ["Name", "Glycol Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FluidProperties:GlycolConcentration`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Glycol Type"] = None
        self._data["User Defined Glycol Name"] = None
        self._data["Glycol Concentration"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glycol_type = None
        else:
            self.glycol_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.user_defined_glycol_name = None
        else:
            self.user_defined_glycol_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.glycol_concentration = None
        else:
            self.glycol_concentration = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def glycol_type(self):
        """Get glycol_type

        Returns:
            str: the value of `glycol_type` or None if not set
        """
        return self._data["Glycol Type"]

    @glycol_type.setter
    def glycol_type(self, value=None):
        """  Corresponds to IDD Field `glycol_type`
        or UserDefined Fluid (must show up as a glycol in FluidProperties:Name object)

        Args:
            value (str): value for IDD Field `glycol_type`
                Accepted values are:
                      - EthyleneGlycol
                      - PropyleneGlycol
                      - UserDefinedGlycolType
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `glycol_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glycol_type`')
            vals = set()
            vals.add("EthyleneGlycol")
            vals.add("PropyleneGlycol")
            vals.add("UserDefinedGlycolType")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `glycol_type`'.format(value))

        self._data["Glycol Type"] = value

    @property
    def user_defined_glycol_name(self):
        """Get user_defined_glycol_name

        Returns:
            str: the value of `user_defined_glycol_name` or None if not set
        """
        return self._data["User Defined Glycol Name"]

    @user_defined_glycol_name.setter
    def user_defined_glycol_name(self, value=None):
        """  Corresponds to IDD Field `user_defined_glycol_name`

        Args:
            value (str): value for IDD Field `user_defined_glycol_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `user_defined_glycol_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `user_defined_glycol_name`')

        self._data["User Defined Glycol Name"] = value

    @property
    def glycol_concentration(self):
        """Get glycol_concentration

        Returns:
            float: the value of `glycol_concentration` or None if not set
        """
        return self._data["Glycol Concentration"]

    @glycol_concentration.setter
    def glycol_concentration(self, value=None):
        """  Corresponds to IDD Field `glycol_concentration`

        Args:
            value (float): value for IDD Field `glycol_concentration`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `glycol_concentration`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `glycol_concentration`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `glycol_concentration`')

        self._data["Glycol Concentration"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.glycol_type))
        out.append(self._to_str(self.user_defined_glycol_name))
        out.append(self._to_str(self.glycol_concentration))
        return ",".join(out)

class FluidPropertiesTemperatures(object):
    """ Corresponds to IDD object `FluidProperties:Temperatures`
        property values for fluid properties
        list of up to 250 temperatures, note that number of property values must match the number of properties
        in other words, there must be a one-to-one correspondence between the property values in this list and
        the actual properties list in other syntax
        degrees C (for all temperature inputs)
    
    """
    internal_name = "FluidProperties:Temperatures"
    field_count = 251
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `FluidProperties:Temperatures`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Temperature 1"] = None
        self._data["Temperature 2"] = None
        self._data["Temperature 3"] = None
        self._data["Temperature 4"] = None
        self._data["Temperature 5"] = None
        self._data["Temperature 6"] = None
        self._data["Temperature 7"] = None
        self._data["Temperature 8"] = None
        self._data["Temperature 9"] = None
        self._data["Temperature 10"] = None
        self._data["Temperature 11"] = None
        self._data["Temperature 12"] = None
        self._data["Temperature 13"] = None
        self._data["Temperature 14"] = None
        self._data["Temperature 15"] = None
        self._data["Temperature 16"] = None
        self._data["Temperature 17"] = None
        self._data["Temperature 18"] = None
        self._data["Temperature 19"] = None
        self._data["Temperature 20"] = None
        self._data["Temperature 21"] = None
        self._data["Temperature 22"] = None
        self._data["Temperature 23"] = None
        self._data["Temperature 24"] = None
        self._data["Temperature 25"] = None
        self._data["Temperature 26"] = None
        self._data["Temperature 27"] = None
        self._data["Temperature 28"] = None
        self._data["Temperature 29"] = None
        self._data["Temperature 30"] = None
        self._data["Temperature 31"] = None
        self._data["Temperature 32"] = None
        self._data["Temperature 33"] = None
        self._data["Temperature 34"] = None
        self._data["Temperature 35"] = None
        self._data["Temperature 36"] = None
        self._data["Temperature 37"] = None
        self._data["Temperature 38"] = None
        self._data["Temperature 39"] = None
        self._data["Temperature 40"] = None
        self._data["Temperature 41"] = None
        self._data["Temperature 42"] = None
        self._data["Temperature 43"] = None
        self._data["Temperature 44"] = None
        self._data["Temperature 45"] = None
        self._data["Temperature 46"] = None
        self._data["Temperature 47"] = None
        self._data["Temperature 48"] = None
        self._data["Temperature 49"] = None
        self._data["Temperature 50"] = None
        self._data["Temperature 51"] = None
        self._data["Temperature 52"] = None
        self._data["Temperature 53"] = None
        self._data["Temperature 54"] = None
        self._data["Temperature 55"] = None
        self._data["Temperature 56"] = None
        self._data["Temperature 57"] = None
        self._data["Temperature 58"] = None
        self._data["Temperature 59"] = None
        self._data["Temperature 60"] = None
        self._data["Temperature 61"] = None
        self._data["Temperature 62"] = None
        self._data["Temperature 63"] = None
        self._data["Temperature 64"] = None
        self._data["Temperature 65"] = None
        self._data["Temperature 66"] = None
        self._data["Temperature 67"] = None
        self._data["Temperature 68"] = None
        self._data["Temperature 69"] = None
        self._data["Temperature 70"] = None
        self._data["Temperature 71"] = None
        self._data["Temperature 72"] = None
        self._data["Temperature 73"] = None
        self._data["Temperature 74"] = None
        self._data["Temperature 75"] = None
        self._data["Temperature 76"] = None
        self._data["Temperature 77"] = None
        self._data["Temperature 78"] = None
        self._data["Temperature 79"] = None
        self._data["Temperature 80"] = None
        self._data["Temperature 81"] = None
        self._data["Temperature 82"] = None
        self._data["Temperature 83"] = None
        self._data["Temperature 84"] = None
        self._data["Temperature 85"] = None
        self._data["Temperature 86"] = None
        self._data["Temperature 87"] = None
        self._data["Temperature 88"] = None
        self._data["Temperature 89"] = None
        self._data["Temperature 90"] = None
        self._data["Temperature 91"] = None
        self._data["Temperature 92"] = None
        self._data["Temperature 93"] = None
        self._data["Temperature 94"] = None
        self._data["Temperature 95"] = None
        self._data["Temperature 96"] = None
        self._data["Temperature 97"] = None
        self._data["Temperature 98"] = None
        self._data["Temperature 99"] = None
        self._data["Temperature 100"] = None
        self._data["Temperature 101"] = None
        self._data["Temperature 102"] = None
        self._data["Temperature 103"] = None
        self._data["Temperature 104"] = None
        self._data["Temperature 105"] = None
        self._data["Temperature 106"] = None
        self._data["Temperature 107"] = None
        self._data["Temperature 108"] = None
        self._data["Temperature 109"] = None
        self._data["Temperature 110"] = None
        self._data["Temperature 111"] = None
        self._data["Temperature 112"] = None
        self._data["Temperature 113"] = None
        self._data["Temperature 114"] = None
        self._data["Temperature 115"] = None
        self._data["Temperature 116"] = None
        self._data["Temperature 117"] = None
        self._data["Temperature 118"] = None
        self._data["Temperature 119"] = None
        self._data["Temperature 120"] = None
        self._data["Temperature 121"] = None
        self._data["Temperature 122"] = None
        self._data["Temperature 123"] = None
        self._data["Temperature 124"] = None
        self._data["Temperature 125"] = None
        self._data["Temperature 126"] = None
        self._data["Temperature 127"] = None
        self._data["Temperature 128"] = None
        self._data["Temperature 129"] = None
        self._data["Temperature 130"] = None
        self._data["Temperature 131"] = None
        self._data["Temperature 132"] = None
        self._data["Temperature 133"] = None
        self._data["Temperature 134"] = None
        self._data["Temperature 135"] = None
        self._data["Temperature 136"] = None
        self._data["Temperature 137"] = None
        self._data["Temperature 138"] = None
        self._data["Temperature 139"] = None
        self._data["Temperature 140"] = None
        self._data["Temperature 141"] = None
        self._data["Temperature 142"] = None
        self._data["Temperature 143"] = None
        self._data["Temperature 144"] = None
        self._data["Temperature 145"] = None
        self._data["Temperature 146"] = None
        self._data["Temperature 147"] = None
        self._data["Temperature 148"] = None
        self._data["Temperature 149"] = None
        self._data["Temperature 150"] = None
        self._data["Temperature 151"] = None
        self._data["Temperature 152"] = None
        self._data["Temperature 153"] = None
        self._data["Temperature 154"] = None
        self._data["Temperature 155"] = None
        self._data["Temperature 156"] = None
        self._data["Temperature 157"] = None
        self._data["Temperature 158"] = None
        self._data["Temperature 159"] = None
        self._data["Temperature 160"] = None
        self._data["Temperature 161"] = None
        self._data["Temperature 162"] = None
        self._data["Temperature 163"] = None
        self._data["Temperature 164"] = None
        self._data["Temperature 165"] = None
        self._data["Temperature 166"] = None
        self._data["Temperature 167"] = None
        self._data["Temperature 168"] = None
        self._data["Temperature 169"] = None
        self._data["Temperature 170"] = None
        self._data["Temperature 171"] = None
        self._data["Temperature 172"] = None
        self._data["Temperature 173"] = None
        self._data["Temperature 174"] = None
        self._data["Temperature 175"] = None
        self._data["Temperature 176"] = None
        self._data["Temperature 177"] = None
        self._data["Temperature 178"] = None
        self._data["Temperature 179"] = None
        self._data["Temperature 180"] = None
        self._data["Temperature 181"] = None
        self._data["Temperature 182"] = None
        self._data["Temperature 183"] = None
        self._data["Temperature 184"] = None
        self._data["Temperature 185"] = None
        self._data["Temperature 186"] = None
        self._data["Temperature 187"] = None
        self._data["Temperature 188"] = None
        self._data["Temperature 189"] = None
        self._data["Temperature 190"] = None
        self._data["Temperature 191"] = None
        self._data["Temperature 192"] = None
        self._data["Temperature 193"] = None
        self._data["Temperature 194"] = None
        self._data["Temperature 195"] = None
        self._data["Temperature 196"] = None
        self._data["Temperature 197"] = None
        self._data["Temperature 198"] = None
        self._data["Temperature 199"] = None
        self._data["Temperature 200"] = None
        self._data["Temperature 201"] = None
        self._data["Temperature 202"] = None
        self._data["Temperature 203"] = None
        self._data["Temperature 204"] = None
        self._data["Temperature 205"] = None
        self._data["Temperature 206"] = None
        self._data["Temperature 207"] = None
        self._data["Temperature 208"] = None
        self._data["Temperature 209"] = None
        self._data["Temperature 210"] = None
        self._data["Temperature 211"] = None
        self._data["Temperature 212"] = None
        self._data["Temperature 213"] = None
        self._data["Temperature 214"] = None
        self._data["Temperature 215"] = None
        self._data["Temperature 216"] = None
        self._data["Temperature 217"] = None
        self._data["Temperature 218"] = None
        self._data["Temperature 219"] = None
        self._data["Temperature 220"] = None
        self._data["Temperature 221"] = None
        self._data["Temperature 222"] = None
        self._data["Temperature 223"] = None
        self._data["Temperature 224"] = None
        self._data["Temperature 225"] = None
        self._data["Temperature 226"] = None
        self._data["Temperature 227"] = None
        self._data["Temperature 228"] = None
        self._data["Temperature 229"] = None
        self._data["Temperature 230"] = None
        self._data["Temperature 231"] = None
        self._data["Temperature 232"] = None
        self._data["Temperature 233"] = None
        self._data["Temperature 234"] = None
        self._data["Temperature 235"] = None
        self._data["Temperature 236"] = None
        self._data["Temperature 237"] = None
        self._data["Temperature 238"] = None
        self._data["Temperature 239"] = None
        self._data["Temperature 240"] = None
        self._data["Temperature 241"] = None
        self._data["Temperature 242"] = None
        self._data["Temperature 243"] = None
        self._data["Temperature 244"] = None
        self._data["Temperature 245"] = None
        self._data["Temperature 246"] = None
        self._data["Temperature 247"] = None
        self._data["Temperature 248"] = None
        self._data["Temperature 249"] = None
        self._data["Temperature 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_1 = None
        else:
            self.temperature_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_2 = None
        else:
            self.temperature_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_3 = None
        else:
            self.temperature_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_4 = None
        else:
            self.temperature_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_5 = None
        else:
            self.temperature_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_6 = None
        else:
            self.temperature_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_7 = None
        else:
            self.temperature_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_8 = None
        else:
            self.temperature_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_9 = None
        else:
            self.temperature_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_10 = None
        else:
            self.temperature_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_11 = None
        else:
            self.temperature_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_12 = None
        else:
            self.temperature_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_13 = None
        else:
            self.temperature_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_14 = None
        else:
            self.temperature_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_15 = None
        else:
            self.temperature_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_16 = None
        else:
            self.temperature_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_17 = None
        else:
            self.temperature_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_18 = None
        else:
            self.temperature_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_19 = None
        else:
            self.temperature_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_20 = None
        else:
            self.temperature_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_21 = None
        else:
            self.temperature_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_22 = None
        else:
            self.temperature_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_23 = None
        else:
            self.temperature_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_24 = None
        else:
            self.temperature_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_25 = None
        else:
            self.temperature_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_26 = None
        else:
            self.temperature_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_27 = None
        else:
            self.temperature_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_28 = None
        else:
            self.temperature_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_29 = None
        else:
            self.temperature_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_30 = None
        else:
            self.temperature_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_31 = None
        else:
            self.temperature_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_32 = None
        else:
            self.temperature_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_33 = None
        else:
            self.temperature_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_34 = None
        else:
            self.temperature_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_35 = None
        else:
            self.temperature_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_36 = None
        else:
            self.temperature_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_37 = None
        else:
            self.temperature_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_38 = None
        else:
            self.temperature_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_39 = None
        else:
            self.temperature_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_40 = None
        else:
            self.temperature_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_41 = None
        else:
            self.temperature_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_42 = None
        else:
            self.temperature_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_43 = None
        else:
            self.temperature_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_44 = None
        else:
            self.temperature_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_45 = None
        else:
            self.temperature_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_46 = None
        else:
            self.temperature_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_47 = None
        else:
            self.temperature_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_48 = None
        else:
            self.temperature_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_49 = None
        else:
            self.temperature_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_50 = None
        else:
            self.temperature_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_51 = None
        else:
            self.temperature_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_52 = None
        else:
            self.temperature_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_53 = None
        else:
            self.temperature_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_54 = None
        else:
            self.temperature_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_55 = None
        else:
            self.temperature_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_56 = None
        else:
            self.temperature_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_57 = None
        else:
            self.temperature_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_58 = None
        else:
            self.temperature_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_59 = None
        else:
            self.temperature_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_60 = None
        else:
            self.temperature_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_61 = None
        else:
            self.temperature_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_62 = None
        else:
            self.temperature_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_63 = None
        else:
            self.temperature_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_64 = None
        else:
            self.temperature_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_65 = None
        else:
            self.temperature_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_66 = None
        else:
            self.temperature_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_67 = None
        else:
            self.temperature_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_68 = None
        else:
            self.temperature_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_69 = None
        else:
            self.temperature_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_70 = None
        else:
            self.temperature_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_71 = None
        else:
            self.temperature_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_72 = None
        else:
            self.temperature_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_73 = None
        else:
            self.temperature_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_74 = None
        else:
            self.temperature_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_75 = None
        else:
            self.temperature_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_76 = None
        else:
            self.temperature_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_77 = None
        else:
            self.temperature_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_78 = None
        else:
            self.temperature_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_79 = None
        else:
            self.temperature_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_80 = None
        else:
            self.temperature_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_81 = None
        else:
            self.temperature_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_82 = None
        else:
            self.temperature_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_83 = None
        else:
            self.temperature_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_84 = None
        else:
            self.temperature_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_85 = None
        else:
            self.temperature_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_86 = None
        else:
            self.temperature_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_87 = None
        else:
            self.temperature_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_88 = None
        else:
            self.temperature_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_89 = None
        else:
            self.temperature_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_90 = None
        else:
            self.temperature_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_91 = None
        else:
            self.temperature_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_92 = None
        else:
            self.temperature_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_93 = None
        else:
            self.temperature_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_94 = None
        else:
            self.temperature_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_95 = None
        else:
            self.temperature_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_96 = None
        else:
            self.temperature_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_97 = None
        else:
            self.temperature_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_98 = None
        else:
            self.temperature_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_99 = None
        else:
            self.temperature_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_100 = None
        else:
            self.temperature_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_101 = None
        else:
            self.temperature_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_102 = None
        else:
            self.temperature_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_103 = None
        else:
            self.temperature_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_104 = None
        else:
            self.temperature_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_105 = None
        else:
            self.temperature_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_106 = None
        else:
            self.temperature_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_107 = None
        else:
            self.temperature_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_108 = None
        else:
            self.temperature_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_109 = None
        else:
            self.temperature_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_110 = None
        else:
            self.temperature_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_111 = None
        else:
            self.temperature_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_112 = None
        else:
            self.temperature_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_113 = None
        else:
            self.temperature_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_114 = None
        else:
            self.temperature_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_115 = None
        else:
            self.temperature_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_116 = None
        else:
            self.temperature_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_117 = None
        else:
            self.temperature_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_118 = None
        else:
            self.temperature_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_119 = None
        else:
            self.temperature_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_120 = None
        else:
            self.temperature_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_121 = None
        else:
            self.temperature_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_122 = None
        else:
            self.temperature_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_123 = None
        else:
            self.temperature_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_124 = None
        else:
            self.temperature_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_125 = None
        else:
            self.temperature_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_126 = None
        else:
            self.temperature_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_127 = None
        else:
            self.temperature_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_128 = None
        else:
            self.temperature_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_129 = None
        else:
            self.temperature_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_130 = None
        else:
            self.temperature_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_131 = None
        else:
            self.temperature_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_132 = None
        else:
            self.temperature_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_133 = None
        else:
            self.temperature_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_134 = None
        else:
            self.temperature_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_135 = None
        else:
            self.temperature_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_136 = None
        else:
            self.temperature_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_137 = None
        else:
            self.temperature_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_138 = None
        else:
            self.temperature_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_139 = None
        else:
            self.temperature_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_140 = None
        else:
            self.temperature_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_141 = None
        else:
            self.temperature_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_142 = None
        else:
            self.temperature_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_143 = None
        else:
            self.temperature_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_144 = None
        else:
            self.temperature_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_145 = None
        else:
            self.temperature_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_146 = None
        else:
            self.temperature_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_147 = None
        else:
            self.temperature_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_148 = None
        else:
            self.temperature_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_149 = None
        else:
            self.temperature_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_150 = None
        else:
            self.temperature_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_151 = None
        else:
            self.temperature_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_152 = None
        else:
            self.temperature_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_153 = None
        else:
            self.temperature_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_154 = None
        else:
            self.temperature_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_155 = None
        else:
            self.temperature_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_156 = None
        else:
            self.temperature_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_157 = None
        else:
            self.temperature_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_158 = None
        else:
            self.temperature_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_159 = None
        else:
            self.temperature_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_160 = None
        else:
            self.temperature_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_161 = None
        else:
            self.temperature_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_162 = None
        else:
            self.temperature_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_163 = None
        else:
            self.temperature_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_164 = None
        else:
            self.temperature_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_165 = None
        else:
            self.temperature_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_166 = None
        else:
            self.temperature_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_167 = None
        else:
            self.temperature_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_168 = None
        else:
            self.temperature_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_169 = None
        else:
            self.temperature_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_170 = None
        else:
            self.temperature_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_171 = None
        else:
            self.temperature_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_172 = None
        else:
            self.temperature_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_173 = None
        else:
            self.temperature_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_174 = None
        else:
            self.temperature_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_175 = None
        else:
            self.temperature_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_176 = None
        else:
            self.temperature_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_177 = None
        else:
            self.temperature_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_178 = None
        else:
            self.temperature_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_179 = None
        else:
            self.temperature_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_180 = None
        else:
            self.temperature_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_181 = None
        else:
            self.temperature_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_182 = None
        else:
            self.temperature_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_183 = None
        else:
            self.temperature_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_184 = None
        else:
            self.temperature_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_185 = None
        else:
            self.temperature_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_186 = None
        else:
            self.temperature_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_187 = None
        else:
            self.temperature_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_188 = None
        else:
            self.temperature_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_189 = None
        else:
            self.temperature_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_190 = None
        else:
            self.temperature_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_191 = None
        else:
            self.temperature_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_192 = None
        else:
            self.temperature_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_193 = None
        else:
            self.temperature_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_194 = None
        else:
            self.temperature_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_195 = None
        else:
            self.temperature_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_196 = None
        else:
            self.temperature_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_197 = None
        else:
            self.temperature_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_198 = None
        else:
            self.temperature_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_199 = None
        else:
            self.temperature_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_200 = None
        else:
            self.temperature_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_201 = None
        else:
            self.temperature_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_202 = None
        else:
            self.temperature_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_203 = None
        else:
            self.temperature_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_204 = None
        else:
            self.temperature_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_205 = None
        else:
            self.temperature_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_206 = None
        else:
            self.temperature_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_207 = None
        else:
            self.temperature_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_208 = None
        else:
            self.temperature_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_209 = None
        else:
            self.temperature_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_210 = None
        else:
            self.temperature_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_211 = None
        else:
            self.temperature_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_212 = None
        else:
            self.temperature_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_213 = None
        else:
            self.temperature_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_214 = None
        else:
            self.temperature_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_215 = None
        else:
            self.temperature_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_216 = None
        else:
            self.temperature_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_217 = None
        else:
            self.temperature_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_218 = None
        else:
            self.temperature_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_219 = None
        else:
            self.temperature_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_220 = None
        else:
            self.temperature_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_221 = None
        else:
            self.temperature_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_222 = None
        else:
            self.temperature_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_223 = None
        else:
            self.temperature_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_224 = None
        else:
            self.temperature_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_225 = None
        else:
            self.temperature_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_226 = None
        else:
            self.temperature_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_227 = None
        else:
            self.temperature_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_228 = None
        else:
            self.temperature_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_229 = None
        else:
            self.temperature_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_230 = None
        else:
            self.temperature_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_231 = None
        else:
            self.temperature_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_232 = None
        else:
            self.temperature_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_233 = None
        else:
            self.temperature_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_234 = None
        else:
            self.temperature_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_235 = None
        else:
            self.temperature_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_236 = None
        else:
            self.temperature_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_237 = None
        else:
            self.temperature_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_238 = None
        else:
            self.temperature_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_239 = None
        else:
            self.temperature_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_240 = None
        else:
            self.temperature_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_241 = None
        else:
            self.temperature_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_242 = None
        else:
            self.temperature_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_243 = None
        else:
            self.temperature_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_244 = None
        else:
            self.temperature_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_245 = None
        else:
            self.temperature_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_246 = None
        else:
            self.temperature_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_247 = None
        else:
            self.temperature_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_248 = None
        else:
            self.temperature_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_249 = None
        else:
            self.temperature_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_250 = None
        else:
            self.temperature_250 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def temperature_1(self):
        """Get temperature_1

        Returns:
            float: the value of `temperature_1` or None if not set
        """
        return self._data["Temperature 1"]

    @temperature_1.setter
    def temperature_1(self, value=None):
        """  Corresponds to IDD Field `temperature_1`

        Args:
            value (float): value for IDD Field `temperature_1`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_1`'.format(value))

        self._data["Temperature 1"] = value

    @property
    def temperature_2(self):
        """Get temperature_2

        Returns:
            float: the value of `temperature_2` or None if not set
        """
        return self._data["Temperature 2"]

    @temperature_2.setter
    def temperature_2(self, value=None):
        """  Corresponds to IDD Field `temperature_2`

        Args:
            value (float): value for IDD Field `temperature_2`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_2`'.format(value))

        self._data["Temperature 2"] = value

    @property
    def temperature_3(self):
        """Get temperature_3

        Returns:
            float: the value of `temperature_3` or None if not set
        """
        return self._data["Temperature 3"]

    @temperature_3.setter
    def temperature_3(self, value=None):
        """  Corresponds to IDD Field `temperature_3`

        Args:
            value (float): value for IDD Field `temperature_3`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_3`'.format(value))

        self._data["Temperature 3"] = value

    @property
    def temperature_4(self):
        """Get temperature_4

        Returns:
            float: the value of `temperature_4` or None if not set
        """
        return self._data["Temperature 4"]

    @temperature_4.setter
    def temperature_4(self, value=None):
        """  Corresponds to IDD Field `temperature_4`

        Args:
            value (float): value for IDD Field `temperature_4`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_4`'.format(value))

        self._data["Temperature 4"] = value

    @property
    def temperature_5(self):
        """Get temperature_5

        Returns:
            float: the value of `temperature_5` or None if not set
        """
        return self._data["Temperature 5"]

    @temperature_5.setter
    def temperature_5(self, value=None):
        """  Corresponds to IDD Field `temperature_5`

        Args:
            value (float): value for IDD Field `temperature_5`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_5`'.format(value))

        self._data["Temperature 5"] = value

    @property
    def temperature_6(self):
        """Get temperature_6

        Returns:
            float: the value of `temperature_6` or None if not set
        """
        return self._data["Temperature 6"]

    @temperature_6.setter
    def temperature_6(self, value=None):
        """  Corresponds to IDD Field `temperature_6`

        Args:
            value (float): value for IDD Field `temperature_6`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_6`'.format(value))

        self._data["Temperature 6"] = value

    @property
    def temperature_7(self):
        """Get temperature_7

        Returns:
            float: the value of `temperature_7` or None if not set
        """
        return self._data["Temperature 7"]

    @temperature_7.setter
    def temperature_7(self, value=None):
        """  Corresponds to IDD Field `temperature_7`

        Args:
            value (float): value for IDD Field `temperature_7`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_7`'.format(value))

        self._data["Temperature 7"] = value

    @property
    def temperature_8(self):
        """Get temperature_8

        Returns:
            float: the value of `temperature_8` or None if not set
        """
        return self._data["Temperature 8"]

    @temperature_8.setter
    def temperature_8(self, value=None):
        """  Corresponds to IDD Field `temperature_8`

        Args:
            value (float): value for IDD Field `temperature_8`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_8`'.format(value))

        self._data["Temperature 8"] = value

    @property
    def temperature_9(self):
        """Get temperature_9

        Returns:
            float: the value of `temperature_9` or None if not set
        """
        return self._data["Temperature 9"]

    @temperature_9.setter
    def temperature_9(self, value=None):
        """  Corresponds to IDD Field `temperature_9`

        Args:
            value (float): value for IDD Field `temperature_9`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_9`'.format(value))

        self._data["Temperature 9"] = value

    @property
    def temperature_10(self):
        """Get temperature_10

        Returns:
            float: the value of `temperature_10` or None if not set
        """
        return self._data["Temperature 10"]

    @temperature_10.setter
    def temperature_10(self, value=None):
        """  Corresponds to IDD Field `temperature_10`

        Args:
            value (float): value for IDD Field `temperature_10`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_10`'.format(value))

        self._data["Temperature 10"] = value

    @property
    def temperature_11(self):
        """Get temperature_11

        Returns:
            float: the value of `temperature_11` or None if not set
        """
        return self._data["Temperature 11"]

    @temperature_11.setter
    def temperature_11(self, value=None):
        """  Corresponds to IDD Field `temperature_11`

        Args:
            value (float): value for IDD Field `temperature_11`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_11`'.format(value))

        self._data["Temperature 11"] = value

    @property
    def temperature_12(self):
        """Get temperature_12

        Returns:
            float: the value of `temperature_12` or None if not set
        """
        return self._data["Temperature 12"]

    @temperature_12.setter
    def temperature_12(self, value=None):
        """  Corresponds to IDD Field `temperature_12`

        Args:
            value (float): value for IDD Field `temperature_12`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_12`'.format(value))

        self._data["Temperature 12"] = value

    @property
    def temperature_13(self):
        """Get temperature_13

        Returns:
            float: the value of `temperature_13` or None if not set
        """
        return self._data["Temperature 13"]

    @temperature_13.setter
    def temperature_13(self, value=None):
        """  Corresponds to IDD Field `temperature_13`

        Args:
            value (float): value for IDD Field `temperature_13`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_13`'.format(value))

        self._data["Temperature 13"] = value

    @property
    def temperature_14(self):
        """Get temperature_14

        Returns:
            float: the value of `temperature_14` or None if not set
        """
        return self._data["Temperature 14"]

    @temperature_14.setter
    def temperature_14(self, value=None):
        """  Corresponds to IDD Field `temperature_14`

        Args:
            value (float): value for IDD Field `temperature_14`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_14`'.format(value))

        self._data["Temperature 14"] = value

    @property
    def temperature_15(self):
        """Get temperature_15

        Returns:
            float: the value of `temperature_15` or None if not set
        """
        return self._data["Temperature 15"]

    @temperature_15.setter
    def temperature_15(self, value=None):
        """  Corresponds to IDD Field `temperature_15`

        Args:
            value (float): value for IDD Field `temperature_15`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_15`'.format(value))

        self._data["Temperature 15"] = value

    @property
    def temperature_16(self):
        """Get temperature_16

        Returns:
            float: the value of `temperature_16` or None if not set
        """
        return self._data["Temperature 16"]

    @temperature_16.setter
    def temperature_16(self, value=None):
        """  Corresponds to IDD Field `temperature_16`

        Args:
            value (float): value for IDD Field `temperature_16`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_16`'.format(value))

        self._data["Temperature 16"] = value

    @property
    def temperature_17(self):
        """Get temperature_17

        Returns:
            float: the value of `temperature_17` or None if not set
        """
        return self._data["Temperature 17"]

    @temperature_17.setter
    def temperature_17(self, value=None):
        """  Corresponds to IDD Field `temperature_17`

        Args:
            value (float): value for IDD Field `temperature_17`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_17`'.format(value))

        self._data["Temperature 17"] = value

    @property
    def temperature_18(self):
        """Get temperature_18

        Returns:
            float: the value of `temperature_18` or None if not set
        """
        return self._data["Temperature 18"]

    @temperature_18.setter
    def temperature_18(self, value=None):
        """  Corresponds to IDD Field `temperature_18`

        Args:
            value (float): value for IDD Field `temperature_18`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_18`'.format(value))

        self._data["Temperature 18"] = value

    @property
    def temperature_19(self):
        """Get temperature_19

        Returns:
            float: the value of `temperature_19` or None if not set
        """
        return self._data["Temperature 19"]

    @temperature_19.setter
    def temperature_19(self, value=None):
        """  Corresponds to IDD Field `temperature_19`

        Args:
            value (float): value for IDD Field `temperature_19`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_19`'.format(value))

        self._data["Temperature 19"] = value

    @property
    def temperature_20(self):
        """Get temperature_20

        Returns:
            float: the value of `temperature_20` or None if not set
        """
        return self._data["Temperature 20"]

    @temperature_20.setter
    def temperature_20(self, value=None):
        """  Corresponds to IDD Field `temperature_20`

        Args:
            value (float): value for IDD Field `temperature_20`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_20`'.format(value))

        self._data["Temperature 20"] = value

    @property
    def temperature_21(self):
        """Get temperature_21

        Returns:
            float: the value of `temperature_21` or None if not set
        """
        return self._data["Temperature 21"]

    @temperature_21.setter
    def temperature_21(self, value=None):
        """  Corresponds to IDD Field `temperature_21`

        Args:
            value (float): value for IDD Field `temperature_21`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_21`'.format(value))

        self._data["Temperature 21"] = value

    @property
    def temperature_22(self):
        """Get temperature_22

        Returns:
            float: the value of `temperature_22` or None if not set
        """
        return self._data["Temperature 22"]

    @temperature_22.setter
    def temperature_22(self, value=None):
        """  Corresponds to IDD Field `temperature_22`

        Args:
            value (float): value for IDD Field `temperature_22`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_22`'.format(value))

        self._data["Temperature 22"] = value

    @property
    def temperature_23(self):
        """Get temperature_23

        Returns:
            float: the value of `temperature_23` or None if not set
        """
        return self._data["Temperature 23"]

    @temperature_23.setter
    def temperature_23(self, value=None):
        """  Corresponds to IDD Field `temperature_23`

        Args:
            value (float): value for IDD Field `temperature_23`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_23`'.format(value))

        self._data["Temperature 23"] = value

    @property
    def temperature_24(self):
        """Get temperature_24

        Returns:
            float: the value of `temperature_24` or None if not set
        """
        return self._data["Temperature 24"]

    @temperature_24.setter
    def temperature_24(self, value=None):
        """  Corresponds to IDD Field `temperature_24`

        Args:
            value (float): value for IDD Field `temperature_24`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_24`'.format(value))

        self._data["Temperature 24"] = value

    @property
    def temperature_25(self):
        """Get temperature_25

        Returns:
            float: the value of `temperature_25` or None if not set
        """
        return self._data["Temperature 25"]

    @temperature_25.setter
    def temperature_25(self, value=None):
        """  Corresponds to IDD Field `temperature_25`

        Args:
            value (float): value for IDD Field `temperature_25`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_25`'.format(value))

        self._data["Temperature 25"] = value

    @property
    def temperature_26(self):
        """Get temperature_26

        Returns:
            float: the value of `temperature_26` or None if not set
        """
        return self._data["Temperature 26"]

    @temperature_26.setter
    def temperature_26(self, value=None):
        """  Corresponds to IDD Field `temperature_26`

        Args:
            value (float): value for IDD Field `temperature_26`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_26`'.format(value))

        self._data["Temperature 26"] = value

    @property
    def temperature_27(self):
        """Get temperature_27

        Returns:
            float: the value of `temperature_27` or None if not set
        """
        return self._data["Temperature 27"]

    @temperature_27.setter
    def temperature_27(self, value=None):
        """  Corresponds to IDD Field `temperature_27`

        Args:
            value (float): value for IDD Field `temperature_27`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_27`'.format(value))

        self._data["Temperature 27"] = value

    @property
    def temperature_28(self):
        """Get temperature_28

        Returns:
            float: the value of `temperature_28` or None if not set
        """
        return self._data["Temperature 28"]

    @temperature_28.setter
    def temperature_28(self, value=None):
        """  Corresponds to IDD Field `temperature_28`

        Args:
            value (float): value for IDD Field `temperature_28`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_28`'.format(value))

        self._data["Temperature 28"] = value

    @property
    def temperature_29(self):
        """Get temperature_29

        Returns:
            float: the value of `temperature_29` or None if not set
        """
        return self._data["Temperature 29"]

    @temperature_29.setter
    def temperature_29(self, value=None):
        """  Corresponds to IDD Field `temperature_29`

        Args:
            value (float): value for IDD Field `temperature_29`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_29`'.format(value))

        self._data["Temperature 29"] = value

    @property
    def temperature_30(self):
        """Get temperature_30

        Returns:
            float: the value of `temperature_30` or None if not set
        """
        return self._data["Temperature 30"]

    @temperature_30.setter
    def temperature_30(self, value=None):
        """  Corresponds to IDD Field `temperature_30`

        Args:
            value (float): value for IDD Field `temperature_30`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_30`'.format(value))

        self._data["Temperature 30"] = value

    @property
    def temperature_31(self):
        """Get temperature_31

        Returns:
            float: the value of `temperature_31` or None if not set
        """
        return self._data["Temperature 31"]

    @temperature_31.setter
    def temperature_31(self, value=None):
        """  Corresponds to IDD Field `temperature_31`

        Args:
            value (float): value for IDD Field `temperature_31`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_31`'.format(value))

        self._data["Temperature 31"] = value

    @property
    def temperature_32(self):
        """Get temperature_32

        Returns:
            float: the value of `temperature_32` or None if not set
        """
        return self._data["Temperature 32"]

    @temperature_32.setter
    def temperature_32(self, value=None):
        """  Corresponds to IDD Field `temperature_32`

        Args:
            value (float): value for IDD Field `temperature_32`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_32`'.format(value))

        self._data["Temperature 32"] = value

    @property
    def temperature_33(self):
        """Get temperature_33

        Returns:
            float: the value of `temperature_33` or None if not set
        """
        return self._data["Temperature 33"]

    @temperature_33.setter
    def temperature_33(self, value=None):
        """  Corresponds to IDD Field `temperature_33`

        Args:
            value (float): value for IDD Field `temperature_33`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_33`'.format(value))

        self._data["Temperature 33"] = value

    @property
    def temperature_34(self):
        """Get temperature_34

        Returns:
            float: the value of `temperature_34` or None if not set
        """
        return self._data["Temperature 34"]

    @temperature_34.setter
    def temperature_34(self, value=None):
        """  Corresponds to IDD Field `temperature_34`

        Args:
            value (float): value for IDD Field `temperature_34`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_34`'.format(value))

        self._data["Temperature 34"] = value

    @property
    def temperature_35(self):
        """Get temperature_35

        Returns:
            float: the value of `temperature_35` or None if not set
        """
        return self._data["Temperature 35"]

    @temperature_35.setter
    def temperature_35(self, value=None):
        """  Corresponds to IDD Field `temperature_35`

        Args:
            value (float): value for IDD Field `temperature_35`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_35`'.format(value))

        self._data["Temperature 35"] = value

    @property
    def temperature_36(self):
        """Get temperature_36

        Returns:
            float: the value of `temperature_36` or None if not set
        """
        return self._data["Temperature 36"]

    @temperature_36.setter
    def temperature_36(self, value=None):
        """  Corresponds to IDD Field `temperature_36`

        Args:
            value (float): value for IDD Field `temperature_36`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_36`'.format(value))

        self._data["Temperature 36"] = value

    @property
    def temperature_37(self):
        """Get temperature_37

        Returns:
            float: the value of `temperature_37` or None if not set
        """
        return self._data["Temperature 37"]

    @temperature_37.setter
    def temperature_37(self, value=None):
        """  Corresponds to IDD Field `temperature_37`

        Args:
            value (float): value for IDD Field `temperature_37`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_37`'.format(value))

        self._data["Temperature 37"] = value

    @property
    def temperature_38(self):
        """Get temperature_38

        Returns:
            float: the value of `temperature_38` or None if not set
        """
        return self._data["Temperature 38"]

    @temperature_38.setter
    def temperature_38(self, value=None):
        """  Corresponds to IDD Field `temperature_38`

        Args:
            value (float): value for IDD Field `temperature_38`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_38`'.format(value))

        self._data["Temperature 38"] = value

    @property
    def temperature_39(self):
        """Get temperature_39

        Returns:
            float: the value of `temperature_39` or None if not set
        """
        return self._data["Temperature 39"]

    @temperature_39.setter
    def temperature_39(self, value=None):
        """  Corresponds to IDD Field `temperature_39`

        Args:
            value (float): value for IDD Field `temperature_39`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_39`'.format(value))

        self._data["Temperature 39"] = value

    @property
    def temperature_40(self):
        """Get temperature_40

        Returns:
            float: the value of `temperature_40` or None if not set
        """
        return self._data["Temperature 40"]

    @temperature_40.setter
    def temperature_40(self, value=None):
        """  Corresponds to IDD Field `temperature_40`

        Args:
            value (float): value for IDD Field `temperature_40`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_40`'.format(value))

        self._data["Temperature 40"] = value

    @property
    def temperature_41(self):
        """Get temperature_41

        Returns:
            float: the value of `temperature_41` or None if not set
        """
        return self._data["Temperature 41"]

    @temperature_41.setter
    def temperature_41(self, value=None):
        """  Corresponds to IDD Field `temperature_41`

        Args:
            value (float): value for IDD Field `temperature_41`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_41`'.format(value))

        self._data["Temperature 41"] = value

    @property
    def temperature_42(self):
        """Get temperature_42

        Returns:
            float: the value of `temperature_42` or None if not set
        """
        return self._data["Temperature 42"]

    @temperature_42.setter
    def temperature_42(self, value=None):
        """  Corresponds to IDD Field `temperature_42`

        Args:
            value (float): value for IDD Field `temperature_42`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_42`'.format(value))

        self._data["Temperature 42"] = value

    @property
    def temperature_43(self):
        """Get temperature_43

        Returns:
            float: the value of `temperature_43` or None if not set
        """
        return self._data["Temperature 43"]

    @temperature_43.setter
    def temperature_43(self, value=None):
        """  Corresponds to IDD Field `temperature_43`

        Args:
            value (float): value for IDD Field `temperature_43`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_43`'.format(value))

        self._data["Temperature 43"] = value

    @property
    def temperature_44(self):
        """Get temperature_44

        Returns:
            float: the value of `temperature_44` or None if not set
        """
        return self._data["Temperature 44"]

    @temperature_44.setter
    def temperature_44(self, value=None):
        """  Corresponds to IDD Field `temperature_44`

        Args:
            value (float): value for IDD Field `temperature_44`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_44`'.format(value))

        self._data["Temperature 44"] = value

    @property
    def temperature_45(self):
        """Get temperature_45

        Returns:
            float: the value of `temperature_45` or None if not set
        """
        return self._data["Temperature 45"]

    @temperature_45.setter
    def temperature_45(self, value=None):
        """  Corresponds to IDD Field `temperature_45`

        Args:
            value (float): value for IDD Field `temperature_45`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_45`'.format(value))

        self._data["Temperature 45"] = value

    @property
    def temperature_46(self):
        """Get temperature_46

        Returns:
            float: the value of `temperature_46` or None if not set
        """
        return self._data["Temperature 46"]

    @temperature_46.setter
    def temperature_46(self, value=None):
        """  Corresponds to IDD Field `temperature_46`

        Args:
            value (float): value for IDD Field `temperature_46`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_46`'.format(value))

        self._data["Temperature 46"] = value

    @property
    def temperature_47(self):
        """Get temperature_47

        Returns:
            float: the value of `temperature_47` or None if not set
        """
        return self._data["Temperature 47"]

    @temperature_47.setter
    def temperature_47(self, value=None):
        """  Corresponds to IDD Field `temperature_47`

        Args:
            value (float): value for IDD Field `temperature_47`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_47`'.format(value))

        self._data["Temperature 47"] = value

    @property
    def temperature_48(self):
        """Get temperature_48

        Returns:
            float: the value of `temperature_48` or None if not set
        """
        return self._data["Temperature 48"]

    @temperature_48.setter
    def temperature_48(self, value=None):
        """  Corresponds to IDD Field `temperature_48`

        Args:
            value (float): value for IDD Field `temperature_48`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_48`'.format(value))

        self._data["Temperature 48"] = value

    @property
    def temperature_49(self):
        """Get temperature_49

        Returns:
            float: the value of `temperature_49` or None if not set
        """
        return self._data["Temperature 49"]

    @temperature_49.setter
    def temperature_49(self, value=None):
        """  Corresponds to IDD Field `temperature_49`

        Args:
            value (float): value for IDD Field `temperature_49`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_49`'.format(value))

        self._data["Temperature 49"] = value

    @property
    def temperature_50(self):
        """Get temperature_50

        Returns:
            float: the value of `temperature_50` or None if not set
        """
        return self._data["Temperature 50"]

    @temperature_50.setter
    def temperature_50(self, value=None):
        """  Corresponds to IDD Field `temperature_50`

        Args:
            value (float): value for IDD Field `temperature_50`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_50`'.format(value))

        self._data["Temperature 50"] = value

    @property
    def temperature_51(self):
        """Get temperature_51

        Returns:
            float: the value of `temperature_51` or None if not set
        """
        return self._data["Temperature 51"]

    @temperature_51.setter
    def temperature_51(self, value=None):
        """  Corresponds to IDD Field `temperature_51`

        Args:
            value (float): value for IDD Field `temperature_51`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_51`'.format(value))

        self._data["Temperature 51"] = value

    @property
    def temperature_52(self):
        """Get temperature_52

        Returns:
            float: the value of `temperature_52` or None if not set
        """
        return self._data["Temperature 52"]

    @temperature_52.setter
    def temperature_52(self, value=None):
        """  Corresponds to IDD Field `temperature_52`

        Args:
            value (float): value for IDD Field `temperature_52`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_52`'.format(value))

        self._data["Temperature 52"] = value

    @property
    def temperature_53(self):
        """Get temperature_53

        Returns:
            float: the value of `temperature_53` or None if not set
        """
        return self._data["Temperature 53"]

    @temperature_53.setter
    def temperature_53(self, value=None):
        """  Corresponds to IDD Field `temperature_53`

        Args:
            value (float): value for IDD Field `temperature_53`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_53`'.format(value))

        self._data["Temperature 53"] = value

    @property
    def temperature_54(self):
        """Get temperature_54

        Returns:
            float: the value of `temperature_54` or None if not set
        """
        return self._data["Temperature 54"]

    @temperature_54.setter
    def temperature_54(self, value=None):
        """  Corresponds to IDD Field `temperature_54`

        Args:
            value (float): value for IDD Field `temperature_54`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_54`'.format(value))

        self._data["Temperature 54"] = value

    @property
    def temperature_55(self):
        """Get temperature_55

        Returns:
            float: the value of `temperature_55` or None if not set
        """
        return self._data["Temperature 55"]

    @temperature_55.setter
    def temperature_55(self, value=None):
        """  Corresponds to IDD Field `temperature_55`

        Args:
            value (float): value for IDD Field `temperature_55`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_55`'.format(value))

        self._data["Temperature 55"] = value

    @property
    def temperature_56(self):
        """Get temperature_56

        Returns:
            float: the value of `temperature_56` or None if not set
        """
        return self._data["Temperature 56"]

    @temperature_56.setter
    def temperature_56(self, value=None):
        """  Corresponds to IDD Field `temperature_56`

        Args:
            value (float): value for IDD Field `temperature_56`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_56`'.format(value))

        self._data["Temperature 56"] = value

    @property
    def temperature_57(self):
        """Get temperature_57

        Returns:
            float: the value of `temperature_57` or None if not set
        """
        return self._data["Temperature 57"]

    @temperature_57.setter
    def temperature_57(self, value=None):
        """  Corresponds to IDD Field `temperature_57`

        Args:
            value (float): value for IDD Field `temperature_57`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_57`'.format(value))

        self._data["Temperature 57"] = value

    @property
    def temperature_58(self):
        """Get temperature_58

        Returns:
            float: the value of `temperature_58` or None if not set
        """
        return self._data["Temperature 58"]

    @temperature_58.setter
    def temperature_58(self, value=None):
        """  Corresponds to IDD Field `temperature_58`

        Args:
            value (float): value for IDD Field `temperature_58`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_58`'.format(value))

        self._data["Temperature 58"] = value

    @property
    def temperature_59(self):
        """Get temperature_59

        Returns:
            float: the value of `temperature_59` or None if not set
        """
        return self._data["Temperature 59"]

    @temperature_59.setter
    def temperature_59(self, value=None):
        """  Corresponds to IDD Field `temperature_59`

        Args:
            value (float): value for IDD Field `temperature_59`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_59`'.format(value))

        self._data["Temperature 59"] = value

    @property
    def temperature_60(self):
        """Get temperature_60

        Returns:
            float: the value of `temperature_60` or None if not set
        """
        return self._data["Temperature 60"]

    @temperature_60.setter
    def temperature_60(self, value=None):
        """  Corresponds to IDD Field `temperature_60`

        Args:
            value (float): value for IDD Field `temperature_60`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_60`'.format(value))

        self._data["Temperature 60"] = value

    @property
    def temperature_61(self):
        """Get temperature_61

        Returns:
            float: the value of `temperature_61` or None if not set
        """
        return self._data["Temperature 61"]

    @temperature_61.setter
    def temperature_61(self, value=None):
        """  Corresponds to IDD Field `temperature_61`

        Args:
            value (float): value for IDD Field `temperature_61`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_61`'.format(value))

        self._data["Temperature 61"] = value

    @property
    def temperature_62(self):
        """Get temperature_62

        Returns:
            float: the value of `temperature_62` or None if not set
        """
        return self._data["Temperature 62"]

    @temperature_62.setter
    def temperature_62(self, value=None):
        """  Corresponds to IDD Field `temperature_62`

        Args:
            value (float): value for IDD Field `temperature_62`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_62`'.format(value))

        self._data["Temperature 62"] = value

    @property
    def temperature_63(self):
        """Get temperature_63

        Returns:
            float: the value of `temperature_63` or None if not set
        """
        return self._data["Temperature 63"]

    @temperature_63.setter
    def temperature_63(self, value=None):
        """  Corresponds to IDD Field `temperature_63`

        Args:
            value (float): value for IDD Field `temperature_63`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_63`'.format(value))

        self._data["Temperature 63"] = value

    @property
    def temperature_64(self):
        """Get temperature_64

        Returns:
            float: the value of `temperature_64` or None if not set
        """
        return self._data["Temperature 64"]

    @temperature_64.setter
    def temperature_64(self, value=None):
        """  Corresponds to IDD Field `temperature_64`

        Args:
            value (float): value for IDD Field `temperature_64`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_64`'.format(value))

        self._data["Temperature 64"] = value

    @property
    def temperature_65(self):
        """Get temperature_65

        Returns:
            float: the value of `temperature_65` or None if not set
        """
        return self._data["Temperature 65"]

    @temperature_65.setter
    def temperature_65(self, value=None):
        """  Corresponds to IDD Field `temperature_65`

        Args:
            value (float): value for IDD Field `temperature_65`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_65`'.format(value))

        self._data["Temperature 65"] = value

    @property
    def temperature_66(self):
        """Get temperature_66

        Returns:
            float: the value of `temperature_66` or None if not set
        """
        return self._data["Temperature 66"]

    @temperature_66.setter
    def temperature_66(self, value=None):
        """  Corresponds to IDD Field `temperature_66`

        Args:
            value (float): value for IDD Field `temperature_66`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_66`'.format(value))

        self._data["Temperature 66"] = value

    @property
    def temperature_67(self):
        """Get temperature_67

        Returns:
            float: the value of `temperature_67` or None if not set
        """
        return self._data["Temperature 67"]

    @temperature_67.setter
    def temperature_67(self, value=None):
        """  Corresponds to IDD Field `temperature_67`

        Args:
            value (float): value for IDD Field `temperature_67`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_67`'.format(value))

        self._data["Temperature 67"] = value

    @property
    def temperature_68(self):
        """Get temperature_68

        Returns:
            float: the value of `temperature_68` or None if not set
        """
        return self._data["Temperature 68"]

    @temperature_68.setter
    def temperature_68(self, value=None):
        """  Corresponds to IDD Field `temperature_68`

        Args:
            value (float): value for IDD Field `temperature_68`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_68`'.format(value))

        self._data["Temperature 68"] = value

    @property
    def temperature_69(self):
        """Get temperature_69

        Returns:
            float: the value of `temperature_69` or None if not set
        """
        return self._data["Temperature 69"]

    @temperature_69.setter
    def temperature_69(self, value=None):
        """  Corresponds to IDD Field `temperature_69`

        Args:
            value (float): value for IDD Field `temperature_69`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_69`'.format(value))

        self._data["Temperature 69"] = value

    @property
    def temperature_70(self):
        """Get temperature_70

        Returns:
            float: the value of `temperature_70` or None if not set
        """
        return self._data["Temperature 70"]

    @temperature_70.setter
    def temperature_70(self, value=None):
        """  Corresponds to IDD Field `temperature_70`

        Args:
            value (float): value for IDD Field `temperature_70`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_70`'.format(value))

        self._data["Temperature 70"] = value

    @property
    def temperature_71(self):
        """Get temperature_71

        Returns:
            float: the value of `temperature_71` or None if not set
        """
        return self._data["Temperature 71"]

    @temperature_71.setter
    def temperature_71(self, value=None):
        """  Corresponds to IDD Field `temperature_71`

        Args:
            value (float): value for IDD Field `temperature_71`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_71`'.format(value))

        self._data["Temperature 71"] = value

    @property
    def temperature_72(self):
        """Get temperature_72

        Returns:
            float: the value of `temperature_72` or None if not set
        """
        return self._data["Temperature 72"]

    @temperature_72.setter
    def temperature_72(self, value=None):
        """  Corresponds to IDD Field `temperature_72`

        Args:
            value (float): value for IDD Field `temperature_72`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_72`'.format(value))

        self._data["Temperature 72"] = value

    @property
    def temperature_73(self):
        """Get temperature_73

        Returns:
            float: the value of `temperature_73` or None if not set
        """
        return self._data["Temperature 73"]

    @temperature_73.setter
    def temperature_73(self, value=None):
        """  Corresponds to IDD Field `temperature_73`

        Args:
            value (float): value for IDD Field `temperature_73`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_73`'.format(value))

        self._data["Temperature 73"] = value

    @property
    def temperature_74(self):
        """Get temperature_74

        Returns:
            float: the value of `temperature_74` or None if not set
        """
        return self._data["Temperature 74"]

    @temperature_74.setter
    def temperature_74(self, value=None):
        """  Corresponds to IDD Field `temperature_74`

        Args:
            value (float): value for IDD Field `temperature_74`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_74`'.format(value))

        self._data["Temperature 74"] = value

    @property
    def temperature_75(self):
        """Get temperature_75

        Returns:
            float: the value of `temperature_75` or None if not set
        """
        return self._data["Temperature 75"]

    @temperature_75.setter
    def temperature_75(self, value=None):
        """  Corresponds to IDD Field `temperature_75`

        Args:
            value (float): value for IDD Field `temperature_75`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_75`'.format(value))

        self._data["Temperature 75"] = value

    @property
    def temperature_76(self):
        """Get temperature_76

        Returns:
            float: the value of `temperature_76` or None if not set
        """
        return self._data["Temperature 76"]

    @temperature_76.setter
    def temperature_76(self, value=None):
        """  Corresponds to IDD Field `temperature_76`

        Args:
            value (float): value for IDD Field `temperature_76`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_76`'.format(value))

        self._data["Temperature 76"] = value

    @property
    def temperature_77(self):
        """Get temperature_77

        Returns:
            float: the value of `temperature_77` or None if not set
        """
        return self._data["Temperature 77"]

    @temperature_77.setter
    def temperature_77(self, value=None):
        """  Corresponds to IDD Field `temperature_77`

        Args:
            value (float): value for IDD Field `temperature_77`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_77`'.format(value))

        self._data["Temperature 77"] = value

    @property
    def temperature_78(self):
        """Get temperature_78

        Returns:
            float: the value of `temperature_78` or None if not set
        """
        return self._data["Temperature 78"]

    @temperature_78.setter
    def temperature_78(self, value=None):
        """  Corresponds to IDD Field `temperature_78`

        Args:
            value (float): value for IDD Field `temperature_78`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_78`'.format(value))

        self._data["Temperature 78"] = value

    @property
    def temperature_79(self):
        """Get temperature_79

        Returns:
            float: the value of `temperature_79` or None if not set
        """
        return self._data["Temperature 79"]

    @temperature_79.setter
    def temperature_79(self, value=None):
        """  Corresponds to IDD Field `temperature_79`

        Args:
            value (float): value for IDD Field `temperature_79`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_79`'.format(value))

        self._data["Temperature 79"] = value

    @property
    def temperature_80(self):
        """Get temperature_80

        Returns:
            float: the value of `temperature_80` or None if not set
        """
        return self._data["Temperature 80"]

    @temperature_80.setter
    def temperature_80(self, value=None):
        """  Corresponds to IDD Field `temperature_80`

        Args:
            value (float): value for IDD Field `temperature_80`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_80`'.format(value))

        self._data["Temperature 80"] = value

    @property
    def temperature_81(self):
        """Get temperature_81

        Returns:
            float: the value of `temperature_81` or None if not set
        """
        return self._data["Temperature 81"]

    @temperature_81.setter
    def temperature_81(self, value=None):
        """  Corresponds to IDD Field `temperature_81`

        Args:
            value (float): value for IDD Field `temperature_81`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_81`'.format(value))

        self._data["Temperature 81"] = value

    @property
    def temperature_82(self):
        """Get temperature_82

        Returns:
            float: the value of `temperature_82` or None if not set
        """
        return self._data["Temperature 82"]

    @temperature_82.setter
    def temperature_82(self, value=None):
        """  Corresponds to IDD Field `temperature_82`

        Args:
            value (float): value for IDD Field `temperature_82`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_82`'.format(value))

        self._data["Temperature 82"] = value

    @property
    def temperature_83(self):
        """Get temperature_83

        Returns:
            float: the value of `temperature_83` or None if not set
        """
        return self._data["Temperature 83"]

    @temperature_83.setter
    def temperature_83(self, value=None):
        """  Corresponds to IDD Field `temperature_83`

        Args:
            value (float): value for IDD Field `temperature_83`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_83`'.format(value))

        self._data["Temperature 83"] = value

    @property
    def temperature_84(self):
        """Get temperature_84

        Returns:
            float: the value of `temperature_84` or None if not set
        """
        return self._data["Temperature 84"]

    @temperature_84.setter
    def temperature_84(self, value=None):
        """  Corresponds to IDD Field `temperature_84`

        Args:
            value (float): value for IDD Field `temperature_84`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_84`'.format(value))

        self._data["Temperature 84"] = value

    @property
    def temperature_85(self):
        """Get temperature_85

        Returns:
            float: the value of `temperature_85` or None if not set
        """
        return self._data["Temperature 85"]

    @temperature_85.setter
    def temperature_85(self, value=None):
        """  Corresponds to IDD Field `temperature_85`

        Args:
            value (float): value for IDD Field `temperature_85`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_85`'.format(value))

        self._data["Temperature 85"] = value

    @property
    def temperature_86(self):
        """Get temperature_86

        Returns:
            float: the value of `temperature_86` or None if not set
        """
        return self._data["Temperature 86"]

    @temperature_86.setter
    def temperature_86(self, value=None):
        """  Corresponds to IDD Field `temperature_86`

        Args:
            value (float): value for IDD Field `temperature_86`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_86`'.format(value))

        self._data["Temperature 86"] = value

    @property
    def temperature_87(self):
        """Get temperature_87

        Returns:
            float: the value of `temperature_87` or None if not set
        """
        return self._data["Temperature 87"]

    @temperature_87.setter
    def temperature_87(self, value=None):
        """  Corresponds to IDD Field `temperature_87`

        Args:
            value (float): value for IDD Field `temperature_87`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_87`'.format(value))

        self._data["Temperature 87"] = value

    @property
    def temperature_88(self):
        """Get temperature_88

        Returns:
            float: the value of `temperature_88` or None if not set
        """
        return self._data["Temperature 88"]

    @temperature_88.setter
    def temperature_88(self, value=None):
        """  Corresponds to IDD Field `temperature_88`

        Args:
            value (float): value for IDD Field `temperature_88`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_88`'.format(value))

        self._data["Temperature 88"] = value

    @property
    def temperature_89(self):
        """Get temperature_89

        Returns:
            float: the value of `temperature_89` or None if not set
        """
        return self._data["Temperature 89"]

    @temperature_89.setter
    def temperature_89(self, value=None):
        """  Corresponds to IDD Field `temperature_89`

        Args:
            value (float): value for IDD Field `temperature_89`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_89`'.format(value))

        self._data["Temperature 89"] = value

    @property
    def temperature_90(self):
        """Get temperature_90

        Returns:
            float: the value of `temperature_90` or None if not set
        """
        return self._data["Temperature 90"]

    @temperature_90.setter
    def temperature_90(self, value=None):
        """  Corresponds to IDD Field `temperature_90`

        Args:
            value (float): value for IDD Field `temperature_90`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_90`'.format(value))

        self._data["Temperature 90"] = value

    @property
    def temperature_91(self):
        """Get temperature_91

        Returns:
            float: the value of `temperature_91` or None if not set
        """
        return self._data["Temperature 91"]

    @temperature_91.setter
    def temperature_91(self, value=None):
        """  Corresponds to IDD Field `temperature_91`

        Args:
            value (float): value for IDD Field `temperature_91`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_91`'.format(value))

        self._data["Temperature 91"] = value

    @property
    def temperature_92(self):
        """Get temperature_92

        Returns:
            float: the value of `temperature_92` or None if not set
        """
        return self._data["Temperature 92"]

    @temperature_92.setter
    def temperature_92(self, value=None):
        """  Corresponds to IDD Field `temperature_92`

        Args:
            value (float): value for IDD Field `temperature_92`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_92`'.format(value))

        self._data["Temperature 92"] = value

    @property
    def temperature_93(self):
        """Get temperature_93

        Returns:
            float: the value of `temperature_93` or None if not set
        """
        return self._data["Temperature 93"]

    @temperature_93.setter
    def temperature_93(self, value=None):
        """  Corresponds to IDD Field `temperature_93`

        Args:
            value (float): value for IDD Field `temperature_93`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_93`'.format(value))

        self._data["Temperature 93"] = value

    @property
    def temperature_94(self):
        """Get temperature_94

        Returns:
            float: the value of `temperature_94` or None if not set
        """
        return self._data["Temperature 94"]

    @temperature_94.setter
    def temperature_94(self, value=None):
        """  Corresponds to IDD Field `temperature_94`

        Args:
            value (float): value for IDD Field `temperature_94`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_94`'.format(value))

        self._data["Temperature 94"] = value

    @property
    def temperature_95(self):
        """Get temperature_95

        Returns:
            float: the value of `temperature_95` or None if not set
        """
        return self._data["Temperature 95"]

    @temperature_95.setter
    def temperature_95(self, value=None):
        """  Corresponds to IDD Field `temperature_95`

        Args:
            value (float): value for IDD Field `temperature_95`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_95`'.format(value))

        self._data["Temperature 95"] = value

    @property
    def temperature_96(self):
        """Get temperature_96

        Returns:
            float: the value of `temperature_96` or None if not set
        """
        return self._data["Temperature 96"]

    @temperature_96.setter
    def temperature_96(self, value=None):
        """  Corresponds to IDD Field `temperature_96`

        Args:
            value (float): value for IDD Field `temperature_96`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_96`'.format(value))

        self._data["Temperature 96"] = value

    @property
    def temperature_97(self):
        """Get temperature_97

        Returns:
            float: the value of `temperature_97` or None if not set
        """
        return self._data["Temperature 97"]

    @temperature_97.setter
    def temperature_97(self, value=None):
        """  Corresponds to IDD Field `temperature_97`

        Args:
            value (float): value for IDD Field `temperature_97`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_97`'.format(value))

        self._data["Temperature 97"] = value

    @property
    def temperature_98(self):
        """Get temperature_98

        Returns:
            float: the value of `temperature_98` or None if not set
        """
        return self._data["Temperature 98"]

    @temperature_98.setter
    def temperature_98(self, value=None):
        """  Corresponds to IDD Field `temperature_98`

        Args:
            value (float): value for IDD Field `temperature_98`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_98`'.format(value))

        self._data["Temperature 98"] = value

    @property
    def temperature_99(self):
        """Get temperature_99

        Returns:
            float: the value of `temperature_99` or None if not set
        """
        return self._data["Temperature 99"]

    @temperature_99.setter
    def temperature_99(self, value=None):
        """  Corresponds to IDD Field `temperature_99`

        Args:
            value (float): value for IDD Field `temperature_99`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_99`'.format(value))

        self._data["Temperature 99"] = value

    @property
    def temperature_100(self):
        """Get temperature_100

        Returns:
            float: the value of `temperature_100` or None if not set
        """
        return self._data["Temperature 100"]

    @temperature_100.setter
    def temperature_100(self, value=None):
        """  Corresponds to IDD Field `temperature_100`

        Args:
            value (float): value for IDD Field `temperature_100`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_100`'.format(value))

        self._data["Temperature 100"] = value

    @property
    def temperature_101(self):
        """Get temperature_101

        Returns:
            float: the value of `temperature_101` or None if not set
        """
        return self._data["Temperature 101"]

    @temperature_101.setter
    def temperature_101(self, value=None):
        """  Corresponds to IDD Field `temperature_101`

        Args:
            value (float): value for IDD Field `temperature_101`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_101`'.format(value))

        self._data["Temperature 101"] = value

    @property
    def temperature_102(self):
        """Get temperature_102

        Returns:
            float: the value of `temperature_102` or None if not set
        """
        return self._data["Temperature 102"]

    @temperature_102.setter
    def temperature_102(self, value=None):
        """  Corresponds to IDD Field `temperature_102`

        Args:
            value (float): value for IDD Field `temperature_102`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_102`'.format(value))

        self._data["Temperature 102"] = value

    @property
    def temperature_103(self):
        """Get temperature_103

        Returns:
            float: the value of `temperature_103` or None if not set
        """
        return self._data["Temperature 103"]

    @temperature_103.setter
    def temperature_103(self, value=None):
        """  Corresponds to IDD Field `temperature_103`

        Args:
            value (float): value for IDD Field `temperature_103`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_103`'.format(value))

        self._data["Temperature 103"] = value

    @property
    def temperature_104(self):
        """Get temperature_104

        Returns:
            float: the value of `temperature_104` or None if not set
        """
        return self._data["Temperature 104"]

    @temperature_104.setter
    def temperature_104(self, value=None):
        """  Corresponds to IDD Field `temperature_104`

        Args:
            value (float): value for IDD Field `temperature_104`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_104`'.format(value))

        self._data["Temperature 104"] = value

    @property
    def temperature_105(self):
        """Get temperature_105

        Returns:
            float: the value of `temperature_105` or None if not set
        """
        return self._data["Temperature 105"]

    @temperature_105.setter
    def temperature_105(self, value=None):
        """  Corresponds to IDD Field `temperature_105`

        Args:
            value (float): value for IDD Field `temperature_105`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_105`'.format(value))

        self._data["Temperature 105"] = value

    @property
    def temperature_106(self):
        """Get temperature_106

        Returns:
            float: the value of `temperature_106` or None if not set
        """
        return self._data["Temperature 106"]

    @temperature_106.setter
    def temperature_106(self, value=None):
        """  Corresponds to IDD Field `temperature_106`

        Args:
            value (float): value for IDD Field `temperature_106`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_106`'.format(value))

        self._data["Temperature 106"] = value

    @property
    def temperature_107(self):
        """Get temperature_107

        Returns:
            float: the value of `temperature_107` or None if not set
        """
        return self._data["Temperature 107"]

    @temperature_107.setter
    def temperature_107(self, value=None):
        """  Corresponds to IDD Field `temperature_107`

        Args:
            value (float): value for IDD Field `temperature_107`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_107`'.format(value))

        self._data["Temperature 107"] = value

    @property
    def temperature_108(self):
        """Get temperature_108

        Returns:
            float: the value of `temperature_108` or None if not set
        """
        return self._data["Temperature 108"]

    @temperature_108.setter
    def temperature_108(self, value=None):
        """  Corresponds to IDD Field `temperature_108`

        Args:
            value (float): value for IDD Field `temperature_108`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_108`'.format(value))

        self._data["Temperature 108"] = value

    @property
    def temperature_109(self):
        """Get temperature_109

        Returns:
            float: the value of `temperature_109` or None if not set
        """
        return self._data["Temperature 109"]

    @temperature_109.setter
    def temperature_109(self, value=None):
        """  Corresponds to IDD Field `temperature_109`

        Args:
            value (float): value for IDD Field `temperature_109`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_109`'.format(value))

        self._data["Temperature 109"] = value

    @property
    def temperature_110(self):
        """Get temperature_110

        Returns:
            float: the value of `temperature_110` or None if not set
        """
        return self._data["Temperature 110"]

    @temperature_110.setter
    def temperature_110(self, value=None):
        """  Corresponds to IDD Field `temperature_110`

        Args:
            value (float): value for IDD Field `temperature_110`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_110`'.format(value))

        self._data["Temperature 110"] = value

    @property
    def temperature_111(self):
        """Get temperature_111

        Returns:
            float: the value of `temperature_111` or None if not set
        """
        return self._data["Temperature 111"]

    @temperature_111.setter
    def temperature_111(self, value=None):
        """  Corresponds to IDD Field `temperature_111`

        Args:
            value (float): value for IDD Field `temperature_111`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_111`'.format(value))

        self._data["Temperature 111"] = value

    @property
    def temperature_112(self):
        """Get temperature_112

        Returns:
            float: the value of `temperature_112` or None if not set
        """
        return self._data["Temperature 112"]

    @temperature_112.setter
    def temperature_112(self, value=None):
        """  Corresponds to IDD Field `temperature_112`

        Args:
            value (float): value for IDD Field `temperature_112`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_112`'.format(value))

        self._data["Temperature 112"] = value

    @property
    def temperature_113(self):
        """Get temperature_113

        Returns:
            float: the value of `temperature_113` or None if not set
        """
        return self._data["Temperature 113"]

    @temperature_113.setter
    def temperature_113(self, value=None):
        """  Corresponds to IDD Field `temperature_113`

        Args:
            value (float): value for IDD Field `temperature_113`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_113`'.format(value))

        self._data["Temperature 113"] = value

    @property
    def temperature_114(self):
        """Get temperature_114

        Returns:
            float: the value of `temperature_114` or None if not set
        """
        return self._data["Temperature 114"]

    @temperature_114.setter
    def temperature_114(self, value=None):
        """  Corresponds to IDD Field `temperature_114`

        Args:
            value (float): value for IDD Field `temperature_114`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_114`'.format(value))

        self._data["Temperature 114"] = value

    @property
    def temperature_115(self):
        """Get temperature_115

        Returns:
            float: the value of `temperature_115` or None if not set
        """
        return self._data["Temperature 115"]

    @temperature_115.setter
    def temperature_115(self, value=None):
        """  Corresponds to IDD Field `temperature_115`

        Args:
            value (float): value for IDD Field `temperature_115`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_115`'.format(value))

        self._data["Temperature 115"] = value

    @property
    def temperature_116(self):
        """Get temperature_116

        Returns:
            float: the value of `temperature_116` or None if not set
        """
        return self._data["Temperature 116"]

    @temperature_116.setter
    def temperature_116(self, value=None):
        """  Corresponds to IDD Field `temperature_116`

        Args:
            value (float): value for IDD Field `temperature_116`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_116`'.format(value))

        self._data["Temperature 116"] = value

    @property
    def temperature_117(self):
        """Get temperature_117

        Returns:
            float: the value of `temperature_117` or None if not set
        """
        return self._data["Temperature 117"]

    @temperature_117.setter
    def temperature_117(self, value=None):
        """  Corresponds to IDD Field `temperature_117`

        Args:
            value (float): value for IDD Field `temperature_117`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_117`'.format(value))

        self._data["Temperature 117"] = value

    @property
    def temperature_118(self):
        """Get temperature_118

        Returns:
            float: the value of `temperature_118` or None if not set
        """
        return self._data["Temperature 118"]

    @temperature_118.setter
    def temperature_118(self, value=None):
        """  Corresponds to IDD Field `temperature_118`

        Args:
            value (float): value for IDD Field `temperature_118`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_118`'.format(value))

        self._data["Temperature 118"] = value

    @property
    def temperature_119(self):
        """Get temperature_119

        Returns:
            float: the value of `temperature_119` or None if not set
        """
        return self._data["Temperature 119"]

    @temperature_119.setter
    def temperature_119(self, value=None):
        """  Corresponds to IDD Field `temperature_119`

        Args:
            value (float): value for IDD Field `temperature_119`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_119`'.format(value))

        self._data["Temperature 119"] = value

    @property
    def temperature_120(self):
        """Get temperature_120

        Returns:
            float: the value of `temperature_120` or None if not set
        """
        return self._data["Temperature 120"]

    @temperature_120.setter
    def temperature_120(self, value=None):
        """  Corresponds to IDD Field `temperature_120`

        Args:
            value (float): value for IDD Field `temperature_120`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_120`'.format(value))

        self._data["Temperature 120"] = value

    @property
    def temperature_121(self):
        """Get temperature_121

        Returns:
            float: the value of `temperature_121` or None if not set
        """
        return self._data["Temperature 121"]

    @temperature_121.setter
    def temperature_121(self, value=None):
        """  Corresponds to IDD Field `temperature_121`

        Args:
            value (float): value for IDD Field `temperature_121`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_121`'.format(value))

        self._data["Temperature 121"] = value

    @property
    def temperature_122(self):
        """Get temperature_122

        Returns:
            float: the value of `temperature_122` or None if not set
        """
        return self._data["Temperature 122"]

    @temperature_122.setter
    def temperature_122(self, value=None):
        """  Corresponds to IDD Field `temperature_122`

        Args:
            value (float): value for IDD Field `temperature_122`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_122`'.format(value))

        self._data["Temperature 122"] = value

    @property
    def temperature_123(self):
        """Get temperature_123

        Returns:
            float: the value of `temperature_123` or None if not set
        """
        return self._data["Temperature 123"]

    @temperature_123.setter
    def temperature_123(self, value=None):
        """  Corresponds to IDD Field `temperature_123`

        Args:
            value (float): value for IDD Field `temperature_123`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_123`'.format(value))

        self._data["Temperature 123"] = value

    @property
    def temperature_124(self):
        """Get temperature_124

        Returns:
            float: the value of `temperature_124` or None if not set
        """
        return self._data["Temperature 124"]

    @temperature_124.setter
    def temperature_124(self, value=None):
        """  Corresponds to IDD Field `temperature_124`

        Args:
            value (float): value for IDD Field `temperature_124`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_124`'.format(value))

        self._data["Temperature 124"] = value

    @property
    def temperature_125(self):
        """Get temperature_125

        Returns:
            float: the value of `temperature_125` or None if not set
        """
        return self._data["Temperature 125"]

    @temperature_125.setter
    def temperature_125(self, value=None):
        """  Corresponds to IDD Field `temperature_125`

        Args:
            value (float): value for IDD Field `temperature_125`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_125`'.format(value))

        self._data["Temperature 125"] = value

    @property
    def temperature_126(self):
        """Get temperature_126

        Returns:
            float: the value of `temperature_126` or None if not set
        """
        return self._data["Temperature 126"]

    @temperature_126.setter
    def temperature_126(self, value=None):
        """  Corresponds to IDD Field `temperature_126`

        Args:
            value (float): value for IDD Field `temperature_126`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_126`'.format(value))

        self._data["Temperature 126"] = value

    @property
    def temperature_127(self):
        """Get temperature_127

        Returns:
            float: the value of `temperature_127` or None if not set
        """
        return self._data["Temperature 127"]

    @temperature_127.setter
    def temperature_127(self, value=None):
        """  Corresponds to IDD Field `temperature_127`

        Args:
            value (float): value for IDD Field `temperature_127`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_127`'.format(value))

        self._data["Temperature 127"] = value

    @property
    def temperature_128(self):
        """Get temperature_128

        Returns:
            float: the value of `temperature_128` or None if not set
        """
        return self._data["Temperature 128"]

    @temperature_128.setter
    def temperature_128(self, value=None):
        """  Corresponds to IDD Field `temperature_128`

        Args:
            value (float): value for IDD Field `temperature_128`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_128`'.format(value))

        self._data["Temperature 128"] = value

    @property
    def temperature_129(self):
        """Get temperature_129

        Returns:
            float: the value of `temperature_129` or None if not set
        """
        return self._data["Temperature 129"]

    @temperature_129.setter
    def temperature_129(self, value=None):
        """  Corresponds to IDD Field `temperature_129`

        Args:
            value (float): value for IDD Field `temperature_129`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_129`'.format(value))

        self._data["Temperature 129"] = value

    @property
    def temperature_130(self):
        """Get temperature_130

        Returns:
            float: the value of `temperature_130` or None if not set
        """
        return self._data["Temperature 130"]

    @temperature_130.setter
    def temperature_130(self, value=None):
        """  Corresponds to IDD Field `temperature_130`

        Args:
            value (float): value for IDD Field `temperature_130`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_130`'.format(value))

        self._data["Temperature 130"] = value

    @property
    def temperature_131(self):
        """Get temperature_131

        Returns:
            float: the value of `temperature_131` or None if not set
        """
        return self._data["Temperature 131"]

    @temperature_131.setter
    def temperature_131(self, value=None):
        """  Corresponds to IDD Field `temperature_131`

        Args:
            value (float): value for IDD Field `temperature_131`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_131`'.format(value))

        self._data["Temperature 131"] = value

    @property
    def temperature_132(self):
        """Get temperature_132

        Returns:
            float: the value of `temperature_132` or None if not set
        """
        return self._data["Temperature 132"]

    @temperature_132.setter
    def temperature_132(self, value=None):
        """  Corresponds to IDD Field `temperature_132`

        Args:
            value (float): value for IDD Field `temperature_132`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_132`'.format(value))

        self._data["Temperature 132"] = value

    @property
    def temperature_133(self):
        """Get temperature_133

        Returns:
            float: the value of `temperature_133` or None if not set
        """
        return self._data["Temperature 133"]

    @temperature_133.setter
    def temperature_133(self, value=None):
        """  Corresponds to IDD Field `temperature_133`

        Args:
            value (float): value for IDD Field `temperature_133`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_133`'.format(value))

        self._data["Temperature 133"] = value

    @property
    def temperature_134(self):
        """Get temperature_134

        Returns:
            float: the value of `temperature_134` or None if not set
        """
        return self._data["Temperature 134"]

    @temperature_134.setter
    def temperature_134(self, value=None):
        """  Corresponds to IDD Field `temperature_134`

        Args:
            value (float): value for IDD Field `temperature_134`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_134`'.format(value))

        self._data["Temperature 134"] = value

    @property
    def temperature_135(self):
        """Get temperature_135

        Returns:
            float: the value of `temperature_135` or None if not set
        """
        return self._data["Temperature 135"]

    @temperature_135.setter
    def temperature_135(self, value=None):
        """  Corresponds to IDD Field `temperature_135`

        Args:
            value (float): value for IDD Field `temperature_135`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_135`'.format(value))

        self._data["Temperature 135"] = value

    @property
    def temperature_136(self):
        """Get temperature_136

        Returns:
            float: the value of `temperature_136` or None if not set
        """
        return self._data["Temperature 136"]

    @temperature_136.setter
    def temperature_136(self, value=None):
        """  Corresponds to IDD Field `temperature_136`

        Args:
            value (float): value for IDD Field `temperature_136`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_136`'.format(value))

        self._data["Temperature 136"] = value

    @property
    def temperature_137(self):
        """Get temperature_137

        Returns:
            float: the value of `temperature_137` or None if not set
        """
        return self._data["Temperature 137"]

    @temperature_137.setter
    def temperature_137(self, value=None):
        """  Corresponds to IDD Field `temperature_137`

        Args:
            value (float): value for IDD Field `temperature_137`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_137`'.format(value))

        self._data["Temperature 137"] = value

    @property
    def temperature_138(self):
        """Get temperature_138

        Returns:
            float: the value of `temperature_138` or None if not set
        """
        return self._data["Temperature 138"]

    @temperature_138.setter
    def temperature_138(self, value=None):
        """  Corresponds to IDD Field `temperature_138`

        Args:
            value (float): value for IDD Field `temperature_138`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_138`'.format(value))

        self._data["Temperature 138"] = value

    @property
    def temperature_139(self):
        """Get temperature_139

        Returns:
            float: the value of `temperature_139` or None if not set
        """
        return self._data["Temperature 139"]

    @temperature_139.setter
    def temperature_139(self, value=None):
        """  Corresponds to IDD Field `temperature_139`

        Args:
            value (float): value for IDD Field `temperature_139`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_139`'.format(value))

        self._data["Temperature 139"] = value

    @property
    def temperature_140(self):
        """Get temperature_140

        Returns:
            float: the value of `temperature_140` or None if not set
        """
        return self._data["Temperature 140"]

    @temperature_140.setter
    def temperature_140(self, value=None):
        """  Corresponds to IDD Field `temperature_140`

        Args:
            value (float): value for IDD Field `temperature_140`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_140`'.format(value))

        self._data["Temperature 140"] = value

    @property
    def temperature_141(self):
        """Get temperature_141

        Returns:
            float: the value of `temperature_141` or None if not set
        """
        return self._data["Temperature 141"]

    @temperature_141.setter
    def temperature_141(self, value=None):
        """  Corresponds to IDD Field `temperature_141`

        Args:
            value (float): value for IDD Field `temperature_141`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_141`'.format(value))

        self._data["Temperature 141"] = value

    @property
    def temperature_142(self):
        """Get temperature_142

        Returns:
            float: the value of `temperature_142` or None if not set
        """
        return self._data["Temperature 142"]

    @temperature_142.setter
    def temperature_142(self, value=None):
        """  Corresponds to IDD Field `temperature_142`

        Args:
            value (float): value for IDD Field `temperature_142`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_142`'.format(value))

        self._data["Temperature 142"] = value

    @property
    def temperature_143(self):
        """Get temperature_143

        Returns:
            float: the value of `temperature_143` or None if not set
        """
        return self._data["Temperature 143"]

    @temperature_143.setter
    def temperature_143(self, value=None):
        """  Corresponds to IDD Field `temperature_143`

        Args:
            value (float): value for IDD Field `temperature_143`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_143`'.format(value))

        self._data["Temperature 143"] = value

    @property
    def temperature_144(self):
        """Get temperature_144

        Returns:
            float: the value of `temperature_144` or None if not set
        """
        return self._data["Temperature 144"]

    @temperature_144.setter
    def temperature_144(self, value=None):
        """  Corresponds to IDD Field `temperature_144`

        Args:
            value (float): value for IDD Field `temperature_144`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_144`'.format(value))

        self._data["Temperature 144"] = value

    @property
    def temperature_145(self):
        """Get temperature_145

        Returns:
            float: the value of `temperature_145` or None if not set
        """
        return self._data["Temperature 145"]

    @temperature_145.setter
    def temperature_145(self, value=None):
        """  Corresponds to IDD Field `temperature_145`

        Args:
            value (float): value for IDD Field `temperature_145`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_145`'.format(value))

        self._data["Temperature 145"] = value

    @property
    def temperature_146(self):
        """Get temperature_146

        Returns:
            float: the value of `temperature_146` or None if not set
        """
        return self._data["Temperature 146"]

    @temperature_146.setter
    def temperature_146(self, value=None):
        """  Corresponds to IDD Field `temperature_146`

        Args:
            value (float): value for IDD Field `temperature_146`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_146`'.format(value))

        self._data["Temperature 146"] = value

    @property
    def temperature_147(self):
        """Get temperature_147

        Returns:
            float: the value of `temperature_147` or None if not set
        """
        return self._data["Temperature 147"]

    @temperature_147.setter
    def temperature_147(self, value=None):
        """  Corresponds to IDD Field `temperature_147`

        Args:
            value (float): value for IDD Field `temperature_147`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_147`'.format(value))

        self._data["Temperature 147"] = value

    @property
    def temperature_148(self):
        """Get temperature_148

        Returns:
            float: the value of `temperature_148` or None if not set
        """
        return self._data["Temperature 148"]

    @temperature_148.setter
    def temperature_148(self, value=None):
        """  Corresponds to IDD Field `temperature_148`

        Args:
            value (float): value for IDD Field `temperature_148`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_148`'.format(value))

        self._data["Temperature 148"] = value

    @property
    def temperature_149(self):
        """Get temperature_149

        Returns:
            float: the value of `temperature_149` or None if not set
        """
        return self._data["Temperature 149"]

    @temperature_149.setter
    def temperature_149(self, value=None):
        """  Corresponds to IDD Field `temperature_149`

        Args:
            value (float): value for IDD Field `temperature_149`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_149`'.format(value))

        self._data["Temperature 149"] = value

    @property
    def temperature_150(self):
        """Get temperature_150

        Returns:
            float: the value of `temperature_150` or None if not set
        """
        return self._data["Temperature 150"]

    @temperature_150.setter
    def temperature_150(self, value=None):
        """  Corresponds to IDD Field `temperature_150`

        Args:
            value (float): value for IDD Field `temperature_150`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_150`'.format(value))

        self._data["Temperature 150"] = value

    @property
    def temperature_151(self):
        """Get temperature_151

        Returns:
            float: the value of `temperature_151` or None if not set
        """
        return self._data["Temperature 151"]

    @temperature_151.setter
    def temperature_151(self, value=None):
        """  Corresponds to IDD Field `temperature_151`

        Args:
            value (float): value for IDD Field `temperature_151`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_151`'.format(value))

        self._data["Temperature 151"] = value

    @property
    def temperature_152(self):
        """Get temperature_152

        Returns:
            float: the value of `temperature_152` or None if not set
        """
        return self._data["Temperature 152"]

    @temperature_152.setter
    def temperature_152(self, value=None):
        """  Corresponds to IDD Field `temperature_152`

        Args:
            value (float): value for IDD Field `temperature_152`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_152`'.format(value))

        self._data["Temperature 152"] = value

    @property
    def temperature_153(self):
        """Get temperature_153

        Returns:
            float: the value of `temperature_153` or None if not set
        """
        return self._data["Temperature 153"]

    @temperature_153.setter
    def temperature_153(self, value=None):
        """  Corresponds to IDD Field `temperature_153`

        Args:
            value (float): value for IDD Field `temperature_153`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_153`'.format(value))

        self._data["Temperature 153"] = value

    @property
    def temperature_154(self):
        """Get temperature_154

        Returns:
            float: the value of `temperature_154` or None if not set
        """
        return self._data["Temperature 154"]

    @temperature_154.setter
    def temperature_154(self, value=None):
        """  Corresponds to IDD Field `temperature_154`

        Args:
            value (float): value for IDD Field `temperature_154`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_154`'.format(value))

        self._data["Temperature 154"] = value

    @property
    def temperature_155(self):
        """Get temperature_155

        Returns:
            float: the value of `temperature_155` or None if not set
        """
        return self._data["Temperature 155"]

    @temperature_155.setter
    def temperature_155(self, value=None):
        """  Corresponds to IDD Field `temperature_155`

        Args:
            value (float): value for IDD Field `temperature_155`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_155`'.format(value))

        self._data["Temperature 155"] = value

    @property
    def temperature_156(self):
        """Get temperature_156

        Returns:
            float: the value of `temperature_156` or None if not set
        """
        return self._data["Temperature 156"]

    @temperature_156.setter
    def temperature_156(self, value=None):
        """  Corresponds to IDD Field `temperature_156`

        Args:
            value (float): value for IDD Field `temperature_156`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_156`'.format(value))

        self._data["Temperature 156"] = value

    @property
    def temperature_157(self):
        """Get temperature_157

        Returns:
            float: the value of `temperature_157` or None if not set
        """
        return self._data["Temperature 157"]

    @temperature_157.setter
    def temperature_157(self, value=None):
        """  Corresponds to IDD Field `temperature_157`

        Args:
            value (float): value for IDD Field `temperature_157`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_157`'.format(value))

        self._data["Temperature 157"] = value

    @property
    def temperature_158(self):
        """Get temperature_158

        Returns:
            float: the value of `temperature_158` or None if not set
        """
        return self._data["Temperature 158"]

    @temperature_158.setter
    def temperature_158(self, value=None):
        """  Corresponds to IDD Field `temperature_158`

        Args:
            value (float): value for IDD Field `temperature_158`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_158`'.format(value))

        self._data["Temperature 158"] = value

    @property
    def temperature_159(self):
        """Get temperature_159

        Returns:
            float: the value of `temperature_159` or None if not set
        """
        return self._data["Temperature 159"]

    @temperature_159.setter
    def temperature_159(self, value=None):
        """  Corresponds to IDD Field `temperature_159`

        Args:
            value (float): value for IDD Field `temperature_159`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_159`'.format(value))

        self._data["Temperature 159"] = value

    @property
    def temperature_160(self):
        """Get temperature_160

        Returns:
            float: the value of `temperature_160` or None if not set
        """
        return self._data["Temperature 160"]

    @temperature_160.setter
    def temperature_160(self, value=None):
        """  Corresponds to IDD Field `temperature_160`

        Args:
            value (float): value for IDD Field `temperature_160`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_160`'.format(value))

        self._data["Temperature 160"] = value

    @property
    def temperature_161(self):
        """Get temperature_161

        Returns:
            float: the value of `temperature_161` or None if not set
        """
        return self._data["Temperature 161"]

    @temperature_161.setter
    def temperature_161(self, value=None):
        """  Corresponds to IDD Field `temperature_161`

        Args:
            value (float): value for IDD Field `temperature_161`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_161`'.format(value))

        self._data["Temperature 161"] = value

    @property
    def temperature_162(self):
        """Get temperature_162

        Returns:
            float: the value of `temperature_162` or None if not set
        """
        return self._data["Temperature 162"]

    @temperature_162.setter
    def temperature_162(self, value=None):
        """  Corresponds to IDD Field `temperature_162`

        Args:
            value (float): value for IDD Field `temperature_162`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_162`'.format(value))

        self._data["Temperature 162"] = value

    @property
    def temperature_163(self):
        """Get temperature_163

        Returns:
            float: the value of `temperature_163` or None if not set
        """
        return self._data["Temperature 163"]

    @temperature_163.setter
    def temperature_163(self, value=None):
        """  Corresponds to IDD Field `temperature_163`

        Args:
            value (float): value for IDD Field `temperature_163`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_163`'.format(value))

        self._data["Temperature 163"] = value

    @property
    def temperature_164(self):
        """Get temperature_164

        Returns:
            float: the value of `temperature_164` or None if not set
        """
        return self._data["Temperature 164"]

    @temperature_164.setter
    def temperature_164(self, value=None):
        """  Corresponds to IDD Field `temperature_164`

        Args:
            value (float): value for IDD Field `temperature_164`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_164`'.format(value))

        self._data["Temperature 164"] = value

    @property
    def temperature_165(self):
        """Get temperature_165

        Returns:
            float: the value of `temperature_165` or None if not set
        """
        return self._data["Temperature 165"]

    @temperature_165.setter
    def temperature_165(self, value=None):
        """  Corresponds to IDD Field `temperature_165`

        Args:
            value (float): value for IDD Field `temperature_165`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_165`'.format(value))

        self._data["Temperature 165"] = value

    @property
    def temperature_166(self):
        """Get temperature_166

        Returns:
            float: the value of `temperature_166` or None if not set
        """
        return self._data["Temperature 166"]

    @temperature_166.setter
    def temperature_166(self, value=None):
        """  Corresponds to IDD Field `temperature_166`

        Args:
            value (float): value for IDD Field `temperature_166`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_166`'.format(value))

        self._data["Temperature 166"] = value

    @property
    def temperature_167(self):
        """Get temperature_167

        Returns:
            float: the value of `temperature_167` or None if not set
        """
        return self._data["Temperature 167"]

    @temperature_167.setter
    def temperature_167(self, value=None):
        """  Corresponds to IDD Field `temperature_167`

        Args:
            value (float): value for IDD Field `temperature_167`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_167`'.format(value))

        self._data["Temperature 167"] = value

    @property
    def temperature_168(self):
        """Get temperature_168

        Returns:
            float: the value of `temperature_168` or None if not set
        """
        return self._data["Temperature 168"]

    @temperature_168.setter
    def temperature_168(self, value=None):
        """  Corresponds to IDD Field `temperature_168`

        Args:
            value (float): value for IDD Field `temperature_168`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_168`'.format(value))

        self._data["Temperature 168"] = value

    @property
    def temperature_169(self):
        """Get temperature_169

        Returns:
            float: the value of `temperature_169` or None if not set
        """
        return self._data["Temperature 169"]

    @temperature_169.setter
    def temperature_169(self, value=None):
        """  Corresponds to IDD Field `temperature_169`

        Args:
            value (float): value for IDD Field `temperature_169`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_169`'.format(value))

        self._data["Temperature 169"] = value

    @property
    def temperature_170(self):
        """Get temperature_170

        Returns:
            float: the value of `temperature_170` or None if not set
        """
        return self._data["Temperature 170"]

    @temperature_170.setter
    def temperature_170(self, value=None):
        """  Corresponds to IDD Field `temperature_170`

        Args:
            value (float): value for IDD Field `temperature_170`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_170`'.format(value))

        self._data["Temperature 170"] = value

    @property
    def temperature_171(self):
        """Get temperature_171

        Returns:
            float: the value of `temperature_171` or None if not set
        """
        return self._data["Temperature 171"]

    @temperature_171.setter
    def temperature_171(self, value=None):
        """  Corresponds to IDD Field `temperature_171`

        Args:
            value (float): value for IDD Field `temperature_171`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_171`'.format(value))

        self._data["Temperature 171"] = value

    @property
    def temperature_172(self):
        """Get temperature_172

        Returns:
            float: the value of `temperature_172` or None if not set
        """
        return self._data["Temperature 172"]

    @temperature_172.setter
    def temperature_172(self, value=None):
        """  Corresponds to IDD Field `temperature_172`

        Args:
            value (float): value for IDD Field `temperature_172`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_172`'.format(value))

        self._data["Temperature 172"] = value

    @property
    def temperature_173(self):
        """Get temperature_173

        Returns:
            float: the value of `temperature_173` or None if not set
        """
        return self._data["Temperature 173"]

    @temperature_173.setter
    def temperature_173(self, value=None):
        """  Corresponds to IDD Field `temperature_173`

        Args:
            value (float): value for IDD Field `temperature_173`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_173`'.format(value))

        self._data["Temperature 173"] = value

    @property
    def temperature_174(self):
        """Get temperature_174

        Returns:
            float: the value of `temperature_174` or None if not set
        """
        return self._data["Temperature 174"]

    @temperature_174.setter
    def temperature_174(self, value=None):
        """  Corresponds to IDD Field `temperature_174`

        Args:
            value (float): value for IDD Field `temperature_174`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_174`'.format(value))

        self._data["Temperature 174"] = value

    @property
    def temperature_175(self):
        """Get temperature_175

        Returns:
            float: the value of `temperature_175` or None if not set
        """
        return self._data["Temperature 175"]

    @temperature_175.setter
    def temperature_175(self, value=None):
        """  Corresponds to IDD Field `temperature_175`

        Args:
            value (float): value for IDD Field `temperature_175`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_175`'.format(value))

        self._data["Temperature 175"] = value

    @property
    def temperature_176(self):
        """Get temperature_176

        Returns:
            float: the value of `temperature_176` or None if not set
        """
        return self._data["Temperature 176"]

    @temperature_176.setter
    def temperature_176(self, value=None):
        """  Corresponds to IDD Field `temperature_176`

        Args:
            value (float): value for IDD Field `temperature_176`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_176`'.format(value))

        self._data["Temperature 176"] = value

    @property
    def temperature_177(self):
        """Get temperature_177

        Returns:
            float: the value of `temperature_177` or None if not set
        """
        return self._data["Temperature 177"]

    @temperature_177.setter
    def temperature_177(self, value=None):
        """  Corresponds to IDD Field `temperature_177`

        Args:
            value (float): value for IDD Field `temperature_177`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_177`'.format(value))

        self._data["Temperature 177"] = value

    @property
    def temperature_178(self):
        """Get temperature_178

        Returns:
            float: the value of `temperature_178` or None if not set
        """
        return self._data["Temperature 178"]

    @temperature_178.setter
    def temperature_178(self, value=None):
        """  Corresponds to IDD Field `temperature_178`

        Args:
            value (float): value for IDD Field `temperature_178`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_178`'.format(value))

        self._data["Temperature 178"] = value

    @property
    def temperature_179(self):
        """Get temperature_179

        Returns:
            float: the value of `temperature_179` or None if not set
        """
        return self._data["Temperature 179"]

    @temperature_179.setter
    def temperature_179(self, value=None):
        """  Corresponds to IDD Field `temperature_179`

        Args:
            value (float): value for IDD Field `temperature_179`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_179`'.format(value))

        self._data["Temperature 179"] = value

    @property
    def temperature_180(self):
        """Get temperature_180

        Returns:
            float: the value of `temperature_180` or None if not set
        """
        return self._data["Temperature 180"]

    @temperature_180.setter
    def temperature_180(self, value=None):
        """  Corresponds to IDD Field `temperature_180`

        Args:
            value (float): value for IDD Field `temperature_180`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_180`'.format(value))

        self._data["Temperature 180"] = value

    @property
    def temperature_181(self):
        """Get temperature_181

        Returns:
            float: the value of `temperature_181` or None if not set
        """
        return self._data["Temperature 181"]

    @temperature_181.setter
    def temperature_181(self, value=None):
        """  Corresponds to IDD Field `temperature_181`

        Args:
            value (float): value for IDD Field `temperature_181`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_181`'.format(value))

        self._data["Temperature 181"] = value

    @property
    def temperature_182(self):
        """Get temperature_182

        Returns:
            float: the value of `temperature_182` or None if not set
        """
        return self._data["Temperature 182"]

    @temperature_182.setter
    def temperature_182(self, value=None):
        """  Corresponds to IDD Field `temperature_182`

        Args:
            value (float): value for IDD Field `temperature_182`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_182`'.format(value))

        self._data["Temperature 182"] = value

    @property
    def temperature_183(self):
        """Get temperature_183

        Returns:
            float: the value of `temperature_183` or None if not set
        """
        return self._data["Temperature 183"]

    @temperature_183.setter
    def temperature_183(self, value=None):
        """  Corresponds to IDD Field `temperature_183`

        Args:
            value (float): value for IDD Field `temperature_183`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_183`'.format(value))

        self._data["Temperature 183"] = value

    @property
    def temperature_184(self):
        """Get temperature_184

        Returns:
            float: the value of `temperature_184` or None if not set
        """
        return self._data["Temperature 184"]

    @temperature_184.setter
    def temperature_184(self, value=None):
        """  Corresponds to IDD Field `temperature_184`

        Args:
            value (float): value for IDD Field `temperature_184`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_184`'.format(value))

        self._data["Temperature 184"] = value

    @property
    def temperature_185(self):
        """Get temperature_185

        Returns:
            float: the value of `temperature_185` or None if not set
        """
        return self._data["Temperature 185"]

    @temperature_185.setter
    def temperature_185(self, value=None):
        """  Corresponds to IDD Field `temperature_185`

        Args:
            value (float): value for IDD Field `temperature_185`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_185`'.format(value))

        self._data["Temperature 185"] = value

    @property
    def temperature_186(self):
        """Get temperature_186

        Returns:
            float: the value of `temperature_186` or None if not set
        """
        return self._data["Temperature 186"]

    @temperature_186.setter
    def temperature_186(self, value=None):
        """  Corresponds to IDD Field `temperature_186`

        Args:
            value (float): value for IDD Field `temperature_186`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_186`'.format(value))

        self._data["Temperature 186"] = value

    @property
    def temperature_187(self):
        """Get temperature_187

        Returns:
            float: the value of `temperature_187` or None if not set
        """
        return self._data["Temperature 187"]

    @temperature_187.setter
    def temperature_187(self, value=None):
        """  Corresponds to IDD Field `temperature_187`

        Args:
            value (float): value for IDD Field `temperature_187`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_187`'.format(value))

        self._data["Temperature 187"] = value

    @property
    def temperature_188(self):
        """Get temperature_188

        Returns:
            float: the value of `temperature_188` or None if not set
        """
        return self._data["Temperature 188"]

    @temperature_188.setter
    def temperature_188(self, value=None):
        """  Corresponds to IDD Field `temperature_188`

        Args:
            value (float): value for IDD Field `temperature_188`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_188`'.format(value))

        self._data["Temperature 188"] = value

    @property
    def temperature_189(self):
        """Get temperature_189

        Returns:
            float: the value of `temperature_189` or None if not set
        """
        return self._data["Temperature 189"]

    @temperature_189.setter
    def temperature_189(self, value=None):
        """  Corresponds to IDD Field `temperature_189`

        Args:
            value (float): value for IDD Field `temperature_189`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_189`'.format(value))

        self._data["Temperature 189"] = value

    @property
    def temperature_190(self):
        """Get temperature_190

        Returns:
            float: the value of `temperature_190` or None if not set
        """
        return self._data["Temperature 190"]

    @temperature_190.setter
    def temperature_190(self, value=None):
        """  Corresponds to IDD Field `temperature_190`

        Args:
            value (float): value for IDD Field `temperature_190`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_190`'.format(value))

        self._data["Temperature 190"] = value

    @property
    def temperature_191(self):
        """Get temperature_191

        Returns:
            float: the value of `temperature_191` or None if not set
        """
        return self._data["Temperature 191"]

    @temperature_191.setter
    def temperature_191(self, value=None):
        """  Corresponds to IDD Field `temperature_191`

        Args:
            value (float): value for IDD Field `temperature_191`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_191`'.format(value))

        self._data["Temperature 191"] = value

    @property
    def temperature_192(self):
        """Get temperature_192

        Returns:
            float: the value of `temperature_192` or None if not set
        """
        return self._data["Temperature 192"]

    @temperature_192.setter
    def temperature_192(self, value=None):
        """  Corresponds to IDD Field `temperature_192`

        Args:
            value (float): value for IDD Field `temperature_192`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_192`'.format(value))

        self._data["Temperature 192"] = value

    @property
    def temperature_193(self):
        """Get temperature_193

        Returns:
            float: the value of `temperature_193` or None if not set
        """
        return self._data["Temperature 193"]

    @temperature_193.setter
    def temperature_193(self, value=None):
        """  Corresponds to IDD Field `temperature_193`

        Args:
            value (float): value for IDD Field `temperature_193`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_193`'.format(value))

        self._data["Temperature 193"] = value

    @property
    def temperature_194(self):
        """Get temperature_194

        Returns:
            float: the value of `temperature_194` or None if not set
        """
        return self._data["Temperature 194"]

    @temperature_194.setter
    def temperature_194(self, value=None):
        """  Corresponds to IDD Field `temperature_194`

        Args:
            value (float): value for IDD Field `temperature_194`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_194`'.format(value))

        self._data["Temperature 194"] = value

    @property
    def temperature_195(self):
        """Get temperature_195

        Returns:
            float: the value of `temperature_195` or None if not set
        """
        return self._data["Temperature 195"]

    @temperature_195.setter
    def temperature_195(self, value=None):
        """  Corresponds to IDD Field `temperature_195`

        Args:
            value (float): value for IDD Field `temperature_195`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_195`'.format(value))

        self._data["Temperature 195"] = value

    @property
    def temperature_196(self):
        """Get temperature_196

        Returns:
            float: the value of `temperature_196` or None if not set
        """
        return self._data["Temperature 196"]

    @temperature_196.setter
    def temperature_196(self, value=None):
        """  Corresponds to IDD Field `temperature_196`

        Args:
            value (float): value for IDD Field `temperature_196`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_196`'.format(value))

        self._data["Temperature 196"] = value

    @property
    def temperature_197(self):
        """Get temperature_197

        Returns:
            float: the value of `temperature_197` or None if not set
        """
        return self._data["Temperature 197"]

    @temperature_197.setter
    def temperature_197(self, value=None):
        """  Corresponds to IDD Field `temperature_197`

        Args:
            value (float): value for IDD Field `temperature_197`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_197`'.format(value))

        self._data["Temperature 197"] = value

    @property
    def temperature_198(self):
        """Get temperature_198

        Returns:
            float: the value of `temperature_198` or None if not set
        """
        return self._data["Temperature 198"]

    @temperature_198.setter
    def temperature_198(self, value=None):
        """  Corresponds to IDD Field `temperature_198`

        Args:
            value (float): value for IDD Field `temperature_198`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_198`'.format(value))

        self._data["Temperature 198"] = value

    @property
    def temperature_199(self):
        """Get temperature_199

        Returns:
            float: the value of `temperature_199` or None if not set
        """
        return self._data["Temperature 199"]

    @temperature_199.setter
    def temperature_199(self, value=None):
        """  Corresponds to IDD Field `temperature_199`

        Args:
            value (float): value for IDD Field `temperature_199`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_199`'.format(value))

        self._data["Temperature 199"] = value

    @property
    def temperature_200(self):
        """Get temperature_200

        Returns:
            float: the value of `temperature_200` or None if not set
        """
        return self._data["Temperature 200"]

    @temperature_200.setter
    def temperature_200(self, value=None):
        """  Corresponds to IDD Field `temperature_200`

        Args:
            value (float): value for IDD Field `temperature_200`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_200`'.format(value))

        self._data["Temperature 200"] = value

    @property
    def temperature_201(self):
        """Get temperature_201

        Returns:
            float: the value of `temperature_201` or None if not set
        """
        return self._data["Temperature 201"]

    @temperature_201.setter
    def temperature_201(self, value=None):
        """  Corresponds to IDD Field `temperature_201`

        Args:
            value (float): value for IDD Field `temperature_201`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_201`'.format(value))

        self._data["Temperature 201"] = value

    @property
    def temperature_202(self):
        """Get temperature_202

        Returns:
            float: the value of `temperature_202` or None if not set
        """
        return self._data["Temperature 202"]

    @temperature_202.setter
    def temperature_202(self, value=None):
        """  Corresponds to IDD Field `temperature_202`

        Args:
            value (float): value for IDD Field `temperature_202`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_202`'.format(value))

        self._data["Temperature 202"] = value

    @property
    def temperature_203(self):
        """Get temperature_203

        Returns:
            float: the value of `temperature_203` or None if not set
        """
        return self._data["Temperature 203"]

    @temperature_203.setter
    def temperature_203(self, value=None):
        """  Corresponds to IDD Field `temperature_203`

        Args:
            value (float): value for IDD Field `temperature_203`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_203`'.format(value))

        self._data["Temperature 203"] = value

    @property
    def temperature_204(self):
        """Get temperature_204

        Returns:
            float: the value of `temperature_204` or None if not set
        """
        return self._data["Temperature 204"]

    @temperature_204.setter
    def temperature_204(self, value=None):
        """  Corresponds to IDD Field `temperature_204`

        Args:
            value (float): value for IDD Field `temperature_204`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_204`'.format(value))

        self._data["Temperature 204"] = value

    @property
    def temperature_205(self):
        """Get temperature_205

        Returns:
            float: the value of `temperature_205` or None if not set
        """
        return self._data["Temperature 205"]

    @temperature_205.setter
    def temperature_205(self, value=None):
        """  Corresponds to IDD Field `temperature_205`

        Args:
            value (float): value for IDD Field `temperature_205`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_205`'.format(value))

        self._data["Temperature 205"] = value

    @property
    def temperature_206(self):
        """Get temperature_206

        Returns:
            float: the value of `temperature_206` or None if not set
        """
        return self._data["Temperature 206"]

    @temperature_206.setter
    def temperature_206(self, value=None):
        """  Corresponds to IDD Field `temperature_206`

        Args:
            value (float): value for IDD Field `temperature_206`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_206`'.format(value))

        self._data["Temperature 206"] = value

    @property
    def temperature_207(self):
        """Get temperature_207

        Returns:
            float: the value of `temperature_207` or None if not set
        """
        return self._data["Temperature 207"]

    @temperature_207.setter
    def temperature_207(self, value=None):
        """  Corresponds to IDD Field `temperature_207`

        Args:
            value (float): value for IDD Field `temperature_207`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_207`'.format(value))

        self._data["Temperature 207"] = value

    @property
    def temperature_208(self):
        """Get temperature_208

        Returns:
            float: the value of `temperature_208` or None if not set
        """
        return self._data["Temperature 208"]

    @temperature_208.setter
    def temperature_208(self, value=None):
        """  Corresponds to IDD Field `temperature_208`

        Args:
            value (float): value for IDD Field `temperature_208`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_208`'.format(value))

        self._data["Temperature 208"] = value

    @property
    def temperature_209(self):
        """Get temperature_209

        Returns:
            float: the value of `temperature_209` or None if not set
        """
        return self._data["Temperature 209"]

    @temperature_209.setter
    def temperature_209(self, value=None):
        """  Corresponds to IDD Field `temperature_209`

        Args:
            value (float): value for IDD Field `temperature_209`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_209`'.format(value))

        self._data["Temperature 209"] = value

    @property
    def temperature_210(self):
        """Get temperature_210

        Returns:
            float: the value of `temperature_210` or None if not set
        """
        return self._data["Temperature 210"]

    @temperature_210.setter
    def temperature_210(self, value=None):
        """  Corresponds to IDD Field `temperature_210`

        Args:
            value (float): value for IDD Field `temperature_210`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_210`'.format(value))

        self._data["Temperature 210"] = value

    @property
    def temperature_211(self):
        """Get temperature_211

        Returns:
            float: the value of `temperature_211` or None if not set
        """
        return self._data["Temperature 211"]

    @temperature_211.setter
    def temperature_211(self, value=None):
        """  Corresponds to IDD Field `temperature_211`

        Args:
            value (float): value for IDD Field `temperature_211`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_211`'.format(value))

        self._data["Temperature 211"] = value

    @property
    def temperature_212(self):
        """Get temperature_212

        Returns:
            float: the value of `temperature_212` or None if not set
        """
        return self._data["Temperature 212"]

    @temperature_212.setter
    def temperature_212(self, value=None):
        """  Corresponds to IDD Field `temperature_212`

        Args:
            value (float): value for IDD Field `temperature_212`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_212`'.format(value))

        self._data["Temperature 212"] = value

    @property
    def temperature_213(self):
        """Get temperature_213

        Returns:
            float: the value of `temperature_213` or None if not set
        """
        return self._data["Temperature 213"]

    @temperature_213.setter
    def temperature_213(self, value=None):
        """  Corresponds to IDD Field `temperature_213`

        Args:
            value (float): value for IDD Field `temperature_213`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_213`'.format(value))

        self._data["Temperature 213"] = value

    @property
    def temperature_214(self):
        """Get temperature_214

        Returns:
            float: the value of `temperature_214` or None if not set
        """
        return self._data["Temperature 214"]

    @temperature_214.setter
    def temperature_214(self, value=None):
        """  Corresponds to IDD Field `temperature_214`

        Args:
            value (float): value for IDD Field `temperature_214`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_214`'.format(value))

        self._data["Temperature 214"] = value

    @property
    def temperature_215(self):
        """Get temperature_215

        Returns:
            float: the value of `temperature_215` or None if not set
        """
        return self._data["Temperature 215"]

    @temperature_215.setter
    def temperature_215(self, value=None):
        """  Corresponds to IDD Field `temperature_215`

        Args:
            value (float): value for IDD Field `temperature_215`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_215`'.format(value))

        self._data["Temperature 215"] = value

    @property
    def temperature_216(self):
        """Get temperature_216

        Returns:
            float: the value of `temperature_216` or None if not set
        """
        return self._data["Temperature 216"]

    @temperature_216.setter
    def temperature_216(self, value=None):
        """  Corresponds to IDD Field `temperature_216`

        Args:
            value (float): value for IDD Field `temperature_216`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_216`'.format(value))

        self._data["Temperature 216"] = value

    @property
    def temperature_217(self):
        """Get temperature_217

        Returns:
            float: the value of `temperature_217` or None if not set
        """
        return self._data["Temperature 217"]

    @temperature_217.setter
    def temperature_217(self, value=None):
        """  Corresponds to IDD Field `temperature_217`

        Args:
            value (float): value for IDD Field `temperature_217`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_217`'.format(value))

        self._data["Temperature 217"] = value

    @property
    def temperature_218(self):
        """Get temperature_218

        Returns:
            float: the value of `temperature_218` or None if not set
        """
        return self._data["Temperature 218"]

    @temperature_218.setter
    def temperature_218(self, value=None):
        """  Corresponds to IDD Field `temperature_218`

        Args:
            value (float): value for IDD Field `temperature_218`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_218`'.format(value))

        self._data["Temperature 218"] = value

    @property
    def temperature_219(self):
        """Get temperature_219

        Returns:
            float: the value of `temperature_219` or None if not set
        """
        return self._data["Temperature 219"]

    @temperature_219.setter
    def temperature_219(self, value=None):
        """  Corresponds to IDD Field `temperature_219`

        Args:
            value (float): value for IDD Field `temperature_219`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_219`'.format(value))

        self._data["Temperature 219"] = value

    @property
    def temperature_220(self):
        """Get temperature_220

        Returns:
            float: the value of `temperature_220` or None if not set
        """
        return self._data["Temperature 220"]

    @temperature_220.setter
    def temperature_220(self, value=None):
        """  Corresponds to IDD Field `temperature_220`

        Args:
            value (float): value for IDD Field `temperature_220`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_220`'.format(value))

        self._data["Temperature 220"] = value

    @property
    def temperature_221(self):
        """Get temperature_221

        Returns:
            float: the value of `temperature_221` or None if not set
        """
        return self._data["Temperature 221"]

    @temperature_221.setter
    def temperature_221(self, value=None):
        """  Corresponds to IDD Field `temperature_221`

        Args:
            value (float): value for IDD Field `temperature_221`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_221`'.format(value))

        self._data["Temperature 221"] = value

    @property
    def temperature_222(self):
        """Get temperature_222

        Returns:
            float: the value of `temperature_222` or None if not set
        """
        return self._data["Temperature 222"]

    @temperature_222.setter
    def temperature_222(self, value=None):
        """  Corresponds to IDD Field `temperature_222`

        Args:
            value (float): value for IDD Field `temperature_222`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_222`'.format(value))

        self._data["Temperature 222"] = value

    @property
    def temperature_223(self):
        """Get temperature_223

        Returns:
            float: the value of `temperature_223` or None if not set
        """
        return self._data["Temperature 223"]

    @temperature_223.setter
    def temperature_223(self, value=None):
        """  Corresponds to IDD Field `temperature_223`

        Args:
            value (float): value for IDD Field `temperature_223`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_223`'.format(value))

        self._data["Temperature 223"] = value

    @property
    def temperature_224(self):
        """Get temperature_224

        Returns:
            float: the value of `temperature_224` or None if not set
        """
        return self._data["Temperature 224"]

    @temperature_224.setter
    def temperature_224(self, value=None):
        """  Corresponds to IDD Field `temperature_224`

        Args:
            value (float): value for IDD Field `temperature_224`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_224`'.format(value))

        self._data["Temperature 224"] = value

    @property
    def temperature_225(self):
        """Get temperature_225

        Returns:
            float: the value of `temperature_225` or None if not set
        """
        return self._data["Temperature 225"]

    @temperature_225.setter
    def temperature_225(self, value=None):
        """  Corresponds to IDD Field `temperature_225`

        Args:
            value (float): value for IDD Field `temperature_225`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_225`'.format(value))

        self._data["Temperature 225"] = value

    @property
    def temperature_226(self):
        """Get temperature_226

        Returns:
            float: the value of `temperature_226` or None if not set
        """
        return self._data["Temperature 226"]

    @temperature_226.setter
    def temperature_226(self, value=None):
        """  Corresponds to IDD Field `temperature_226`

        Args:
            value (float): value for IDD Field `temperature_226`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_226`'.format(value))

        self._data["Temperature 226"] = value

    @property
    def temperature_227(self):
        """Get temperature_227

        Returns:
            float: the value of `temperature_227` or None if not set
        """
        return self._data["Temperature 227"]

    @temperature_227.setter
    def temperature_227(self, value=None):
        """  Corresponds to IDD Field `temperature_227`

        Args:
            value (float): value for IDD Field `temperature_227`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_227`'.format(value))

        self._data["Temperature 227"] = value

    @property
    def temperature_228(self):
        """Get temperature_228

        Returns:
            float: the value of `temperature_228` or None if not set
        """
        return self._data["Temperature 228"]

    @temperature_228.setter
    def temperature_228(self, value=None):
        """  Corresponds to IDD Field `temperature_228`

        Args:
            value (float): value for IDD Field `temperature_228`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_228`'.format(value))

        self._data["Temperature 228"] = value

    @property
    def temperature_229(self):
        """Get temperature_229

        Returns:
            float: the value of `temperature_229` or None if not set
        """
        return self._data["Temperature 229"]

    @temperature_229.setter
    def temperature_229(self, value=None):
        """  Corresponds to IDD Field `temperature_229`

        Args:
            value (float): value for IDD Field `temperature_229`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_229`'.format(value))

        self._data["Temperature 229"] = value

    @property
    def temperature_230(self):
        """Get temperature_230

        Returns:
            float: the value of `temperature_230` or None if not set
        """
        return self._data["Temperature 230"]

    @temperature_230.setter
    def temperature_230(self, value=None):
        """  Corresponds to IDD Field `temperature_230`

        Args:
            value (float): value for IDD Field `temperature_230`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_230`'.format(value))

        self._data["Temperature 230"] = value

    @property
    def temperature_231(self):
        """Get temperature_231

        Returns:
            float: the value of `temperature_231` or None if not set
        """
        return self._data["Temperature 231"]

    @temperature_231.setter
    def temperature_231(self, value=None):
        """  Corresponds to IDD Field `temperature_231`

        Args:
            value (float): value for IDD Field `temperature_231`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_231`'.format(value))

        self._data["Temperature 231"] = value

    @property
    def temperature_232(self):
        """Get temperature_232

        Returns:
            float: the value of `temperature_232` or None if not set
        """
        return self._data["Temperature 232"]

    @temperature_232.setter
    def temperature_232(self, value=None):
        """  Corresponds to IDD Field `temperature_232`

        Args:
            value (float): value for IDD Field `temperature_232`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_232`'.format(value))

        self._data["Temperature 232"] = value

    @property
    def temperature_233(self):
        """Get temperature_233

        Returns:
            float: the value of `temperature_233` or None if not set
        """
        return self._data["Temperature 233"]

    @temperature_233.setter
    def temperature_233(self, value=None):
        """  Corresponds to IDD Field `temperature_233`

        Args:
            value (float): value for IDD Field `temperature_233`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_233`'.format(value))

        self._data["Temperature 233"] = value

    @property
    def temperature_234(self):
        """Get temperature_234

        Returns:
            float: the value of `temperature_234` or None if not set
        """
        return self._data["Temperature 234"]

    @temperature_234.setter
    def temperature_234(self, value=None):
        """  Corresponds to IDD Field `temperature_234`

        Args:
            value (float): value for IDD Field `temperature_234`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_234`'.format(value))

        self._data["Temperature 234"] = value

    @property
    def temperature_235(self):
        """Get temperature_235

        Returns:
            float: the value of `temperature_235` or None if not set
        """
        return self._data["Temperature 235"]

    @temperature_235.setter
    def temperature_235(self, value=None):
        """  Corresponds to IDD Field `temperature_235`

        Args:
            value (float): value for IDD Field `temperature_235`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_235`'.format(value))

        self._data["Temperature 235"] = value

    @property
    def temperature_236(self):
        """Get temperature_236

        Returns:
            float: the value of `temperature_236` or None if not set
        """
        return self._data["Temperature 236"]

    @temperature_236.setter
    def temperature_236(self, value=None):
        """  Corresponds to IDD Field `temperature_236`

        Args:
            value (float): value for IDD Field `temperature_236`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_236`'.format(value))

        self._data["Temperature 236"] = value

    @property
    def temperature_237(self):
        """Get temperature_237

        Returns:
            float: the value of `temperature_237` or None if not set
        """
        return self._data["Temperature 237"]

    @temperature_237.setter
    def temperature_237(self, value=None):
        """  Corresponds to IDD Field `temperature_237`

        Args:
            value (float): value for IDD Field `temperature_237`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_237`'.format(value))

        self._data["Temperature 237"] = value

    @property
    def temperature_238(self):
        """Get temperature_238

        Returns:
            float: the value of `temperature_238` or None if not set
        """
        return self._data["Temperature 238"]

    @temperature_238.setter
    def temperature_238(self, value=None):
        """  Corresponds to IDD Field `temperature_238`

        Args:
            value (float): value for IDD Field `temperature_238`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_238`'.format(value))

        self._data["Temperature 238"] = value

    @property
    def temperature_239(self):
        """Get temperature_239

        Returns:
            float: the value of `temperature_239` or None if not set
        """
        return self._data["Temperature 239"]

    @temperature_239.setter
    def temperature_239(self, value=None):
        """  Corresponds to IDD Field `temperature_239`

        Args:
            value (float): value for IDD Field `temperature_239`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_239`'.format(value))

        self._data["Temperature 239"] = value

    @property
    def temperature_240(self):
        """Get temperature_240

        Returns:
            float: the value of `temperature_240` or None if not set
        """
        return self._data["Temperature 240"]

    @temperature_240.setter
    def temperature_240(self, value=None):
        """  Corresponds to IDD Field `temperature_240`

        Args:
            value (float): value for IDD Field `temperature_240`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_240`'.format(value))

        self._data["Temperature 240"] = value

    @property
    def temperature_241(self):
        """Get temperature_241

        Returns:
            float: the value of `temperature_241` or None if not set
        """
        return self._data["Temperature 241"]

    @temperature_241.setter
    def temperature_241(self, value=None):
        """  Corresponds to IDD Field `temperature_241`

        Args:
            value (float): value for IDD Field `temperature_241`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_241`'.format(value))

        self._data["Temperature 241"] = value

    @property
    def temperature_242(self):
        """Get temperature_242

        Returns:
            float: the value of `temperature_242` or None if not set
        """
        return self._data["Temperature 242"]

    @temperature_242.setter
    def temperature_242(self, value=None):
        """  Corresponds to IDD Field `temperature_242`

        Args:
            value (float): value for IDD Field `temperature_242`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_242`'.format(value))

        self._data["Temperature 242"] = value

    @property
    def temperature_243(self):
        """Get temperature_243

        Returns:
            float: the value of `temperature_243` or None if not set
        """
        return self._data["Temperature 243"]

    @temperature_243.setter
    def temperature_243(self, value=None):
        """  Corresponds to IDD Field `temperature_243`

        Args:
            value (float): value for IDD Field `temperature_243`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_243`'.format(value))

        self._data["Temperature 243"] = value

    @property
    def temperature_244(self):
        """Get temperature_244

        Returns:
            float: the value of `temperature_244` or None if not set
        """
        return self._data["Temperature 244"]

    @temperature_244.setter
    def temperature_244(self, value=None):
        """  Corresponds to IDD Field `temperature_244`

        Args:
            value (float): value for IDD Field `temperature_244`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_244`'.format(value))

        self._data["Temperature 244"] = value

    @property
    def temperature_245(self):
        """Get temperature_245

        Returns:
            float: the value of `temperature_245` or None if not set
        """
        return self._data["Temperature 245"]

    @temperature_245.setter
    def temperature_245(self, value=None):
        """  Corresponds to IDD Field `temperature_245`

        Args:
            value (float): value for IDD Field `temperature_245`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_245`'.format(value))

        self._data["Temperature 245"] = value

    @property
    def temperature_246(self):
        """Get temperature_246

        Returns:
            float: the value of `temperature_246` or None if not set
        """
        return self._data["Temperature 246"]

    @temperature_246.setter
    def temperature_246(self, value=None):
        """  Corresponds to IDD Field `temperature_246`

        Args:
            value (float): value for IDD Field `temperature_246`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_246`'.format(value))

        self._data["Temperature 246"] = value

    @property
    def temperature_247(self):
        """Get temperature_247

        Returns:
            float: the value of `temperature_247` or None if not set
        """
        return self._data["Temperature 247"]

    @temperature_247.setter
    def temperature_247(self, value=None):
        """  Corresponds to IDD Field `temperature_247`

        Args:
            value (float): value for IDD Field `temperature_247`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_247`'.format(value))

        self._data["Temperature 247"] = value

    @property
    def temperature_248(self):
        """Get temperature_248

        Returns:
            float: the value of `temperature_248` or None if not set
        """
        return self._data["Temperature 248"]

    @temperature_248.setter
    def temperature_248(self, value=None):
        """  Corresponds to IDD Field `temperature_248`

        Args:
            value (float): value for IDD Field `temperature_248`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_248`'.format(value))

        self._data["Temperature 248"] = value

    @property
    def temperature_249(self):
        """Get temperature_249

        Returns:
            float: the value of `temperature_249` or None if not set
        """
        return self._data["Temperature 249"]

    @temperature_249.setter
    def temperature_249(self, value=None):
        """  Corresponds to IDD Field `temperature_249`

        Args:
            value (float): value for IDD Field `temperature_249`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_249`'.format(value))

        self._data["Temperature 249"] = value

    @property
    def temperature_250(self):
        """Get temperature_250

        Returns:
            float: the value of `temperature_250` or None if not set
        """
        return self._data["Temperature 250"]

    @temperature_250.setter
    def temperature_250(self, value=None):
        """  Corresponds to IDD Field `temperature_250`

        Args:
            value (float): value for IDD Field `temperature_250`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_250`'.format(value))

        self._data["Temperature 250"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.temperature_1))
        out.append(self._to_str(self.temperature_2))
        out.append(self._to_str(self.temperature_3))
        out.append(self._to_str(self.temperature_4))
        out.append(self._to_str(self.temperature_5))
        out.append(self._to_str(self.temperature_6))
        out.append(self._to_str(self.temperature_7))
        out.append(self._to_str(self.temperature_8))
        out.append(self._to_str(self.temperature_9))
        out.append(self._to_str(self.temperature_10))
        out.append(self._to_str(self.temperature_11))
        out.append(self._to_str(self.temperature_12))
        out.append(self._to_str(self.temperature_13))
        out.append(self._to_str(self.temperature_14))
        out.append(self._to_str(self.temperature_15))
        out.append(self._to_str(self.temperature_16))
        out.append(self._to_str(self.temperature_17))
        out.append(self._to_str(self.temperature_18))
        out.append(self._to_str(self.temperature_19))
        out.append(self._to_str(self.temperature_20))
        out.append(self._to_str(self.temperature_21))
        out.append(self._to_str(self.temperature_22))
        out.append(self._to_str(self.temperature_23))
        out.append(self._to_str(self.temperature_24))
        out.append(self._to_str(self.temperature_25))
        out.append(self._to_str(self.temperature_26))
        out.append(self._to_str(self.temperature_27))
        out.append(self._to_str(self.temperature_28))
        out.append(self._to_str(self.temperature_29))
        out.append(self._to_str(self.temperature_30))
        out.append(self._to_str(self.temperature_31))
        out.append(self._to_str(self.temperature_32))
        out.append(self._to_str(self.temperature_33))
        out.append(self._to_str(self.temperature_34))
        out.append(self._to_str(self.temperature_35))
        out.append(self._to_str(self.temperature_36))
        out.append(self._to_str(self.temperature_37))
        out.append(self._to_str(self.temperature_38))
        out.append(self._to_str(self.temperature_39))
        out.append(self._to_str(self.temperature_40))
        out.append(self._to_str(self.temperature_41))
        out.append(self._to_str(self.temperature_42))
        out.append(self._to_str(self.temperature_43))
        out.append(self._to_str(self.temperature_44))
        out.append(self._to_str(self.temperature_45))
        out.append(self._to_str(self.temperature_46))
        out.append(self._to_str(self.temperature_47))
        out.append(self._to_str(self.temperature_48))
        out.append(self._to_str(self.temperature_49))
        out.append(self._to_str(self.temperature_50))
        out.append(self._to_str(self.temperature_51))
        out.append(self._to_str(self.temperature_52))
        out.append(self._to_str(self.temperature_53))
        out.append(self._to_str(self.temperature_54))
        out.append(self._to_str(self.temperature_55))
        out.append(self._to_str(self.temperature_56))
        out.append(self._to_str(self.temperature_57))
        out.append(self._to_str(self.temperature_58))
        out.append(self._to_str(self.temperature_59))
        out.append(self._to_str(self.temperature_60))
        out.append(self._to_str(self.temperature_61))
        out.append(self._to_str(self.temperature_62))
        out.append(self._to_str(self.temperature_63))
        out.append(self._to_str(self.temperature_64))
        out.append(self._to_str(self.temperature_65))
        out.append(self._to_str(self.temperature_66))
        out.append(self._to_str(self.temperature_67))
        out.append(self._to_str(self.temperature_68))
        out.append(self._to_str(self.temperature_69))
        out.append(self._to_str(self.temperature_70))
        out.append(self._to_str(self.temperature_71))
        out.append(self._to_str(self.temperature_72))
        out.append(self._to_str(self.temperature_73))
        out.append(self._to_str(self.temperature_74))
        out.append(self._to_str(self.temperature_75))
        out.append(self._to_str(self.temperature_76))
        out.append(self._to_str(self.temperature_77))
        out.append(self._to_str(self.temperature_78))
        out.append(self._to_str(self.temperature_79))
        out.append(self._to_str(self.temperature_80))
        out.append(self._to_str(self.temperature_81))
        out.append(self._to_str(self.temperature_82))
        out.append(self._to_str(self.temperature_83))
        out.append(self._to_str(self.temperature_84))
        out.append(self._to_str(self.temperature_85))
        out.append(self._to_str(self.temperature_86))
        out.append(self._to_str(self.temperature_87))
        out.append(self._to_str(self.temperature_88))
        out.append(self._to_str(self.temperature_89))
        out.append(self._to_str(self.temperature_90))
        out.append(self._to_str(self.temperature_91))
        out.append(self._to_str(self.temperature_92))
        out.append(self._to_str(self.temperature_93))
        out.append(self._to_str(self.temperature_94))
        out.append(self._to_str(self.temperature_95))
        out.append(self._to_str(self.temperature_96))
        out.append(self._to_str(self.temperature_97))
        out.append(self._to_str(self.temperature_98))
        out.append(self._to_str(self.temperature_99))
        out.append(self._to_str(self.temperature_100))
        out.append(self._to_str(self.temperature_101))
        out.append(self._to_str(self.temperature_102))
        out.append(self._to_str(self.temperature_103))
        out.append(self._to_str(self.temperature_104))
        out.append(self._to_str(self.temperature_105))
        out.append(self._to_str(self.temperature_106))
        out.append(self._to_str(self.temperature_107))
        out.append(self._to_str(self.temperature_108))
        out.append(self._to_str(self.temperature_109))
        out.append(self._to_str(self.temperature_110))
        out.append(self._to_str(self.temperature_111))
        out.append(self._to_str(self.temperature_112))
        out.append(self._to_str(self.temperature_113))
        out.append(self._to_str(self.temperature_114))
        out.append(self._to_str(self.temperature_115))
        out.append(self._to_str(self.temperature_116))
        out.append(self._to_str(self.temperature_117))
        out.append(self._to_str(self.temperature_118))
        out.append(self._to_str(self.temperature_119))
        out.append(self._to_str(self.temperature_120))
        out.append(self._to_str(self.temperature_121))
        out.append(self._to_str(self.temperature_122))
        out.append(self._to_str(self.temperature_123))
        out.append(self._to_str(self.temperature_124))
        out.append(self._to_str(self.temperature_125))
        out.append(self._to_str(self.temperature_126))
        out.append(self._to_str(self.temperature_127))
        out.append(self._to_str(self.temperature_128))
        out.append(self._to_str(self.temperature_129))
        out.append(self._to_str(self.temperature_130))
        out.append(self._to_str(self.temperature_131))
        out.append(self._to_str(self.temperature_132))
        out.append(self._to_str(self.temperature_133))
        out.append(self._to_str(self.temperature_134))
        out.append(self._to_str(self.temperature_135))
        out.append(self._to_str(self.temperature_136))
        out.append(self._to_str(self.temperature_137))
        out.append(self._to_str(self.temperature_138))
        out.append(self._to_str(self.temperature_139))
        out.append(self._to_str(self.temperature_140))
        out.append(self._to_str(self.temperature_141))
        out.append(self._to_str(self.temperature_142))
        out.append(self._to_str(self.temperature_143))
        out.append(self._to_str(self.temperature_144))
        out.append(self._to_str(self.temperature_145))
        out.append(self._to_str(self.temperature_146))
        out.append(self._to_str(self.temperature_147))
        out.append(self._to_str(self.temperature_148))
        out.append(self._to_str(self.temperature_149))
        out.append(self._to_str(self.temperature_150))
        out.append(self._to_str(self.temperature_151))
        out.append(self._to_str(self.temperature_152))
        out.append(self._to_str(self.temperature_153))
        out.append(self._to_str(self.temperature_154))
        out.append(self._to_str(self.temperature_155))
        out.append(self._to_str(self.temperature_156))
        out.append(self._to_str(self.temperature_157))
        out.append(self._to_str(self.temperature_158))
        out.append(self._to_str(self.temperature_159))
        out.append(self._to_str(self.temperature_160))
        out.append(self._to_str(self.temperature_161))
        out.append(self._to_str(self.temperature_162))
        out.append(self._to_str(self.temperature_163))
        out.append(self._to_str(self.temperature_164))
        out.append(self._to_str(self.temperature_165))
        out.append(self._to_str(self.temperature_166))
        out.append(self._to_str(self.temperature_167))
        out.append(self._to_str(self.temperature_168))
        out.append(self._to_str(self.temperature_169))
        out.append(self._to_str(self.temperature_170))
        out.append(self._to_str(self.temperature_171))
        out.append(self._to_str(self.temperature_172))
        out.append(self._to_str(self.temperature_173))
        out.append(self._to_str(self.temperature_174))
        out.append(self._to_str(self.temperature_175))
        out.append(self._to_str(self.temperature_176))
        out.append(self._to_str(self.temperature_177))
        out.append(self._to_str(self.temperature_178))
        out.append(self._to_str(self.temperature_179))
        out.append(self._to_str(self.temperature_180))
        out.append(self._to_str(self.temperature_181))
        out.append(self._to_str(self.temperature_182))
        out.append(self._to_str(self.temperature_183))
        out.append(self._to_str(self.temperature_184))
        out.append(self._to_str(self.temperature_185))
        out.append(self._to_str(self.temperature_186))
        out.append(self._to_str(self.temperature_187))
        out.append(self._to_str(self.temperature_188))
        out.append(self._to_str(self.temperature_189))
        out.append(self._to_str(self.temperature_190))
        out.append(self._to_str(self.temperature_191))
        out.append(self._to_str(self.temperature_192))
        out.append(self._to_str(self.temperature_193))
        out.append(self._to_str(self.temperature_194))
        out.append(self._to_str(self.temperature_195))
        out.append(self._to_str(self.temperature_196))
        out.append(self._to_str(self.temperature_197))
        out.append(self._to_str(self.temperature_198))
        out.append(self._to_str(self.temperature_199))
        out.append(self._to_str(self.temperature_200))
        out.append(self._to_str(self.temperature_201))
        out.append(self._to_str(self.temperature_202))
        out.append(self._to_str(self.temperature_203))
        out.append(self._to_str(self.temperature_204))
        out.append(self._to_str(self.temperature_205))
        out.append(self._to_str(self.temperature_206))
        out.append(self._to_str(self.temperature_207))
        out.append(self._to_str(self.temperature_208))
        out.append(self._to_str(self.temperature_209))
        out.append(self._to_str(self.temperature_210))
        out.append(self._to_str(self.temperature_211))
        out.append(self._to_str(self.temperature_212))
        out.append(self._to_str(self.temperature_213))
        out.append(self._to_str(self.temperature_214))
        out.append(self._to_str(self.temperature_215))
        out.append(self._to_str(self.temperature_216))
        out.append(self._to_str(self.temperature_217))
        out.append(self._to_str(self.temperature_218))
        out.append(self._to_str(self.temperature_219))
        out.append(self._to_str(self.temperature_220))
        out.append(self._to_str(self.temperature_221))
        out.append(self._to_str(self.temperature_222))
        out.append(self._to_str(self.temperature_223))
        out.append(self._to_str(self.temperature_224))
        out.append(self._to_str(self.temperature_225))
        out.append(self._to_str(self.temperature_226))
        out.append(self._to_str(self.temperature_227))
        out.append(self._to_str(self.temperature_228))
        out.append(self._to_str(self.temperature_229))
        out.append(self._to_str(self.temperature_230))
        out.append(self._to_str(self.temperature_231))
        out.append(self._to_str(self.temperature_232))
        out.append(self._to_str(self.temperature_233))
        out.append(self._to_str(self.temperature_234))
        out.append(self._to_str(self.temperature_235))
        out.append(self._to_str(self.temperature_236))
        out.append(self._to_str(self.temperature_237))
        out.append(self._to_str(self.temperature_238))
        out.append(self._to_str(self.temperature_239))
        out.append(self._to_str(self.temperature_240))
        out.append(self._to_str(self.temperature_241))
        out.append(self._to_str(self.temperature_242))
        out.append(self._to_str(self.temperature_243))
        out.append(self._to_str(self.temperature_244))
        out.append(self._to_str(self.temperature_245))
        out.append(self._to_str(self.temperature_246))
        out.append(self._to_str(self.temperature_247))
        out.append(self._to_str(self.temperature_248))
        out.append(self._to_str(self.temperature_249))
        out.append(self._to_str(self.temperature_250))
        return ",".join(out)

class FluidPropertiesSaturated(object):
    """ Corresponds to IDD object `FluidProperties:Saturated`
        fluid properties for the saturated region
    
    """
    internal_name = "FluidProperties:Saturated"
    field_count = 254
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `FluidProperties:Saturated`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fluid Property Type"] = None
        self._data["Fluid Phase"] = None
        self._data["Temperature Values Name"] = None
        self._data["Property Value 1"] = None
        self._data["Property Value 2"] = None
        self._data["Property Value 3"] = None
        self._data["Property Value 4"] = None
        self._data["Property Value 5"] = None
        self._data["Property Value 6"] = None
        self._data["Property Value 7"] = None
        self._data["Property Value 8"] = None
        self._data["Property Value 9"] = None
        self._data["Property Value 10"] = None
        self._data["Property Value 11"] = None
        self._data["Property Value 12"] = None
        self._data["Property Value 13"] = None
        self._data["Property Value 14"] = None
        self._data["Property Value 15"] = None
        self._data["Property Value 16"] = None
        self._data["Property Value 17"] = None
        self._data["Property Value 18"] = None
        self._data["Property Value 19"] = None
        self._data["Property Value 20"] = None
        self._data["Property Value 21"] = None
        self._data["Property Value 22"] = None
        self._data["Property Value 23"] = None
        self._data["Property Value 24"] = None
        self._data["Property Value 25"] = None
        self._data["Property Value 26"] = None
        self._data["Property Value 27"] = None
        self._data["Property Value 28"] = None
        self._data["Property Value 29"] = None
        self._data["Property Value 30"] = None
        self._data["Property Value 31"] = None
        self._data["Property Value 32"] = None
        self._data["Property Value 33"] = None
        self._data["Property Value 34"] = None
        self._data["Property Value 35"] = None
        self._data["Property Value 36"] = None
        self._data["Property Value 37"] = None
        self._data["Property Value 38"] = None
        self._data["Property Value 39"] = None
        self._data["Property Value 40"] = None
        self._data["Property Value 41"] = None
        self._data["Property Value 42"] = None
        self._data["Property Value 43"] = None
        self._data["Property Value 44"] = None
        self._data["Property Value 45"] = None
        self._data["Property Value 46"] = None
        self._data["Property Value 47"] = None
        self._data["Property Value 48"] = None
        self._data["Property Value 49"] = None
        self._data["Property Value 50"] = None
        self._data["Property Value 51"] = None
        self._data["Property Value 52"] = None
        self._data["Property Value 53"] = None
        self._data["Property Value 54"] = None
        self._data["Property Value 55"] = None
        self._data["Property Value 56"] = None
        self._data["Property Value 57"] = None
        self._data["Property Value 58"] = None
        self._data["Property Value 59"] = None
        self._data["Property Value 60"] = None
        self._data["Property Value 61"] = None
        self._data["Property Value 62"] = None
        self._data["Property Value 63"] = None
        self._data["Property Value 64"] = None
        self._data["Property Value 65"] = None
        self._data["Property Value 66"] = None
        self._data["Property Value 67"] = None
        self._data["Property Value 68"] = None
        self._data["Property Value 69"] = None
        self._data["Property Value 70"] = None
        self._data["Property Value 71"] = None
        self._data["Property Value 72"] = None
        self._data["Property Value 73"] = None
        self._data["Property Value 74"] = None
        self._data["Property Value 75"] = None
        self._data["Property Value 76"] = None
        self._data["Property Value 77"] = None
        self._data["Property Value 78"] = None
        self._data["Property Value 79"] = None
        self._data["Property Value 80"] = None
        self._data["Property Value 81"] = None
        self._data["Property Value 82"] = None
        self._data["Property Value 83"] = None
        self._data["Property Value 84"] = None
        self._data["Property Value 85"] = None
        self._data["Property Value 86"] = None
        self._data["Property Value 87"] = None
        self._data["Property Value 88"] = None
        self._data["Property Value 89"] = None
        self._data["Property Value 90"] = None
        self._data["Property Value 91"] = None
        self._data["Property Value 92"] = None
        self._data["Property Value 93"] = None
        self._data["Property Value 94"] = None
        self._data["Property Value 95"] = None
        self._data["Property Value 96"] = None
        self._data["Property Value 97"] = None
        self._data["Property Value 98"] = None
        self._data["Property Value 99"] = None
        self._data["Property Value 100"] = None
        self._data["Property Value 101"] = None
        self._data["Property Value 102"] = None
        self._data["Property Value 103"] = None
        self._data["Property Value 104"] = None
        self._data["Property Value 105"] = None
        self._data["Property Value 106"] = None
        self._data["Property Value 107"] = None
        self._data["Property Value 108"] = None
        self._data["Property Value 109"] = None
        self._data["Property Value 110"] = None
        self._data["Property Value 111"] = None
        self._data["Property Value 112"] = None
        self._data["Property Value 113"] = None
        self._data["Property Value 114"] = None
        self._data["Property Value 115"] = None
        self._data["Property Value 116"] = None
        self._data["Property Value 117"] = None
        self._data["Property Value 118"] = None
        self._data["Property Value 119"] = None
        self._data["Property Value 120"] = None
        self._data["Property Value 121"] = None
        self._data["Property Value 122"] = None
        self._data["Property Value 123"] = None
        self._data["Property Value 124"] = None
        self._data["Property Value 125"] = None
        self._data["Property Value 126"] = None
        self._data["Property Value 127"] = None
        self._data["Property Value 128"] = None
        self._data["Property Value 129"] = None
        self._data["Property Value 130"] = None
        self._data["Property Value 131"] = None
        self._data["Property Value 132"] = None
        self._data["Property Value 133"] = None
        self._data["Property Value 134"] = None
        self._data["Property Value 135"] = None
        self._data["Property Value 136"] = None
        self._data["Property Value 137"] = None
        self._data["Property Value 138"] = None
        self._data["Property Value 139"] = None
        self._data["Property Value 140"] = None
        self._data["Property Value 141"] = None
        self._data["Property Value 142"] = None
        self._data["Property Value 143"] = None
        self._data["Property Value 144"] = None
        self._data["Property Value 145"] = None
        self._data["Property Value 146"] = None
        self._data["Property Value 147"] = None
        self._data["Property Value 148"] = None
        self._data["Property Value 149"] = None
        self._data["Property Value 150"] = None
        self._data["Property Value 151"] = None
        self._data["Property Value 152"] = None
        self._data["Property Value 153"] = None
        self._data["Property Value 154"] = None
        self._data["Property Value 155"] = None
        self._data["Property Value 156"] = None
        self._data["Property Value 157"] = None
        self._data["Property Value 158"] = None
        self._data["Property Value 159"] = None
        self._data["Property Value 160"] = None
        self._data["Property Value 161"] = None
        self._data["Property Value 162"] = None
        self._data["Property Value 163"] = None
        self._data["Property Value 164"] = None
        self._data["Property Value 165"] = None
        self._data["Property Value 166"] = None
        self._data["Property Value 167"] = None
        self._data["Property Value 168"] = None
        self._data["Property Value 169"] = None
        self._data["Property Value 170"] = None
        self._data["Property Value 171"] = None
        self._data["Property Value 172"] = None
        self._data["Property Value 173"] = None
        self._data["Property Value 174"] = None
        self._data["Property Value 175"] = None
        self._data["Property Value 176"] = None
        self._data["Property Value 177"] = None
        self._data["Property Value 178"] = None
        self._data["Property Value 179"] = None
        self._data["Property Value 180"] = None
        self._data["Property Value 181"] = None
        self._data["Property Value 182"] = None
        self._data["Property Value 183"] = None
        self._data["Property Value 184"] = None
        self._data["Property Value 185"] = None
        self._data["Property Value 186"] = None
        self._data["Property Value 187"] = None
        self._data["Property Value 188"] = None
        self._data["Property Value 189"] = None
        self._data["Property Value 190"] = None
        self._data["Property Value 191"] = None
        self._data["Property Value 192"] = None
        self._data["Property Value 193"] = None
        self._data["Property Value 194"] = None
        self._data["Property Value 195"] = None
        self._data["Property Value 196"] = None
        self._data["Property Value 197"] = None
        self._data["Property Value 198"] = None
        self._data["Property Value 199"] = None
        self._data["Property Value 200"] = None
        self._data["Property Value 201"] = None
        self._data["Property Value 202"] = None
        self._data["Property Value 203"] = None
        self._data["Property Value 204"] = None
        self._data["Property Value 205"] = None
        self._data["Property Value 206"] = None
        self._data["Property Value 207"] = None
        self._data["Property Value 208"] = None
        self._data["Property Value 209"] = None
        self._data["Property Value 210"] = None
        self._data["Property Value 211"] = None
        self._data["Property Value 212"] = None
        self._data["Property Value 213"] = None
        self._data["Property Value 214"] = None
        self._data["Property Value 215"] = None
        self._data["Property Value 216"] = None
        self._data["Property Value 217"] = None
        self._data["Property Value 218"] = None
        self._data["Property Value 219"] = None
        self._data["Property Value 220"] = None
        self._data["Property Value 221"] = None
        self._data["Property Value 222"] = None
        self._data["Property Value 223"] = None
        self._data["Property Value 224"] = None
        self._data["Property Value 225"] = None
        self._data["Property Value 226"] = None
        self._data["Property Value 227"] = None
        self._data["Property Value 228"] = None
        self._data["Property Value 229"] = None
        self._data["Property Value 230"] = None
        self._data["Property Value 231"] = None
        self._data["Property Value 232"] = None
        self._data["Property Value 233"] = None
        self._data["Property Value 234"] = None
        self._data["Property Value 235"] = None
        self._data["Property Value 236"] = None
        self._data["Property Value 237"] = None
        self._data["Property Value 238"] = None
        self._data["Property Value 239"] = None
        self._data["Property Value 240"] = None
        self._data["Property Value 241"] = None
        self._data["Property Value 242"] = None
        self._data["Property Value 243"] = None
        self._data["Property Value 244"] = None
        self._data["Property Value 245"] = None
        self._data["Property Value 246"] = None
        self._data["Property Value 247"] = None
        self._data["Property Value 248"] = None
        self._data["Property Value 249"] = None
        self._data["Property Value 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_property_type = None
        else:
            self.fluid_property_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_phase = None
        else:
            self.fluid_phase = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_values_name = None
        else:
            self.temperature_values_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_1 = None
        else:
            self.property_value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_2 = None
        else:
            self.property_value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_3 = None
        else:
            self.property_value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_4 = None
        else:
            self.property_value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_5 = None
        else:
            self.property_value_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_6 = None
        else:
            self.property_value_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_7 = None
        else:
            self.property_value_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_8 = None
        else:
            self.property_value_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_9 = None
        else:
            self.property_value_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_10 = None
        else:
            self.property_value_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_11 = None
        else:
            self.property_value_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_12 = None
        else:
            self.property_value_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_13 = None
        else:
            self.property_value_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_14 = None
        else:
            self.property_value_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_15 = None
        else:
            self.property_value_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_16 = None
        else:
            self.property_value_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_17 = None
        else:
            self.property_value_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_18 = None
        else:
            self.property_value_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_19 = None
        else:
            self.property_value_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_20 = None
        else:
            self.property_value_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_21 = None
        else:
            self.property_value_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_22 = None
        else:
            self.property_value_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_23 = None
        else:
            self.property_value_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_24 = None
        else:
            self.property_value_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_25 = None
        else:
            self.property_value_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_26 = None
        else:
            self.property_value_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_27 = None
        else:
            self.property_value_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_28 = None
        else:
            self.property_value_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_29 = None
        else:
            self.property_value_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_30 = None
        else:
            self.property_value_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_31 = None
        else:
            self.property_value_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_32 = None
        else:
            self.property_value_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_33 = None
        else:
            self.property_value_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_34 = None
        else:
            self.property_value_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_35 = None
        else:
            self.property_value_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_36 = None
        else:
            self.property_value_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_37 = None
        else:
            self.property_value_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_38 = None
        else:
            self.property_value_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_39 = None
        else:
            self.property_value_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_40 = None
        else:
            self.property_value_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_41 = None
        else:
            self.property_value_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_42 = None
        else:
            self.property_value_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_43 = None
        else:
            self.property_value_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_44 = None
        else:
            self.property_value_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_45 = None
        else:
            self.property_value_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_46 = None
        else:
            self.property_value_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_47 = None
        else:
            self.property_value_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_48 = None
        else:
            self.property_value_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_49 = None
        else:
            self.property_value_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_50 = None
        else:
            self.property_value_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_51 = None
        else:
            self.property_value_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_52 = None
        else:
            self.property_value_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_53 = None
        else:
            self.property_value_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_54 = None
        else:
            self.property_value_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_55 = None
        else:
            self.property_value_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_56 = None
        else:
            self.property_value_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_57 = None
        else:
            self.property_value_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_58 = None
        else:
            self.property_value_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_59 = None
        else:
            self.property_value_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_60 = None
        else:
            self.property_value_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_61 = None
        else:
            self.property_value_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_62 = None
        else:
            self.property_value_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_63 = None
        else:
            self.property_value_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_64 = None
        else:
            self.property_value_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_65 = None
        else:
            self.property_value_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_66 = None
        else:
            self.property_value_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_67 = None
        else:
            self.property_value_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_68 = None
        else:
            self.property_value_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_69 = None
        else:
            self.property_value_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_70 = None
        else:
            self.property_value_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_71 = None
        else:
            self.property_value_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_72 = None
        else:
            self.property_value_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_73 = None
        else:
            self.property_value_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_74 = None
        else:
            self.property_value_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_75 = None
        else:
            self.property_value_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_76 = None
        else:
            self.property_value_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_77 = None
        else:
            self.property_value_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_78 = None
        else:
            self.property_value_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_79 = None
        else:
            self.property_value_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_80 = None
        else:
            self.property_value_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_81 = None
        else:
            self.property_value_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_82 = None
        else:
            self.property_value_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_83 = None
        else:
            self.property_value_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_84 = None
        else:
            self.property_value_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_85 = None
        else:
            self.property_value_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_86 = None
        else:
            self.property_value_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_87 = None
        else:
            self.property_value_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_88 = None
        else:
            self.property_value_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_89 = None
        else:
            self.property_value_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_90 = None
        else:
            self.property_value_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_91 = None
        else:
            self.property_value_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_92 = None
        else:
            self.property_value_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_93 = None
        else:
            self.property_value_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_94 = None
        else:
            self.property_value_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_95 = None
        else:
            self.property_value_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_96 = None
        else:
            self.property_value_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_97 = None
        else:
            self.property_value_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_98 = None
        else:
            self.property_value_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_99 = None
        else:
            self.property_value_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_100 = None
        else:
            self.property_value_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_101 = None
        else:
            self.property_value_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_102 = None
        else:
            self.property_value_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_103 = None
        else:
            self.property_value_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_104 = None
        else:
            self.property_value_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_105 = None
        else:
            self.property_value_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_106 = None
        else:
            self.property_value_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_107 = None
        else:
            self.property_value_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_108 = None
        else:
            self.property_value_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_109 = None
        else:
            self.property_value_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_110 = None
        else:
            self.property_value_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_111 = None
        else:
            self.property_value_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_112 = None
        else:
            self.property_value_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_113 = None
        else:
            self.property_value_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_114 = None
        else:
            self.property_value_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_115 = None
        else:
            self.property_value_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_116 = None
        else:
            self.property_value_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_117 = None
        else:
            self.property_value_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_118 = None
        else:
            self.property_value_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_119 = None
        else:
            self.property_value_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_120 = None
        else:
            self.property_value_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_121 = None
        else:
            self.property_value_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_122 = None
        else:
            self.property_value_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_123 = None
        else:
            self.property_value_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_124 = None
        else:
            self.property_value_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_125 = None
        else:
            self.property_value_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_126 = None
        else:
            self.property_value_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_127 = None
        else:
            self.property_value_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_128 = None
        else:
            self.property_value_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_129 = None
        else:
            self.property_value_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_130 = None
        else:
            self.property_value_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_131 = None
        else:
            self.property_value_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_132 = None
        else:
            self.property_value_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_133 = None
        else:
            self.property_value_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_134 = None
        else:
            self.property_value_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_135 = None
        else:
            self.property_value_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_136 = None
        else:
            self.property_value_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_137 = None
        else:
            self.property_value_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_138 = None
        else:
            self.property_value_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_139 = None
        else:
            self.property_value_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_140 = None
        else:
            self.property_value_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_141 = None
        else:
            self.property_value_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_142 = None
        else:
            self.property_value_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_143 = None
        else:
            self.property_value_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_144 = None
        else:
            self.property_value_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_145 = None
        else:
            self.property_value_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_146 = None
        else:
            self.property_value_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_147 = None
        else:
            self.property_value_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_148 = None
        else:
            self.property_value_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_149 = None
        else:
            self.property_value_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_150 = None
        else:
            self.property_value_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_151 = None
        else:
            self.property_value_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_152 = None
        else:
            self.property_value_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_153 = None
        else:
            self.property_value_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_154 = None
        else:
            self.property_value_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_155 = None
        else:
            self.property_value_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_156 = None
        else:
            self.property_value_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_157 = None
        else:
            self.property_value_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_158 = None
        else:
            self.property_value_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_159 = None
        else:
            self.property_value_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_160 = None
        else:
            self.property_value_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_161 = None
        else:
            self.property_value_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_162 = None
        else:
            self.property_value_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_163 = None
        else:
            self.property_value_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_164 = None
        else:
            self.property_value_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_165 = None
        else:
            self.property_value_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_166 = None
        else:
            self.property_value_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_167 = None
        else:
            self.property_value_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_168 = None
        else:
            self.property_value_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_169 = None
        else:
            self.property_value_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_170 = None
        else:
            self.property_value_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_171 = None
        else:
            self.property_value_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_172 = None
        else:
            self.property_value_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_173 = None
        else:
            self.property_value_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_174 = None
        else:
            self.property_value_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_175 = None
        else:
            self.property_value_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_176 = None
        else:
            self.property_value_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_177 = None
        else:
            self.property_value_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_178 = None
        else:
            self.property_value_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_179 = None
        else:
            self.property_value_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_180 = None
        else:
            self.property_value_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_181 = None
        else:
            self.property_value_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_182 = None
        else:
            self.property_value_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_183 = None
        else:
            self.property_value_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_184 = None
        else:
            self.property_value_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_185 = None
        else:
            self.property_value_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_186 = None
        else:
            self.property_value_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_187 = None
        else:
            self.property_value_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_188 = None
        else:
            self.property_value_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_189 = None
        else:
            self.property_value_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_190 = None
        else:
            self.property_value_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_191 = None
        else:
            self.property_value_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_192 = None
        else:
            self.property_value_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_193 = None
        else:
            self.property_value_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_194 = None
        else:
            self.property_value_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_195 = None
        else:
            self.property_value_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_196 = None
        else:
            self.property_value_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_197 = None
        else:
            self.property_value_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_198 = None
        else:
            self.property_value_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_199 = None
        else:
            self.property_value_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_200 = None
        else:
            self.property_value_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_201 = None
        else:
            self.property_value_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_202 = None
        else:
            self.property_value_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_203 = None
        else:
            self.property_value_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_204 = None
        else:
            self.property_value_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_205 = None
        else:
            self.property_value_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_206 = None
        else:
            self.property_value_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_207 = None
        else:
            self.property_value_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_208 = None
        else:
            self.property_value_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_209 = None
        else:
            self.property_value_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_210 = None
        else:
            self.property_value_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_211 = None
        else:
            self.property_value_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_212 = None
        else:
            self.property_value_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_213 = None
        else:
            self.property_value_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_214 = None
        else:
            self.property_value_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_215 = None
        else:
            self.property_value_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_216 = None
        else:
            self.property_value_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_217 = None
        else:
            self.property_value_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_218 = None
        else:
            self.property_value_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_219 = None
        else:
            self.property_value_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_220 = None
        else:
            self.property_value_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_221 = None
        else:
            self.property_value_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_222 = None
        else:
            self.property_value_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_223 = None
        else:
            self.property_value_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_224 = None
        else:
            self.property_value_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_225 = None
        else:
            self.property_value_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_226 = None
        else:
            self.property_value_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_227 = None
        else:
            self.property_value_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_228 = None
        else:
            self.property_value_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_229 = None
        else:
            self.property_value_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_230 = None
        else:
            self.property_value_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_231 = None
        else:
            self.property_value_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_232 = None
        else:
            self.property_value_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_233 = None
        else:
            self.property_value_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_234 = None
        else:
            self.property_value_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_235 = None
        else:
            self.property_value_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_236 = None
        else:
            self.property_value_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_237 = None
        else:
            self.property_value_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_238 = None
        else:
            self.property_value_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_239 = None
        else:
            self.property_value_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_240 = None
        else:
            self.property_value_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_241 = None
        else:
            self.property_value_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_242 = None
        else:
            self.property_value_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_243 = None
        else:
            self.property_value_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_244 = None
        else:
            self.property_value_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_245 = None
        else:
            self.property_value_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_246 = None
        else:
            self.property_value_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_247 = None
        else:
            self.property_value_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_248 = None
        else:
            self.property_value_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_249 = None
        else:
            self.property_value_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_250 = None
        else:
            self.property_value_250 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fluid_property_type(self):
        """Get fluid_property_type

        Returns:
            str: the value of `fluid_property_type` or None if not set
        """
        return self._data["Fluid Property Type"]

    @fluid_property_type.setter
    def fluid_property_type(self, value=None):
        """  Corresponds to IDD Field `fluid_property_type`
        Enthalpy Units are J/kg
        Density Units are kg/m3
        SpecificHeat Units are J/kg-K
        Pressure Units are Pa

        Args:
            value (str): value for IDD Field `fluid_property_type`
                Accepted values are:
                      - Enthalpy     ! Units are J/kg
                      - Density      ! Units are kg/m3
                      - SpecificHeat ! Units are J/kg-K
                      - Pressure     ! Units are Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_property_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_property_type`')
            vals = set()
            vals.add("Enthalpy     ! Units are J/kg")
            vals.add("Density      ! Units are kg/m3")
            vals.add("SpecificHeat ! Units are J/kg-K")
            vals.add("Pressure     ! Units are Pa")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_property_type`'.format(value))

        self._data["Fluid Property Type"] = value

    @property
    def fluid_phase(self):
        """Get fluid_phase

        Returns:
            str: the value of `fluid_phase` or None if not set
        """
        return self._data["Fluid Phase"]

    @fluid_phase.setter
    def fluid_phase(self, value=None):
        """  Corresponds to IDD Field `fluid_phase`
        Fluid=saturated fluid
        FluidGas=saturated vapor

        Args:
            value (str): value for IDD Field `fluid_phase`
                Accepted values are:
                      - Fluid        ! saturated fluid
                      - FluidGas     ! saturated vapor
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_phase`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_phase`')
            vals = set()
            vals.add("Fluid        ! saturated fluid")
            vals.add("FluidGas     ! saturated vapor")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_phase`'.format(value))

        self._data["Fluid Phase"] = value

    @property
    def temperature_values_name(self):
        """Get temperature_values_name

        Returns:
            str: the value of `temperature_values_name` or None if not set
        """
        return self._data["Temperature Values Name"]

    @temperature_values_name.setter
    def temperature_values_name(self, value=None):
        """  Corresponds to IDD Field `temperature_values_name`
        Enter the name of a FluidProperties:Temperatures object.

        Args:
            value (str): value for IDD Field `temperature_values_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_values_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_values_name`')

        self._data["Temperature Values Name"] = value

    @property
    def property_value_1(self):
        """Get property_value_1

        Returns:
            float: the value of `property_value_1` or None if not set
        """
        return self._data["Property Value 1"]

    @property_value_1.setter
    def property_value_1(self, value=None):
        """  Corresponds to IDD Field `property_value_1`

        Args:
            value (float): value for IDD Field `property_value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_1`'.format(value))

        self._data["Property Value 1"] = value

    @property
    def property_value_2(self):
        """Get property_value_2

        Returns:
            float: the value of `property_value_2` or None if not set
        """
        return self._data["Property Value 2"]

    @property_value_2.setter
    def property_value_2(self, value=None):
        """  Corresponds to IDD Field `property_value_2`

        Args:
            value (float): value for IDD Field `property_value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_2`'.format(value))

        self._data["Property Value 2"] = value

    @property
    def property_value_3(self):
        """Get property_value_3

        Returns:
            float: the value of `property_value_3` or None if not set
        """
        return self._data["Property Value 3"]

    @property_value_3.setter
    def property_value_3(self, value=None):
        """  Corresponds to IDD Field `property_value_3`

        Args:
            value (float): value for IDD Field `property_value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_3`'.format(value))

        self._data["Property Value 3"] = value

    @property
    def property_value_4(self):
        """Get property_value_4

        Returns:
            float: the value of `property_value_4` or None if not set
        """
        return self._data["Property Value 4"]

    @property_value_4.setter
    def property_value_4(self, value=None):
        """  Corresponds to IDD Field `property_value_4`

        Args:
            value (float): value for IDD Field `property_value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_4`'.format(value))

        self._data["Property Value 4"] = value

    @property
    def property_value_5(self):
        """Get property_value_5

        Returns:
            float: the value of `property_value_5` or None if not set
        """
        return self._data["Property Value 5"]

    @property_value_5.setter
    def property_value_5(self, value=None):
        """  Corresponds to IDD Field `property_value_5`

        Args:
            value (float): value for IDD Field `property_value_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_5`'.format(value))

        self._data["Property Value 5"] = value

    @property
    def property_value_6(self):
        """Get property_value_6

        Returns:
            float: the value of `property_value_6` or None if not set
        """
        return self._data["Property Value 6"]

    @property_value_6.setter
    def property_value_6(self, value=None):
        """  Corresponds to IDD Field `property_value_6`

        Args:
            value (float): value for IDD Field `property_value_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_6`'.format(value))

        self._data["Property Value 6"] = value

    @property
    def property_value_7(self):
        """Get property_value_7

        Returns:
            float: the value of `property_value_7` or None if not set
        """
        return self._data["Property Value 7"]

    @property_value_7.setter
    def property_value_7(self, value=None):
        """  Corresponds to IDD Field `property_value_7`

        Args:
            value (float): value for IDD Field `property_value_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_7`'.format(value))

        self._data["Property Value 7"] = value

    @property
    def property_value_8(self):
        """Get property_value_8

        Returns:
            float: the value of `property_value_8` or None if not set
        """
        return self._data["Property Value 8"]

    @property_value_8.setter
    def property_value_8(self, value=None):
        """  Corresponds to IDD Field `property_value_8`

        Args:
            value (float): value for IDD Field `property_value_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_8`'.format(value))

        self._data["Property Value 8"] = value

    @property
    def property_value_9(self):
        """Get property_value_9

        Returns:
            float: the value of `property_value_9` or None if not set
        """
        return self._data["Property Value 9"]

    @property_value_9.setter
    def property_value_9(self, value=None):
        """  Corresponds to IDD Field `property_value_9`

        Args:
            value (float): value for IDD Field `property_value_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_9`'.format(value))

        self._data["Property Value 9"] = value

    @property
    def property_value_10(self):
        """Get property_value_10

        Returns:
            float: the value of `property_value_10` or None if not set
        """
        return self._data["Property Value 10"]

    @property_value_10.setter
    def property_value_10(self, value=None):
        """  Corresponds to IDD Field `property_value_10`

        Args:
            value (float): value for IDD Field `property_value_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_10`'.format(value))

        self._data["Property Value 10"] = value

    @property
    def property_value_11(self):
        """Get property_value_11

        Returns:
            float: the value of `property_value_11` or None if not set
        """
        return self._data["Property Value 11"]

    @property_value_11.setter
    def property_value_11(self, value=None):
        """  Corresponds to IDD Field `property_value_11`

        Args:
            value (float): value for IDD Field `property_value_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_11`'.format(value))

        self._data["Property Value 11"] = value

    @property
    def property_value_12(self):
        """Get property_value_12

        Returns:
            float: the value of `property_value_12` or None if not set
        """
        return self._data["Property Value 12"]

    @property_value_12.setter
    def property_value_12(self, value=None):
        """  Corresponds to IDD Field `property_value_12`

        Args:
            value (float): value for IDD Field `property_value_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_12`'.format(value))

        self._data["Property Value 12"] = value

    @property
    def property_value_13(self):
        """Get property_value_13

        Returns:
            float: the value of `property_value_13` or None if not set
        """
        return self._data["Property Value 13"]

    @property_value_13.setter
    def property_value_13(self, value=None):
        """  Corresponds to IDD Field `property_value_13`

        Args:
            value (float): value for IDD Field `property_value_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_13`'.format(value))

        self._data["Property Value 13"] = value

    @property
    def property_value_14(self):
        """Get property_value_14

        Returns:
            float: the value of `property_value_14` or None if not set
        """
        return self._data["Property Value 14"]

    @property_value_14.setter
    def property_value_14(self, value=None):
        """  Corresponds to IDD Field `property_value_14`

        Args:
            value (float): value for IDD Field `property_value_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_14`'.format(value))

        self._data["Property Value 14"] = value

    @property
    def property_value_15(self):
        """Get property_value_15

        Returns:
            float: the value of `property_value_15` or None if not set
        """
        return self._data["Property Value 15"]

    @property_value_15.setter
    def property_value_15(self, value=None):
        """  Corresponds to IDD Field `property_value_15`

        Args:
            value (float): value for IDD Field `property_value_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_15`'.format(value))

        self._data["Property Value 15"] = value

    @property
    def property_value_16(self):
        """Get property_value_16

        Returns:
            float: the value of `property_value_16` or None if not set
        """
        return self._data["Property Value 16"]

    @property_value_16.setter
    def property_value_16(self, value=None):
        """  Corresponds to IDD Field `property_value_16`

        Args:
            value (float): value for IDD Field `property_value_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_16`'.format(value))

        self._data["Property Value 16"] = value

    @property
    def property_value_17(self):
        """Get property_value_17

        Returns:
            float: the value of `property_value_17` or None if not set
        """
        return self._data["Property Value 17"]

    @property_value_17.setter
    def property_value_17(self, value=None):
        """  Corresponds to IDD Field `property_value_17`

        Args:
            value (float): value for IDD Field `property_value_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_17`'.format(value))

        self._data["Property Value 17"] = value

    @property
    def property_value_18(self):
        """Get property_value_18

        Returns:
            float: the value of `property_value_18` or None if not set
        """
        return self._data["Property Value 18"]

    @property_value_18.setter
    def property_value_18(self, value=None):
        """  Corresponds to IDD Field `property_value_18`

        Args:
            value (float): value for IDD Field `property_value_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_18`'.format(value))

        self._data["Property Value 18"] = value

    @property
    def property_value_19(self):
        """Get property_value_19

        Returns:
            float: the value of `property_value_19` or None if not set
        """
        return self._data["Property Value 19"]

    @property_value_19.setter
    def property_value_19(self, value=None):
        """  Corresponds to IDD Field `property_value_19`

        Args:
            value (float): value for IDD Field `property_value_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_19`'.format(value))

        self._data["Property Value 19"] = value

    @property
    def property_value_20(self):
        """Get property_value_20

        Returns:
            float: the value of `property_value_20` or None if not set
        """
        return self._data["Property Value 20"]

    @property_value_20.setter
    def property_value_20(self, value=None):
        """  Corresponds to IDD Field `property_value_20`

        Args:
            value (float): value for IDD Field `property_value_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_20`'.format(value))

        self._data["Property Value 20"] = value

    @property
    def property_value_21(self):
        """Get property_value_21

        Returns:
            float: the value of `property_value_21` or None if not set
        """
        return self._data["Property Value 21"]

    @property_value_21.setter
    def property_value_21(self, value=None):
        """  Corresponds to IDD Field `property_value_21`

        Args:
            value (float): value for IDD Field `property_value_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_21`'.format(value))

        self._data["Property Value 21"] = value

    @property
    def property_value_22(self):
        """Get property_value_22

        Returns:
            float: the value of `property_value_22` or None if not set
        """
        return self._data["Property Value 22"]

    @property_value_22.setter
    def property_value_22(self, value=None):
        """  Corresponds to IDD Field `property_value_22`

        Args:
            value (float): value for IDD Field `property_value_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_22`'.format(value))

        self._data["Property Value 22"] = value

    @property
    def property_value_23(self):
        """Get property_value_23

        Returns:
            float: the value of `property_value_23` or None if not set
        """
        return self._data["Property Value 23"]

    @property_value_23.setter
    def property_value_23(self, value=None):
        """  Corresponds to IDD Field `property_value_23`

        Args:
            value (float): value for IDD Field `property_value_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_23`'.format(value))

        self._data["Property Value 23"] = value

    @property
    def property_value_24(self):
        """Get property_value_24

        Returns:
            float: the value of `property_value_24` or None if not set
        """
        return self._data["Property Value 24"]

    @property_value_24.setter
    def property_value_24(self, value=None):
        """  Corresponds to IDD Field `property_value_24`

        Args:
            value (float): value for IDD Field `property_value_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_24`'.format(value))

        self._data["Property Value 24"] = value

    @property
    def property_value_25(self):
        """Get property_value_25

        Returns:
            float: the value of `property_value_25` or None if not set
        """
        return self._data["Property Value 25"]

    @property_value_25.setter
    def property_value_25(self, value=None):
        """  Corresponds to IDD Field `property_value_25`

        Args:
            value (float): value for IDD Field `property_value_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_25`'.format(value))

        self._data["Property Value 25"] = value

    @property
    def property_value_26(self):
        """Get property_value_26

        Returns:
            float: the value of `property_value_26` or None if not set
        """
        return self._data["Property Value 26"]

    @property_value_26.setter
    def property_value_26(self, value=None):
        """  Corresponds to IDD Field `property_value_26`

        Args:
            value (float): value for IDD Field `property_value_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_26`'.format(value))

        self._data["Property Value 26"] = value

    @property
    def property_value_27(self):
        """Get property_value_27

        Returns:
            float: the value of `property_value_27` or None if not set
        """
        return self._data["Property Value 27"]

    @property_value_27.setter
    def property_value_27(self, value=None):
        """  Corresponds to IDD Field `property_value_27`

        Args:
            value (float): value for IDD Field `property_value_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_27`'.format(value))

        self._data["Property Value 27"] = value

    @property
    def property_value_28(self):
        """Get property_value_28

        Returns:
            float: the value of `property_value_28` or None if not set
        """
        return self._data["Property Value 28"]

    @property_value_28.setter
    def property_value_28(self, value=None):
        """  Corresponds to IDD Field `property_value_28`

        Args:
            value (float): value for IDD Field `property_value_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_28`'.format(value))

        self._data["Property Value 28"] = value

    @property
    def property_value_29(self):
        """Get property_value_29

        Returns:
            float: the value of `property_value_29` or None if not set
        """
        return self._data["Property Value 29"]

    @property_value_29.setter
    def property_value_29(self, value=None):
        """  Corresponds to IDD Field `property_value_29`

        Args:
            value (float): value for IDD Field `property_value_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_29`'.format(value))

        self._data["Property Value 29"] = value

    @property
    def property_value_30(self):
        """Get property_value_30

        Returns:
            float: the value of `property_value_30` or None if not set
        """
        return self._data["Property Value 30"]

    @property_value_30.setter
    def property_value_30(self, value=None):
        """  Corresponds to IDD Field `property_value_30`

        Args:
            value (float): value for IDD Field `property_value_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_30`'.format(value))

        self._data["Property Value 30"] = value

    @property
    def property_value_31(self):
        """Get property_value_31

        Returns:
            float: the value of `property_value_31` or None if not set
        """
        return self._data["Property Value 31"]

    @property_value_31.setter
    def property_value_31(self, value=None):
        """  Corresponds to IDD Field `property_value_31`

        Args:
            value (float): value for IDD Field `property_value_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_31`'.format(value))

        self._data["Property Value 31"] = value

    @property
    def property_value_32(self):
        """Get property_value_32

        Returns:
            float: the value of `property_value_32` or None if not set
        """
        return self._data["Property Value 32"]

    @property_value_32.setter
    def property_value_32(self, value=None):
        """  Corresponds to IDD Field `property_value_32`

        Args:
            value (float): value for IDD Field `property_value_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_32`'.format(value))

        self._data["Property Value 32"] = value

    @property
    def property_value_33(self):
        """Get property_value_33

        Returns:
            float: the value of `property_value_33` or None if not set
        """
        return self._data["Property Value 33"]

    @property_value_33.setter
    def property_value_33(self, value=None):
        """  Corresponds to IDD Field `property_value_33`

        Args:
            value (float): value for IDD Field `property_value_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_33`'.format(value))

        self._data["Property Value 33"] = value

    @property
    def property_value_34(self):
        """Get property_value_34

        Returns:
            float: the value of `property_value_34` or None if not set
        """
        return self._data["Property Value 34"]

    @property_value_34.setter
    def property_value_34(self, value=None):
        """  Corresponds to IDD Field `property_value_34`

        Args:
            value (float): value for IDD Field `property_value_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_34`'.format(value))

        self._data["Property Value 34"] = value

    @property
    def property_value_35(self):
        """Get property_value_35

        Returns:
            float: the value of `property_value_35` or None if not set
        """
        return self._data["Property Value 35"]

    @property_value_35.setter
    def property_value_35(self, value=None):
        """  Corresponds to IDD Field `property_value_35`

        Args:
            value (float): value for IDD Field `property_value_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_35`'.format(value))

        self._data["Property Value 35"] = value

    @property
    def property_value_36(self):
        """Get property_value_36

        Returns:
            float: the value of `property_value_36` or None if not set
        """
        return self._data["Property Value 36"]

    @property_value_36.setter
    def property_value_36(self, value=None):
        """  Corresponds to IDD Field `property_value_36`

        Args:
            value (float): value for IDD Field `property_value_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_36`'.format(value))

        self._data["Property Value 36"] = value

    @property
    def property_value_37(self):
        """Get property_value_37

        Returns:
            float: the value of `property_value_37` or None if not set
        """
        return self._data["Property Value 37"]

    @property_value_37.setter
    def property_value_37(self, value=None):
        """  Corresponds to IDD Field `property_value_37`

        Args:
            value (float): value for IDD Field `property_value_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_37`'.format(value))

        self._data["Property Value 37"] = value

    @property
    def property_value_38(self):
        """Get property_value_38

        Returns:
            float: the value of `property_value_38` or None if not set
        """
        return self._data["Property Value 38"]

    @property_value_38.setter
    def property_value_38(self, value=None):
        """  Corresponds to IDD Field `property_value_38`

        Args:
            value (float): value for IDD Field `property_value_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_38`'.format(value))

        self._data["Property Value 38"] = value

    @property
    def property_value_39(self):
        """Get property_value_39

        Returns:
            float: the value of `property_value_39` or None if not set
        """
        return self._data["Property Value 39"]

    @property_value_39.setter
    def property_value_39(self, value=None):
        """  Corresponds to IDD Field `property_value_39`

        Args:
            value (float): value for IDD Field `property_value_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_39`'.format(value))

        self._data["Property Value 39"] = value

    @property
    def property_value_40(self):
        """Get property_value_40

        Returns:
            float: the value of `property_value_40` or None if not set
        """
        return self._data["Property Value 40"]

    @property_value_40.setter
    def property_value_40(self, value=None):
        """  Corresponds to IDD Field `property_value_40`

        Args:
            value (float): value for IDD Field `property_value_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_40`'.format(value))

        self._data["Property Value 40"] = value

    @property
    def property_value_41(self):
        """Get property_value_41

        Returns:
            float: the value of `property_value_41` or None if not set
        """
        return self._data["Property Value 41"]

    @property_value_41.setter
    def property_value_41(self, value=None):
        """  Corresponds to IDD Field `property_value_41`

        Args:
            value (float): value for IDD Field `property_value_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_41`'.format(value))

        self._data["Property Value 41"] = value

    @property
    def property_value_42(self):
        """Get property_value_42

        Returns:
            float: the value of `property_value_42` or None if not set
        """
        return self._data["Property Value 42"]

    @property_value_42.setter
    def property_value_42(self, value=None):
        """  Corresponds to IDD Field `property_value_42`

        Args:
            value (float): value for IDD Field `property_value_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_42`'.format(value))

        self._data["Property Value 42"] = value

    @property
    def property_value_43(self):
        """Get property_value_43

        Returns:
            float: the value of `property_value_43` or None if not set
        """
        return self._data["Property Value 43"]

    @property_value_43.setter
    def property_value_43(self, value=None):
        """  Corresponds to IDD Field `property_value_43`

        Args:
            value (float): value for IDD Field `property_value_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_43`'.format(value))

        self._data["Property Value 43"] = value

    @property
    def property_value_44(self):
        """Get property_value_44

        Returns:
            float: the value of `property_value_44` or None if not set
        """
        return self._data["Property Value 44"]

    @property_value_44.setter
    def property_value_44(self, value=None):
        """  Corresponds to IDD Field `property_value_44`

        Args:
            value (float): value for IDD Field `property_value_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_44`'.format(value))

        self._data["Property Value 44"] = value

    @property
    def property_value_45(self):
        """Get property_value_45

        Returns:
            float: the value of `property_value_45` or None if not set
        """
        return self._data["Property Value 45"]

    @property_value_45.setter
    def property_value_45(self, value=None):
        """  Corresponds to IDD Field `property_value_45`

        Args:
            value (float): value for IDD Field `property_value_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_45`'.format(value))

        self._data["Property Value 45"] = value

    @property
    def property_value_46(self):
        """Get property_value_46

        Returns:
            float: the value of `property_value_46` or None if not set
        """
        return self._data["Property Value 46"]

    @property_value_46.setter
    def property_value_46(self, value=None):
        """  Corresponds to IDD Field `property_value_46`

        Args:
            value (float): value for IDD Field `property_value_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_46`'.format(value))

        self._data["Property Value 46"] = value

    @property
    def property_value_47(self):
        """Get property_value_47

        Returns:
            float: the value of `property_value_47` or None if not set
        """
        return self._data["Property Value 47"]

    @property_value_47.setter
    def property_value_47(self, value=None):
        """  Corresponds to IDD Field `property_value_47`

        Args:
            value (float): value for IDD Field `property_value_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_47`'.format(value))

        self._data["Property Value 47"] = value

    @property
    def property_value_48(self):
        """Get property_value_48

        Returns:
            float: the value of `property_value_48` or None if not set
        """
        return self._data["Property Value 48"]

    @property_value_48.setter
    def property_value_48(self, value=None):
        """  Corresponds to IDD Field `property_value_48`

        Args:
            value (float): value for IDD Field `property_value_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_48`'.format(value))

        self._data["Property Value 48"] = value

    @property
    def property_value_49(self):
        """Get property_value_49

        Returns:
            float: the value of `property_value_49` or None if not set
        """
        return self._data["Property Value 49"]

    @property_value_49.setter
    def property_value_49(self, value=None):
        """  Corresponds to IDD Field `property_value_49`

        Args:
            value (float): value for IDD Field `property_value_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_49`'.format(value))

        self._data["Property Value 49"] = value

    @property
    def property_value_50(self):
        """Get property_value_50

        Returns:
            float: the value of `property_value_50` or None if not set
        """
        return self._data["Property Value 50"]

    @property_value_50.setter
    def property_value_50(self, value=None):
        """  Corresponds to IDD Field `property_value_50`

        Args:
            value (float): value for IDD Field `property_value_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_50`'.format(value))

        self._data["Property Value 50"] = value

    @property
    def property_value_51(self):
        """Get property_value_51

        Returns:
            float: the value of `property_value_51` or None if not set
        """
        return self._data["Property Value 51"]

    @property_value_51.setter
    def property_value_51(self, value=None):
        """  Corresponds to IDD Field `property_value_51`

        Args:
            value (float): value for IDD Field `property_value_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_51`'.format(value))

        self._data["Property Value 51"] = value

    @property
    def property_value_52(self):
        """Get property_value_52

        Returns:
            float: the value of `property_value_52` or None if not set
        """
        return self._data["Property Value 52"]

    @property_value_52.setter
    def property_value_52(self, value=None):
        """  Corresponds to IDD Field `property_value_52`

        Args:
            value (float): value for IDD Field `property_value_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_52`'.format(value))

        self._data["Property Value 52"] = value

    @property
    def property_value_53(self):
        """Get property_value_53

        Returns:
            float: the value of `property_value_53` or None if not set
        """
        return self._data["Property Value 53"]

    @property_value_53.setter
    def property_value_53(self, value=None):
        """  Corresponds to IDD Field `property_value_53`

        Args:
            value (float): value for IDD Field `property_value_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_53`'.format(value))

        self._data["Property Value 53"] = value

    @property
    def property_value_54(self):
        """Get property_value_54

        Returns:
            float: the value of `property_value_54` or None if not set
        """
        return self._data["Property Value 54"]

    @property_value_54.setter
    def property_value_54(self, value=None):
        """  Corresponds to IDD Field `property_value_54`

        Args:
            value (float): value for IDD Field `property_value_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_54`'.format(value))

        self._data["Property Value 54"] = value

    @property
    def property_value_55(self):
        """Get property_value_55

        Returns:
            float: the value of `property_value_55` or None if not set
        """
        return self._data["Property Value 55"]

    @property_value_55.setter
    def property_value_55(self, value=None):
        """  Corresponds to IDD Field `property_value_55`

        Args:
            value (float): value for IDD Field `property_value_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_55`'.format(value))

        self._data["Property Value 55"] = value

    @property
    def property_value_56(self):
        """Get property_value_56

        Returns:
            float: the value of `property_value_56` or None if not set
        """
        return self._data["Property Value 56"]

    @property_value_56.setter
    def property_value_56(self, value=None):
        """  Corresponds to IDD Field `property_value_56`

        Args:
            value (float): value for IDD Field `property_value_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_56`'.format(value))

        self._data["Property Value 56"] = value

    @property
    def property_value_57(self):
        """Get property_value_57

        Returns:
            float: the value of `property_value_57` or None if not set
        """
        return self._data["Property Value 57"]

    @property_value_57.setter
    def property_value_57(self, value=None):
        """  Corresponds to IDD Field `property_value_57`

        Args:
            value (float): value for IDD Field `property_value_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_57`'.format(value))

        self._data["Property Value 57"] = value

    @property
    def property_value_58(self):
        """Get property_value_58

        Returns:
            float: the value of `property_value_58` or None if not set
        """
        return self._data["Property Value 58"]

    @property_value_58.setter
    def property_value_58(self, value=None):
        """  Corresponds to IDD Field `property_value_58`

        Args:
            value (float): value for IDD Field `property_value_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_58`'.format(value))

        self._data["Property Value 58"] = value

    @property
    def property_value_59(self):
        """Get property_value_59

        Returns:
            float: the value of `property_value_59` or None if not set
        """
        return self._data["Property Value 59"]

    @property_value_59.setter
    def property_value_59(self, value=None):
        """  Corresponds to IDD Field `property_value_59`

        Args:
            value (float): value for IDD Field `property_value_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_59`'.format(value))

        self._data["Property Value 59"] = value

    @property
    def property_value_60(self):
        """Get property_value_60

        Returns:
            float: the value of `property_value_60` or None if not set
        """
        return self._data["Property Value 60"]

    @property_value_60.setter
    def property_value_60(self, value=None):
        """  Corresponds to IDD Field `property_value_60`

        Args:
            value (float): value for IDD Field `property_value_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_60`'.format(value))

        self._data["Property Value 60"] = value

    @property
    def property_value_61(self):
        """Get property_value_61

        Returns:
            float: the value of `property_value_61` or None if not set
        """
        return self._data["Property Value 61"]

    @property_value_61.setter
    def property_value_61(self, value=None):
        """  Corresponds to IDD Field `property_value_61`

        Args:
            value (float): value for IDD Field `property_value_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_61`'.format(value))

        self._data["Property Value 61"] = value

    @property
    def property_value_62(self):
        """Get property_value_62

        Returns:
            float: the value of `property_value_62` or None if not set
        """
        return self._data["Property Value 62"]

    @property_value_62.setter
    def property_value_62(self, value=None):
        """  Corresponds to IDD Field `property_value_62`

        Args:
            value (float): value for IDD Field `property_value_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_62`'.format(value))

        self._data["Property Value 62"] = value

    @property
    def property_value_63(self):
        """Get property_value_63

        Returns:
            float: the value of `property_value_63` or None if not set
        """
        return self._data["Property Value 63"]

    @property_value_63.setter
    def property_value_63(self, value=None):
        """  Corresponds to IDD Field `property_value_63`

        Args:
            value (float): value for IDD Field `property_value_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_63`'.format(value))

        self._data["Property Value 63"] = value

    @property
    def property_value_64(self):
        """Get property_value_64

        Returns:
            float: the value of `property_value_64` or None if not set
        """
        return self._data["Property Value 64"]

    @property_value_64.setter
    def property_value_64(self, value=None):
        """  Corresponds to IDD Field `property_value_64`

        Args:
            value (float): value for IDD Field `property_value_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_64`'.format(value))

        self._data["Property Value 64"] = value

    @property
    def property_value_65(self):
        """Get property_value_65

        Returns:
            float: the value of `property_value_65` or None if not set
        """
        return self._data["Property Value 65"]

    @property_value_65.setter
    def property_value_65(self, value=None):
        """  Corresponds to IDD Field `property_value_65`

        Args:
            value (float): value for IDD Field `property_value_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_65`'.format(value))

        self._data["Property Value 65"] = value

    @property
    def property_value_66(self):
        """Get property_value_66

        Returns:
            float: the value of `property_value_66` or None if not set
        """
        return self._data["Property Value 66"]

    @property_value_66.setter
    def property_value_66(self, value=None):
        """  Corresponds to IDD Field `property_value_66`

        Args:
            value (float): value for IDD Field `property_value_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_66`'.format(value))

        self._data["Property Value 66"] = value

    @property
    def property_value_67(self):
        """Get property_value_67

        Returns:
            float: the value of `property_value_67` or None if not set
        """
        return self._data["Property Value 67"]

    @property_value_67.setter
    def property_value_67(self, value=None):
        """  Corresponds to IDD Field `property_value_67`

        Args:
            value (float): value for IDD Field `property_value_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_67`'.format(value))

        self._data["Property Value 67"] = value

    @property
    def property_value_68(self):
        """Get property_value_68

        Returns:
            float: the value of `property_value_68` or None if not set
        """
        return self._data["Property Value 68"]

    @property_value_68.setter
    def property_value_68(self, value=None):
        """  Corresponds to IDD Field `property_value_68`

        Args:
            value (float): value for IDD Field `property_value_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_68`'.format(value))

        self._data["Property Value 68"] = value

    @property
    def property_value_69(self):
        """Get property_value_69

        Returns:
            float: the value of `property_value_69` or None if not set
        """
        return self._data["Property Value 69"]

    @property_value_69.setter
    def property_value_69(self, value=None):
        """  Corresponds to IDD Field `property_value_69`

        Args:
            value (float): value for IDD Field `property_value_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_69`'.format(value))

        self._data["Property Value 69"] = value

    @property
    def property_value_70(self):
        """Get property_value_70

        Returns:
            float: the value of `property_value_70` or None if not set
        """
        return self._data["Property Value 70"]

    @property_value_70.setter
    def property_value_70(self, value=None):
        """  Corresponds to IDD Field `property_value_70`

        Args:
            value (float): value for IDD Field `property_value_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_70`'.format(value))

        self._data["Property Value 70"] = value

    @property
    def property_value_71(self):
        """Get property_value_71

        Returns:
            float: the value of `property_value_71` or None if not set
        """
        return self._data["Property Value 71"]

    @property_value_71.setter
    def property_value_71(self, value=None):
        """  Corresponds to IDD Field `property_value_71`

        Args:
            value (float): value for IDD Field `property_value_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_71`'.format(value))

        self._data["Property Value 71"] = value

    @property
    def property_value_72(self):
        """Get property_value_72

        Returns:
            float: the value of `property_value_72` or None if not set
        """
        return self._data["Property Value 72"]

    @property_value_72.setter
    def property_value_72(self, value=None):
        """  Corresponds to IDD Field `property_value_72`

        Args:
            value (float): value for IDD Field `property_value_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_72`'.format(value))

        self._data["Property Value 72"] = value

    @property
    def property_value_73(self):
        """Get property_value_73

        Returns:
            float: the value of `property_value_73` or None if not set
        """
        return self._data["Property Value 73"]

    @property_value_73.setter
    def property_value_73(self, value=None):
        """  Corresponds to IDD Field `property_value_73`

        Args:
            value (float): value for IDD Field `property_value_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_73`'.format(value))

        self._data["Property Value 73"] = value

    @property
    def property_value_74(self):
        """Get property_value_74

        Returns:
            float: the value of `property_value_74` or None if not set
        """
        return self._data["Property Value 74"]

    @property_value_74.setter
    def property_value_74(self, value=None):
        """  Corresponds to IDD Field `property_value_74`

        Args:
            value (float): value for IDD Field `property_value_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_74`'.format(value))

        self._data["Property Value 74"] = value

    @property
    def property_value_75(self):
        """Get property_value_75

        Returns:
            float: the value of `property_value_75` or None if not set
        """
        return self._data["Property Value 75"]

    @property_value_75.setter
    def property_value_75(self, value=None):
        """  Corresponds to IDD Field `property_value_75`

        Args:
            value (float): value for IDD Field `property_value_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_75`'.format(value))

        self._data["Property Value 75"] = value

    @property
    def property_value_76(self):
        """Get property_value_76

        Returns:
            float: the value of `property_value_76` or None if not set
        """
        return self._data["Property Value 76"]

    @property_value_76.setter
    def property_value_76(self, value=None):
        """  Corresponds to IDD Field `property_value_76`

        Args:
            value (float): value for IDD Field `property_value_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_76`'.format(value))

        self._data["Property Value 76"] = value

    @property
    def property_value_77(self):
        """Get property_value_77

        Returns:
            float: the value of `property_value_77` or None if not set
        """
        return self._data["Property Value 77"]

    @property_value_77.setter
    def property_value_77(self, value=None):
        """  Corresponds to IDD Field `property_value_77`

        Args:
            value (float): value for IDD Field `property_value_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_77`'.format(value))

        self._data["Property Value 77"] = value

    @property
    def property_value_78(self):
        """Get property_value_78

        Returns:
            float: the value of `property_value_78` or None if not set
        """
        return self._data["Property Value 78"]

    @property_value_78.setter
    def property_value_78(self, value=None):
        """  Corresponds to IDD Field `property_value_78`

        Args:
            value (float): value for IDD Field `property_value_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_78`'.format(value))

        self._data["Property Value 78"] = value

    @property
    def property_value_79(self):
        """Get property_value_79

        Returns:
            float: the value of `property_value_79` or None if not set
        """
        return self._data["Property Value 79"]

    @property_value_79.setter
    def property_value_79(self, value=None):
        """  Corresponds to IDD Field `property_value_79`

        Args:
            value (float): value for IDD Field `property_value_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_79`'.format(value))

        self._data["Property Value 79"] = value

    @property
    def property_value_80(self):
        """Get property_value_80

        Returns:
            float: the value of `property_value_80` or None if not set
        """
        return self._data["Property Value 80"]

    @property_value_80.setter
    def property_value_80(self, value=None):
        """  Corresponds to IDD Field `property_value_80`

        Args:
            value (float): value for IDD Field `property_value_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_80`'.format(value))

        self._data["Property Value 80"] = value

    @property
    def property_value_81(self):
        """Get property_value_81

        Returns:
            float: the value of `property_value_81` or None if not set
        """
        return self._data["Property Value 81"]

    @property_value_81.setter
    def property_value_81(self, value=None):
        """  Corresponds to IDD Field `property_value_81`

        Args:
            value (float): value for IDD Field `property_value_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_81`'.format(value))

        self._data["Property Value 81"] = value

    @property
    def property_value_82(self):
        """Get property_value_82

        Returns:
            float: the value of `property_value_82` or None if not set
        """
        return self._data["Property Value 82"]

    @property_value_82.setter
    def property_value_82(self, value=None):
        """  Corresponds to IDD Field `property_value_82`

        Args:
            value (float): value for IDD Field `property_value_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_82`'.format(value))

        self._data["Property Value 82"] = value

    @property
    def property_value_83(self):
        """Get property_value_83

        Returns:
            float: the value of `property_value_83` or None if not set
        """
        return self._data["Property Value 83"]

    @property_value_83.setter
    def property_value_83(self, value=None):
        """  Corresponds to IDD Field `property_value_83`

        Args:
            value (float): value for IDD Field `property_value_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_83`'.format(value))

        self._data["Property Value 83"] = value

    @property
    def property_value_84(self):
        """Get property_value_84

        Returns:
            float: the value of `property_value_84` or None if not set
        """
        return self._data["Property Value 84"]

    @property_value_84.setter
    def property_value_84(self, value=None):
        """  Corresponds to IDD Field `property_value_84`

        Args:
            value (float): value for IDD Field `property_value_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_84`'.format(value))

        self._data["Property Value 84"] = value

    @property
    def property_value_85(self):
        """Get property_value_85

        Returns:
            float: the value of `property_value_85` or None if not set
        """
        return self._data["Property Value 85"]

    @property_value_85.setter
    def property_value_85(self, value=None):
        """  Corresponds to IDD Field `property_value_85`

        Args:
            value (float): value for IDD Field `property_value_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_85`'.format(value))

        self._data["Property Value 85"] = value

    @property
    def property_value_86(self):
        """Get property_value_86

        Returns:
            float: the value of `property_value_86` or None if not set
        """
        return self._data["Property Value 86"]

    @property_value_86.setter
    def property_value_86(self, value=None):
        """  Corresponds to IDD Field `property_value_86`

        Args:
            value (float): value for IDD Field `property_value_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_86`'.format(value))

        self._data["Property Value 86"] = value

    @property
    def property_value_87(self):
        """Get property_value_87

        Returns:
            float: the value of `property_value_87` or None if not set
        """
        return self._data["Property Value 87"]

    @property_value_87.setter
    def property_value_87(self, value=None):
        """  Corresponds to IDD Field `property_value_87`

        Args:
            value (float): value for IDD Field `property_value_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_87`'.format(value))

        self._data["Property Value 87"] = value

    @property
    def property_value_88(self):
        """Get property_value_88

        Returns:
            float: the value of `property_value_88` or None if not set
        """
        return self._data["Property Value 88"]

    @property_value_88.setter
    def property_value_88(self, value=None):
        """  Corresponds to IDD Field `property_value_88`

        Args:
            value (float): value for IDD Field `property_value_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_88`'.format(value))

        self._data["Property Value 88"] = value

    @property
    def property_value_89(self):
        """Get property_value_89

        Returns:
            float: the value of `property_value_89` or None if not set
        """
        return self._data["Property Value 89"]

    @property_value_89.setter
    def property_value_89(self, value=None):
        """  Corresponds to IDD Field `property_value_89`

        Args:
            value (float): value for IDD Field `property_value_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_89`'.format(value))

        self._data["Property Value 89"] = value

    @property
    def property_value_90(self):
        """Get property_value_90

        Returns:
            float: the value of `property_value_90` or None if not set
        """
        return self._data["Property Value 90"]

    @property_value_90.setter
    def property_value_90(self, value=None):
        """  Corresponds to IDD Field `property_value_90`

        Args:
            value (float): value for IDD Field `property_value_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_90`'.format(value))

        self._data["Property Value 90"] = value

    @property
    def property_value_91(self):
        """Get property_value_91

        Returns:
            float: the value of `property_value_91` or None if not set
        """
        return self._data["Property Value 91"]

    @property_value_91.setter
    def property_value_91(self, value=None):
        """  Corresponds to IDD Field `property_value_91`

        Args:
            value (float): value for IDD Field `property_value_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_91`'.format(value))

        self._data["Property Value 91"] = value

    @property
    def property_value_92(self):
        """Get property_value_92

        Returns:
            float: the value of `property_value_92` or None if not set
        """
        return self._data["Property Value 92"]

    @property_value_92.setter
    def property_value_92(self, value=None):
        """  Corresponds to IDD Field `property_value_92`

        Args:
            value (float): value for IDD Field `property_value_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_92`'.format(value))

        self._data["Property Value 92"] = value

    @property
    def property_value_93(self):
        """Get property_value_93

        Returns:
            float: the value of `property_value_93` or None if not set
        """
        return self._data["Property Value 93"]

    @property_value_93.setter
    def property_value_93(self, value=None):
        """  Corresponds to IDD Field `property_value_93`

        Args:
            value (float): value for IDD Field `property_value_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_93`'.format(value))

        self._data["Property Value 93"] = value

    @property
    def property_value_94(self):
        """Get property_value_94

        Returns:
            float: the value of `property_value_94` or None if not set
        """
        return self._data["Property Value 94"]

    @property_value_94.setter
    def property_value_94(self, value=None):
        """  Corresponds to IDD Field `property_value_94`

        Args:
            value (float): value for IDD Field `property_value_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_94`'.format(value))

        self._data["Property Value 94"] = value

    @property
    def property_value_95(self):
        """Get property_value_95

        Returns:
            float: the value of `property_value_95` or None if not set
        """
        return self._data["Property Value 95"]

    @property_value_95.setter
    def property_value_95(self, value=None):
        """  Corresponds to IDD Field `property_value_95`

        Args:
            value (float): value for IDD Field `property_value_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_95`'.format(value))

        self._data["Property Value 95"] = value

    @property
    def property_value_96(self):
        """Get property_value_96

        Returns:
            float: the value of `property_value_96` or None if not set
        """
        return self._data["Property Value 96"]

    @property_value_96.setter
    def property_value_96(self, value=None):
        """  Corresponds to IDD Field `property_value_96`

        Args:
            value (float): value for IDD Field `property_value_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_96`'.format(value))

        self._data["Property Value 96"] = value

    @property
    def property_value_97(self):
        """Get property_value_97

        Returns:
            float: the value of `property_value_97` or None if not set
        """
        return self._data["Property Value 97"]

    @property_value_97.setter
    def property_value_97(self, value=None):
        """  Corresponds to IDD Field `property_value_97`

        Args:
            value (float): value for IDD Field `property_value_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_97`'.format(value))

        self._data["Property Value 97"] = value

    @property
    def property_value_98(self):
        """Get property_value_98

        Returns:
            float: the value of `property_value_98` or None if not set
        """
        return self._data["Property Value 98"]

    @property_value_98.setter
    def property_value_98(self, value=None):
        """  Corresponds to IDD Field `property_value_98`

        Args:
            value (float): value for IDD Field `property_value_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_98`'.format(value))

        self._data["Property Value 98"] = value

    @property
    def property_value_99(self):
        """Get property_value_99

        Returns:
            float: the value of `property_value_99` or None if not set
        """
        return self._data["Property Value 99"]

    @property_value_99.setter
    def property_value_99(self, value=None):
        """  Corresponds to IDD Field `property_value_99`

        Args:
            value (float): value for IDD Field `property_value_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_99`'.format(value))

        self._data["Property Value 99"] = value

    @property
    def property_value_100(self):
        """Get property_value_100

        Returns:
            float: the value of `property_value_100` or None if not set
        """
        return self._data["Property Value 100"]

    @property_value_100.setter
    def property_value_100(self, value=None):
        """  Corresponds to IDD Field `property_value_100`

        Args:
            value (float): value for IDD Field `property_value_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_100`'.format(value))

        self._data["Property Value 100"] = value

    @property
    def property_value_101(self):
        """Get property_value_101

        Returns:
            float: the value of `property_value_101` or None if not set
        """
        return self._data["Property Value 101"]

    @property_value_101.setter
    def property_value_101(self, value=None):
        """  Corresponds to IDD Field `property_value_101`

        Args:
            value (float): value for IDD Field `property_value_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_101`'.format(value))

        self._data["Property Value 101"] = value

    @property
    def property_value_102(self):
        """Get property_value_102

        Returns:
            float: the value of `property_value_102` or None if not set
        """
        return self._data["Property Value 102"]

    @property_value_102.setter
    def property_value_102(self, value=None):
        """  Corresponds to IDD Field `property_value_102`

        Args:
            value (float): value for IDD Field `property_value_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_102`'.format(value))

        self._data["Property Value 102"] = value

    @property
    def property_value_103(self):
        """Get property_value_103

        Returns:
            float: the value of `property_value_103` or None if not set
        """
        return self._data["Property Value 103"]

    @property_value_103.setter
    def property_value_103(self, value=None):
        """  Corresponds to IDD Field `property_value_103`

        Args:
            value (float): value for IDD Field `property_value_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_103`'.format(value))

        self._data["Property Value 103"] = value

    @property
    def property_value_104(self):
        """Get property_value_104

        Returns:
            float: the value of `property_value_104` or None if not set
        """
        return self._data["Property Value 104"]

    @property_value_104.setter
    def property_value_104(self, value=None):
        """  Corresponds to IDD Field `property_value_104`

        Args:
            value (float): value for IDD Field `property_value_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_104`'.format(value))

        self._data["Property Value 104"] = value

    @property
    def property_value_105(self):
        """Get property_value_105

        Returns:
            float: the value of `property_value_105` or None if not set
        """
        return self._data["Property Value 105"]

    @property_value_105.setter
    def property_value_105(self, value=None):
        """  Corresponds to IDD Field `property_value_105`

        Args:
            value (float): value for IDD Field `property_value_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_105`'.format(value))

        self._data["Property Value 105"] = value

    @property
    def property_value_106(self):
        """Get property_value_106

        Returns:
            float: the value of `property_value_106` or None if not set
        """
        return self._data["Property Value 106"]

    @property_value_106.setter
    def property_value_106(self, value=None):
        """  Corresponds to IDD Field `property_value_106`

        Args:
            value (float): value for IDD Field `property_value_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_106`'.format(value))

        self._data["Property Value 106"] = value

    @property
    def property_value_107(self):
        """Get property_value_107

        Returns:
            float: the value of `property_value_107` or None if not set
        """
        return self._data["Property Value 107"]

    @property_value_107.setter
    def property_value_107(self, value=None):
        """  Corresponds to IDD Field `property_value_107`

        Args:
            value (float): value for IDD Field `property_value_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_107`'.format(value))

        self._data["Property Value 107"] = value

    @property
    def property_value_108(self):
        """Get property_value_108

        Returns:
            float: the value of `property_value_108` or None if not set
        """
        return self._data["Property Value 108"]

    @property_value_108.setter
    def property_value_108(self, value=None):
        """  Corresponds to IDD Field `property_value_108`

        Args:
            value (float): value for IDD Field `property_value_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_108`'.format(value))

        self._data["Property Value 108"] = value

    @property
    def property_value_109(self):
        """Get property_value_109

        Returns:
            float: the value of `property_value_109` or None if not set
        """
        return self._data["Property Value 109"]

    @property_value_109.setter
    def property_value_109(self, value=None):
        """  Corresponds to IDD Field `property_value_109`

        Args:
            value (float): value for IDD Field `property_value_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_109`'.format(value))

        self._data["Property Value 109"] = value

    @property
    def property_value_110(self):
        """Get property_value_110

        Returns:
            float: the value of `property_value_110` or None if not set
        """
        return self._data["Property Value 110"]

    @property_value_110.setter
    def property_value_110(self, value=None):
        """  Corresponds to IDD Field `property_value_110`

        Args:
            value (float): value for IDD Field `property_value_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_110`'.format(value))

        self._data["Property Value 110"] = value

    @property
    def property_value_111(self):
        """Get property_value_111

        Returns:
            float: the value of `property_value_111` or None if not set
        """
        return self._data["Property Value 111"]

    @property_value_111.setter
    def property_value_111(self, value=None):
        """  Corresponds to IDD Field `property_value_111`

        Args:
            value (float): value for IDD Field `property_value_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_111`'.format(value))

        self._data["Property Value 111"] = value

    @property
    def property_value_112(self):
        """Get property_value_112

        Returns:
            float: the value of `property_value_112` or None if not set
        """
        return self._data["Property Value 112"]

    @property_value_112.setter
    def property_value_112(self, value=None):
        """  Corresponds to IDD Field `property_value_112`

        Args:
            value (float): value for IDD Field `property_value_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_112`'.format(value))

        self._data["Property Value 112"] = value

    @property
    def property_value_113(self):
        """Get property_value_113

        Returns:
            float: the value of `property_value_113` or None if not set
        """
        return self._data["Property Value 113"]

    @property_value_113.setter
    def property_value_113(self, value=None):
        """  Corresponds to IDD Field `property_value_113`

        Args:
            value (float): value for IDD Field `property_value_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_113`'.format(value))

        self._data["Property Value 113"] = value

    @property
    def property_value_114(self):
        """Get property_value_114

        Returns:
            float: the value of `property_value_114` or None if not set
        """
        return self._data["Property Value 114"]

    @property_value_114.setter
    def property_value_114(self, value=None):
        """  Corresponds to IDD Field `property_value_114`

        Args:
            value (float): value for IDD Field `property_value_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_114`'.format(value))

        self._data["Property Value 114"] = value

    @property
    def property_value_115(self):
        """Get property_value_115

        Returns:
            float: the value of `property_value_115` or None if not set
        """
        return self._data["Property Value 115"]

    @property_value_115.setter
    def property_value_115(self, value=None):
        """  Corresponds to IDD Field `property_value_115`

        Args:
            value (float): value for IDD Field `property_value_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_115`'.format(value))

        self._data["Property Value 115"] = value

    @property
    def property_value_116(self):
        """Get property_value_116

        Returns:
            float: the value of `property_value_116` or None if not set
        """
        return self._data["Property Value 116"]

    @property_value_116.setter
    def property_value_116(self, value=None):
        """  Corresponds to IDD Field `property_value_116`

        Args:
            value (float): value for IDD Field `property_value_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_116`'.format(value))

        self._data["Property Value 116"] = value

    @property
    def property_value_117(self):
        """Get property_value_117

        Returns:
            float: the value of `property_value_117` or None if not set
        """
        return self._data["Property Value 117"]

    @property_value_117.setter
    def property_value_117(self, value=None):
        """  Corresponds to IDD Field `property_value_117`

        Args:
            value (float): value for IDD Field `property_value_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_117`'.format(value))

        self._data["Property Value 117"] = value

    @property
    def property_value_118(self):
        """Get property_value_118

        Returns:
            float: the value of `property_value_118` or None if not set
        """
        return self._data["Property Value 118"]

    @property_value_118.setter
    def property_value_118(self, value=None):
        """  Corresponds to IDD Field `property_value_118`

        Args:
            value (float): value for IDD Field `property_value_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_118`'.format(value))

        self._data["Property Value 118"] = value

    @property
    def property_value_119(self):
        """Get property_value_119

        Returns:
            float: the value of `property_value_119` or None if not set
        """
        return self._data["Property Value 119"]

    @property_value_119.setter
    def property_value_119(self, value=None):
        """  Corresponds to IDD Field `property_value_119`

        Args:
            value (float): value for IDD Field `property_value_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_119`'.format(value))

        self._data["Property Value 119"] = value

    @property
    def property_value_120(self):
        """Get property_value_120

        Returns:
            float: the value of `property_value_120` or None if not set
        """
        return self._data["Property Value 120"]

    @property_value_120.setter
    def property_value_120(self, value=None):
        """  Corresponds to IDD Field `property_value_120`

        Args:
            value (float): value for IDD Field `property_value_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_120`'.format(value))

        self._data["Property Value 120"] = value

    @property
    def property_value_121(self):
        """Get property_value_121

        Returns:
            float: the value of `property_value_121` or None if not set
        """
        return self._data["Property Value 121"]

    @property_value_121.setter
    def property_value_121(self, value=None):
        """  Corresponds to IDD Field `property_value_121`

        Args:
            value (float): value for IDD Field `property_value_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_121`'.format(value))

        self._data["Property Value 121"] = value

    @property
    def property_value_122(self):
        """Get property_value_122

        Returns:
            float: the value of `property_value_122` or None if not set
        """
        return self._data["Property Value 122"]

    @property_value_122.setter
    def property_value_122(self, value=None):
        """  Corresponds to IDD Field `property_value_122`

        Args:
            value (float): value for IDD Field `property_value_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_122`'.format(value))

        self._data["Property Value 122"] = value

    @property
    def property_value_123(self):
        """Get property_value_123

        Returns:
            float: the value of `property_value_123` or None if not set
        """
        return self._data["Property Value 123"]

    @property_value_123.setter
    def property_value_123(self, value=None):
        """  Corresponds to IDD Field `property_value_123`

        Args:
            value (float): value for IDD Field `property_value_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_123`'.format(value))

        self._data["Property Value 123"] = value

    @property
    def property_value_124(self):
        """Get property_value_124

        Returns:
            float: the value of `property_value_124` or None if not set
        """
        return self._data["Property Value 124"]

    @property_value_124.setter
    def property_value_124(self, value=None):
        """  Corresponds to IDD Field `property_value_124`

        Args:
            value (float): value for IDD Field `property_value_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_124`'.format(value))

        self._data["Property Value 124"] = value

    @property
    def property_value_125(self):
        """Get property_value_125

        Returns:
            float: the value of `property_value_125` or None if not set
        """
        return self._data["Property Value 125"]

    @property_value_125.setter
    def property_value_125(self, value=None):
        """  Corresponds to IDD Field `property_value_125`

        Args:
            value (float): value for IDD Field `property_value_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_125`'.format(value))

        self._data["Property Value 125"] = value

    @property
    def property_value_126(self):
        """Get property_value_126

        Returns:
            float: the value of `property_value_126` or None if not set
        """
        return self._data["Property Value 126"]

    @property_value_126.setter
    def property_value_126(self, value=None):
        """  Corresponds to IDD Field `property_value_126`

        Args:
            value (float): value for IDD Field `property_value_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_126`'.format(value))

        self._data["Property Value 126"] = value

    @property
    def property_value_127(self):
        """Get property_value_127

        Returns:
            float: the value of `property_value_127` or None if not set
        """
        return self._data["Property Value 127"]

    @property_value_127.setter
    def property_value_127(self, value=None):
        """  Corresponds to IDD Field `property_value_127`

        Args:
            value (float): value for IDD Field `property_value_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_127`'.format(value))

        self._data["Property Value 127"] = value

    @property
    def property_value_128(self):
        """Get property_value_128

        Returns:
            float: the value of `property_value_128` or None if not set
        """
        return self._data["Property Value 128"]

    @property_value_128.setter
    def property_value_128(self, value=None):
        """  Corresponds to IDD Field `property_value_128`

        Args:
            value (float): value for IDD Field `property_value_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_128`'.format(value))

        self._data["Property Value 128"] = value

    @property
    def property_value_129(self):
        """Get property_value_129

        Returns:
            float: the value of `property_value_129` or None if not set
        """
        return self._data["Property Value 129"]

    @property_value_129.setter
    def property_value_129(self, value=None):
        """  Corresponds to IDD Field `property_value_129`

        Args:
            value (float): value for IDD Field `property_value_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_129`'.format(value))

        self._data["Property Value 129"] = value

    @property
    def property_value_130(self):
        """Get property_value_130

        Returns:
            float: the value of `property_value_130` or None if not set
        """
        return self._data["Property Value 130"]

    @property_value_130.setter
    def property_value_130(self, value=None):
        """  Corresponds to IDD Field `property_value_130`

        Args:
            value (float): value for IDD Field `property_value_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_130`'.format(value))

        self._data["Property Value 130"] = value

    @property
    def property_value_131(self):
        """Get property_value_131

        Returns:
            float: the value of `property_value_131` or None if not set
        """
        return self._data["Property Value 131"]

    @property_value_131.setter
    def property_value_131(self, value=None):
        """  Corresponds to IDD Field `property_value_131`

        Args:
            value (float): value for IDD Field `property_value_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_131`'.format(value))

        self._data["Property Value 131"] = value

    @property
    def property_value_132(self):
        """Get property_value_132

        Returns:
            float: the value of `property_value_132` or None if not set
        """
        return self._data["Property Value 132"]

    @property_value_132.setter
    def property_value_132(self, value=None):
        """  Corresponds to IDD Field `property_value_132`

        Args:
            value (float): value for IDD Field `property_value_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_132`'.format(value))

        self._data["Property Value 132"] = value

    @property
    def property_value_133(self):
        """Get property_value_133

        Returns:
            float: the value of `property_value_133` or None if not set
        """
        return self._data["Property Value 133"]

    @property_value_133.setter
    def property_value_133(self, value=None):
        """  Corresponds to IDD Field `property_value_133`

        Args:
            value (float): value for IDD Field `property_value_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_133`'.format(value))

        self._data["Property Value 133"] = value

    @property
    def property_value_134(self):
        """Get property_value_134

        Returns:
            float: the value of `property_value_134` or None if not set
        """
        return self._data["Property Value 134"]

    @property_value_134.setter
    def property_value_134(self, value=None):
        """  Corresponds to IDD Field `property_value_134`

        Args:
            value (float): value for IDD Field `property_value_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_134`'.format(value))

        self._data["Property Value 134"] = value

    @property
    def property_value_135(self):
        """Get property_value_135

        Returns:
            float: the value of `property_value_135` or None if not set
        """
        return self._data["Property Value 135"]

    @property_value_135.setter
    def property_value_135(self, value=None):
        """  Corresponds to IDD Field `property_value_135`

        Args:
            value (float): value for IDD Field `property_value_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_135`'.format(value))

        self._data["Property Value 135"] = value

    @property
    def property_value_136(self):
        """Get property_value_136

        Returns:
            float: the value of `property_value_136` or None if not set
        """
        return self._data["Property Value 136"]

    @property_value_136.setter
    def property_value_136(self, value=None):
        """  Corresponds to IDD Field `property_value_136`

        Args:
            value (float): value for IDD Field `property_value_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_136`'.format(value))

        self._data["Property Value 136"] = value

    @property
    def property_value_137(self):
        """Get property_value_137

        Returns:
            float: the value of `property_value_137` or None if not set
        """
        return self._data["Property Value 137"]

    @property_value_137.setter
    def property_value_137(self, value=None):
        """  Corresponds to IDD Field `property_value_137`

        Args:
            value (float): value for IDD Field `property_value_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_137`'.format(value))

        self._data["Property Value 137"] = value

    @property
    def property_value_138(self):
        """Get property_value_138

        Returns:
            float: the value of `property_value_138` or None if not set
        """
        return self._data["Property Value 138"]

    @property_value_138.setter
    def property_value_138(self, value=None):
        """  Corresponds to IDD Field `property_value_138`

        Args:
            value (float): value for IDD Field `property_value_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_138`'.format(value))

        self._data["Property Value 138"] = value

    @property
    def property_value_139(self):
        """Get property_value_139

        Returns:
            float: the value of `property_value_139` or None if not set
        """
        return self._data["Property Value 139"]

    @property_value_139.setter
    def property_value_139(self, value=None):
        """  Corresponds to IDD Field `property_value_139`

        Args:
            value (float): value for IDD Field `property_value_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_139`'.format(value))

        self._data["Property Value 139"] = value

    @property
    def property_value_140(self):
        """Get property_value_140

        Returns:
            float: the value of `property_value_140` or None if not set
        """
        return self._data["Property Value 140"]

    @property_value_140.setter
    def property_value_140(self, value=None):
        """  Corresponds to IDD Field `property_value_140`

        Args:
            value (float): value for IDD Field `property_value_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_140`'.format(value))

        self._data["Property Value 140"] = value

    @property
    def property_value_141(self):
        """Get property_value_141

        Returns:
            float: the value of `property_value_141` or None if not set
        """
        return self._data["Property Value 141"]

    @property_value_141.setter
    def property_value_141(self, value=None):
        """  Corresponds to IDD Field `property_value_141`

        Args:
            value (float): value for IDD Field `property_value_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_141`'.format(value))

        self._data["Property Value 141"] = value

    @property
    def property_value_142(self):
        """Get property_value_142

        Returns:
            float: the value of `property_value_142` or None if not set
        """
        return self._data["Property Value 142"]

    @property_value_142.setter
    def property_value_142(self, value=None):
        """  Corresponds to IDD Field `property_value_142`

        Args:
            value (float): value for IDD Field `property_value_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_142`'.format(value))

        self._data["Property Value 142"] = value

    @property
    def property_value_143(self):
        """Get property_value_143

        Returns:
            float: the value of `property_value_143` or None if not set
        """
        return self._data["Property Value 143"]

    @property_value_143.setter
    def property_value_143(self, value=None):
        """  Corresponds to IDD Field `property_value_143`

        Args:
            value (float): value for IDD Field `property_value_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_143`'.format(value))

        self._data["Property Value 143"] = value

    @property
    def property_value_144(self):
        """Get property_value_144

        Returns:
            float: the value of `property_value_144` or None if not set
        """
        return self._data["Property Value 144"]

    @property_value_144.setter
    def property_value_144(self, value=None):
        """  Corresponds to IDD Field `property_value_144`

        Args:
            value (float): value for IDD Field `property_value_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_144`'.format(value))

        self._data["Property Value 144"] = value

    @property
    def property_value_145(self):
        """Get property_value_145

        Returns:
            float: the value of `property_value_145` or None if not set
        """
        return self._data["Property Value 145"]

    @property_value_145.setter
    def property_value_145(self, value=None):
        """  Corresponds to IDD Field `property_value_145`

        Args:
            value (float): value for IDD Field `property_value_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_145`'.format(value))

        self._data["Property Value 145"] = value

    @property
    def property_value_146(self):
        """Get property_value_146

        Returns:
            float: the value of `property_value_146` or None if not set
        """
        return self._data["Property Value 146"]

    @property_value_146.setter
    def property_value_146(self, value=None):
        """  Corresponds to IDD Field `property_value_146`

        Args:
            value (float): value for IDD Field `property_value_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_146`'.format(value))

        self._data["Property Value 146"] = value

    @property
    def property_value_147(self):
        """Get property_value_147

        Returns:
            float: the value of `property_value_147` or None if not set
        """
        return self._data["Property Value 147"]

    @property_value_147.setter
    def property_value_147(self, value=None):
        """  Corresponds to IDD Field `property_value_147`

        Args:
            value (float): value for IDD Field `property_value_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_147`'.format(value))

        self._data["Property Value 147"] = value

    @property
    def property_value_148(self):
        """Get property_value_148

        Returns:
            float: the value of `property_value_148` or None if not set
        """
        return self._data["Property Value 148"]

    @property_value_148.setter
    def property_value_148(self, value=None):
        """  Corresponds to IDD Field `property_value_148`

        Args:
            value (float): value for IDD Field `property_value_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_148`'.format(value))

        self._data["Property Value 148"] = value

    @property
    def property_value_149(self):
        """Get property_value_149

        Returns:
            float: the value of `property_value_149` or None if not set
        """
        return self._data["Property Value 149"]

    @property_value_149.setter
    def property_value_149(self, value=None):
        """  Corresponds to IDD Field `property_value_149`

        Args:
            value (float): value for IDD Field `property_value_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_149`'.format(value))

        self._data["Property Value 149"] = value

    @property
    def property_value_150(self):
        """Get property_value_150

        Returns:
            float: the value of `property_value_150` or None if not set
        """
        return self._data["Property Value 150"]

    @property_value_150.setter
    def property_value_150(self, value=None):
        """  Corresponds to IDD Field `property_value_150`

        Args:
            value (float): value for IDD Field `property_value_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_150`'.format(value))

        self._data["Property Value 150"] = value

    @property
    def property_value_151(self):
        """Get property_value_151

        Returns:
            float: the value of `property_value_151` or None if not set
        """
        return self._data["Property Value 151"]

    @property_value_151.setter
    def property_value_151(self, value=None):
        """  Corresponds to IDD Field `property_value_151`

        Args:
            value (float): value for IDD Field `property_value_151`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_151`'.format(value))

        self._data["Property Value 151"] = value

    @property
    def property_value_152(self):
        """Get property_value_152

        Returns:
            float: the value of `property_value_152` or None if not set
        """
        return self._data["Property Value 152"]

    @property_value_152.setter
    def property_value_152(self, value=None):
        """  Corresponds to IDD Field `property_value_152`

        Args:
            value (float): value for IDD Field `property_value_152`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_152`'.format(value))

        self._data["Property Value 152"] = value

    @property
    def property_value_153(self):
        """Get property_value_153

        Returns:
            float: the value of `property_value_153` or None if not set
        """
        return self._data["Property Value 153"]

    @property_value_153.setter
    def property_value_153(self, value=None):
        """  Corresponds to IDD Field `property_value_153`

        Args:
            value (float): value for IDD Field `property_value_153`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_153`'.format(value))

        self._data["Property Value 153"] = value

    @property
    def property_value_154(self):
        """Get property_value_154

        Returns:
            float: the value of `property_value_154` or None if not set
        """
        return self._data["Property Value 154"]

    @property_value_154.setter
    def property_value_154(self, value=None):
        """  Corresponds to IDD Field `property_value_154`

        Args:
            value (float): value for IDD Field `property_value_154`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_154`'.format(value))

        self._data["Property Value 154"] = value

    @property
    def property_value_155(self):
        """Get property_value_155

        Returns:
            float: the value of `property_value_155` or None if not set
        """
        return self._data["Property Value 155"]

    @property_value_155.setter
    def property_value_155(self, value=None):
        """  Corresponds to IDD Field `property_value_155`

        Args:
            value (float): value for IDD Field `property_value_155`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_155`'.format(value))

        self._data["Property Value 155"] = value

    @property
    def property_value_156(self):
        """Get property_value_156

        Returns:
            float: the value of `property_value_156` or None if not set
        """
        return self._data["Property Value 156"]

    @property_value_156.setter
    def property_value_156(self, value=None):
        """  Corresponds to IDD Field `property_value_156`

        Args:
            value (float): value for IDD Field `property_value_156`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_156`'.format(value))

        self._data["Property Value 156"] = value

    @property
    def property_value_157(self):
        """Get property_value_157

        Returns:
            float: the value of `property_value_157` or None if not set
        """
        return self._data["Property Value 157"]

    @property_value_157.setter
    def property_value_157(self, value=None):
        """  Corresponds to IDD Field `property_value_157`

        Args:
            value (float): value for IDD Field `property_value_157`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_157`'.format(value))

        self._data["Property Value 157"] = value

    @property
    def property_value_158(self):
        """Get property_value_158

        Returns:
            float: the value of `property_value_158` or None if not set
        """
        return self._data["Property Value 158"]

    @property_value_158.setter
    def property_value_158(self, value=None):
        """  Corresponds to IDD Field `property_value_158`

        Args:
            value (float): value for IDD Field `property_value_158`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_158`'.format(value))

        self._data["Property Value 158"] = value

    @property
    def property_value_159(self):
        """Get property_value_159

        Returns:
            float: the value of `property_value_159` or None if not set
        """
        return self._data["Property Value 159"]

    @property_value_159.setter
    def property_value_159(self, value=None):
        """  Corresponds to IDD Field `property_value_159`

        Args:
            value (float): value for IDD Field `property_value_159`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_159`'.format(value))

        self._data["Property Value 159"] = value

    @property
    def property_value_160(self):
        """Get property_value_160

        Returns:
            float: the value of `property_value_160` or None if not set
        """
        return self._data["Property Value 160"]

    @property_value_160.setter
    def property_value_160(self, value=None):
        """  Corresponds to IDD Field `property_value_160`

        Args:
            value (float): value for IDD Field `property_value_160`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_160`'.format(value))

        self._data["Property Value 160"] = value

    @property
    def property_value_161(self):
        """Get property_value_161

        Returns:
            float: the value of `property_value_161` or None if not set
        """
        return self._data["Property Value 161"]

    @property_value_161.setter
    def property_value_161(self, value=None):
        """  Corresponds to IDD Field `property_value_161`

        Args:
            value (float): value for IDD Field `property_value_161`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_161`'.format(value))

        self._data["Property Value 161"] = value

    @property
    def property_value_162(self):
        """Get property_value_162

        Returns:
            float: the value of `property_value_162` or None if not set
        """
        return self._data["Property Value 162"]

    @property_value_162.setter
    def property_value_162(self, value=None):
        """  Corresponds to IDD Field `property_value_162`

        Args:
            value (float): value for IDD Field `property_value_162`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_162`'.format(value))

        self._data["Property Value 162"] = value

    @property
    def property_value_163(self):
        """Get property_value_163

        Returns:
            float: the value of `property_value_163` or None if not set
        """
        return self._data["Property Value 163"]

    @property_value_163.setter
    def property_value_163(self, value=None):
        """  Corresponds to IDD Field `property_value_163`

        Args:
            value (float): value for IDD Field `property_value_163`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_163`'.format(value))

        self._data["Property Value 163"] = value

    @property
    def property_value_164(self):
        """Get property_value_164

        Returns:
            float: the value of `property_value_164` or None if not set
        """
        return self._data["Property Value 164"]

    @property_value_164.setter
    def property_value_164(self, value=None):
        """  Corresponds to IDD Field `property_value_164`

        Args:
            value (float): value for IDD Field `property_value_164`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_164`'.format(value))

        self._data["Property Value 164"] = value

    @property
    def property_value_165(self):
        """Get property_value_165

        Returns:
            float: the value of `property_value_165` or None if not set
        """
        return self._data["Property Value 165"]

    @property_value_165.setter
    def property_value_165(self, value=None):
        """  Corresponds to IDD Field `property_value_165`

        Args:
            value (float): value for IDD Field `property_value_165`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_165`'.format(value))

        self._data["Property Value 165"] = value

    @property
    def property_value_166(self):
        """Get property_value_166

        Returns:
            float: the value of `property_value_166` or None if not set
        """
        return self._data["Property Value 166"]

    @property_value_166.setter
    def property_value_166(self, value=None):
        """  Corresponds to IDD Field `property_value_166`

        Args:
            value (float): value for IDD Field `property_value_166`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_166`'.format(value))

        self._data["Property Value 166"] = value

    @property
    def property_value_167(self):
        """Get property_value_167

        Returns:
            float: the value of `property_value_167` or None if not set
        """
        return self._data["Property Value 167"]

    @property_value_167.setter
    def property_value_167(self, value=None):
        """  Corresponds to IDD Field `property_value_167`

        Args:
            value (float): value for IDD Field `property_value_167`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_167`'.format(value))

        self._data["Property Value 167"] = value

    @property
    def property_value_168(self):
        """Get property_value_168

        Returns:
            float: the value of `property_value_168` or None if not set
        """
        return self._data["Property Value 168"]

    @property_value_168.setter
    def property_value_168(self, value=None):
        """  Corresponds to IDD Field `property_value_168`

        Args:
            value (float): value for IDD Field `property_value_168`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_168`'.format(value))

        self._data["Property Value 168"] = value

    @property
    def property_value_169(self):
        """Get property_value_169

        Returns:
            float: the value of `property_value_169` or None if not set
        """
        return self._data["Property Value 169"]

    @property_value_169.setter
    def property_value_169(self, value=None):
        """  Corresponds to IDD Field `property_value_169`

        Args:
            value (float): value for IDD Field `property_value_169`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_169`'.format(value))

        self._data["Property Value 169"] = value

    @property
    def property_value_170(self):
        """Get property_value_170

        Returns:
            float: the value of `property_value_170` or None if not set
        """
        return self._data["Property Value 170"]

    @property_value_170.setter
    def property_value_170(self, value=None):
        """  Corresponds to IDD Field `property_value_170`

        Args:
            value (float): value for IDD Field `property_value_170`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_170`'.format(value))

        self._data["Property Value 170"] = value

    @property
    def property_value_171(self):
        """Get property_value_171

        Returns:
            float: the value of `property_value_171` or None if not set
        """
        return self._data["Property Value 171"]

    @property_value_171.setter
    def property_value_171(self, value=None):
        """  Corresponds to IDD Field `property_value_171`

        Args:
            value (float): value for IDD Field `property_value_171`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_171`'.format(value))

        self._data["Property Value 171"] = value

    @property
    def property_value_172(self):
        """Get property_value_172

        Returns:
            float: the value of `property_value_172` or None if not set
        """
        return self._data["Property Value 172"]

    @property_value_172.setter
    def property_value_172(self, value=None):
        """  Corresponds to IDD Field `property_value_172`

        Args:
            value (float): value for IDD Field `property_value_172`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_172`'.format(value))

        self._data["Property Value 172"] = value

    @property
    def property_value_173(self):
        """Get property_value_173

        Returns:
            float: the value of `property_value_173` or None if not set
        """
        return self._data["Property Value 173"]

    @property_value_173.setter
    def property_value_173(self, value=None):
        """  Corresponds to IDD Field `property_value_173`

        Args:
            value (float): value for IDD Field `property_value_173`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_173`'.format(value))

        self._data["Property Value 173"] = value

    @property
    def property_value_174(self):
        """Get property_value_174

        Returns:
            float: the value of `property_value_174` or None if not set
        """
        return self._data["Property Value 174"]

    @property_value_174.setter
    def property_value_174(self, value=None):
        """  Corresponds to IDD Field `property_value_174`

        Args:
            value (float): value for IDD Field `property_value_174`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_174`'.format(value))

        self._data["Property Value 174"] = value

    @property
    def property_value_175(self):
        """Get property_value_175

        Returns:
            float: the value of `property_value_175` or None if not set
        """
        return self._data["Property Value 175"]

    @property_value_175.setter
    def property_value_175(self, value=None):
        """  Corresponds to IDD Field `property_value_175`

        Args:
            value (float): value for IDD Field `property_value_175`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_175`'.format(value))

        self._data["Property Value 175"] = value

    @property
    def property_value_176(self):
        """Get property_value_176

        Returns:
            float: the value of `property_value_176` or None if not set
        """
        return self._data["Property Value 176"]

    @property_value_176.setter
    def property_value_176(self, value=None):
        """  Corresponds to IDD Field `property_value_176`

        Args:
            value (float): value for IDD Field `property_value_176`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_176`'.format(value))

        self._data["Property Value 176"] = value

    @property
    def property_value_177(self):
        """Get property_value_177

        Returns:
            float: the value of `property_value_177` or None if not set
        """
        return self._data["Property Value 177"]

    @property_value_177.setter
    def property_value_177(self, value=None):
        """  Corresponds to IDD Field `property_value_177`

        Args:
            value (float): value for IDD Field `property_value_177`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_177`'.format(value))

        self._data["Property Value 177"] = value

    @property
    def property_value_178(self):
        """Get property_value_178

        Returns:
            float: the value of `property_value_178` or None if not set
        """
        return self._data["Property Value 178"]

    @property_value_178.setter
    def property_value_178(self, value=None):
        """  Corresponds to IDD Field `property_value_178`

        Args:
            value (float): value for IDD Field `property_value_178`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_178`'.format(value))

        self._data["Property Value 178"] = value

    @property
    def property_value_179(self):
        """Get property_value_179

        Returns:
            float: the value of `property_value_179` or None if not set
        """
        return self._data["Property Value 179"]

    @property_value_179.setter
    def property_value_179(self, value=None):
        """  Corresponds to IDD Field `property_value_179`

        Args:
            value (float): value for IDD Field `property_value_179`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_179`'.format(value))

        self._data["Property Value 179"] = value

    @property
    def property_value_180(self):
        """Get property_value_180

        Returns:
            float: the value of `property_value_180` or None if not set
        """
        return self._data["Property Value 180"]

    @property_value_180.setter
    def property_value_180(self, value=None):
        """  Corresponds to IDD Field `property_value_180`

        Args:
            value (float): value for IDD Field `property_value_180`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_180`'.format(value))

        self._data["Property Value 180"] = value

    @property
    def property_value_181(self):
        """Get property_value_181

        Returns:
            float: the value of `property_value_181` or None if not set
        """
        return self._data["Property Value 181"]

    @property_value_181.setter
    def property_value_181(self, value=None):
        """  Corresponds to IDD Field `property_value_181`

        Args:
            value (float): value for IDD Field `property_value_181`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_181`'.format(value))

        self._data["Property Value 181"] = value

    @property
    def property_value_182(self):
        """Get property_value_182

        Returns:
            float: the value of `property_value_182` or None if not set
        """
        return self._data["Property Value 182"]

    @property_value_182.setter
    def property_value_182(self, value=None):
        """  Corresponds to IDD Field `property_value_182`

        Args:
            value (float): value for IDD Field `property_value_182`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_182`'.format(value))

        self._data["Property Value 182"] = value

    @property
    def property_value_183(self):
        """Get property_value_183

        Returns:
            float: the value of `property_value_183` or None if not set
        """
        return self._data["Property Value 183"]

    @property_value_183.setter
    def property_value_183(self, value=None):
        """  Corresponds to IDD Field `property_value_183`

        Args:
            value (float): value for IDD Field `property_value_183`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_183`'.format(value))

        self._data["Property Value 183"] = value

    @property
    def property_value_184(self):
        """Get property_value_184

        Returns:
            float: the value of `property_value_184` or None if not set
        """
        return self._data["Property Value 184"]

    @property_value_184.setter
    def property_value_184(self, value=None):
        """  Corresponds to IDD Field `property_value_184`

        Args:
            value (float): value for IDD Field `property_value_184`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_184`'.format(value))

        self._data["Property Value 184"] = value

    @property
    def property_value_185(self):
        """Get property_value_185

        Returns:
            float: the value of `property_value_185` or None if not set
        """
        return self._data["Property Value 185"]

    @property_value_185.setter
    def property_value_185(self, value=None):
        """  Corresponds to IDD Field `property_value_185`

        Args:
            value (float): value for IDD Field `property_value_185`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_185`'.format(value))

        self._data["Property Value 185"] = value

    @property
    def property_value_186(self):
        """Get property_value_186

        Returns:
            float: the value of `property_value_186` or None if not set
        """
        return self._data["Property Value 186"]

    @property_value_186.setter
    def property_value_186(self, value=None):
        """  Corresponds to IDD Field `property_value_186`

        Args:
            value (float): value for IDD Field `property_value_186`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_186`'.format(value))

        self._data["Property Value 186"] = value

    @property
    def property_value_187(self):
        """Get property_value_187

        Returns:
            float: the value of `property_value_187` or None if not set
        """
        return self._data["Property Value 187"]

    @property_value_187.setter
    def property_value_187(self, value=None):
        """  Corresponds to IDD Field `property_value_187`

        Args:
            value (float): value for IDD Field `property_value_187`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_187`'.format(value))

        self._data["Property Value 187"] = value

    @property
    def property_value_188(self):
        """Get property_value_188

        Returns:
            float: the value of `property_value_188` or None if not set
        """
        return self._data["Property Value 188"]

    @property_value_188.setter
    def property_value_188(self, value=None):
        """  Corresponds to IDD Field `property_value_188`

        Args:
            value (float): value for IDD Field `property_value_188`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_188`'.format(value))

        self._data["Property Value 188"] = value

    @property
    def property_value_189(self):
        """Get property_value_189

        Returns:
            float: the value of `property_value_189` or None if not set
        """
        return self._data["Property Value 189"]

    @property_value_189.setter
    def property_value_189(self, value=None):
        """  Corresponds to IDD Field `property_value_189`

        Args:
            value (float): value for IDD Field `property_value_189`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_189`'.format(value))

        self._data["Property Value 189"] = value

    @property
    def property_value_190(self):
        """Get property_value_190

        Returns:
            float: the value of `property_value_190` or None if not set
        """
        return self._data["Property Value 190"]

    @property_value_190.setter
    def property_value_190(self, value=None):
        """  Corresponds to IDD Field `property_value_190`

        Args:
            value (float): value for IDD Field `property_value_190`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_190`'.format(value))

        self._data["Property Value 190"] = value

    @property
    def property_value_191(self):
        """Get property_value_191

        Returns:
            float: the value of `property_value_191` or None if not set
        """
        return self._data["Property Value 191"]

    @property_value_191.setter
    def property_value_191(self, value=None):
        """  Corresponds to IDD Field `property_value_191`

        Args:
            value (float): value for IDD Field `property_value_191`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_191`'.format(value))

        self._data["Property Value 191"] = value

    @property
    def property_value_192(self):
        """Get property_value_192

        Returns:
            float: the value of `property_value_192` or None if not set
        """
        return self._data["Property Value 192"]

    @property_value_192.setter
    def property_value_192(self, value=None):
        """  Corresponds to IDD Field `property_value_192`

        Args:
            value (float): value for IDD Field `property_value_192`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_192`'.format(value))

        self._data["Property Value 192"] = value

    @property
    def property_value_193(self):
        """Get property_value_193

        Returns:
            float: the value of `property_value_193` or None if not set
        """
        return self._data["Property Value 193"]

    @property_value_193.setter
    def property_value_193(self, value=None):
        """  Corresponds to IDD Field `property_value_193`

        Args:
            value (float): value for IDD Field `property_value_193`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_193`'.format(value))

        self._data["Property Value 193"] = value

    @property
    def property_value_194(self):
        """Get property_value_194

        Returns:
            float: the value of `property_value_194` or None if not set
        """
        return self._data["Property Value 194"]

    @property_value_194.setter
    def property_value_194(self, value=None):
        """  Corresponds to IDD Field `property_value_194`

        Args:
            value (float): value for IDD Field `property_value_194`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_194`'.format(value))

        self._data["Property Value 194"] = value

    @property
    def property_value_195(self):
        """Get property_value_195

        Returns:
            float: the value of `property_value_195` or None if not set
        """
        return self._data["Property Value 195"]

    @property_value_195.setter
    def property_value_195(self, value=None):
        """  Corresponds to IDD Field `property_value_195`

        Args:
            value (float): value for IDD Field `property_value_195`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_195`'.format(value))

        self._data["Property Value 195"] = value

    @property
    def property_value_196(self):
        """Get property_value_196

        Returns:
            float: the value of `property_value_196` or None if not set
        """
        return self._data["Property Value 196"]

    @property_value_196.setter
    def property_value_196(self, value=None):
        """  Corresponds to IDD Field `property_value_196`

        Args:
            value (float): value for IDD Field `property_value_196`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_196`'.format(value))

        self._data["Property Value 196"] = value

    @property
    def property_value_197(self):
        """Get property_value_197

        Returns:
            float: the value of `property_value_197` or None if not set
        """
        return self._data["Property Value 197"]

    @property_value_197.setter
    def property_value_197(self, value=None):
        """  Corresponds to IDD Field `property_value_197`

        Args:
            value (float): value for IDD Field `property_value_197`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_197`'.format(value))

        self._data["Property Value 197"] = value

    @property
    def property_value_198(self):
        """Get property_value_198

        Returns:
            float: the value of `property_value_198` or None if not set
        """
        return self._data["Property Value 198"]

    @property_value_198.setter
    def property_value_198(self, value=None):
        """  Corresponds to IDD Field `property_value_198`

        Args:
            value (float): value for IDD Field `property_value_198`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_198`'.format(value))

        self._data["Property Value 198"] = value

    @property
    def property_value_199(self):
        """Get property_value_199

        Returns:
            float: the value of `property_value_199` or None if not set
        """
        return self._data["Property Value 199"]

    @property_value_199.setter
    def property_value_199(self, value=None):
        """  Corresponds to IDD Field `property_value_199`

        Args:
            value (float): value for IDD Field `property_value_199`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_199`'.format(value))

        self._data["Property Value 199"] = value

    @property
    def property_value_200(self):
        """Get property_value_200

        Returns:
            float: the value of `property_value_200` or None if not set
        """
        return self._data["Property Value 200"]

    @property_value_200.setter
    def property_value_200(self, value=None):
        """  Corresponds to IDD Field `property_value_200`

        Args:
            value (float): value for IDD Field `property_value_200`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_200`'.format(value))

        self._data["Property Value 200"] = value

    @property
    def property_value_201(self):
        """Get property_value_201

        Returns:
            float: the value of `property_value_201` or None if not set
        """
        return self._data["Property Value 201"]

    @property_value_201.setter
    def property_value_201(self, value=None):
        """  Corresponds to IDD Field `property_value_201`

        Args:
            value (float): value for IDD Field `property_value_201`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_201`'.format(value))

        self._data["Property Value 201"] = value

    @property
    def property_value_202(self):
        """Get property_value_202

        Returns:
            float: the value of `property_value_202` or None if not set
        """
        return self._data["Property Value 202"]

    @property_value_202.setter
    def property_value_202(self, value=None):
        """  Corresponds to IDD Field `property_value_202`

        Args:
            value (float): value for IDD Field `property_value_202`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_202`'.format(value))

        self._data["Property Value 202"] = value

    @property
    def property_value_203(self):
        """Get property_value_203

        Returns:
            float: the value of `property_value_203` or None if not set
        """
        return self._data["Property Value 203"]

    @property_value_203.setter
    def property_value_203(self, value=None):
        """  Corresponds to IDD Field `property_value_203`

        Args:
            value (float): value for IDD Field `property_value_203`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_203`'.format(value))

        self._data["Property Value 203"] = value

    @property
    def property_value_204(self):
        """Get property_value_204

        Returns:
            float: the value of `property_value_204` or None if not set
        """
        return self._data["Property Value 204"]

    @property_value_204.setter
    def property_value_204(self, value=None):
        """  Corresponds to IDD Field `property_value_204`

        Args:
            value (float): value for IDD Field `property_value_204`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_204`'.format(value))

        self._data["Property Value 204"] = value

    @property
    def property_value_205(self):
        """Get property_value_205

        Returns:
            float: the value of `property_value_205` or None if not set
        """
        return self._data["Property Value 205"]

    @property_value_205.setter
    def property_value_205(self, value=None):
        """  Corresponds to IDD Field `property_value_205`

        Args:
            value (float): value for IDD Field `property_value_205`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_205`'.format(value))

        self._data["Property Value 205"] = value

    @property
    def property_value_206(self):
        """Get property_value_206

        Returns:
            float: the value of `property_value_206` or None if not set
        """
        return self._data["Property Value 206"]

    @property_value_206.setter
    def property_value_206(self, value=None):
        """  Corresponds to IDD Field `property_value_206`

        Args:
            value (float): value for IDD Field `property_value_206`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_206`'.format(value))

        self._data["Property Value 206"] = value

    @property
    def property_value_207(self):
        """Get property_value_207

        Returns:
            float: the value of `property_value_207` or None if not set
        """
        return self._data["Property Value 207"]

    @property_value_207.setter
    def property_value_207(self, value=None):
        """  Corresponds to IDD Field `property_value_207`

        Args:
            value (float): value for IDD Field `property_value_207`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_207`'.format(value))

        self._data["Property Value 207"] = value

    @property
    def property_value_208(self):
        """Get property_value_208

        Returns:
            float: the value of `property_value_208` or None if not set
        """
        return self._data["Property Value 208"]

    @property_value_208.setter
    def property_value_208(self, value=None):
        """  Corresponds to IDD Field `property_value_208`

        Args:
            value (float): value for IDD Field `property_value_208`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_208`'.format(value))

        self._data["Property Value 208"] = value

    @property
    def property_value_209(self):
        """Get property_value_209

        Returns:
            float: the value of `property_value_209` or None if not set
        """
        return self._data["Property Value 209"]

    @property_value_209.setter
    def property_value_209(self, value=None):
        """  Corresponds to IDD Field `property_value_209`

        Args:
            value (float): value for IDD Field `property_value_209`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_209`'.format(value))

        self._data["Property Value 209"] = value

    @property
    def property_value_210(self):
        """Get property_value_210

        Returns:
            float: the value of `property_value_210` or None if not set
        """
        return self._data["Property Value 210"]

    @property_value_210.setter
    def property_value_210(self, value=None):
        """  Corresponds to IDD Field `property_value_210`

        Args:
            value (float): value for IDD Field `property_value_210`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_210`'.format(value))

        self._data["Property Value 210"] = value

    @property
    def property_value_211(self):
        """Get property_value_211

        Returns:
            float: the value of `property_value_211` or None if not set
        """
        return self._data["Property Value 211"]

    @property_value_211.setter
    def property_value_211(self, value=None):
        """  Corresponds to IDD Field `property_value_211`

        Args:
            value (float): value for IDD Field `property_value_211`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_211`'.format(value))

        self._data["Property Value 211"] = value

    @property
    def property_value_212(self):
        """Get property_value_212

        Returns:
            float: the value of `property_value_212` or None if not set
        """
        return self._data["Property Value 212"]

    @property_value_212.setter
    def property_value_212(self, value=None):
        """  Corresponds to IDD Field `property_value_212`

        Args:
            value (float): value for IDD Field `property_value_212`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_212`'.format(value))

        self._data["Property Value 212"] = value

    @property
    def property_value_213(self):
        """Get property_value_213

        Returns:
            float: the value of `property_value_213` or None if not set
        """
        return self._data["Property Value 213"]

    @property_value_213.setter
    def property_value_213(self, value=None):
        """  Corresponds to IDD Field `property_value_213`

        Args:
            value (float): value for IDD Field `property_value_213`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_213`'.format(value))

        self._data["Property Value 213"] = value

    @property
    def property_value_214(self):
        """Get property_value_214

        Returns:
            float: the value of `property_value_214` or None if not set
        """
        return self._data["Property Value 214"]

    @property_value_214.setter
    def property_value_214(self, value=None):
        """  Corresponds to IDD Field `property_value_214`

        Args:
            value (float): value for IDD Field `property_value_214`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_214`'.format(value))

        self._data["Property Value 214"] = value

    @property
    def property_value_215(self):
        """Get property_value_215

        Returns:
            float: the value of `property_value_215` or None if not set
        """
        return self._data["Property Value 215"]

    @property_value_215.setter
    def property_value_215(self, value=None):
        """  Corresponds to IDD Field `property_value_215`

        Args:
            value (float): value for IDD Field `property_value_215`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_215`'.format(value))

        self._data["Property Value 215"] = value

    @property
    def property_value_216(self):
        """Get property_value_216

        Returns:
            float: the value of `property_value_216` or None if not set
        """
        return self._data["Property Value 216"]

    @property_value_216.setter
    def property_value_216(self, value=None):
        """  Corresponds to IDD Field `property_value_216`

        Args:
            value (float): value for IDD Field `property_value_216`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_216`'.format(value))

        self._data["Property Value 216"] = value

    @property
    def property_value_217(self):
        """Get property_value_217

        Returns:
            float: the value of `property_value_217` or None if not set
        """
        return self._data["Property Value 217"]

    @property_value_217.setter
    def property_value_217(self, value=None):
        """  Corresponds to IDD Field `property_value_217`

        Args:
            value (float): value for IDD Field `property_value_217`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_217`'.format(value))

        self._data["Property Value 217"] = value

    @property
    def property_value_218(self):
        """Get property_value_218

        Returns:
            float: the value of `property_value_218` or None if not set
        """
        return self._data["Property Value 218"]

    @property_value_218.setter
    def property_value_218(self, value=None):
        """  Corresponds to IDD Field `property_value_218`

        Args:
            value (float): value for IDD Field `property_value_218`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_218`'.format(value))

        self._data["Property Value 218"] = value

    @property
    def property_value_219(self):
        """Get property_value_219

        Returns:
            float: the value of `property_value_219` or None if not set
        """
        return self._data["Property Value 219"]

    @property_value_219.setter
    def property_value_219(self, value=None):
        """  Corresponds to IDD Field `property_value_219`

        Args:
            value (float): value for IDD Field `property_value_219`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_219`'.format(value))

        self._data["Property Value 219"] = value

    @property
    def property_value_220(self):
        """Get property_value_220

        Returns:
            float: the value of `property_value_220` or None if not set
        """
        return self._data["Property Value 220"]

    @property_value_220.setter
    def property_value_220(self, value=None):
        """  Corresponds to IDD Field `property_value_220`

        Args:
            value (float): value for IDD Field `property_value_220`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_220`'.format(value))

        self._data["Property Value 220"] = value

    @property
    def property_value_221(self):
        """Get property_value_221

        Returns:
            float: the value of `property_value_221` or None if not set
        """
        return self._data["Property Value 221"]

    @property_value_221.setter
    def property_value_221(self, value=None):
        """  Corresponds to IDD Field `property_value_221`

        Args:
            value (float): value for IDD Field `property_value_221`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_221`'.format(value))

        self._data["Property Value 221"] = value

    @property
    def property_value_222(self):
        """Get property_value_222

        Returns:
            float: the value of `property_value_222` or None if not set
        """
        return self._data["Property Value 222"]

    @property_value_222.setter
    def property_value_222(self, value=None):
        """  Corresponds to IDD Field `property_value_222`

        Args:
            value (float): value for IDD Field `property_value_222`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_222`'.format(value))

        self._data["Property Value 222"] = value

    @property
    def property_value_223(self):
        """Get property_value_223

        Returns:
            float: the value of `property_value_223` or None if not set
        """
        return self._data["Property Value 223"]

    @property_value_223.setter
    def property_value_223(self, value=None):
        """  Corresponds to IDD Field `property_value_223`

        Args:
            value (float): value for IDD Field `property_value_223`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_223`'.format(value))

        self._data["Property Value 223"] = value

    @property
    def property_value_224(self):
        """Get property_value_224

        Returns:
            float: the value of `property_value_224` or None if not set
        """
        return self._data["Property Value 224"]

    @property_value_224.setter
    def property_value_224(self, value=None):
        """  Corresponds to IDD Field `property_value_224`

        Args:
            value (float): value for IDD Field `property_value_224`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_224`'.format(value))

        self._data["Property Value 224"] = value

    @property
    def property_value_225(self):
        """Get property_value_225

        Returns:
            float: the value of `property_value_225` or None if not set
        """
        return self._data["Property Value 225"]

    @property_value_225.setter
    def property_value_225(self, value=None):
        """  Corresponds to IDD Field `property_value_225`

        Args:
            value (float): value for IDD Field `property_value_225`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_225`'.format(value))

        self._data["Property Value 225"] = value

    @property
    def property_value_226(self):
        """Get property_value_226

        Returns:
            float: the value of `property_value_226` or None if not set
        """
        return self._data["Property Value 226"]

    @property_value_226.setter
    def property_value_226(self, value=None):
        """  Corresponds to IDD Field `property_value_226`

        Args:
            value (float): value for IDD Field `property_value_226`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_226`'.format(value))

        self._data["Property Value 226"] = value

    @property
    def property_value_227(self):
        """Get property_value_227

        Returns:
            float: the value of `property_value_227` or None if not set
        """
        return self._data["Property Value 227"]

    @property_value_227.setter
    def property_value_227(self, value=None):
        """  Corresponds to IDD Field `property_value_227`

        Args:
            value (float): value for IDD Field `property_value_227`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_227`'.format(value))

        self._data["Property Value 227"] = value

    @property
    def property_value_228(self):
        """Get property_value_228

        Returns:
            float: the value of `property_value_228` or None if not set
        """
        return self._data["Property Value 228"]

    @property_value_228.setter
    def property_value_228(self, value=None):
        """  Corresponds to IDD Field `property_value_228`

        Args:
            value (float): value for IDD Field `property_value_228`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_228`'.format(value))

        self._data["Property Value 228"] = value

    @property
    def property_value_229(self):
        """Get property_value_229

        Returns:
            float: the value of `property_value_229` or None if not set
        """
        return self._data["Property Value 229"]

    @property_value_229.setter
    def property_value_229(self, value=None):
        """  Corresponds to IDD Field `property_value_229`

        Args:
            value (float): value for IDD Field `property_value_229`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_229`'.format(value))

        self._data["Property Value 229"] = value

    @property
    def property_value_230(self):
        """Get property_value_230

        Returns:
            float: the value of `property_value_230` or None if not set
        """
        return self._data["Property Value 230"]

    @property_value_230.setter
    def property_value_230(self, value=None):
        """  Corresponds to IDD Field `property_value_230`

        Args:
            value (float): value for IDD Field `property_value_230`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_230`'.format(value))

        self._data["Property Value 230"] = value

    @property
    def property_value_231(self):
        """Get property_value_231

        Returns:
            float: the value of `property_value_231` or None if not set
        """
        return self._data["Property Value 231"]

    @property_value_231.setter
    def property_value_231(self, value=None):
        """  Corresponds to IDD Field `property_value_231`

        Args:
            value (float): value for IDD Field `property_value_231`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_231`'.format(value))

        self._data["Property Value 231"] = value

    @property
    def property_value_232(self):
        """Get property_value_232

        Returns:
            float: the value of `property_value_232` or None if not set
        """
        return self._data["Property Value 232"]

    @property_value_232.setter
    def property_value_232(self, value=None):
        """  Corresponds to IDD Field `property_value_232`

        Args:
            value (float): value for IDD Field `property_value_232`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_232`'.format(value))

        self._data["Property Value 232"] = value

    @property
    def property_value_233(self):
        """Get property_value_233

        Returns:
            float: the value of `property_value_233` or None if not set
        """
        return self._data["Property Value 233"]

    @property_value_233.setter
    def property_value_233(self, value=None):
        """  Corresponds to IDD Field `property_value_233`

        Args:
            value (float): value for IDD Field `property_value_233`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_233`'.format(value))

        self._data["Property Value 233"] = value

    @property
    def property_value_234(self):
        """Get property_value_234

        Returns:
            float: the value of `property_value_234` or None if not set
        """
        return self._data["Property Value 234"]

    @property_value_234.setter
    def property_value_234(self, value=None):
        """  Corresponds to IDD Field `property_value_234`

        Args:
            value (float): value for IDD Field `property_value_234`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_234`'.format(value))

        self._data["Property Value 234"] = value

    @property
    def property_value_235(self):
        """Get property_value_235

        Returns:
            float: the value of `property_value_235` or None if not set
        """
        return self._data["Property Value 235"]

    @property_value_235.setter
    def property_value_235(self, value=None):
        """  Corresponds to IDD Field `property_value_235`

        Args:
            value (float): value for IDD Field `property_value_235`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_235`'.format(value))

        self._data["Property Value 235"] = value

    @property
    def property_value_236(self):
        """Get property_value_236

        Returns:
            float: the value of `property_value_236` or None if not set
        """
        return self._data["Property Value 236"]

    @property_value_236.setter
    def property_value_236(self, value=None):
        """  Corresponds to IDD Field `property_value_236`

        Args:
            value (float): value for IDD Field `property_value_236`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_236`'.format(value))

        self._data["Property Value 236"] = value

    @property
    def property_value_237(self):
        """Get property_value_237

        Returns:
            float: the value of `property_value_237` or None if not set
        """
        return self._data["Property Value 237"]

    @property_value_237.setter
    def property_value_237(self, value=None):
        """  Corresponds to IDD Field `property_value_237`

        Args:
            value (float): value for IDD Field `property_value_237`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_237`'.format(value))

        self._data["Property Value 237"] = value

    @property
    def property_value_238(self):
        """Get property_value_238

        Returns:
            float: the value of `property_value_238` or None if not set
        """
        return self._data["Property Value 238"]

    @property_value_238.setter
    def property_value_238(self, value=None):
        """  Corresponds to IDD Field `property_value_238`

        Args:
            value (float): value for IDD Field `property_value_238`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_238`'.format(value))

        self._data["Property Value 238"] = value

    @property
    def property_value_239(self):
        """Get property_value_239

        Returns:
            float: the value of `property_value_239` or None if not set
        """
        return self._data["Property Value 239"]

    @property_value_239.setter
    def property_value_239(self, value=None):
        """  Corresponds to IDD Field `property_value_239`

        Args:
            value (float): value for IDD Field `property_value_239`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_239`'.format(value))

        self._data["Property Value 239"] = value

    @property
    def property_value_240(self):
        """Get property_value_240

        Returns:
            float: the value of `property_value_240` or None if not set
        """
        return self._data["Property Value 240"]

    @property_value_240.setter
    def property_value_240(self, value=None):
        """  Corresponds to IDD Field `property_value_240`

        Args:
            value (float): value for IDD Field `property_value_240`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_240`'.format(value))

        self._data["Property Value 240"] = value

    @property
    def property_value_241(self):
        """Get property_value_241

        Returns:
            float: the value of `property_value_241` or None if not set
        """
        return self._data["Property Value 241"]

    @property_value_241.setter
    def property_value_241(self, value=None):
        """  Corresponds to IDD Field `property_value_241`

        Args:
            value (float): value for IDD Field `property_value_241`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_241`'.format(value))

        self._data["Property Value 241"] = value

    @property
    def property_value_242(self):
        """Get property_value_242

        Returns:
            float: the value of `property_value_242` or None if not set
        """
        return self._data["Property Value 242"]

    @property_value_242.setter
    def property_value_242(self, value=None):
        """  Corresponds to IDD Field `property_value_242`

        Args:
            value (float): value for IDD Field `property_value_242`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_242`'.format(value))

        self._data["Property Value 242"] = value

    @property
    def property_value_243(self):
        """Get property_value_243

        Returns:
            float: the value of `property_value_243` or None if not set
        """
        return self._data["Property Value 243"]

    @property_value_243.setter
    def property_value_243(self, value=None):
        """  Corresponds to IDD Field `property_value_243`

        Args:
            value (float): value for IDD Field `property_value_243`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_243`'.format(value))

        self._data["Property Value 243"] = value

    @property
    def property_value_244(self):
        """Get property_value_244

        Returns:
            float: the value of `property_value_244` or None if not set
        """
        return self._data["Property Value 244"]

    @property_value_244.setter
    def property_value_244(self, value=None):
        """  Corresponds to IDD Field `property_value_244`

        Args:
            value (float): value for IDD Field `property_value_244`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_244`'.format(value))

        self._data["Property Value 244"] = value

    @property
    def property_value_245(self):
        """Get property_value_245

        Returns:
            float: the value of `property_value_245` or None if not set
        """
        return self._data["Property Value 245"]

    @property_value_245.setter
    def property_value_245(self, value=None):
        """  Corresponds to IDD Field `property_value_245`

        Args:
            value (float): value for IDD Field `property_value_245`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_245`'.format(value))

        self._data["Property Value 245"] = value

    @property
    def property_value_246(self):
        """Get property_value_246

        Returns:
            float: the value of `property_value_246` or None if not set
        """
        return self._data["Property Value 246"]

    @property_value_246.setter
    def property_value_246(self, value=None):
        """  Corresponds to IDD Field `property_value_246`

        Args:
            value (float): value for IDD Field `property_value_246`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_246`'.format(value))

        self._data["Property Value 246"] = value

    @property
    def property_value_247(self):
        """Get property_value_247

        Returns:
            float: the value of `property_value_247` or None if not set
        """
        return self._data["Property Value 247"]

    @property_value_247.setter
    def property_value_247(self, value=None):
        """  Corresponds to IDD Field `property_value_247`

        Args:
            value (float): value for IDD Field `property_value_247`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_247`'.format(value))

        self._data["Property Value 247"] = value

    @property
    def property_value_248(self):
        """Get property_value_248

        Returns:
            float: the value of `property_value_248` or None if not set
        """
        return self._data["Property Value 248"]

    @property_value_248.setter
    def property_value_248(self, value=None):
        """  Corresponds to IDD Field `property_value_248`

        Args:
            value (float): value for IDD Field `property_value_248`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_248`'.format(value))

        self._data["Property Value 248"] = value

    @property
    def property_value_249(self):
        """Get property_value_249

        Returns:
            float: the value of `property_value_249` or None if not set
        """
        return self._data["Property Value 249"]

    @property_value_249.setter
    def property_value_249(self, value=None):
        """  Corresponds to IDD Field `property_value_249`

        Args:
            value (float): value for IDD Field `property_value_249`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_249`'.format(value))

        self._data["Property Value 249"] = value

    @property
    def property_value_250(self):
        """Get property_value_250

        Returns:
            float: the value of `property_value_250` or None if not set
        """
        return self._data["Property Value 250"]

    @property_value_250.setter
    def property_value_250(self, value=None):
        """  Corresponds to IDD Field `property_value_250`

        Args:
            value (float): value for IDD Field `property_value_250`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_250`'.format(value))

        self._data["Property Value 250"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fluid_property_type))
        out.append(self._to_str(self.fluid_phase))
        out.append(self._to_str(self.temperature_values_name))
        out.append(self._to_str(self.property_value_1))
        out.append(self._to_str(self.property_value_2))
        out.append(self._to_str(self.property_value_3))
        out.append(self._to_str(self.property_value_4))
        out.append(self._to_str(self.property_value_5))
        out.append(self._to_str(self.property_value_6))
        out.append(self._to_str(self.property_value_7))
        out.append(self._to_str(self.property_value_8))
        out.append(self._to_str(self.property_value_9))
        out.append(self._to_str(self.property_value_10))
        out.append(self._to_str(self.property_value_11))
        out.append(self._to_str(self.property_value_12))
        out.append(self._to_str(self.property_value_13))
        out.append(self._to_str(self.property_value_14))
        out.append(self._to_str(self.property_value_15))
        out.append(self._to_str(self.property_value_16))
        out.append(self._to_str(self.property_value_17))
        out.append(self._to_str(self.property_value_18))
        out.append(self._to_str(self.property_value_19))
        out.append(self._to_str(self.property_value_20))
        out.append(self._to_str(self.property_value_21))
        out.append(self._to_str(self.property_value_22))
        out.append(self._to_str(self.property_value_23))
        out.append(self._to_str(self.property_value_24))
        out.append(self._to_str(self.property_value_25))
        out.append(self._to_str(self.property_value_26))
        out.append(self._to_str(self.property_value_27))
        out.append(self._to_str(self.property_value_28))
        out.append(self._to_str(self.property_value_29))
        out.append(self._to_str(self.property_value_30))
        out.append(self._to_str(self.property_value_31))
        out.append(self._to_str(self.property_value_32))
        out.append(self._to_str(self.property_value_33))
        out.append(self._to_str(self.property_value_34))
        out.append(self._to_str(self.property_value_35))
        out.append(self._to_str(self.property_value_36))
        out.append(self._to_str(self.property_value_37))
        out.append(self._to_str(self.property_value_38))
        out.append(self._to_str(self.property_value_39))
        out.append(self._to_str(self.property_value_40))
        out.append(self._to_str(self.property_value_41))
        out.append(self._to_str(self.property_value_42))
        out.append(self._to_str(self.property_value_43))
        out.append(self._to_str(self.property_value_44))
        out.append(self._to_str(self.property_value_45))
        out.append(self._to_str(self.property_value_46))
        out.append(self._to_str(self.property_value_47))
        out.append(self._to_str(self.property_value_48))
        out.append(self._to_str(self.property_value_49))
        out.append(self._to_str(self.property_value_50))
        out.append(self._to_str(self.property_value_51))
        out.append(self._to_str(self.property_value_52))
        out.append(self._to_str(self.property_value_53))
        out.append(self._to_str(self.property_value_54))
        out.append(self._to_str(self.property_value_55))
        out.append(self._to_str(self.property_value_56))
        out.append(self._to_str(self.property_value_57))
        out.append(self._to_str(self.property_value_58))
        out.append(self._to_str(self.property_value_59))
        out.append(self._to_str(self.property_value_60))
        out.append(self._to_str(self.property_value_61))
        out.append(self._to_str(self.property_value_62))
        out.append(self._to_str(self.property_value_63))
        out.append(self._to_str(self.property_value_64))
        out.append(self._to_str(self.property_value_65))
        out.append(self._to_str(self.property_value_66))
        out.append(self._to_str(self.property_value_67))
        out.append(self._to_str(self.property_value_68))
        out.append(self._to_str(self.property_value_69))
        out.append(self._to_str(self.property_value_70))
        out.append(self._to_str(self.property_value_71))
        out.append(self._to_str(self.property_value_72))
        out.append(self._to_str(self.property_value_73))
        out.append(self._to_str(self.property_value_74))
        out.append(self._to_str(self.property_value_75))
        out.append(self._to_str(self.property_value_76))
        out.append(self._to_str(self.property_value_77))
        out.append(self._to_str(self.property_value_78))
        out.append(self._to_str(self.property_value_79))
        out.append(self._to_str(self.property_value_80))
        out.append(self._to_str(self.property_value_81))
        out.append(self._to_str(self.property_value_82))
        out.append(self._to_str(self.property_value_83))
        out.append(self._to_str(self.property_value_84))
        out.append(self._to_str(self.property_value_85))
        out.append(self._to_str(self.property_value_86))
        out.append(self._to_str(self.property_value_87))
        out.append(self._to_str(self.property_value_88))
        out.append(self._to_str(self.property_value_89))
        out.append(self._to_str(self.property_value_90))
        out.append(self._to_str(self.property_value_91))
        out.append(self._to_str(self.property_value_92))
        out.append(self._to_str(self.property_value_93))
        out.append(self._to_str(self.property_value_94))
        out.append(self._to_str(self.property_value_95))
        out.append(self._to_str(self.property_value_96))
        out.append(self._to_str(self.property_value_97))
        out.append(self._to_str(self.property_value_98))
        out.append(self._to_str(self.property_value_99))
        out.append(self._to_str(self.property_value_100))
        out.append(self._to_str(self.property_value_101))
        out.append(self._to_str(self.property_value_102))
        out.append(self._to_str(self.property_value_103))
        out.append(self._to_str(self.property_value_104))
        out.append(self._to_str(self.property_value_105))
        out.append(self._to_str(self.property_value_106))
        out.append(self._to_str(self.property_value_107))
        out.append(self._to_str(self.property_value_108))
        out.append(self._to_str(self.property_value_109))
        out.append(self._to_str(self.property_value_110))
        out.append(self._to_str(self.property_value_111))
        out.append(self._to_str(self.property_value_112))
        out.append(self._to_str(self.property_value_113))
        out.append(self._to_str(self.property_value_114))
        out.append(self._to_str(self.property_value_115))
        out.append(self._to_str(self.property_value_116))
        out.append(self._to_str(self.property_value_117))
        out.append(self._to_str(self.property_value_118))
        out.append(self._to_str(self.property_value_119))
        out.append(self._to_str(self.property_value_120))
        out.append(self._to_str(self.property_value_121))
        out.append(self._to_str(self.property_value_122))
        out.append(self._to_str(self.property_value_123))
        out.append(self._to_str(self.property_value_124))
        out.append(self._to_str(self.property_value_125))
        out.append(self._to_str(self.property_value_126))
        out.append(self._to_str(self.property_value_127))
        out.append(self._to_str(self.property_value_128))
        out.append(self._to_str(self.property_value_129))
        out.append(self._to_str(self.property_value_130))
        out.append(self._to_str(self.property_value_131))
        out.append(self._to_str(self.property_value_132))
        out.append(self._to_str(self.property_value_133))
        out.append(self._to_str(self.property_value_134))
        out.append(self._to_str(self.property_value_135))
        out.append(self._to_str(self.property_value_136))
        out.append(self._to_str(self.property_value_137))
        out.append(self._to_str(self.property_value_138))
        out.append(self._to_str(self.property_value_139))
        out.append(self._to_str(self.property_value_140))
        out.append(self._to_str(self.property_value_141))
        out.append(self._to_str(self.property_value_142))
        out.append(self._to_str(self.property_value_143))
        out.append(self._to_str(self.property_value_144))
        out.append(self._to_str(self.property_value_145))
        out.append(self._to_str(self.property_value_146))
        out.append(self._to_str(self.property_value_147))
        out.append(self._to_str(self.property_value_148))
        out.append(self._to_str(self.property_value_149))
        out.append(self._to_str(self.property_value_150))
        out.append(self._to_str(self.property_value_151))
        out.append(self._to_str(self.property_value_152))
        out.append(self._to_str(self.property_value_153))
        out.append(self._to_str(self.property_value_154))
        out.append(self._to_str(self.property_value_155))
        out.append(self._to_str(self.property_value_156))
        out.append(self._to_str(self.property_value_157))
        out.append(self._to_str(self.property_value_158))
        out.append(self._to_str(self.property_value_159))
        out.append(self._to_str(self.property_value_160))
        out.append(self._to_str(self.property_value_161))
        out.append(self._to_str(self.property_value_162))
        out.append(self._to_str(self.property_value_163))
        out.append(self._to_str(self.property_value_164))
        out.append(self._to_str(self.property_value_165))
        out.append(self._to_str(self.property_value_166))
        out.append(self._to_str(self.property_value_167))
        out.append(self._to_str(self.property_value_168))
        out.append(self._to_str(self.property_value_169))
        out.append(self._to_str(self.property_value_170))
        out.append(self._to_str(self.property_value_171))
        out.append(self._to_str(self.property_value_172))
        out.append(self._to_str(self.property_value_173))
        out.append(self._to_str(self.property_value_174))
        out.append(self._to_str(self.property_value_175))
        out.append(self._to_str(self.property_value_176))
        out.append(self._to_str(self.property_value_177))
        out.append(self._to_str(self.property_value_178))
        out.append(self._to_str(self.property_value_179))
        out.append(self._to_str(self.property_value_180))
        out.append(self._to_str(self.property_value_181))
        out.append(self._to_str(self.property_value_182))
        out.append(self._to_str(self.property_value_183))
        out.append(self._to_str(self.property_value_184))
        out.append(self._to_str(self.property_value_185))
        out.append(self._to_str(self.property_value_186))
        out.append(self._to_str(self.property_value_187))
        out.append(self._to_str(self.property_value_188))
        out.append(self._to_str(self.property_value_189))
        out.append(self._to_str(self.property_value_190))
        out.append(self._to_str(self.property_value_191))
        out.append(self._to_str(self.property_value_192))
        out.append(self._to_str(self.property_value_193))
        out.append(self._to_str(self.property_value_194))
        out.append(self._to_str(self.property_value_195))
        out.append(self._to_str(self.property_value_196))
        out.append(self._to_str(self.property_value_197))
        out.append(self._to_str(self.property_value_198))
        out.append(self._to_str(self.property_value_199))
        out.append(self._to_str(self.property_value_200))
        out.append(self._to_str(self.property_value_201))
        out.append(self._to_str(self.property_value_202))
        out.append(self._to_str(self.property_value_203))
        out.append(self._to_str(self.property_value_204))
        out.append(self._to_str(self.property_value_205))
        out.append(self._to_str(self.property_value_206))
        out.append(self._to_str(self.property_value_207))
        out.append(self._to_str(self.property_value_208))
        out.append(self._to_str(self.property_value_209))
        out.append(self._to_str(self.property_value_210))
        out.append(self._to_str(self.property_value_211))
        out.append(self._to_str(self.property_value_212))
        out.append(self._to_str(self.property_value_213))
        out.append(self._to_str(self.property_value_214))
        out.append(self._to_str(self.property_value_215))
        out.append(self._to_str(self.property_value_216))
        out.append(self._to_str(self.property_value_217))
        out.append(self._to_str(self.property_value_218))
        out.append(self._to_str(self.property_value_219))
        out.append(self._to_str(self.property_value_220))
        out.append(self._to_str(self.property_value_221))
        out.append(self._to_str(self.property_value_222))
        out.append(self._to_str(self.property_value_223))
        out.append(self._to_str(self.property_value_224))
        out.append(self._to_str(self.property_value_225))
        out.append(self._to_str(self.property_value_226))
        out.append(self._to_str(self.property_value_227))
        out.append(self._to_str(self.property_value_228))
        out.append(self._to_str(self.property_value_229))
        out.append(self._to_str(self.property_value_230))
        out.append(self._to_str(self.property_value_231))
        out.append(self._to_str(self.property_value_232))
        out.append(self._to_str(self.property_value_233))
        out.append(self._to_str(self.property_value_234))
        out.append(self._to_str(self.property_value_235))
        out.append(self._to_str(self.property_value_236))
        out.append(self._to_str(self.property_value_237))
        out.append(self._to_str(self.property_value_238))
        out.append(self._to_str(self.property_value_239))
        out.append(self._to_str(self.property_value_240))
        out.append(self._to_str(self.property_value_241))
        out.append(self._to_str(self.property_value_242))
        out.append(self._to_str(self.property_value_243))
        out.append(self._to_str(self.property_value_244))
        out.append(self._to_str(self.property_value_245))
        out.append(self._to_str(self.property_value_246))
        out.append(self._to_str(self.property_value_247))
        out.append(self._to_str(self.property_value_248))
        out.append(self._to_str(self.property_value_249))
        out.append(self._to_str(self.property_value_250))
        return ",".join(out)

class FluidPropertiesSuperheated(object):
    """ Corresponds to IDD object `FluidProperties:Superheated`
        fluid properties for the superheated region
    
    """
    internal_name = "FluidProperties:Superheated"
    field_count = 254
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `FluidProperties:Superheated`
        """
        self._data = OrderedDict()
        self._data["Fluid Name"] = None
        self._data["Fluid Property Type"] = None
        self._data["Temperature Values Name"] = None
        self._data["Pressure"] = None
        self._data["Property Value 1"] = None
        self._data["Property Value 2"] = None
        self._data["Property Value 3"] = None
        self._data["Property Value 4"] = None
        self._data["Property Value 5"] = None
        self._data["Property Value 6"] = None
        self._data["Property Value 7"] = None
        self._data["Property Value 8"] = None
        self._data["Property Value 9"] = None
        self._data["Property Value 10"] = None
        self._data["Property Value 11"] = None
        self._data["Property Value 12"] = None
        self._data["Property Value 13"] = None
        self._data["Property Value 14"] = None
        self._data["Property Value 15"] = None
        self._data["Property Value 16"] = None
        self._data["Property Value 17"] = None
        self._data["Property Value 18"] = None
        self._data["Property Value 19"] = None
        self._data["Property Value 20"] = None
        self._data["Property Value 21"] = None
        self._data["Property Value 22"] = None
        self._data["Property Value 23"] = None
        self._data["Property Value 24"] = None
        self._data["Property Value 25"] = None
        self._data["Property Value 26"] = None
        self._data["Property Value 27"] = None
        self._data["Property Value 28"] = None
        self._data["Property Value 29"] = None
        self._data["Property Value 30"] = None
        self._data["Property Value 31"] = None
        self._data["Property Value 32"] = None
        self._data["Property Value 33"] = None
        self._data["Property Value 34"] = None
        self._data["Property Value 35"] = None
        self._data["Property Value 36"] = None
        self._data["Property Value 37"] = None
        self._data["Property Value 38"] = None
        self._data["Property Value 39"] = None
        self._data["Property Value 40"] = None
        self._data["Property Value 41"] = None
        self._data["Property Value 42"] = None
        self._data["Property Value 43"] = None
        self._data["Property Value 44"] = None
        self._data["Property Value 45"] = None
        self._data["Property Value 46"] = None
        self._data["Property Value 47"] = None
        self._data["Property Value 48"] = None
        self._data["Property Value 49"] = None
        self._data["Property Value 50"] = None
        self._data["Property Value 51"] = None
        self._data["Property Value 52"] = None
        self._data["Property Value 53"] = None
        self._data["Property Value 54"] = None
        self._data["Property Value 55"] = None
        self._data["Property Value 56"] = None
        self._data["Property Value 57"] = None
        self._data["Property Value 58"] = None
        self._data["Property Value 59"] = None
        self._data["Property Value 60"] = None
        self._data["Property Value 61"] = None
        self._data["Property Value 62"] = None
        self._data["Property Value 63"] = None
        self._data["Property Value 64"] = None
        self._data["Property Value 65"] = None
        self._data["Property Value 66"] = None
        self._data["Property Value 67"] = None
        self._data["Property Value 68"] = None
        self._data["Property Value 69"] = None
        self._data["Property Value 70"] = None
        self._data["Property Value 71"] = None
        self._data["Property Value 72"] = None
        self._data["Property Value 73"] = None
        self._data["Property Value 74"] = None
        self._data["Property Value 75"] = None
        self._data["Property Value 76"] = None
        self._data["Property Value 77"] = None
        self._data["Property Value 78"] = None
        self._data["Property Value 79"] = None
        self._data["Property Value 80"] = None
        self._data["Property Value 81"] = None
        self._data["Property Value 82"] = None
        self._data["Property Value 83"] = None
        self._data["Property Value 84"] = None
        self._data["Property Value 85"] = None
        self._data["Property Value 86"] = None
        self._data["Property Value 87"] = None
        self._data["Property Value 88"] = None
        self._data["Property Value 89"] = None
        self._data["Property Value 90"] = None
        self._data["Property Value 91"] = None
        self._data["Property Value 92"] = None
        self._data["Property Value 93"] = None
        self._data["Property Value 94"] = None
        self._data["Property Value 95"] = None
        self._data["Property Value 96"] = None
        self._data["Property Value 97"] = None
        self._data["Property Value 98"] = None
        self._data["Property Value 99"] = None
        self._data["Property Value 100"] = None
        self._data["Property Value 101"] = None
        self._data["Property Value 102"] = None
        self._data["Property Value 103"] = None
        self._data["Property Value 104"] = None
        self._data["Property Value 105"] = None
        self._data["Property Value 106"] = None
        self._data["Property Value 107"] = None
        self._data["Property Value 108"] = None
        self._data["Property Value 109"] = None
        self._data["Property Value 110"] = None
        self._data["Property Value 111"] = None
        self._data["Property Value 112"] = None
        self._data["Property Value 113"] = None
        self._data["Property Value 114"] = None
        self._data["Property Value 115"] = None
        self._data["Property Value 116"] = None
        self._data["Property Value 117"] = None
        self._data["Property Value 118"] = None
        self._data["Property Value 119"] = None
        self._data["Property Value 120"] = None
        self._data["Property Value 121"] = None
        self._data["Property Value 122"] = None
        self._data["Property Value 123"] = None
        self._data["Property Value 124"] = None
        self._data["Property Value 125"] = None
        self._data["Property Value 126"] = None
        self._data["Property Value 127"] = None
        self._data["Property Value 128"] = None
        self._data["Property Value 129"] = None
        self._data["Property Value 130"] = None
        self._data["Property Value 131"] = None
        self._data["Property Value 132"] = None
        self._data["Property Value 133"] = None
        self._data["Property Value 134"] = None
        self._data["Property Value 135"] = None
        self._data["Property Value 136"] = None
        self._data["Property Value 137"] = None
        self._data["Property Value 138"] = None
        self._data["Property Value 139"] = None
        self._data["Property Value 140"] = None
        self._data["Property Value 141"] = None
        self._data["Property Value 142"] = None
        self._data["Property Value 143"] = None
        self._data["Property Value 144"] = None
        self._data["Property Value 145"] = None
        self._data["Property Value 146"] = None
        self._data["Property Value 147"] = None
        self._data["Property Value 148"] = None
        self._data["Property Value 149"] = None
        self._data["Property Value 150"] = None
        self._data["Property Value 151"] = None
        self._data["Property Value 152"] = None
        self._data["Property Value 153"] = None
        self._data["Property Value 154"] = None
        self._data["Property Value 155"] = None
        self._data["Property Value 156"] = None
        self._data["Property Value 157"] = None
        self._data["Property Value 158"] = None
        self._data["Property Value 159"] = None
        self._data["Property Value 160"] = None
        self._data["Property Value 161"] = None
        self._data["Property Value 162"] = None
        self._data["Property Value 163"] = None
        self._data["Property Value 164"] = None
        self._data["Property Value 165"] = None
        self._data["Property Value 166"] = None
        self._data["Property Value 167"] = None
        self._data["Property Value 168"] = None
        self._data["Property Value 169"] = None
        self._data["Property Value 170"] = None
        self._data["Property Value 171"] = None
        self._data["Property Value 172"] = None
        self._data["Property Value 173"] = None
        self._data["Property Value 174"] = None
        self._data["Property Value 175"] = None
        self._data["Property Value 176"] = None
        self._data["Property Value 177"] = None
        self._data["Property Value 178"] = None
        self._data["Property Value 179"] = None
        self._data["Property Value 180"] = None
        self._data["Property Value 181"] = None
        self._data["Property Value 182"] = None
        self._data["Property Value 183"] = None
        self._data["Property Value 184"] = None
        self._data["Property Value 185"] = None
        self._data["Property Value 186"] = None
        self._data["Property Value 187"] = None
        self._data["Property Value 188"] = None
        self._data["Property Value 189"] = None
        self._data["Property Value 190"] = None
        self._data["Property Value 191"] = None
        self._data["Property Value 192"] = None
        self._data["Property Value 193"] = None
        self._data["Property Value 194"] = None
        self._data["Property Value 195"] = None
        self._data["Property Value 196"] = None
        self._data["Property Value 197"] = None
        self._data["Property Value 198"] = None
        self._data["Property Value 199"] = None
        self._data["Property Value 200"] = None
        self._data["Property Value 201"] = None
        self._data["Property Value 202"] = None
        self._data["Property Value 203"] = None
        self._data["Property Value 204"] = None
        self._data["Property Value 205"] = None
        self._data["Property Value 206"] = None
        self._data["Property Value 207"] = None
        self._data["Property Value 208"] = None
        self._data["Property Value 209"] = None
        self._data["Property Value 210"] = None
        self._data["Property Value 211"] = None
        self._data["Property Value 212"] = None
        self._data["Property Value 213"] = None
        self._data["Property Value 214"] = None
        self._data["Property Value 215"] = None
        self._data["Property Value 216"] = None
        self._data["Property Value 217"] = None
        self._data["Property Value 218"] = None
        self._data["Property Value 219"] = None
        self._data["Property Value 220"] = None
        self._data["Property Value 221"] = None
        self._data["Property Value 222"] = None
        self._data["Property Value 223"] = None
        self._data["Property Value 224"] = None
        self._data["Property Value 225"] = None
        self._data["Property Value 226"] = None
        self._data["Property Value 227"] = None
        self._data["Property Value 228"] = None
        self._data["Property Value 229"] = None
        self._data["Property Value 230"] = None
        self._data["Property Value 231"] = None
        self._data["Property Value 232"] = None
        self._data["Property Value 233"] = None
        self._data["Property Value 234"] = None
        self._data["Property Value 235"] = None
        self._data["Property Value 236"] = None
        self._data["Property Value 237"] = None
        self._data["Property Value 238"] = None
        self._data["Property Value 239"] = None
        self._data["Property Value 240"] = None
        self._data["Property Value 241"] = None
        self._data["Property Value 242"] = None
        self._data["Property Value 243"] = None
        self._data["Property Value 244"] = None
        self._data["Property Value 245"] = None
        self._data["Property Value 246"] = None
        self._data["Property Value 247"] = None
        self._data["Property Value 248"] = None
        self._data["Property Value 249"] = None
        self._data["Property Value 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.fluid_name = None
        else:
            self.fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_property_type = None
        else:
            self.fluid_property_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_values_name = None
        else:
            self.temperature_values_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pressure = None
        else:
            self.pressure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_1 = None
        else:
            self.property_value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_2 = None
        else:
            self.property_value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_3 = None
        else:
            self.property_value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_4 = None
        else:
            self.property_value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_5 = None
        else:
            self.property_value_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_6 = None
        else:
            self.property_value_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_7 = None
        else:
            self.property_value_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_8 = None
        else:
            self.property_value_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_9 = None
        else:
            self.property_value_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_10 = None
        else:
            self.property_value_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_11 = None
        else:
            self.property_value_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_12 = None
        else:
            self.property_value_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_13 = None
        else:
            self.property_value_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_14 = None
        else:
            self.property_value_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_15 = None
        else:
            self.property_value_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_16 = None
        else:
            self.property_value_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_17 = None
        else:
            self.property_value_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_18 = None
        else:
            self.property_value_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_19 = None
        else:
            self.property_value_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_20 = None
        else:
            self.property_value_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_21 = None
        else:
            self.property_value_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_22 = None
        else:
            self.property_value_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_23 = None
        else:
            self.property_value_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_24 = None
        else:
            self.property_value_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_25 = None
        else:
            self.property_value_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_26 = None
        else:
            self.property_value_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_27 = None
        else:
            self.property_value_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_28 = None
        else:
            self.property_value_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_29 = None
        else:
            self.property_value_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_30 = None
        else:
            self.property_value_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_31 = None
        else:
            self.property_value_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_32 = None
        else:
            self.property_value_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_33 = None
        else:
            self.property_value_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_34 = None
        else:
            self.property_value_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_35 = None
        else:
            self.property_value_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_36 = None
        else:
            self.property_value_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_37 = None
        else:
            self.property_value_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_38 = None
        else:
            self.property_value_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_39 = None
        else:
            self.property_value_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_40 = None
        else:
            self.property_value_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_41 = None
        else:
            self.property_value_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_42 = None
        else:
            self.property_value_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_43 = None
        else:
            self.property_value_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_44 = None
        else:
            self.property_value_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_45 = None
        else:
            self.property_value_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_46 = None
        else:
            self.property_value_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_47 = None
        else:
            self.property_value_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_48 = None
        else:
            self.property_value_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_49 = None
        else:
            self.property_value_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_50 = None
        else:
            self.property_value_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_51 = None
        else:
            self.property_value_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_52 = None
        else:
            self.property_value_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_53 = None
        else:
            self.property_value_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_54 = None
        else:
            self.property_value_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_55 = None
        else:
            self.property_value_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_56 = None
        else:
            self.property_value_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_57 = None
        else:
            self.property_value_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_58 = None
        else:
            self.property_value_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_59 = None
        else:
            self.property_value_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_60 = None
        else:
            self.property_value_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_61 = None
        else:
            self.property_value_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_62 = None
        else:
            self.property_value_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_63 = None
        else:
            self.property_value_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_64 = None
        else:
            self.property_value_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_65 = None
        else:
            self.property_value_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_66 = None
        else:
            self.property_value_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_67 = None
        else:
            self.property_value_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_68 = None
        else:
            self.property_value_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_69 = None
        else:
            self.property_value_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_70 = None
        else:
            self.property_value_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_71 = None
        else:
            self.property_value_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_72 = None
        else:
            self.property_value_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_73 = None
        else:
            self.property_value_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_74 = None
        else:
            self.property_value_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_75 = None
        else:
            self.property_value_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_76 = None
        else:
            self.property_value_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_77 = None
        else:
            self.property_value_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_78 = None
        else:
            self.property_value_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_79 = None
        else:
            self.property_value_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_80 = None
        else:
            self.property_value_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_81 = None
        else:
            self.property_value_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_82 = None
        else:
            self.property_value_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_83 = None
        else:
            self.property_value_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_84 = None
        else:
            self.property_value_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_85 = None
        else:
            self.property_value_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_86 = None
        else:
            self.property_value_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_87 = None
        else:
            self.property_value_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_88 = None
        else:
            self.property_value_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_89 = None
        else:
            self.property_value_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_90 = None
        else:
            self.property_value_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_91 = None
        else:
            self.property_value_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_92 = None
        else:
            self.property_value_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_93 = None
        else:
            self.property_value_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_94 = None
        else:
            self.property_value_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_95 = None
        else:
            self.property_value_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_96 = None
        else:
            self.property_value_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_97 = None
        else:
            self.property_value_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_98 = None
        else:
            self.property_value_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_99 = None
        else:
            self.property_value_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_100 = None
        else:
            self.property_value_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_101 = None
        else:
            self.property_value_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_102 = None
        else:
            self.property_value_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_103 = None
        else:
            self.property_value_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_104 = None
        else:
            self.property_value_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_105 = None
        else:
            self.property_value_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_106 = None
        else:
            self.property_value_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_107 = None
        else:
            self.property_value_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_108 = None
        else:
            self.property_value_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_109 = None
        else:
            self.property_value_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_110 = None
        else:
            self.property_value_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_111 = None
        else:
            self.property_value_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_112 = None
        else:
            self.property_value_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_113 = None
        else:
            self.property_value_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_114 = None
        else:
            self.property_value_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_115 = None
        else:
            self.property_value_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_116 = None
        else:
            self.property_value_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_117 = None
        else:
            self.property_value_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_118 = None
        else:
            self.property_value_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_119 = None
        else:
            self.property_value_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_120 = None
        else:
            self.property_value_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_121 = None
        else:
            self.property_value_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_122 = None
        else:
            self.property_value_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_123 = None
        else:
            self.property_value_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_124 = None
        else:
            self.property_value_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_125 = None
        else:
            self.property_value_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_126 = None
        else:
            self.property_value_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_127 = None
        else:
            self.property_value_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_128 = None
        else:
            self.property_value_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_129 = None
        else:
            self.property_value_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_130 = None
        else:
            self.property_value_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_131 = None
        else:
            self.property_value_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_132 = None
        else:
            self.property_value_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_133 = None
        else:
            self.property_value_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_134 = None
        else:
            self.property_value_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_135 = None
        else:
            self.property_value_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_136 = None
        else:
            self.property_value_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_137 = None
        else:
            self.property_value_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_138 = None
        else:
            self.property_value_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_139 = None
        else:
            self.property_value_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_140 = None
        else:
            self.property_value_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_141 = None
        else:
            self.property_value_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_142 = None
        else:
            self.property_value_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_143 = None
        else:
            self.property_value_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_144 = None
        else:
            self.property_value_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_145 = None
        else:
            self.property_value_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_146 = None
        else:
            self.property_value_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_147 = None
        else:
            self.property_value_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_148 = None
        else:
            self.property_value_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_149 = None
        else:
            self.property_value_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_150 = None
        else:
            self.property_value_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_151 = None
        else:
            self.property_value_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_152 = None
        else:
            self.property_value_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_153 = None
        else:
            self.property_value_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_154 = None
        else:
            self.property_value_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_155 = None
        else:
            self.property_value_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_156 = None
        else:
            self.property_value_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_157 = None
        else:
            self.property_value_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_158 = None
        else:
            self.property_value_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_159 = None
        else:
            self.property_value_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_160 = None
        else:
            self.property_value_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_161 = None
        else:
            self.property_value_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_162 = None
        else:
            self.property_value_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_163 = None
        else:
            self.property_value_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_164 = None
        else:
            self.property_value_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_165 = None
        else:
            self.property_value_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_166 = None
        else:
            self.property_value_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_167 = None
        else:
            self.property_value_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_168 = None
        else:
            self.property_value_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_169 = None
        else:
            self.property_value_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_170 = None
        else:
            self.property_value_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_171 = None
        else:
            self.property_value_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_172 = None
        else:
            self.property_value_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_173 = None
        else:
            self.property_value_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_174 = None
        else:
            self.property_value_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_175 = None
        else:
            self.property_value_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_176 = None
        else:
            self.property_value_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_177 = None
        else:
            self.property_value_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_178 = None
        else:
            self.property_value_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_179 = None
        else:
            self.property_value_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_180 = None
        else:
            self.property_value_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_181 = None
        else:
            self.property_value_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_182 = None
        else:
            self.property_value_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_183 = None
        else:
            self.property_value_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_184 = None
        else:
            self.property_value_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_185 = None
        else:
            self.property_value_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_186 = None
        else:
            self.property_value_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_187 = None
        else:
            self.property_value_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_188 = None
        else:
            self.property_value_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_189 = None
        else:
            self.property_value_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_190 = None
        else:
            self.property_value_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_191 = None
        else:
            self.property_value_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_192 = None
        else:
            self.property_value_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_193 = None
        else:
            self.property_value_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_194 = None
        else:
            self.property_value_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_195 = None
        else:
            self.property_value_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_196 = None
        else:
            self.property_value_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_197 = None
        else:
            self.property_value_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_198 = None
        else:
            self.property_value_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_199 = None
        else:
            self.property_value_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_200 = None
        else:
            self.property_value_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_201 = None
        else:
            self.property_value_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_202 = None
        else:
            self.property_value_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_203 = None
        else:
            self.property_value_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_204 = None
        else:
            self.property_value_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_205 = None
        else:
            self.property_value_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_206 = None
        else:
            self.property_value_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_207 = None
        else:
            self.property_value_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_208 = None
        else:
            self.property_value_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_209 = None
        else:
            self.property_value_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_210 = None
        else:
            self.property_value_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_211 = None
        else:
            self.property_value_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_212 = None
        else:
            self.property_value_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_213 = None
        else:
            self.property_value_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_214 = None
        else:
            self.property_value_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_215 = None
        else:
            self.property_value_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_216 = None
        else:
            self.property_value_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_217 = None
        else:
            self.property_value_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_218 = None
        else:
            self.property_value_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_219 = None
        else:
            self.property_value_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_220 = None
        else:
            self.property_value_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_221 = None
        else:
            self.property_value_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_222 = None
        else:
            self.property_value_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_223 = None
        else:
            self.property_value_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_224 = None
        else:
            self.property_value_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_225 = None
        else:
            self.property_value_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_226 = None
        else:
            self.property_value_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_227 = None
        else:
            self.property_value_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_228 = None
        else:
            self.property_value_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_229 = None
        else:
            self.property_value_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_230 = None
        else:
            self.property_value_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_231 = None
        else:
            self.property_value_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_232 = None
        else:
            self.property_value_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_233 = None
        else:
            self.property_value_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_234 = None
        else:
            self.property_value_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_235 = None
        else:
            self.property_value_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_236 = None
        else:
            self.property_value_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_237 = None
        else:
            self.property_value_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_238 = None
        else:
            self.property_value_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_239 = None
        else:
            self.property_value_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_240 = None
        else:
            self.property_value_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_241 = None
        else:
            self.property_value_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_242 = None
        else:
            self.property_value_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_243 = None
        else:
            self.property_value_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_244 = None
        else:
            self.property_value_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_245 = None
        else:
            self.property_value_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_246 = None
        else:
            self.property_value_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_247 = None
        else:
            self.property_value_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_248 = None
        else:
            self.property_value_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_249 = None
        else:
            self.property_value_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_250 = None
        else:
            self.property_value_250 = vals[i]
        i += 1

    @property
    def fluid_name(self):
        """Get fluid_name

        Returns:
            str: the value of `fluid_name` or None if not set
        """
        return self._data["Fluid Name"]

    @fluid_name.setter
    def fluid_name(self, value=None):
        """  Corresponds to IDD Field `fluid_name`

        Args:
            value (str): value for IDD Field `fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_name`')

        self._data["Fluid Name"] = value

    @property
    def fluid_property_type(self):
        """Get fluid_property_type

        Returns:
            str: the value of `fluid_property_type` or None if not set
        """
        return self._data["Fluid Property Type"]

    @fluid_property_type.setter
    def fluid_property_type(self, value=None):
        """  Corresponds to IDD Field `fluid_property_type`
        Enthalpy Units are J/kg
        Density Units are kg/m3

        Args:
            value (str): value for IDD Field `fluid_property_type`
                Accepted values are:
                      - Enthalpy     ! Units are J/kg
                      - Density      ! Units are kg/m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_property_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_property_type`')
            vals = set()
            vals.add("Enthalpy     ! Units are J/kg")
            vals.add("Density      ! Units are kg/m3")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_property_type`'.format(value))

        self._data["Fluid Property Type"] = value

    @property
    def temperature_values_name(self):
        """Get temperature_values_name

        Returns:
            str: the value of `temperature_values_name` or None if not set
        """
        return self._data["Temperature Values Name"]

    @temperature_values_name.setter
    def temperature_values_name(self, value=None):
        """  Corresponds to IDD Field `temperature_values_name`
        Enter the name of a FluidProperties:Temperatures object.

        Args:
            value (str): value for IDD Field `temperature_values_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_values_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_values_name`')

        self._data["Temperature Values Name"] = value

    @property
    def pressure(self):
        """Get pressure

        Returns:
            float: the value of `pressure` or None if not set
        """
        return self._data["Pressure"]

    @pressure.setter
    def pressure(self, value=None):
        """  Corresponds to IDD Field `pressure`
        pressure for this list of properties

        Args:
            value (float): value for IDD Field `pressure`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `pressure`')

        self._data["Pressure"] = value

    @property
    def property_value_1(self):
        """Get property_value_1

        Returns:
            float: the value of `property_value_1` or None if not set
        """
        return self._data["Property Value 1"]

    @property_value_1.setter
    def property_value_1(self, value=None):
        """  Corresponds to IDD Field `property_value_1`

        Args:
            value (float): value for IDD Field `property_value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_1`'.format(value))

        self._data["Property Value 1"] = value

    @property
    def property_value_2(self):
        """Get property_value_2

        Returns:
            float: the value of `property_value_2` or None if not set
        """
        return self._data["Property Value 2"]

    @property_value_2.setter
    def property_value_2(self, value=None):
        """  Corresponds to IDD Field `property_value_2`

        Args:
            value (float): value for IDD Field `property_value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_2`'.format(value))

        self._data["Property Value 2"] = value

    @property
    def property_value_3(self):
        """Get property_value_3

        Returns:
            float: the value of `property_value_3` or None if not set
        """
        return self._data["Property Value 3"]

    @property_value_3.setter
    def property_value_3(self, value=None):
        """  Corresponds to IDD Field `property_value_3`

        Args:
            value (float): value for IDD Field `property_value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_3`'.format(value))

        self._data["Property Value 3"] = value

    @property
    def property_value_4(self):
        """Get property_value_4

        Returns:
            float: the value of `property_value_4` or None if not set
        """
        return self._data["Property Value 4"]

    @property_value_4.setter
    def property_value_4(self, value=None):
        """  Corresponds to IDD Field `property_value_4`

        Args:
            value (float): value for IDD Field `property_value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_4`'.format(value))

        self._data["Property Value 4"] = value

    @property
    def property_value_5(self):
        """Get property_value_5

        Returns:
            float: the value of `property_value_5` or None if not set
        """
        return self._data["Property Value 5"]

    @property_value_5.setter
    def property_value_5(self, value=None):
        """  Corresponds to IDD Field `property_value_5`

        Args:
            value (float): value for IDD Field `property_value_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_5`'.format(value))

        self._data["Property Value 5"] = value

    @property
    def property_value_6(self):
        """Get property_value_6

        Returns:
            float: the value of `property_value_6` or None if not set
        """
        return self._data["Property Value 6"]

    @property_value_6.setter
    def property_value_6(self, value=None):
        """  Corresponds to IDD Field `property_value_6`

        Args:
            value (float): value for IDD Field `property_value_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_6`'.format(value))

        self._data["Property Value 6"] = value

    @property
    def property_value_7(self):
        """Get property_value_7

        Returns:
            float: the value of `property_value_7` or None if not set
        """
        return self._data["Property Value 7"]

    @property_value_7.setter
    def property_value_7(self, value=None):
        """  Corresponds to IDD Field `property_value_7`

        Args:
            value (float): value for IDD Field `property_value_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_7`'.format(value))

        self._data["Property Value 7"] = value

    @property
    def property_value_8(self):
        """Get property_value_8

        Returns:
            float: the value of `property_value_8` or None if not set
        """
        return self._data["Property Value 8"]

    @property_value_8.setter
    def property_value_8(self, value=None):
        """  Corresponds to IDD Field `property_value_8`

        Args:
            value (float): value for IDD Field `property_value_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_8`'.format(value))

        self._data["Property Value 8"] = value

    @property
    def property_value_9(self):
        """Get property_value_9

        Returns:
            float: the value of `property_value_9` or None if not set
        """
        return self._data["Property Value 9"]

    @property_value_9.setter
    def property_value_9(self, value=None):
        """  Corresponds to IDD Field `property_value_9`

        Args:
            value (float): value for IDD Field `property_value_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_9`'.format(value))

        self._data["Property Value 9"] = value

    @property
    def property_value_10(self):
        """Get property_value_10

        Returns:
            float: the value of `property_value_10` or None if not set
        """
        return self._data["Property Value 10"]

    @property_value_10.setter
    def property_value_10(self, value=None):
        """  Corresponds to IDD Field `property_value_10`

        Args:
            value (float): value for IDD Field `property_value_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_10`'.format(value))

        self._data["Property Value 10"] = value

    @property
    def property_value_11(self):
        """Get property_value_11

        Returns:
            float: the value of `property_value_11` or None if not set
        """
        return self._data["Property Value 11"]

    @property_value_11.setter
    def property_value_11(self, value=None):
        """  Corresponds to IDD Field `property_value_11`

        Args:
            value (float): value for IDD Field `property_value_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_11`'.format(value))

        self._data["Property Value 11"] = value

    @property
    def property_value_12(self):
        """Get property_value_12

        Returns:
            float: the value of `property_value_12` or None if not set
        """
        return self._data["Property Value 12"]

    @property_value_12.setter
    def property_value_12(self, value=None):
        """  Corresponds to IDD Field `property_value_12`

        Args:
            value (float): value for IDD Field `property_value_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_12`'.format(value))

        self._data["Property Value 12"] = value

    @property
    def property_value_13(self):
        """Get property_value_13

        Returns:
            float: the value of `property_value_13` or None if not set
        """
        return self._data["Property Value 13"]

    @property_value_13.setter
    def property_value_13(self, value=None):
        """  Corresponds to IDD Field `property_value_13`

        Args:
            value (float): value for IDD Field `property_value_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_13`'.format(value))

        self._data["Property Value 13"] = value

    @property
    def property_value_14(self):
        """Get property_value_14

        Returns:
            float: the value of `property_value_14` or None if not set
        """
        return self._data["Property Value 14"]

    @property_value_14.setter
    def property_value_14(self, value=None):
        """  Corresponds to IDD Field `property_value_14`

        Args:
            value (float): value for IDD Field `property_value_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_14`'.format(value))

        self._data["Property Value 14"] = value

    @property
    def property_value_15(self):
        """Get property_value_15

        Returns:
            float: the value of `property_value_15` or None if not set
        """
        return self._data["Property Value 15"]

    @property_value_15.setter
    def property_value_15(self, value=None):
        """  Corresponds to IDD Field `property_value_15`

        Args:
            value (float): value for IDD Field `property_value_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_15`'.format(value))

        self._data["Property Value 15"] = value

    @property
    def property_value_16(self):
        """Get property_value_16

        Returns:
            float: the value of `property_value_16` or None if not set
        """
        return self._data["Property Value 16"]

    @property_value_16.setter
    def property_value_16(self, value=None):
        """  Corresponds to IDD Field `property_value_16`

        Args:
            value (float): value for IDD Field `property_value_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_16`'.format(value))

        self._data["Property Value 16"] = value

    @property
    def property_value_17(self):
        """Get property_value_17

        Returns:
            float: the value of `property_value_17` or None if not set
        """
        return self._data["Property Value 17"]

    @property_value_17.setter
    def property_value_17(self, value=None):
        """  Corresponds to IDD Field `property_value_17`

        Args:
            value (float): value for IDD Field `property_value_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_17`'.format(value))

        self._data["Property Value 17"] = value

    @property
    def property_value_18(self):
        """Get property_value_18

        Returns:
            float: the value of `property_value_18` or None if not set
        """
        return self._data["Property Value 18"]

    @property_value_18.setter
    def property_value_18(self, value=None):
        """  Corresponds to IDD Field `property_value_18`

        Args:
            value (float): value for IDD Field `property_value_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_18`'.format(value))

        self._data["Property Value 18"] = value

    @property
    def property_value_19(self):
        """Get property_value_19

        Returns:
            float: the value of `property_value_19` or None if not set
        """
        return self._data["Property Value 19"]

    @property_value_19.setter
    def property_value_19(self, value=None):
        """  Corresponds to IDD Field `property_value_19`

        Args:
            value (float): value for IDD Field `property_value_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_19`'.format(value))

        self._data["Property Value 19"] = value

    @property
    def property_value_20(self):
        """Get property_value_20

        Returns:
            float: the value of `property_value_20` or None if not set
        """
        return self._data["Property Value 20"]

    @property_value_20.setter
    def property_value_20(self, value=None):
        """  Corresponds to IDD Field `property_value_20`

        Args:
            value (float): value for IDD Field `property_value_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_20`'.format(value))

        self._data["Property Value 20"] = value

    @property
    def property_value_21(self):
        """Get property_value_21

        Returns:
            float: the value of `property_value_21` or None if not set
        """
        return self._data["Property Value 21"]

    @property_value_21.setter
    def property_value_21(self, value=None):
        """  Corresponds to IDD Field `property_value_21`

        Args:
            value (float): value for IDD Field `property_value_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_21`'.format(value))

        self._data["Property Value 21"] = value

    @property
    def property_value_22(self):
        """Get property_value_22

        Returns:
            float: the value of `property_value_22` or None if not set
        """
        return self._data["Property Value 22"]

    @property_value_22.setter
    def property_value_22(self, value=None):
        """  Corresponds to IDD Field `property_value_22`

        Args:
            value (float): value for IDD Field `property_value_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_22`'.format(value))

        self._data["Property Value 22"] = value

    @property
    def property_value_23(self):
        """Get property_value_23

        Returns:
            float: the value of `property_value_23` or None if not set
        """
        return self._data["Property Value 23"]

    @property_value_23.setter
    def property_value_23(self, value=None):
        """  Corresponds to IDD Field `property_value_23`

        Args:
            value (float): value for IDD Field `property_value_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_23`'.format(value))

        self._data["Property Value 23"] = value

    @property
    def property_value_24(self):
        """Get property_value_24

        Returns:
            float: the value of `property_value_24` or None if not set
        """
        return self._data["Property Value 24"]

    @property_value_24.setter
    def property_value_24(self, value=None):
        """  Corresponds to IDD Field `property_value_24`

        Args:
            value (float): value for IDD Field `property_value_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_24`'.format(value))

        self._data["Property Value 24"] = value

    @property
    def property_value_25(self):
        """Get property_value_25

        Returns:
            float: the value of `property_value_25` or None if not set
        """
        return self._data["Property Value 25"]

    @property_value_25.setter
    def property_value_25(self, value=None):
        """  Corresponds to IDD Field `property_value_25`

        Args:
            value (float): value for IDD Field `property_value_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_25`'.format(value))

        self._data["Property Value 25"] = value

    @property
    def property_value_26(self):
        """Get property_value_26

        Returns:
            float: the value of `property_value_26` or None if not set
        """
        return self._data["Property Value 26"]

    @property_value_26.setter
    def property_value_26(self, value=None):
        """  Corresponds to IDD Field `property_value_26`

        Args:
            value (float): value for IDD Field `property_value_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_26`'.format(value))

        self._data["Property Value 26"] = value

    @property
    def property_value_27(self):
        """Get property_value_27

        Returns:
            float: the value of `property_value_27` or None if not set
        """
        return self._data["Property Value 27"]

    @property_value_27.setter
    def property_value_27(self, value=None):
        """  Corresponds to IDD Field `property_value_27`

        Args:
            value (float): value for IDD Field `property_value_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_27`'.format(value))

        self._data["Property Value 27"] = value

    @property
    def property_value_28(self):
        """Get property_value_28

        Returns:
            float: the value of `property_value_28` or None if not set
        """
        return self._data["Property Value 28"]

    @property_value_28.setter
    def property_value_28(self, value=None):
        """  Corresponds to IDD Field `property_value_28`

        Args:
            value (float): value for IDD Field `property_value_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_28`'.format(value))

        self._data["Property Value 28"] = value

    @property
    def property_value_29(self):
        """Get property_value_29

        Returns:
            float: the value of `property_value_29` or None if not set
        """
        return self._data["Property Value 29"]

    @property_value_29.setter
    def property_value_29(self, value=None):
        """  Corresponds to IDD Field `property_value_29`

        Args:
            value (float): value for IDD Field `property_value_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_29`'.format(value))

        self._data["Property Value 29"] = value

    @property
    def property_value_30(self):
        """Get property_value_30

        Returns:
            float: the value of `property_value_30` or None if not set
        """
        return self._data["Property Value 30"]

    @property_value_30.setter
    def property_value_30(self, value=None):
        """  Corresponds to IDD Field `property_value_30`

        Args:
            value (float): value for IDD Field `property_value_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_30`'.format(value))

        self._data["Property Value 30"] = value

    @property
    def property_value_31(self):
        """Get property_value_31

        Returns:
            float: the value of `property_value_31` or None if not set
        """
        return self._data["Property Value 31"]

    @property_value_31.setter
    def property_value_31(self, value=None):
        """  Corresponds to IDD Field `property_value_31`

        Args:
            value (float): value for IDD Field `property_value_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_31`'.format(value))

        self._data["Property Value 31"] = value

    @property
    def property_value_32(self):
        """Get property_value_32

        Returns:
            float: the value of `property_value_32` or None if not set
        """
        return self._data["Property Value 32"]

    @property_value_32.setter
    def property_value_32(self, value=None):
        """  Corresponds to IDD Field `property_value_32`

        Args:
            value (float): value for IDD Field `property_value_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_32`'.format(value))

        self._data["Property Value 32"] = value

    @property
    def property_value_33(self):
        """Get property_value_33

        Returns:
            float: the value of `property_value_33` or None if not set
        """
        return self._data["Property Value 33"]

    @property_value_33.setter
    def property_value_33(self, value=None):
        """  Corresponds to IDD Field `property_value_33`

        Args:
            value (float): value for IDD Field `property_value_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_33`'.format(value))

        self._data["Property Value 33"] = value

    @property
    def property_value_34(self):
        """Get property_value_34

        Returns:
            float: the value of `property_value_34` or None if not set
        """
        return self._data["Property Value 34"]

    @property_value_34.setter
    def property_value_34(self, value=None):
        """  Corresponds to IDD Field `property_value_34`

        Args:
            value (float): value for IDD Field `property_value_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_34`'.format(value))

        self._data["Property Value 34"] = value

    @property
    def property_value_35(self):
        """Get property_value_35

        Returns:
            float: the value of `property_value_35` or None if not set
        """
        return self._data["Property Value 35"]

    @property_value_35.setter
    def property_value_35(self, value=None):
        """  Corresponds to IDD Field `property_value_35`

        Args:
            value (float): value for IDD Field `property_value_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_35`'.format(value))

        self._data["Property Value 35"] = value

    @property
    def property_value_36(self):
        """Get property_value_36

        Returns:
            float: the value of `property_value_36` or None if not set
        """
        return self._data["Property Value 36"]

    @property_value_36.setter
    def property_value_36(self, value=None):
        """  Corresponds to IDD Field `property_value_36`

        Args:
            value (float): value for IDD Field `property_value_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_36`'.format(value))

        self._data["Property Value 36"] = value

    @property
    def property_value_37(self):
        """Get property_value_37

        Returns:
            float: the value of `property_value_37` or None if not set
        """
        return self._data["Property Value 37"]

    @property_value_37.setter
    def property_value_37(self, value=None):
        """  Corresponds to IDD Field `property_value_37`

        Args:
            value (float): value for IDD Field `property_value_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_37`'.format(value))

        self._data["Property Value 37"] = value

    @property
    def property_value_38(self):
        """Get property_value_38

        Returns:
            float: the value of `property_value_38` or None if not set
        """
        return self._data["Property Value 38"]

    @property_value_38.setter
    def property_value_38(self, value=None):
        """  Corresponds to IDD Field `property_value_38`

        Args:
            value (float): value for IDD Field `property_value_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_38`'.format(value))

        self._data["Property Value 38"] = value

    @property
    def property_value_39(self):
        """Get property_value_39

        Returns:
            float: the value of `property_value_39` or None if not set
        """
        return self._data["Property Value 39"]

    @property_value_39.setter
    def property_value_39(self, value=None):
        """  Corresponds to IDD Field `property_value_39`

        Args:
            value (float): value for IDD Field `property_value_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_39`'.format(value))

        self._data["Property Value 39"] = value

    @property
    def property_value_40(self):
        """Get property_value_40

        Returns:
            float: the value of `property_value_40` or None if not set
        """
        return self._data["Property Value 40"]

    @property_value_40.setter
    def property_value_40(self, value=None):
        """  Corresponds to IDD Field `property_value_40`

        Args:
            value (float): value for IDD Field `property_value_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_40`'.format(value))

        self._data["Property Value 40"] = value

    @property
    def property_value_41(self):
        """Get property_value_41

        Returns:
            float: the value of `property_value_41` or None if not set
        """
        return self._data["Property Value 41"]

    @property_value_41.setter
    def property_value_41(self, value=None):
        """  Corresponds to IDD Field `property_value_41`

        Args:
            value (float): value for IDD Field `property_value_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_41`'.format(value))

        self._data["Property Value 41"] = value

    @property
    def property_value_42(self):
        """Get property_value_42

        Returns:
            float: the value of `property_value_42` or None if not set
        """
        return self._data["Property Value 42"]

    @property_value_42.setter
    def property_value_42(self, value=None):
        """  Corresponds to IDD Field `property_value_42`

        Args:
            value (float): value for IDD Field `property_value_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_42`'.format(value))

        self._data["Property Value 42"] = value

    @property
    def property_value_43(self):
        """Get property_value_43

        Returns:
            float: the value of `property_value_43` or None if not set
        """
        return self._data["Property Value 43"]

    @property_value_43.setter
    def property_value_43(self, value=None):
        """  Corresponds to IDD Field `property_value_43`

        Args:
            value (float): value for IDD Field `property_value_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_43`'.format(value))

        self._data["Property Value 43"] = value

    @property
    def property_value_44(self):
        """Get property_value_44

        Returns:
            float: the value of `property_value_44` or None if not set
        """
        return self._data["Property Value 44"]

    @property_value_44.setter
    def property_value_44(self, value=None):
        """  Corresponds to IDD Field `property_value_44`

        Args:
            value (float): value for IDD Field `property_value_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_44`'.format(value))

        self._data["Property Value 44"] = value

    @property
    def property_value_45(self):
        """Get property_value_45

        Returns:
            float: the value of `property_value_45` or None if not set
        """
        return self._data["Property Value 45"]

    @property_value_45.setter
    def property_value_45(self, value=None):
        """  Corresponds to IDD Field `property_value_45`

        Args:
            value (float): value for IDD Field `property_value_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_45`'.format(value))

        self._data["Property Value 45"] = value

    @property
    def property_value_46(self):
        """Get property_value_46

        Returns:
            float: the value of `property_value_46` or None if not set
        """
        return self._data["Property Value 46"]

    @property_value_46.setter
    def property_value_46(self, value=None):
        """  Corresponds to IDD Field `property_value_46`

        Args:
            value (float): value for IDD Field `property_value_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_46`'.format(value))

        self._data["Property Value 46"] = value

    @property
    def property_value_47(self):
        """Get property_value_47

        Returns:
            float: the value of `property_value_47` or None if not set
        """
        return self._data["Property Value 47"]

    @property_value_47.setter
    def property_value_47(self, value=None):
        """  Corresponds to IDD Field `property_value_47`

        Args:
            value (float): value for IDD Field `property_value_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_47`'.format(value))

        self._data["Property Value 47"] = value

    @property
    def property_value_48(self):
        """Get property_value_48

        Returns:
            float: the value of `property_value_48` or None if not set
        """
        return self._data["Property Value 48"]

    @property_value_48.setter
    def property_value_48(self, value=None):
        """  Corresponds to IDD Field `property_value_48`

        Args:
            value (float): value for IDD Field `property_value_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_48`'.format(value))

        self._data["Property Value 48"] = value

    @property
    def property_value_49(self):
        """Get property_value_49

        Returns:
            float: the value of `property_value_49` or None if not set
        """
        return self._data["Property Value 49"]

    @property_value_49.setter
    def property_value_49(self, value=None):
        """  Corresponds to IDD Field `property_value_49`

        Args:
            value (float): value for IDD Field `property_value_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_49`'.format(value))

        self._data["Property Value 49"] = value

    @property
    def property_value_50(self):
        """Get property_value_50

        Returns:
            float: the value of `property_value_50` or None if not set
        """
        return self._data["Property Value 50"]

    @property_value_50.setter
    def property_value_50(self, value=None):
        """  Corresponds to IDD Field `property_value_50`

        Args:
            value (float): value for IDD Field `property_value_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_50`'.format(value))

        self._data["Property Value 50"] = value

    @property
    def property_value_51(self):
        """Get property_value_51

        Returns:
            float: the value of `property_value_51` or None if not set
        """
        return self._data["Property Value 51"]

    @property_value_51.setter
    def property_value_51(self, value=None):
        """  Corresponds to IDD Field `property_value_51`

        Args:
            value (float): value for IDD Field `property_value_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_51`'.format(value))

        self._data["Property Value 51"] = value

    @property
    def property_value_52(self):
        """Get property_value_52

        Returns:
            float: the value of `property_value_52` or None if not set
        """
        return self._data["Property Value 52"]

    @property_value_52.setter
    def property_value_52(self, value=None):
        """  Corresponds to IDD Field `property_value_52`

        Args:
            value (float): value for IDD Field `property_value_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_52`'.format(value))

        self._data["Property Value 52"] = value

    @property
    def property_value_53(self):
        """Get property_value_53

        Returns:
            float: the value of `property_value_53` or None if not set
        """
        return self._data["Property Value 53"]

    @property_value_53.setter
    def property_value_53(self, value=None):
        """  Corresponds to IDD Field `property_value_53`

        Args:
            value (float): value for IDD Field `property_value_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_53`'.format(value))

        self._data["Property Value 53"] = value

    @property
    def property_value_54(self):
        """Get property_value_54

        Returns:
            float: the value of `property_value_54` or None if not set
        """
        return self._data["Property Value 54"]

    @property_value_54.setter
    def property_value_54(self, value=None):
        """  Corresponds to IDD Field `property_value_54`

        Args:
            value (float): value for IDD Field `property_value_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_54`'.format(value))

        self._data["Property Value 54"] = value

    @property
    def property_value_55(self):
        """Get property_value_55

        Returns:
            float: the value of `property_value_55` or None if not set
        """
        return self._data["Property Value 55"]

    @property_value_55.setter
    def property_value_55(self, value=None):
        """  Corresponds to IDD Field `property_value_55`

        Args:
            value (float): value for IDD Field `property_value_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_55`'.format(value))

        self._data["Property Value 55"] = value

    @property
    def property_value_56(self):
        """Get property_value_56

        Returns:
            float: the value of `property_value_56` or None if not set
        """
        return self._data["Property Value 56"]

    @property_value_56.setter
    def property_value_56(self, value=None):
        """  Corresponds to IDD Field `property_value_56`

        Args:
            value (float): value for IDD Field `property_value_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_56`'.format(value))

        self._data["Property Value 56"] = value

    @property
    def property_value_57(self):
        """Get property_value_57

        Returns:
            float: the value of `property_value_57` or None if not set
        """
        return self._data["Property Value 57"]

    @property_value_57.setter
    def property_value_57(self, value=None):
        """  Corresponds to IDD Field `property_value_57`

        Args:
            value (float): value for IDD Field `property_value_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_57`'.format(value))

        self._data["Property Value 57"] = value

    @property
    def property_value_58(self):
        """Get property_value_58

        Returns:
            float: the value of `property_value_58` or None if not set
        """
        return self._data["Property Value 58"]

    @property_value_58.setter
    def property_value_58(self, value=None):
        """  Corresponds to IDD Field `property_value_58`

        Args:
            value (float): value for IDD Field `property_value_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_58`'.format(value))

        self._data["Property Value 58"] = value

    @property
    def property_value_59(self):
        """Get property_value_59

        Returns:
            float: the value of `property_value_59` or None if not set
        """
        return self._data["Property Value 59"]

    @property_value_59.setter
    def property_value_59(self, value=None):
        """  Corresponds to IDD Field `property_value_59`

        Args:
            value (float): value for IDD Field `property_value_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_59`'.format(value))

        self._data["Property Value 59"] = value

    @property
    def property_value_60(self):
        """Get property_value_60

        Returns:
            float: the value of `property_value_60` or None if not set
        """
        return self._data["Property Value 60"]

    @property_value_60.setter
    def property_value_60(self, value=None):
        """  Corresponds to IDD Field `property_value_60`

        Args:
            value (float): value for IDD Field `property_value_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_60`'.format(value))

        self._data["Property Value 60"] = value

    @property
    def property_value_61(self):
        """Get property_value_61

        Returns:
            float: the value of `property_value_61` or None if not set
        """
        return self._data["Property Value 61"]

    @property_value_61.setter
    def property_value_61(self, value=None):
        """  Corresponds to IDD Field `property_value_61`

        Args:
            value (float): value for IDD Field `property_value_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_61`'.format(value))

        self._data["Property Value 61"] = value

    @property
    def property_value_62(self):
        """Get property_value_62

        Returns:
            float: the value of `property_value_62` or None if not set
        """
        return self._data["Property Value 62"]

    @property_value_62.setter
    def property_value_62(self, value=None):
        """  Corresponds to IDD Field `property_value_62`

        Args:
            value (float): value for IDD Field `property_value_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_62`'.format(value))

        self._data["Property Value 62"] = value

    @property
    def property_value_63(self):
        """Get property_value_63

        Returns:
            float: the value of `property_value_63` or None if not set
        """
        return self._data["Property Value 63"]

    @property_value_63.setter
    def property_value_63(self, value=None):
        """  Corresponds to IDD Field `property_value_63`

        Args:
            value (float): value for IDD Field `property_value_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_63`'.format(value))

        self._data["Property Value 63"] = value

    @property
    def property_value_64(self):
        """Get property_value_64

        Returns:
            float: the value of `property_value_64` or None if not set
        """
        return self._data["Property Value 64"]

    @property_value_64.setter
    def property_value_64(self, value=None):
        """  Corresponds to IDD Field `property_value_64`

        Args:
            value (float): value for IDD Field `property_value_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_64`'.format(value))

        self._data["Property Value 64"] = value

    @property
    def property_value_65(self):
        """Get property_value_65

        Returns:
            float: the value of `property_value_65` or None if not set
        """
        return self._data["Property Value 65"]

    @property_value_65.setter
    def property_value_65(self, value=None):
        """  Corresponds to IDD Field `property_value_65`

        Args:
            value (float): value for IDD Field `property_value_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_65`'.format(value))

        self._data["Property Value 65"] = value

    @property
    def property_value_66(self):
        """Get property_value_66

        Returns:
            float: the value of `property_value_66` or None if not set
        """
        return self._data["Property Value 66"]

    @property_value_66.setter
    def property_value_66(self, value=None):
        """  Corresponds to IDD Field `property_value_66`

        Args:
            value (float): value for IDD Field `property_value_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_66`'.format(value))

        self._data["Property Value 66"] = value

    @property
    def property_value_67(self):
        """Get property_value_67

        Returns:
            float: the value of `property_value_67` or None if not set
        """
        return self._data["Property Value 67"]

    @property_value_67.setter
    def property_value_67(self, value=None):
        """  Corresponds to IDD Field `property_value_67`

        Args:
            value (float): value for IDD Field `property_value_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_67`'.format(value))

        self._data["Property Value 67"] = value

    @property
    def property_value_68(self):
        """Get property_value_68

        Returns:
            float: the value of `property_value_68` or None if not set
        """
        return self._data["Property Value 68"]

    @property_value_68.setter
    def property_value_68(self, value=None):
        """  Corresponds to IDD Field `property_value_68`

        Args:
            value (float): value for IDD Field `property_value_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_68`'.format(value))

        self._data["Property Value 68"] = value

    @property
    def property_value_69(self):
        """Get property_value_69

        Returns:
            float: the value of `property_value_69` or None if not set
        """
        return self._data["Property Value 69"]

    @property_value_69.setter
    def property_value_69(self, value=None):
        """  Corresponds to IDD Field `property_value_69`

        Args:
            value (float): value for IDD Field `property_value_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_69`'.format(value))

        self._data["Property Value 69"] = value

    @property
    def property_value_70(self):
        """Get property_value_70

        Returns:
            float: the value of `property_value_70` or None if not set
        """
        return self._data["Property Value 70"]

    @property_value_70.setter
    def property_value_70(self, value=None):
        """  Corresponds to IDD Field `property_value_70`

        Args:
            value (float): value for IDD Field `property_value_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_70`'.format(value))

        self._data["Property Value 70"] = value

    @property
    def property_value_71(self):
        """Get property_value_71

        Returns:
            float: the value of `property_value_71` or None if not set
        """
        return self._data["Property Value 71"]

    @property_value_71.setter
    def property_value_71(self, value=None):
        """  Corresponds to IDD Field `property_value_71`

        Args:
            value (float): value for IDD Field `property_value_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_71`'.format(value))

        self._data["Property Value 71"] = value

    @property
    def property_value_72(self):
        """Get property_value_72

        Returns:
            float: the value of `property_value_72` or None if not set
        """
        return self._data["Property Value 72"]

    @property_value_72.setter
    def property_value_72(self, value=None):
        """  Corresponds to IDD Field `property_value_72`

        Args:
            value (float): value for IDD Field `property_value_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_72`'.format(value))

        self._data["Property Value 72"] = value

    @property
    def property_value_73(self):
        """Get property_value_73

        Returns:
            float: the value of `property_value_73` or None if not set
        """
        return self._data["Property Value 73"]

    @property_value_73.setter
    def property_value_73(self, value=None):
        """  Corresponds to IDD Field `property_value_73`

        Args:
            value (float): value for IDD Field `property_value_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_73`'.format(value))

        self._data["Property Value 73"] = value

    @property
    def property_value_74(self):
        """Get property_value_74

        Returns:
            float: the value of `property_value_74` or None if not set
        """
        return self._data["Property Value 74"]

    @property_value_74.setter
    def property_value_74(self, value=None):
        """  Corresponds to IDD Field `property_value_74`

        Args:
            value (float): value for IDD Field `property_value_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_74`'.format(value))

        self._data["Property Value 74"] = value

    @property
    def property_value_75(self):
        """Get property_value_75

        Returns:
            float: the value of `property_value_75` or None if not set
        """
        return self._data["Property Value 75"]

    @property_value_75.setter
    def property_value_75(self, value=None):
        """  Corresponds to IDD Field `property_value_75`

        Args:
            value (float): value for IDD Field `property_value_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_75`'.format(value))

        self._data["Property Value 75"] = value

    @property
    def property_value_76(self):
        """Get property_value_76

        Returns:
            float: the value of `property_value_76` or None if not set
        """
        return self._data["Property Value 76"]

    @property_value_76.setter
    def property_value_76(self, value=None):
        """  Corresponds to IDD Field `property_value_76`

        Args:
            value (float): value for IDD Field `property_value_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_76`'.format(value))

        self._data["Property Value 76"] = value

    @property
    def property_value_77(self):
        """Get property_value_77

        Returns:
            float: the value of `property_value_77` or None if not set
        """
        return self._data["Property Value 77"]

    @property_value_77.setter
    def property_value_77(self, value=None):
        """  Corresponds to IDD Field `property_value_77`

        Args:
            value (float): value for IDD Field `property_value_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_77`'.format(value))

        self._data["Property Value 77"] = value

    @property
    def property_value_78(self):
        """Get property_value_78

        Returns:
            float: the value of `property_value_78` or None if not set
        """
        return self._data["Property Value 78"]

    @property_value_78.setter
    def property_value_78(self, value=None):
        """  Corresponds to IDD Field `property_value_78`

        Args:
            value (float): value for IDD Field `property_value_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_78`'.format(value))

        self._data["Property Value 78"] = value

    @property
    def property_value_79(self):
        """Get property_value_79

        Returns:
            float: the value of `property_value_79` or None if not set
        """
        return self._data["Property Value 79"]

    @property_value_79.setter
    def property_value_79(self, value=None):
        """  Corresponds to IDD Field `property_value_79`

        Args:
            value (float): value for IDD Field `property_value_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_79`'.format(value))

        self._data["Property Value 79"] = value

    @property
    def property_value_80(self):
        """Get property_value_80

        Returns:
            float: the value of `property_value_80` or None if not set
        """
        return self._data["Property Value 80"]

    @property_value_80.setter
    def property_value_80(self, value=None):
        """  Corresponds to IDD Field `property_value_80`

        Args:
            value (float): value for IDD Field `property_value_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_80`'.format(value))

        self._data["Property Value 80"] = value

    @property
    def property_value_81(self):
        """Get property_value_81

        Returns:
            float: the value of `property_value_81` or None if not set
        """
        return self._data["Property Value 81"]

    @property_value_81.setter
    def property_value_81(self, value=None):
        """  Corresponds to IDD Field `property_value_81`

        Args:
            value (float): value for IDD Field `property_value_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_81`'.format(value))

        self._data["Property Value 81"] = value

    @property
    def property_value_82(self):
        """Get property_value_82

        Returns:
            float: the value of `property_value_82` or None if not set
        """
        return self._data["Property Value 82"]

    @property_value_82.setter
    def property_value_82(self, value=None):
        """  Corresponds to IDD Field `property_value_82`

        Args:
            value (float): value for IDD Field `property_value_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_82`'.format(value))

        self._data["Property Value 82"] = value

    @property
    def property_value_83(self):
        """Get property_value_83

        Returns:
            float: the value of `property_value_83` or None if not set
        """
        return self._data["Property Value 83"]

    @property_value_83.setter
    def property_value_83(self, value=None):
        """  Corresponds to IDD Field `property_value_83`

        Args:
            value (float): value for IDD Field `property_value_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_83`'.format(value))

        self._data["Property Value 83"] = value

    @property
    def property_value_84(self):
        """Get property_value_84

        Returns:
            float: the value of `property_value_84` or None if not set
        """
        return self._data["Property Value 84"]

    @property_value_84.setter
    def property_value_84(self, value=None):
        """  Corresponds to IDD Field `property_value_84`

        Args:
            value (float): value for IDD Field `property_value_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_84`'.format(value))

        self._data["Property Value 84"] = value

    @property
    def property_value_85(self):
        """Get property_value_85

        Returns:
            float: the value of `property_value_85` or None if not set
        """
        return self._data["Property Value 85"]

    @property_value_85.setter
    def property_value_85(self, value=None):
        """  Corresponds to IDD Field `property_value_85`

        Args:
            value (float): value for IDD Field `property_value_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_85`'.format(value))

        self._data["Property Value 85"] = value

    @property
    def property_value_86(self):
        """Get property_value_86

        Returns:
            float: the value of `property_value_86` or None if not set
        """
        return self._data["Property Value 86"]

    @property_value_86.setter
    def property_value_86(self, value=None):
        """  Corresponds to IDD Field `property_value_86`

        Args:
            value (float): value for IDD Field `property_value_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_86`'.format(value))

        self._data["Property Value 86"] = value

    @property
    def property_value_87(self):
        """Get property_value_87

        Returns:
            float: the value of `property_value_87` or None if not set
        """
        return self._data["Property Value 87"]

    @property_value_87.setter
    def property_value_87(self, value=None):
        """  Corresponds to IDD Field `property_value_87`

        Args:
            value (float): value for IDD Field `property_value_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_87`'.format(value))

        self._data["Property Value 87"] = value

    @property
    def property_value_88(self):
        """Get property_value_88

        Returns:
            float: the value of `property_value_88` or None if not set
        """
        return self._data["Property Value 88"]

    @property_value_88.setter
    def property_value_88(self, value=None):
        """  Corresponds to IDD Field `property_value_88`

        Args:
            value (float): value for IDD Field `property_value_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_88`'.format(value))

        self._data["Property Value 88"] = value

    @property
    def property_value_89(self):
        """Get property_value_89

        Returns:
            float: the value of `property_value_89` or None if not set
        """
        return self._data["Property Value 89"]

    @property_value_89.setter
    def property_value_89(self, value=None):
        """  Corresponds to IDD Field `property_value_89`

        Args:
            value (float): value for IDD Field `property_value_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_89`'.format(value))

        self._data["Property Value 89"] = value

    @property
    def property_value_90(self):
        """Get property_value_90

        Returns:
            float: the value of `property_value_90` or None if not set
        """
        return self._data["Property Value 90"]

    @property_value_90.setter
    def property_value_90(self, value=None):
        """  Corresponds to IDD Field `property_value_90`

        Args:
            value (float): value for IDD Field `property_value_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_90`'.format(value))

        self._data["Property Value 90"] = value

    @property
    def property_value_91(self):
        """Get property_value_91

        Returns:
            float: the value of `property_value_91` or None if not set
        """
        return self._data["Property Value 91"]

    @property_value_91.setter
    def property_value_91(self, value=None):
        """  Corresponds to IDD Field `property_value_91`

        Args:
            value (float): value for IDD Field `property_value_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_91`'.format(value))

        self._data["Property Value 91"] = value

    @property
    def property_value_92(self):
        """Get property_value_92

        Returns:
            float: the value of `property_value_92` or None if not set
        """
        return self._data["Property Value 92"]

    @property_value_92.setter
    def property_value_92(self, value=None):
        """  Corresponds to IDD Field `property_value_92`

        Args:
            value (float): value for IDD Field `property_value_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_92`'.format(value))

        self._data["Property Value 92"] = value

    @property
    def property_value_93(self):
        """Get property_value_93

        Returns:
            float: the value of `property_value_93` or None if not set
        """
        return self._data["Property Value 93"]

    @property_value_93.setter
    def property_value_93(self, value=None):
        """  Corresponds to IDD Field `property_value_93`

        Args:
            value (float): value for IDD Field `property_value_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_93`'.format(value))

        self._data["Property Value 93"] = value

    @property
    def property_value_94(self):
        """Get property_value_94

        Returns:
            float: the value of `property_value_94` or None if not set
        """
        return self._data["Property Value 94"]

    @property_value_94.setter
    def property_value_94(self, value=None):
        """  Corresponds to IDD Field `property_value_94`

        Args:
            value (float): value for IDD Field `property_value_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_94`'.format(value))

        self._data["Property Value 94"] = value

    @property
    def property_value_95(self):
        """Get property_value_95

        Returns:
            float: the value of `property_value_95` or None if not set
        """
        return self._data["Property Value 95"]

    @property_value_95.setter
    def property_value_95(self, value=None):
        """  Corresponds to IDD Field `property_value_95`

        Args:
            value (float): value for IDD Field `property_value_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_95`'.format(value))

        self._data["Property Value 95"] = value

    @property
    def property_value_96(self):
        """Get property_value_96

        Returns:
            float: the value of `property_value_96` or None if not set
        """
        return self._data["Property Value 96"]

    @property_value_96.setter
    def property_value_96(self, value=None):
        """  Corresponds to IDD Field `property_value_96`

        Args:
            value (float): value for IDD Field `property_value_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_96`'.format(value))

        self._data["Property Value 96"] = value

    @property
    def property_value_97(self):
        """Get property_value_97

        Returns:
            float: the value of `property_value_97` or None if not set
        """
        return self._data["Property Value 97"]

    @property_value_97.setter
    def property_value_97(self, value=None):
        """  Corresponds to IDD Field `property_value_97`

        Args:
            value (float): value for IDD Field `property_value_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_97`'.format(value))

        self._data["Property Value 97"] = value

    @property
    def property_value_98(self):
        """Get property_value_98

        Returns:
            float: the value of `property_value_98` or None if not set
        """
        return self._data["Property Value 98"]

    @property_value_98.setter
    def property_value_98(self, value=None):
        """  Corresponds to IDD Field `property_value_98`

        Args:
            value (float): value for IDD Field `property_value_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_98`'.format(value))

        self._data["Property Value 98"] = value

    @property
    def property_value_99(self):
        """Get property_value_99

        Returns:
            float: the value of `property_value_99` or None if not set
        """
        return self._data["Property Value 99"]

    @property_value_99.setter
    def property_value_99(self, value=None):
        """  Corresponds to IDD Field `property_value_99`

        Args:
            value (float): value for IDD Field `property_value_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_99`'.format(value))

        self._data["Property Value 99"] = value

    @property
    def property_value_100(self):
        """Get property_value_100

        Returns:
            float: the value of `property_value_100` or None if not set
        """
        return self._data["Property Value 100"]

    @property_value_100.setter
    def property_value_100(self, value=None):
        """  Corresponds to IDD Field `property_value_100`

        Args:
            value (float): value for IDD Field `property_value_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_100`'.format(value))

        self._data["Property Value 100"] = value

    @property
    def property_value_101(self):
        """Get property_value_101

        Returns:
            float: the value of `property_value_101` or None if not set
        """
        return self._data["Property Value 101"]

    @property_value_101.setter
    def property_value_101(self, value=None):
        """  Corresponds to IDD Field `property_value_101`

        Args:
            value (float): value for IDD Field `property_value_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_101`'.format(value))

        self._data["Property Value 101"] = value

    @property
    def property_value_102(self):
        """Get property_value_102

        Returns:
            float: the value of `property_value_102` or None if not set
        """
        return self._data["Property Value 102"]

    @property_value_102.setter
    def property_value_102(self, value=None):
        """  Corresponds to IDD Field `property_value_102`

        Args:
            value (float): value for IDD Field `property_value_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_102`'.format(value))

        self._data["Property Value 102"] = value

    @property
    def property_value_103(self):
        """Get property_value_103

        Returns:
            float: the value of `property_value_103` or None if not set
        """
        return self._data["Property Value 103"]

    @property_value_103.setter
    def property_value_103(self, value=None):
        """  Corresponds to IDD Field `property_value_103`

        Args:
            value (float): value for IDD Field `property_value_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_103`'.format(value))

        self._data["Property Value 103"] = value

    @property
    def property_value_104(self):
        """Get property_value_104

        Returns:
            float: the value of `property_value_104` or None if not set
        """
        return self._data["Property Value 104"]

    @property_value_104.setter
    def property_value_104(self, value=None):
        """  Corresponds to IDD Field `property_value_104`

        Args:
            value (float): value for IDD Field `property_value_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_104`'.format(value))

        self._data["Property Value 104"] = value

    @property
    def property_value_105(self):
        """Get property_value_105

        Returns:
            float: the value of `property_value_105` or None if not set
        """
        return self._data["Property Value 105"]

    @property_value_105.setter
    def property_value_105(self, value=None):
        """  Corresponds to IDD Field `property_value_105`

        Args:
            value (float): value for IDD Field `property_value_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_105`'.format(value))

        self._data["Property Value 105"] = value

    @property
    def property_value_106(self):
        """Get property_value_106

        Returns:
            float: the value of `property_value_106` or None if not set
        """
        return self._data["Property Value 106"]

    @property_value_106.setter
    def property_value_106(self, value=None):
        """  Corresponds to IDD Field `property_value_106`

        Args:
            value (float): value for IDD Field `property_value_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_106`'.format(value))

        self._data["Property Value 106"] = value

    @property
    def property_value_107(self):
        """Get property_value_107

        Returns:
            float: the value of `property_value_107` or None if not set
        """
        return self._data["Property Value 107"]

    @property_value_107.setter
    def property_value_107(self, value=None):
        """  Corresponds to IDD Field `property_value_107`

        Args:
            value (float): value for IDD Field `property_value_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_107`'.format(value))

        self._data["Property Value 107"] = value

    @property
    def property_value_108(self):
        """Get property_value_108

        Returns:
            float: the value of `property_value_108` or None if not set
        """
        return self._data["Property Value 108"]

    @property_value_108.setter
    def property_value_108(self, value=None):
        """  Corresponds to IDD Field `property_value_108`

        Args:
            value (float): value for IDD Field `property_value_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_108`'.format(value))

        self._data["Property Value 108"] = value

    @property
    def property_value_109(self):
        """Get property_value_109

        Returns:
            float: the value of `property_value_109` or None if not set
        """
        return self._data["Property Value 109"]

    @property_value_109.setter
    def property_value_109(self, value=None):
        """  Corresponds to IDD Field `property_value_109`

        Args:
            value (float): value for IDD Field `property_value_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_109`'.format(value))

        self._data["Property Value 109"] = value

    @property
    def property_value_110(self):
        """Get property_value_110

        Returns:
            float: the value of `property_value_110` or None if not set
        """
        return self._data["Property Value 110"]

    @property_value_110.setter
    def property_value_110(self, value=None):
        """  Corresponds to IDD Field `property_value_110`

        Args:
            value (float): value for IDD Field `property_value_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_110`'.format(value))

        self._data["Property Value 110"] = value

    @property
    def property_value_111(self):
        """Get property_value_111

        Returns:
            float: the value of `property_value_111` or None if not set
        """
        return self._data["Property Value 111"]

    @property_value_111.setter
    def property_value_111(self, value=None):
        """  Corresponds to IDD Field `property_value_111`

        Args:
            value (float): value for IDD Field `property_value_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_111`'.format(value))

        self._data["Property Value 111"] = value

    @property
    def property_value_112(self):
        """Get property_value_112

        Returns:
            float: the value of `property_value_112` or None if not set
        """
        return self._data["Property Value 112"]

    @property_value_112.setter
    def property_value_112(self, value=None):
        """  Corresponds to IDD Field `property_value_112`

        Args:
            value (float): value for IDD Field `property_value_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_112`'.format(value))

        self._data["Property Value 112"] = value

    @property
    def property_value_113(self):
        """Get property_value_113

        Returns:
            float: the value of `property_value_113` or None if not set
        """
        return self._data["Property Value 113"]

    @property_value_113.setter
    def property_value_113(self, value=None):
        """  Corresponds to IDD Field `property_value_113`

        Args:
            value (float): value for IDD Field `property_value_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_113`'.format(value))

        self._data["Property Value 113"] = value

    @property
    def property_value_114(self):
        """Get property_value_114

        Returns:
            float: the value of `property_value_114` or None if not set
        """
        return self._data["Property Value 114"]

    @property_value_114.setter
    def property_value_114(self, value=None):
        """  Corresponds to IDD Field `property_value_114`

        Args:
            value (float): value for IDD Field `property_value_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_114`'.format(value))

        self._data["Property Value 114"] = value

    @property
    def property_value_115(self):
        """Get property_value_115

        Returns:
            float: the value of `property_value_115` or None if not set
        """
        return self._data["Property Value 115"]

    @property_value_115.setter
    def property_value_115(self, value=None):
        """  Corresponds to IDD Field `property_value_115`

        Args:
            value (float): value for IDD Field `property_value_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_115`'.format(value))

        self._data["Property Value 115"] = value

    @property
    def property_value_116(self):
        """Get property_value_116

        Returns:
            float: the value of `property_value_116` or None if not set
        """
        return self._data["Property Value 116"]

    @property_value_116.setter
    def property_value_116(self, value=None):
        """  Corresponds to IDD Field `property_value_116`

        Args:
            value (float): value for IDD Field `property_value_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_116`'.format(value))

        self._data["Property Value 116"] = value

    @property
    def property_value_117(self):
        """Get property_value_117

        Returns:
            float: the value of `property_value_117` or None if not set
        """
        return self._data["Property Value 117"]

    @property_value_117.setter
    def property_value_117(self, value=None):
        """  Corresponds to IDD Field `property_value_117`

        Args:
            value (float): value for IDD Field `property_value_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_117`'.format(value))

        self._data["Property Value 117"] = value

    @property
    def property_value_118(self):
        """Get property_value_118

        Returns:
            float: the value of `property_value_118` or None if not set
        """
        return self._data["Property Value 118"]

    @property_value_118.setter
    def property_value_118(self, value=None):
        """  Corresponds to IDD Field `property_value_118`

        Args:
            value (float): value for IDD Field `property_value_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_118`'.format(value))

        self._data["Property Value 118"] = value

    @property
    def property_value_119(self):
        """Get property_value_119

        Returns:
            float: the value of `property_value_119` or None if not set
        """
        return self._data["Property Value 119"]

    @property_value_119.setter
    def property_value_119(self, value=None):
        """  Corresponds to IDD Field `property_value_119`

        Args:
            value (float): value for IDD Field `property_value_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_119`'.format(value))

        self._data["Property Value 119"] = value

    @property
    def property_value_120(self):
        """Get property_value_120

        Returns:
            float: the value of `property_value_120` or None if not set
        """
        return self._data["Property Value 120"]

    @property_value_120.setter
    def property_value_120(self, value=None):
        """  Corresponds to IDD Field `property_value_120`

        Args:
            value (float): value for IDD Field `property_value_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_120`'.format(value))

        self._data["Property Value 120"] = value

    @property
    def property_value_121(self):
        """Get property_value_121

        Returns:
            float: the value of `property_value_121` or None if not set
        """
        return self._data["Property Value 121"]

    @property_value_121.setter
    def property_value_121(self, value=None):
        """  Corresponds to IDD Field `property_value_121`

        Args:
            value (float): value for IDD Field `property_value_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_121`'.format(value))

        self._data["Property Value 121"] = value

    @property
    def property_value_122(self):
        """Get property_value_122

        Returns:
            float: the value of `property_value_122` or None if not set
        """
        return self._data["Property Value 122"]

    @property_value_122.setter
    def property_value_122(self, value=None):
        """  Corresponds to IDD Field `property_value_122`

        Args:
            value (float): value for IDD Field `property_value_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_122`'.format(value))

        self._data["Property Value 122"] = value

    @property
    def property_value_123(self):
        """Get property_value_123

        Returns:
            float: the value of `property_value_123` or None if not set
        """
        return self._data["Property Value 123"]

    @property_value_123.setter
    def property_value_123(self, value=None):
        """  Corresponds to IDD Field `property_value_123`

        Args:
            value (float): value for IDD Field `property_value_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_123`'.format(value))

        self._data["Property Value 123"] = value

    @property
    def property_value_124(self):
        """Get property_value_124

        Returns:
            float: the value of `property_value_124` or None if not set
        """
        return self._data["Property Value 124"]

    @property_value_124.setter
    def property_value_124(self, value=None):
        """  Corresponds to IDD Field `property_value_124`

        Args:
            value (float): value for IDD Field `property_value_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_124`'.format(value))

        self._data["Property Value 124"] = value

    @property
    def property_value_125(self):
        """Get property_value_125

        Returns:
            float: the value of `property_value_125` or None if not set
        """
        return self._data["Property Value 125"]

    @property_value_125.setter
    def property_value_125(self, value=None):
        """  Corresponds to IDD Field `property_value_125`

        Args:
            value (float): value for IDD Field `property_value_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_125`'.format(value))

        self._data["Property Value 125"] = value

    @property
    def property_value_126(self):
        """Get property_value_126

        Returns:
            float: the value of `property_value_126` or None if not set
        """
        return self._data["Property Value 126"]

    @property_value_126.setter
    def property_value_126(self, value=None):
        """  Corresponds to IDD Field `property_value_126`

        Args:
            value (float): value for IDD Field `property_value_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_126`'.format(value))

        self._data["Property Value 126"] = value

    @property
    def property_value_127(self):
        """Get property_value_127

        Returns:
            float: the value of `property_value_127` or None if not set
        """
        return self._data["Property Value 127"]

    @property_value_127.setter
    def property_value_127(self, value=None):
        """  Corresponds to IDD Field `property_value_127`

        Args:
            value (float): value for IDD Field `property_value_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_127`'.format(value))

        self._data["Property Value 127"] = value

    @property
    def property_value_128(self):
        """Get property_value_128

        Returns:
            float: the value of `property_value_128` or None if not set
        """
        return self._data["Property Value 128"]

    @property_value_128.setter
    def property_value_128(self, value=None):
        """  Corresponds to IDD Field `property_value_128`

        Args:
            value (float): value for IDD Field `property_value_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_128`'.format(value))

        self._data["Property Value 128"] = value

    @property
    def property_value_129(self):
        """Get property_value_129

        Returns:
            float: the value of `property_value_129` or None if not set
        """
        return self._data["Property Value 129"]

    @property_value_129.setter
    def property_value_129(self, value=None):
        """  Corresponds to IDD Field `property_value_129`

        Args:
            value (float): value for IDD Field `property_value_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_129`'.format(value))

        self._data["Property Value 129"] = value

    @property
    def property_value_130(self):
        """Get property_value_130

        Returns:
            float: the value of `property_value_130` or None if not set
        """
        return self._data["Property Value 130"]

    @property_value_130.setter
    def property_value_130(self, value=None):
        """  Corresponds to IDD Field `property_value_130`

        Args:
            value (float): value for IDD Field `property_value_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_130`'.format(value))

        self._data["Property Value 130"] = value

    @property
    def property_value_131(self):
        """Get property_value_131

        Returns:
            float: the value of `property_value_131` or None if not set
        """
        return self._data["Property Value 131"]

    @property_value_131.setter
    def property_value_131(self, value=None):
        """  Corresponds to IDD Field `property_value_131`

        Args:
            value (float): value for IDD Field `property_value_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_131`'.format(value))

        self._data["Property Value 131"] = value

    @property
    def property_value_132(self):
        """Get property_value_132

        Returns:
            float: the value of `property_value_132` or None if not set
        """
        return self._data["Property Value 132"]

    @property_value_132.setter
    def property_value_132(self, value=None):
        """  Corresponds to IDD Field `property_value_132`

        Args:
            value (float): value for IDD Field `property_value_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_132`'.format(value))

        self._data["Property Value 132"] = value

    @property
    def property_value_133(self):
        """Get property_value_133

        Returns:
            float: the value of `property_value_133` or None if not set
        """
        return self._data["Property Value 133"]

    @property_value_133.setter
    def property_value_133(self, value=None):
        """  Corresponds to IDD Field `property_value_133`

        Args:
            value (float): value for IDD Field `property_value_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_133`'.format(value))

        self._data["Property Value 133"] = value

    @property
    def property_value_134(self):
        """Get property_value_134

        Returns:
            float: the value of `property_value_134` or None if not set
        """
        return self._data["Property Value 134"]

    @property_value_134.setter
    def property_value_134(self, value=None):
        """  Corresponds to IDD Field `property_value_134`

        Args:
            value (float): value for IDD Field `property_value_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_134`'.format(value))

        self._data["Property Value 134"] = value

    @property
    def property_value_135(self):
        """Get property_value_135

        Returns:
            float: the value of `property_value_135` or None if not set
        """
        return self._data["Property Value 135"]

    @property_value_135.setter
    def property_value_135(self, value=None):
        """  Corresponds to IDD Field `property_value_135`

        Args:
            value (float): value for IDD Field `property_value_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_135`'.format(value))

        self._data["Property Value 135"] = value

    @property
    def property_value_136(self):
        """Get property_value_136

        Returns:
            float: the value of `property_value_136` or None if not set
        """
        return self._data["Property Value 136"]

    @property_value_136.setter
    def property_value_136(self, value=None):
        """  Corresponds to IDD Field `property_value_136`

        Args:
            value (float): value for IDD Field `property_value_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_136`'.format(value))

        self._data["Property Value 136"] = value

    @property
    def property_value_137(self):
        """Get property_value_137

        Returns:
            float: the value of `property_value_137` or None if not set
        """
        return self._data["Property Value 137"]

    @property_value_137.setter
    def property_value_137(self, value=None):
        """  Corresponds to IDD Field `property_value_137`

        Args:
            value (float): value for IDD Field `property_value_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_137`'.format(value))

        self._data["Property Value 137"] = value

    @property
    def property_value_138(self):
        """Get property_value_138

        Returns:
            float: the value of `property_value_138` or None if not set
        """
        return self._data["Property Value 138"]

    @property_value_138.setter
    def property_value_138(self, value=None):
        """  Corresponds to IDD Field `property_value_138`

        Args:
            value (float): value for IDD Field `property_value_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_138`'.format(value))

        self._data["Property Value 138"] = value

    @property
    def property_value_139(self):
        """Get property_value_139

        Returns:
            float: the value of `property_value_139` or None if not set
        """
        return self._data["Property Value 139"]

    @property_value_139.setter
    def property_value_139(self, value=None):
        """  Corresponds to IDD Field `property_value_139`

        Args:
            value (float): value for IDD Field `property_value_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_139`'.format(value))

        self._data["Property Value 139"] = value

    @property
    def property_value_140(self):
        """Get property_value_140

        Returns:
            float: the value of `property_value_140` or None if not set
        """
        return self._data["Property Value 140"]

    @property_value_140.setter
    def property_value_140(self, value=None):
        """  Corresponds to IDD Field `property_value_140`

        Args:
            value (float): value for IDD Field `property_value_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_140`'.format(value))

        self._data["Property Value 140"] = value

    @property
    def property_value_141(self):
        """Get property_value_141

        Returns:
            float: the value of `property_value_141` or None if not set
        """
        return self._data["Property Value 141"]

    @property_value_141.setter
    def property_value_141(self, value=None):
        """  Corresponds to IDD Field `property_value_141`

        Args:
            value (float): value for IDD Field `property_value_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_141`'.format(value))

        self._data["Property Value 141"] = value

    @property
    def property_value_142(self):
        """Get property_value_142

        Returns:
            float: the value of `property_value_142` or None if not set
        """
        return self._data["Property Value 142"]

    @property_value_142.setter
    def property_value_142(self, value=None):
        """  Corresponds to IDD Field `property_value_142`

        Args:
            value (float): value for IDD Field `property_value_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_142`'.format(value))

        self._data["Property Value 142"] = value

    @property
    def property_value_143(self):
        """Get property_value_143

        Returns:
            float: the value of `property_value_143` or None if not set
        """
        return self._data["Property Value 143"]

    @property_value_143.setter
    def property_value_143(self, value=None):
        """  Corresponds to IDD Field `property_value_143`

        Args:
            value (float): value for IDD Field `property_value_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_143`'.format(value))

        self._data["Property Value 143"] = value

    @property
    def property_value_144(self):
        """Get property_value_144

        Returns:
            float: the value of `property_value_144` or None if not set
        """
        return self._data["Property Value 144"]

    @property_value_144.setter
    def property_value_144(self, value=None):
        """  Corresponds to IDD Field `property_value_144`

        Args:
            value (float): value for IDD Field `property_value_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_144`'.format(value))

        self._data["Property Value 144"] = value

    @property
    def property_value_145(self):
        """Get property_value_145

        Returns:
            float: the value of `property_value_145` or None if not set
        """
        return self._data["Property Value 145"]

    @property_value_145.setter
    def property_value_145(self, value=None):
        """  Corresponds to IDD Field `property_value_145`

        Args:
            value (float): value for IDD Field `property_value_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_145`'.format(value))

        self._data["Property Value 145"] = value

    @property
    def property_value_146(self):
        """Get property_value_146

        Returns:
            float: the value of `property_value_146` or None if not set
        """
        return self._data["Property Value 146"]

    @property_value_146.setter
    def property_value_146(self, value=None):
        """  Corresponds to IDD Field `property_value_146`

        Args:
            value (float): value for IDD Field `property_value_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_146`'.format(value))

        self._data["Property Value 146"] = value

    @property
    def property_value_147(self):
        """Get property_value_147

        Returns:
            float: the value of `property_value_147` or None if not set
        """
        return self._data["Property Value 147"]

    @property_value_147.setter
    def property_value_147(self, value=None):
        """  Corresponds to IDD Field `property_value_147`

        Args:
            value (float): value for IDD Field `property_value_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_147`'.format(value))

        self._data["Property Value 147"] = value

    @property
    def property_value_148(self):
        """Get property_value_148

        Returns:
            float: the value of `property_value_148` or None if not set
        """
        return self._data["Property Value 148"]

    @property_value_148.setter
    def property_value_148(self, value=None):
        """  Corresponds to IDD Field `property_value_148`

        Args:
            value (float): value for IDD Field `property_value_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_148`'.format(value))

        self._data["Property Value 148"] = value

    @property
    def property_value_149(self):
        """Get property_value_149

        Returns:
            float: the value of `property_value_149` or None if not set
        """
        return self._data["Property Value 149"]

    @property_value_149.setter
    def property_value_149(self, value=None):
        """  Corresponds to IDD Field `property_value_149`

        Args:
            value (float): value for IDD Field `property_value_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_149`'.format(value))

        self._data["Property Value 149"] = value

    @property
    def property_value_150(self):
        """Get property_value_150

        Returns:
            float: the value of `property_value_150` or None if not set
        """
        return self._data["Property Value 150"]

    @property_value_150.setter
    def property_value_150(self, value=None):
        """  Corresponds to IDD Field `property_value_150`

        Args:
            value (float): value for IDD Field `property_value_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_150`'.format(value))

        self._data["Property Value 150"] = value

    @property
    def property_value_151(self):
        """Get property_value_151

        Returns:
            float: the value of `property_value_151` or None if not set
        """
        return self._data["Property Value 151"]

    @property_value_151.setter
    def property_value_151(self, value=None):
        """  Corresponds to IDD Field `property_value_151`

        Args:
            value (float): value for IDD Field `property_value_151`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_151`'.format(value))

        self._data["Property Value 151"] = value

    @property
    def property_value_152(self):
        """Get property_value_152

        Returns:
            float: the value of `property_value_152` or None if not set
        """
        return self._data["Property Value 152"]

    @property_value_152.setter
    def property_value_152(self, value=None):
        """  Corresponds to IDD Field `property_value_152`

        Args:
            value (float): value for IDD Field `property_value_152`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_152`'.format(value))

        self._data["Property Value 152"] = value

    @property
    def property_value_153(self):
        """Get property_value_153

        Returns:
            float: the value of `property_value_153` or None if not set
        """
        return self._data["Property Value 153"]

    @property_value_153.setter
    def property_value_153(self, value=None):
        """  Corresponds to IDD Field `property_value_153`

        Args:
            value (float): value for IDD Field `property_value_153`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_153`'.format(value))

        self._data["Property Value 153"] = value

    @property
    def property_value_154(self):
        """Get property_value_154

        Returns:
            float: the value of `property_value_154` or None if not set
        """
        return self._data["Property Value 154"]

    @property_value_154.setter
    def property_value_154(self, value=None):
        """  Corresponds to IDD Field `property_value_154`

        Args:
            value (float): value for IDD Field `property_value_154`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_154`'.format(value))

        self._data["Property Value 154"] = value

    @property
    def property_value_155(self):
        """Get property_value_155

        Returns:
            float: the value of `property_value_155` or None if not set
        """
        return self._data["Property Value 155"]

    @property_value_155.setter
    def property_value_155(self, value=None):
        """  Corresponds to IDD Field `property_value_155`

        Args:
            value (float): value for IDD Field `property_value_155`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_155`'.format(value))

        self._data["Property Value 155"] = value

    @property
    def property_value_156(self):
        """Get property_value_156

        Returns:
            float: the value of `property_value_156` or None if not set
        """
        return self._data["Property Value 156"]

    @property_value_156.setter
    def property_value_156(self, value=None):
        """  Corresponds to IDD Field `property_value_156`

        Args:
            value (float): value for IDD Field `property_value_156`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_156`'.format(value))

        self._data["Property Value 156"] = value

    @property
    def property_value_157(self):
        """Get property_value_157

        Returns:
            float: the value of `property_value_157` or None if not set
        """
        return self._data["Property Value 157"]

    @property_value_157.setter
    def property_value_157(self, value=None):
        """  Corresponds to IDD Field `property_value_157`

        Args:
            value (float): value for IDD Field `property_value_157`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_157`'.format(value))

        self._data["Property Value 157"] = value

    @property
    def property_value_158(self):
        """Get property_value_158

        Returns:
            float: the value of `property_value_158` or None if not set
        """
        return self._data["Property Value 158"]

    @property_value_158.setter
    def property_value_158(self, value=None):
        """  Corresponds to IDD Field `property_value_158`

        Args:
            value (float): value for IDD Field `property_value_158`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_158`'.format(value))

        self._data["Property Value 158"] = value

    @property
    def property_value_159(self):
        """Get property_value_159

        Returns:
            float: the value of `property_value_159` or None if not set
        """
        return self._data["Property Value 159"]

    @property_value_159.setter
    def property_value_159(self, value=None):
        """  Corresponds to IDD Field `property_value_159`

        Args:
            value (float): value for IDD Field `property_value_159`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_159`'.format(value))

        self._data["Property Value 159"] = value

    @property
    def property_value_160(self):
        """Get property_value_160

        Returns:
            float: the value of `property_value_160` or None if not set
        """
        return self._data["Property Value 160"]

    @property_value_160.setter
    def property_value_160(self, value=None):
        """  Corresponds to IDD Field `property_value_160`

        Args:
            value (float): value for IDD Field `property_value_160`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_160`'.format(value))

        self._data["Property Value 160"] = value

    @property
    def property_value_161(self):
        """Get property_value_161

        Returns:
            float: the value of `property_value_161` or None if not set
        """
        return self._data["Property Value 161"]

    @property_value_161.setter
    def property_value_161(self, value=None):
        """  Corresponds to IDD Field `property_value_161`

        Args:
            value (float): value for IDD Field `property_value_161`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_161`'.format(value))

        self._data["Property Value 161"] = value

    @property
    def property_value_162(self):
        """Get property_value_162

        Returns:
            float: the value of `property_value_162` or None if not set
        """
        return self._data["Property Value 162"]

    @property_value_162.setter
    def property_value_162(self, value=None):
        """  Corresponds to IDD Field `property_value_162`

        Args:
            value (float): value for IDD Field `property_value_162`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_162`'.format(value))

        self._data["Property Value 162"] = value

    @property
    def property_value_163(self):
        """Get property_value_163

        Returns:
            float: the value of `property_value_163` or None if not set
        """
        return self._data["Property Value 163"]

    @property_value_163.setter
    def property_value_163(self, value=None):
        """  Corresponds to IDD Field `property_value_163`

        Args:
            value (float): value for IDD Field `property_value_163`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_163`'.format(value))

        self._data["Property Value 163"] = value

    @property
    def property_value_164(self):
        """Get property_value_164

        Returns:
            float: the value of `property_value_164` or None if not set
        """
        return self._data["Property Value 164"]

    @property_value_164.setter
    def property_value_164(self, value=None):
        """  Corresponds to IDD Field `property_value_164`

        Args:
            value (float): value for IDD Field `property_value_164`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_164`'.format(value))

        self._data["Property Value 164"] = value

    @property
    def property_value_165(self):
        """Get property_value_165

        Returns:
            float: the value of `property_value_165` or None if not set
        """
        return self._data["Property Value 165"]

    @property_value_165.setter
    def property_value_165(self, value=None):
        """  Corresponds to IDD Field `property_value_165`

        Args:
            value (float): value for IDD Field `property_value_165`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_165`'.format(value))

        self._data["Property Value 165"] = value

    @property
    def property_value_166(self):
        """Get property_value_166

        Returns:
            float: the value of `property_value_166` or None if not set
        """
        return self._data["Property Value 166"]

    @property_value_166.setter
    def property_value_166(self, value=None):
        """  Corresponds to IDD Field `property_value_166`

        Args:
            value (float): value for IDD Field `property_value_166`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_166`'.format(value))

        self._data["Property Value 166"] = value

    @property
    def property_value_167(self):
        """Get property_value_167

        Returns:
            float: the value of `property_value_167` or None if not set
        """
        return self._data["Property Value 167"]

    @property_value_167.setter
    def property_value_167(self, value=None):
        """  Corresponds to IDD Field `property_value_167`

        Args:
            value (float): value for IDD Field `property_value_167`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_167`'.format(value))

        self._data["Property Value 167"] = value

    @property
    def property_value_168(self):
        """Get property_value_168

        Returns:
            float: the value of `property_value_168` or None if not set
        """
        return self._data["Property Value 168"]

    @property_value_168.setter
    def property_value_168(self, value=None):
        """  Corresponds to IDD Field `property_value_168`

        Args:
            value (float): value for IDD Field `property_value_168`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_168`'.format(value))

        self._data["Property Value 168"] = value

    @property
    def property_value_169(self):
        """Get property_value_169

        Returns:
            float: the value of `property_value_169` or None if not set
        """
        return self._data["Property Value 169"]

    @property_value_169.setter
    def property_value_169(self, value=None):
        """  Corresponds to IDD Field `property_value_169`

        Args:
            value (float): value for IDD Field `property_value_169`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_169`'.format(value))

        self._data["Property Value 169"] = value

    @property
    def property_value_170(self):
        """Get property_value_170

        Returns:
            float: the value of `property_value_170` or None if not set
        """
        return self._data["Property Value 170"]

    @property_value_170.setter
    def property_value_170(self, value=None):
        """  Corresponds to IDD Field `property_value_170`

        Args:
            value (float): value for IDD Field `property_value_170`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_170`'.format(value))

        self._data["Property Value 170"] = value

    @property
    def property_value_171(self):
        """Get property_value_171

        Returns:
            float: the value of `property_value_171` or None if not set
        """
        return self._data["Property Value 171"]

    @property_value_171.setter
    def property_value_171(self, value=None):
        """  Corresponds to IDD Field `property_value_171`

        Args:
            value (float): value for IDD Field `property_value_171`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_171`'.format(value))

        self._data["Property Value 171"] = value

    @property
    def property_value_172(self):
        """Get property_value_172

        Returns:
            float: the value of `property_value_172` or None if not set
        """
        return self._data["Property Value 172"]

    @property_value_172.setter
    def property_value_172(self, value=None):
        """  Corresponds to IDD Field `property_value_172`

        Args:
            value (float): value for IDD Field `property_value_172`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_172`'.format(value))

        self._data["Property Value 172"] = value

    @property
    def property_value_173(self):
        """Get property_value_173

        Returns:
            float: the value of `property_value_173` or None if not set
        """
        return self._data["Property Value 173"]

    @property_value_173.setter
    def property_value_173(self, value=None):
        """  Corresponds to IDD Field `property_value_173`

        Args:
            value (float): value for IDD Field `property_value_173`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_173`'.format(value))

        self._data["Property Value 173"] = value

    @property
    def property_value_174(self):
        """Get property_value_174

        Returns:
            float: the value of `property_value_174` or None if not set
        """
        return self._data["Property Value 174"]

    @property_value_174.setter
    def property_value_174(self, value=None):
        """  Corresponds to IDD Field `property_value_174`

        Args:
            value (float): value for IDD Field `property_value_174`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_174`'.format(value))

        self._data["Property Value 174"] = value

    @property
    def property_value_175(self):
        """Get property_value_175

        Returns:
            float: the value of `property_value_175` or None if not set
        """
        return self._data["Property Value 175"]

    @property_value_175.setter
    def property_value_175(self, value=None):
        """  Corresponds to IDD Field `property_value_175`

        Args:
            value (float): value for IDD Field `property_value_175`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_175`'.format(value))

        self._data["Property Value 175"] = value

    @property
    def property_value_176(self):
        """Get property_value_176

        Returns:
            float: the value of `property_value_176` or None if not set
        """
        return self._data["Property Value 176"]

    @property_value_176.setter
    def property_value_176(self, value=None):
        """  Corresponds to IDD Field `property_value_176`

        Args:
            value (float): value for IDD Field `property_value_176`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_176`'.format(value))

        self._data["Property Value 176"] = value

    @property
    def property_value_177(self):
        """Get property_value_177

        Returns:
            float: the value of `property_value_177` or None if not set
        """
        return self._data["Property Value 177"]

    @property_value_177.setter
    def property_value_177(self, value=None):
        """  Corresponds to IDD Field `property_value_177`

        Args:
            value (float): value for IDD Field `property_value_177`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_177`'.format(value))

        self._data["Property Value 177"] = value

    @property
    def property_value_178(self):
        """Get property_value_178

        Returns:
            float: the value of `property_value_178` or None if not set
        """
        return self._data["Property Value 178"]

    @property_value_178.setter
    def property_value_178(self, value=None):
        """  Corresponds to IDD Field `property_value_178`

        Args:
            value (float): value for IDD Field `property_value_178`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_178`'.format(value))

        self._data["Property Value 178"] = value

    @property
    def property_value_179(self):
        """Get property_value_179

        Returns:
            float: the value of `property_value_179` or None if not set
        """
        return self._data["Property Value 179"]

    @property_value_179.setter
    def property_value_179(self, value=None):
        """  Corresponds to IDD Field `property_value_179`

        Args:
            value (float): value for IDD Field `property_value_179`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_179`'.format(value))

        self._data["Property Value 179"] = value

    @property
    def property_value_180(self):
        """Get property_value_180

        Returns:
            float: the value of `property_value_180` or None if not set
        """
        return self._data["Property Value 180"]

    @property_value_180.setter
    def property_value_180(self, value=None):
        """  Corresponds to IDD Field `property_value_180`

        Args:
            value (float): value for IDD Field `property_value_180`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_180`'.format(value))

        self._data["Property Value 180"] = value

    @property
    def property_value_181(self):
        """Get property_value_181

        Returns:
            float: the value of `property_value_181` or None if not set
        """
        return self._data["Property Value 181"]

    @property_value_181.setter
    def property_value_181(self, value=None):
        """  Corresponds to IDD Field `property_value_181`

        Args:
            value (float): value for IDD Field `property_value_181`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_181`'.format(value))

        self._data["Property Value 181"] = value

    @property
    def property_value_182(self):
        """Get property_value_182

        Returns:
            float: the value of `property_value_182` or None if not set
        """
        return self._data["Property Value 182"]

    @property_value_182.setter
    def property_value_182(self, value=None):
        """  Corresponds to IDD Field `property_value_182`

        Args:
            value (float): value for IDD Field `property_value_182`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_182`'.format(value))

        self._data["Property Value 182"] = value

    @property
    def property_value_183(self):
        """Get property_value_183

        Returns:
            float: the value of `property_value_183` or None if not set
        """
        return self._data["Property Value 183"]

    @property_value_183.setter
    def property_value_183(self, value=None):
        """  Corresponds to IDD Field `property_value_183`

        Args:
            value (float): value for IDD Field `property_value_183`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_183`'.format(value))

        self._data["Property Value 183"] = value

    @property
    def property_value_184(self):
        """Get property_value_184

        Returns:
            float: the value of `property_value_184` or None if not set
        """
        return self._data["Property Value 184"]

    @property_value_184.setter
    def property_value_184(self, value=None):
        """  Corresponds to IDD Field `property_value_184`

        Args:
            value (float): value for IDD Field `property_value_184`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_184`'.format(value))

        self._data["Property Value 184"] = value

    @property
    def property_value_185(self):
        """Get property_value_185

        Returns:
            float: the value of `property_value_185` or None if not set
        """
        return self._data["Property Value 185"]

    @property_value_185.setter
    def property_value_185(self, value=None):
        """  Corresponds to IDD Field `property_value_185`

        Args:
            value (float): value for IDD Field `property_value_185`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_185`'.format(value))

        self._data["Property Value 185"] = value

    @property
    def property_value_186(self):
        """Get property_value_186

        Returns:
            float: the value of `property_value_186` or None if not set
        """
        return self._data["Property Value 186"]

    @property_value_186.setter
    def property_value_186(self, value=None):
        """  Corresponds to IDD Field `property_value_186`

        Args:
            value (float): value for IDD Field `property_value_186`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_186`'.format(value))

        self._data["Property Value 186"] = value

    @property
    def property_value_187(self):
        """Get property_value_187

        Returns:
            float: the value of `property_value_187` or None if not set
        """
        return self._data["Property Value 187"]

    @property_value_187.setter
    def property_value_187(self, value=None):
        """  Corresponds to IDD Field `property_value_187`

        Args:
            value (float): value for IDD Field `property_value_187`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_187`'.format(value))

        self._data["Property Value 187"] = value

    @property
    def property_value_188(self):
        """Get property_value_188

        Returns:
            float: the value of `property_value_188` or None if not set
        """
        return self._data["Property Value 188"]

    @property_value_188.setter
    def property_value_188(self, value=None):
        """  Corresponds to IDD Field `property_value_188`

        Args:
            value (float): value for IDD Field `property_value_188`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_188`'.format(value))

        self._data["Property Value 188"] = value

    @property
    def property_value_189(self):
        """Get property_value_189

        Returns:
            float: the value of `property_value_189` or None if not set
        """
        return self._data["Property Value 189"]

    @property_value_189.setter
    def property_value_189(self, value=None):
        """  Corresponds to IDD Field `property_value_189`

        Args:
            value (float): value for IDD Field `property_value_189`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_189`'.format(value))

        self._data["Property Value 189"] = value

    @property
    def property_value_190(self):
        """Get property_value_190

        Returns:
            float: the value of `property_value_190` or None if not set
        """
        return self._data["Property Value 190"]

    @property_value_190.setter
    def property_value_190(self, value=None):
        """  Corresponds to IDD Field `property_value_190`

        Args:
            value (float): value for IDD Field `property_value_190`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_190`'.format(value))

        self._data["Property Value 190"] = value

    @property
    def property_value_191(self):
        """Get property_value_191

        Returns:
            float: the value of `property_value_191` or None if not set
        """
        return self._data["Property Value 191"]

    @property_value_191.setter
    def property_value_191(self, value=None):
        """  Corresponds to IDD Field `property_value_191`

        Args:
            value (float): value for IDD Field `property_value_191`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_191`'.format(value))

        self._data["Property Value 191"] = value

    @property
    def property_value_192(self):
        """Get property_value_192

        Returns:
            float: the value of `property_value_192` or None if not set
        """
        return self._data["Property Value 192"]

    @property_value_192.setter
    def property_value_192(self, value=None):
        """  Corresponds to IDD Field `property_value_192`

        Args:
            value (float): value for IDD Field `property_value_192`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_192`'.format(value))

        self._data["Property Value 192"] = value

    @property
    def property_value_193(self):
        """Get property_value_193

        Returns:
            float: the value of `property_value_193` or None if not set
        """
        return self._data["Property Value 193"]

    @property_value_193.setter
    def property_value_193(self, value=None):
        """  Corresponds to IDD Field `property_value_193`

        Args:
            value (float): value for IDD Field `property_value_193`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_193`'.format(value))

        self._data["Property Value 193"] = value

    @property
    def property_value_194(self):
        """Get property_value_194

        Returns:
            float: the value of `property_value_194` or None if not set
        """
        return self._data["Property Value 194"]

    @property_value_194.setter
    def property_value_194(self, value=None):
        """  Corresponds to IDD Field `property_value_194`

        Args:
            value (float): value for IDD Field `property_value_194`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_194`'.format(value))

        self._data["Property Value 194"] = value

    @property
    def property_value_195(self):
        """Get property_value_195

        Returns:
            float: the value of `property_value_195` or None if not set
        """
        return self._data["Property Value 195"]

    @property_value_195.setter
    def property_value_195(self, value=None):
        """  Corresponds to IDD Field `property_value_195`

        Args:
            value (float): value for IDD Field `property_value_195`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_195`'.format(value))

        self._data["Property Value 195"] = value

    @property
    def property_value_196(self):
        """Get property_value_196

        Returns:
            float: the value of `property_value_196` or None if not set
        """
        return self._data["Property Value 196"]

    @property_value_196.setter
    def property_value_196(self, value=None):
        """  Corresponds to IDD Field `property_value_196`

        Args:
            value (float): value for IDD Field `property_value_196`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_196`'.format(value))

        self._data["Property Value 196"] = value

    @property
    def property_value_197(self):
        """Get property_value_197

        Returns:
            float: the value of `property_value_197` or None if not set
        """
        return self._data["Property Value 197"]

    @property_value_197.setter
    def property_value_197(self, value=None):
        """  Corresponds to IDD Field `property_value_197`

        Args:
            value (float): value for IDD Field `property_value_197`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_197`'.format(value))

        self._data["Property Value 197"] = value

    @property
    def property_value_198(self):
        """Get property_value_198

        Returns:
            float: the value of `property_value_198` or None if not set
        """
        return self._data["Property Value 198"]

    @property_value_198.setter
    def property_value_198(self, value=None):
        """  Corresponds to IDD Field `property_value_198`

        Args:
            value (float): value for IDD Field `property_value_198`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_198`'.format(value))

        self._data["Property Value 198"] = value

    @property
    def property_value_199(self):
        """Get property_value_199

        Returns:
            float: the value of `property_value_199` or None if not set
        """
        return self._data["Property Value 199"]

    @property_value_199.setter
    def property_value_199(self, value=None):
        """  Corresponds to IDD Field `property_value_199`

        Args:
            value (float): value for IDD Field `property_value_199`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_199`'.format(value))

        self._data["Property Value 199"] = value

    @property
    def property_value_200(self):
        """Get property_value_200

        Returns:
            float: the value of `property_value_200` or None if not set
        """
        return self._data["Property Value 200"]

    @property_value_200.setter
    def property_value_200(self, value=None):
        """  Corresponds to IDD Field `property_value_200`

        Args:
            value (float): value for IDD Field `property_value_200`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_200`'.format(value))

        self._data["Property Value 200"] = value

    @property
    def property_value_201(self):
        """Get property_value_201

        Returns:
            float: the value of `property_value_201` or None if not set
        """
        return self._data["Property Value 201"]

    @property_value_201.setter
    def property_value_201(self, value=None):
        """  Corresponds to IDD Field `property_value_201`

        Args:
            value (float): value for IDD Field `property_value_201`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_201`'.format(value))

        self._data["Property Value 201"] = value

    @property
    def property_value_202(self):
        """Get property_value_202

        Returns:
            float: the value of `property_value_202` or None if not set
        """
        return self._data["Property Value 202"]

    @property_value_202.setter
    def property_value_202(self, value=None):
        """  Corresponds to IDD Field `property_value_202`

        Args:
            value (float): value for IDD Field `property_value_202`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_202`'.format(value))

        self._data["Property Value 202"] = value

    @property
    def property_value_203(self):
        """Get property_value_203

        Returns:
            float: the value of `property_value_203` or None if not set
        """
        return self._data["Property Value 203"]

    @property_value_203.setter
    def property_value_203(self, value=None):
        """  Corresponds to IDD Field `property_value_203`

        Args:
            value (float): value for IDD Field `property_value_203`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_203`'.format(value))

        self._data["Property Value 203"] = value

    @property
    def property_value_204(self):
        """Get property_value_204

        Returns:
            float: the value of `property_value_204` or None if not set
        """
        return self._data["Property Value 204"]

    @property_value_204.setter
    def property_value_204(self, value=None):
        """  Corresponds to IDD Field `property_value_204`

        Args:
            value (float): value for IDD Field `property_value_204`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_204`'.format(value))

        self._data["Property Value 204"] = value

    @property
    def property_value_205(self):
        """Get property_value_205

        Returns:
            float: the value of `property_value_205` or None if not set
        """
        return self._data["Property Value 205"]

    @property_value_205.setter
    def property_value_205(self, value=None):
        """  Corresponds to IDD Field `property_value_205`

        Args:
            value (float): value for IDD Field `property_value_205`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_205`'.format(value))

        self._data["Property Value 205"] = value

    @property
    def property_value_206(self):
        """Get property_value_206

        Returns:
            float: the value of `property_value_206` or None if not set
        """
        return self._data["Property Value 206"]

    @property_value_206.setter
    def property_value_206(self, value=None):
        """  Corresponds to IDD Field `property_value_206`

        Args:
            value (float): value for IDD Field `property_value_206`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_206`'.format(value))

        self._data["Property Value 206"] = value

    @property
    def property_value_207(self):
        """Get property_value_207

        Returns:
            float: the value of `property_value_207` or None if not set
        """
        return self._data["Property Value 207"]

    @property_value_207.setter
    def property_value_207(self, value=None):
        """  Corresponds to IDD Field `property_value_207`

        Args:
            value (float): value for IDD Field `property_value_207`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_207`'.format(value))

        self._data["Property Value 207"] = value

    @property
    def property_value_208(self):
        """Get property_value_208

        Returns:
            float: the value of `property_value_208` or None if not set
        """
        return self._data["Property Value 208"]

    @property_value_208.setter
    def property_value_208(self, value=None):
        """  Corresponds to IDD Field `property_value_208`

        Args:
            value (float): value for IDD Field `property_value_208`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_208`'.format(value))

        self._data["Property Value 208"] = value

    @property
    def property_value_209(self):
        """Get property_value_209

        Returns:
            float: the value of `property_value_209` or None if not set
        """
        return self._data["Property Value 209"]

    @property_value_209.setter
    def property_value_209(self, value=None):
        """  Corresponds to IDD Field `property_value_209`

        Args:
            value (float): value for IDD Field `property_value_209`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_209`'.format(value))

        self._data["Property Value 209"] = value

    @property
    def property_value_210(self):
        """Get property_value_210

        Returns:
            float: the value of `property_value_210` or None if not set
        """
        return self._data["Property Value 210"]

    @property_value_210.setter
    def property_value_210(self, value=None):
        """  Corresponds to IDD Field `property_value_210`

        Args:
            value (float): value for IDD Field `property_value_210`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_210`'.format(value))

        self._data["Property Value 210"] = value

    @property
    def property_value_211(self):
        """Get property_value_211

        Returns:
            float: the value of `property_value_211` or None if not set
        """
        return self._data["Property Value 211"]

    @property_value_211.setter
    def property_value_211(self, value=None):
        """  Corresponds to IDD Field `property_value_211`

        Args:
            value (float): value for IDD Field `property_value_211`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_211`'.format(value))

        self._data["Property Value 211"] = value

    @property
    def property_value_212(self):
        """Get property_value_212

        Returns:
            float: the value of `property_value_212` or None if not set
        """
        return self._data["Property Value 212"]

    @property_value_212.setter
    def property_value_212(self, value=None):
        """  Corresponds to IDD Field `property_value_212`

        Args:
            value (float): value for IDD Field `property_value_212`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_212`'.format(value))

        self._data["Property Value 212"] = value

    @property
    def property_value_213(self):
        """Get property_value_213

        Returns:
            float: the value of `property_value_213` or None if not set
        """
        return self._data["Property Value 213"]

    @property_value_213.setter
    def property_value_213(self, value=None):
        """  Corresponds to IDD Field `property_value_213`

        Args:
            value (float): value for IDD Field `property_value_213`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_213`'.format(value))

        self._data["Property Value 213"] = value

    @property
    def property_value_214(self):
        """Get property_value_214

        Returns:
            float: the value of `property_value_214` or None if not set
        """
        return self._data["Property Value 214"]

    @property_value_214.setter
    def property_value_214(self, value=None):
        """  Corresponds to IDD Field `property_value_214`

        Args:
            value (float): value for IDD Field `property_value_214`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_214`'.format(value))

        self._data["Property Value 214"] = value

    @property
    def property_value_215(self):
        """Get property_value_215

        Returns:
            float: the value of `property_value_215` or None if not set
        """
        return self._data["Property Value 215"]

    @property_value_215.setter
    def property_value_215(self, value=None):
        """  Corresponds to IDD Field `property_value_215`

        Args:
            value (float): value for IDD Field `property_value_215`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_215`'.format(value))

        self._data["Property Value 215"] = value

    @property
    def property_value_216(self):
        """Get property_value_216

        Returns:
            float: the value of `property_value_216` or None if not set
        """
        return self._data["Property Value 216"]

    @property_value_216.setter
    def property_value_216(self, value=None):
        """  Corresponds to IDD Field `property_value_216`

        Args:
            value (float): value for IDD Field `property_value_216`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_216`'.format(value))

        self._data["Property Value 216"] = value

    @property
    def property_value_217(self):
        """Get property_value_217

        Returns:
            float: the value of `property_value_217` or None if not set
        """
        return self._data["Property Value 217"]

    @property_value_217.setter
    def property_value_217(self, value=None):
        """  Corresponds to IDD Field `property_value_217`

        Args:
            value (float): value for IDD Field `property_value_217`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_217`'.format(value))

        self._data["Property Value 217"] = value

    @property
    def property_value_218(self):
        """Get property_value_218

        Returns:
            float: the value of `property_value_218` or None if not set
        """
        return self._data["Property Value 218"]

    @property_value_218.setter
    def property_value_218(self, value=None):
        """  Corresponds to IDD Field `property_value_218`

        Args:
            value (float): value for IDD Field `property_value_218`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_218`'.format(value))

        self._data["Property Value 218"] = value

    @property
    def property_value_219(self):
        """Get property_value_219

        Returns:
            float: the value of `property_value_219` or None if not set
        """
        return self._data["Property Value 219"]

    @property_value_219.setter
    def property_value_219(self, value=None):
        """  Corresponds to IDD Field `property_value_219`

        Args:
            value (float): value for IDD Field `property_value_219`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_219`'.format(value))

        self._data["Property Value 219"] = value

    @property
    def property_value_220(self):
        """Get property_value_220

        Returns:
            float: the value of `property_value_220` or None if not set
        """
        return self._data["Property Value 220"]

    @property_value_220.setter
    def property_value_220(self, value=None):
        """  Corresponds to IDD Field `property_value_220`

        Args:
            value (float): value for IDD Field `property_value_220`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_220`'.format(value))

        self._data["Property Value 220"] = value

    @property
    def property_value_221(self):
        """Get property_value_221

        Returns:
            float: the value of `property_value_221` or None if not set
        """
        return self._data["Property Value 221"]

    @property_value_221.setter
    def property_value_221(self, value=None):
        """  Corresponds to IDD Field `property_value_221`

        Args:
            value (float): value for IDD Field `property_value_221`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_221`'.format(value))

        self._data["Property Value 221"] = value

    @property
    def property_value_222(self):
        """Get property_value_222

        Returns:
            float: the value of `property_value_222` or None if not set
        """
        return self._data["Property Value 222"]

    @property_value_222.setter
    def property_value_222(self, value=None):
        """  Corresponds to IDD Field `property_value_222`

        Args:
            value (float): value for IDD Field `property_value_222`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_222`'.format(value))

        self._data["Property Value 222"] = value

    @property
    def property_value_223(self):
        """Get property_value_223

        Returns:
            float: the value of `property_value_223` or None if not set
        """
        return self._data["Property Value 223"]

    @property_value_223.setter
    def property_value_223(self, value=None):
        """  Corresponds to IDD Field `property_value_223`

        Args:
            value (float): value for IDD Field `property_value_223`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_223`'.format(value))

        self._data["Property Value 223"] = value

    @property
    def property_value_224(self):
        """Get property_value_224

        Returns:
            float: the value of `property_value_224` or None if not set
        """
        return self._data["Property Value 224"]

    @property_value_224.setter
    def property_value_224(self, value=None):
        """  Corresponds to IDD Field `property_value_224`

        Args:
            value (float): value for IDD Field `property_value_224`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_224`'.format(value))

        self._data["Property Value 224"] = value

    @property
    def property_value_225(self):
        """Get property_value_225

        Returns:
            float: the value of `property_value_225` or None if not set
        """
        return self._data["Property Value 225"]

    @property_value_225.setter
    def property_value_225(self, value=None):
        """  Corresponds to IDD Field `property_value_225`

        Args:
            value (float): value for IDD Field `property_value_225`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_225`'.format(value))

        self._data["Property Value 225"] = value

    @property
    def property_value_226(self):
        """Get property_value_226

        Returns:
            float: the value of `property_value_226` or None if not set
        """
        return self._data["Property Value 226"]

    @property_value_226.setter
    def property_value_226(self, value=None):
        """  Corresponds to IDD Field `property_value_226`

        Args:
            value (float): value for IDD Field `property_value_226`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_226`'.format(value))

        self._data["Property Value 226"] = value

    @property
    def property_value_227(self):
        """Get property_value_227

        Returns:
            float: the value of `property_value_227` or None if not set
        """
        return self._data["Property Value 227"]

    @property_value_227.setter
    def property_value_227(self, value=None):
        """  Corresponds to IDD Field `property_value_227`

        Args:
            value (float): value for IDD Field `property_value_227`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_227`'.format(value))

        self._data["Property Value 227"] = value

    @property
    def property_value_228(self):
        """Get property_value_228

        Returns:
            float: the value of `property_value_228` or None if not set
        """
        return self._data["Property Value 228"]

    @property_value_228.setter
    def property_value_228(self, value=None):
        """  Corresponds to IDD Field `property_value_228`

        Args:
            value (float): value for IDD Field `property_value_228`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_228`'.format(value))

        self._data["Property Value 228"] = value

    @property
    def property_value_229(self):
        """Get property_value_229

        Returns:
            float: the value of `property_value_229` or None if not set
        """
        return self._data["Property Value 229"]

    @property_value_229.setter
    def property_value_229(self, value=None):
        """  Corresponds to IDD Field `property_value_229`

        Args:
            value (float): value for IDD Field `property_value_229`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_229`'.format(value))

        self._data["Property Value 229"] = value

    @property
    def property_value_230(self):
        """Get property_value_230

        Returns:
            float: the value of `property_value_230` or None if not set
        """
        return self._data["Property Value 230"]

    @property_value_230.setter
    def property_value_230(self, value=None):
        """  Corresponds to IDD Field `property_value_230`

        Args:
            value (float): value for IDD Field `property_value_230`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_230`'.format(value))

        self._data["Property Value 230"] = value

    @property
    def property_value_231(self):
        """Get property_value_231

        Returns:
            float: the value of `property_value_231` or None if not set
        """
        return self._data["Property Value 231"]

    @property_value_231.setter
    def property_value_231(self, value=None):
        """  Corresponds to IDD Field `property_value_231`

        Args:
            value (float): value for IDD Field `property_value_231`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_231`'.format(value))

        self._data["Property Value 231"] = value

    @property
    def property_value_232(self):
        """Get property_value_232

        Returns:
            float: the value of `property_value_232` or None if not set
        """
        return self._data["Property Value 232"]

    @property_value_232.setter
    def property_value_232(self, value=None):
        """  Corresponds to IDD Field `property_value_232`

        Args:
            value (float): value for IDD Field `property_value_232`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_232`'.format(value))

        self._data["Property Value 232"] = value

    @property
    def property_value_233(self):
        """Get property_value_233

        Returns:
            float: the value of `property_value_233` or None if not set
        """
        return self._data["Property Value 233"]

    @property_value_233.setter
    def property_value_233(self, value=None):
        """  Corresponds to IDD Field `property_value_233`

        Args:
            value (float): value for IDD Field `property_value_233`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_233`'.format(value))

        self._data["Property Value 233"] = value

    @property
    def property_value_234(self):
        """Get property_value_234

        Returns:
            float: the value of `property_value_234` or None if not set
        """
        return self._data["Property Value 234"]

    @property_value_234.setter
    def property_value_234(self, value=None):
        """  Corresponds to IDD Field `property_value_234`

        Args:
            value (float): value for IDD Field `property_value_234`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_234`'.format(value))

        self._data["Property Value 234"] = value

    @property
    def property_value_235(self):
        """Get property_value_235

        Returns:
            float: the value of `property_value_235` or None if not set
        """
        return self._data["Property Value 235"]

    @property_value_235.setter
    def property_value_235(self, value=None):
        """  Corresponds to IDD Field `property_value_235`

        Args:
            value (float): value for IDD Field `property_value_235`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_235`'.format(value))

        self._data["Property Value 235"] = value

    @property
    def property_value_236(self):
        """Get property_value_236

        Returns:
            float: the value of `property_value_236` or None if not set
        """
        return self._data["Property Value 236"]

    @property_value_236.setter
    def property_value_236(self, value=None):
        """  Corresponds to IDD Field `property_value_236`

        Args:
            value (float): value for IDD Field `property_value_236`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_236`'.format(value))

        self._data["Property Value 236"] = value

    @property
    def property_value_237(self):
        """Get property_value_237

        Returns:
            float: the value of `property_value_237` or None if not set
        """
        return self._data["Property Value 237"]

    @property_value_237.setter
    def property_value_237(self, value=None):
        """  Corresponds to IDD Field `property_value_237`

        Args:
            value (float): value for IDD Field `property_value_237`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_237`'.format(value))

        self._data["Property Value 237"] = value

    @property
    def property_value_238(self):
        """Get property_value_238

        Returns:
            float: the value of `property_value_238` or None if not set
        """
        return self._data["Property Value 238"]

    @property_value_238.setter
    def property_value_238(self, value=None):
        """  Corresponds to IDD Field `property_value_238`

        Args:
            value (float): value for IDD Field `property_value_238`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_238`'.format(value))

        self._data["Property Value 238"] = value

    @property
    def property_value_239(self):
        """Get property_value_239

        Returns:
            float: the value of `property_value_239` or None if not set
        """
        return self._data["Property Value 239"]

    @property_value_239.setter
    def property_value_239(self, value=None):
        """  Corresponds to IDD Field `property_value_239`

        Args:
            value (float): value for IDD Field `property_value_239`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_239`'.format(value))

        self._data["Property Value 239"] = value

    @property
    def property_value_240(self):
        """Get property_value_240

        Returns:
            float: the value of `property_value_240` or None if not set
        """
        return self._data["Property Value 240"]

    @property_value_240.setter
    def property_value_240(self, value=None):
        """  Corresponds to IDD Field `property_value_240`

        Args:
            value (float): value for IDD Field `property_value_240`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_240`'.format(value))

        self._data["Property Value 240"] = value

    @property
    def property_value_241(self):
        """Get property_value_241

        Returns:
            float: the value of `property_value_241` or None if not set
        """
        return self._data["Property Value 241"]

    @property_value_241.setter
    def property_value_241(self, value=None):
        """  Corresponds to IDD Field `property_value_241`

        Args:
            value (float): value for IDD Field `property_value_241`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_241`'.format(value))

        self._data["Property Value 241"] = value

    @property
    def property_value_242(self):
        """Get property_value_242

        Returns:
            float: the value of `property_value_242` or None if not set
        """
        return self._data["Property Value 242"]

    @property_value_242.setter
    def property_value_242(self, value=None):
        """  Corresponds to IDD Field `property_value_242`

        Args:
            value (float): value for IDD Field `property_value_242`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_242`'.format(value))

        self._data["Property Value 242"] = value

    @property
    def property_value_243(self):
        """Get property_value_243

        Returns:
            float: the value of `property_value_243` or None if not set
        """
        return self._data["Property Value 243"]

    @property_value_243.setter
    def property_value_243(self, value=None):
        """  Corresponds to IDD Field `property_value_243`

        Args:
            value (float): value for IDD Field `property_value_243`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_243`'.format(value))

        self._data["Property Value 243"] = value

    @property
    def property_value_244(self):
        """Get property_value_244

        Returns:
            float: the value of `property_value_244` or None if not set
        """
        return self._data["Property Value 244"]

    @property_value_244.setter
    def property_value_244(self, value=None):
        """  Corresponds to IDD Field `property_value_244`

        Args:
            value (float): value for IDD Field `property_value_244`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_244`'.format(value))

        self._data["Property Value 244"] = value

    @property
    def property_value_245(self):
        """Get property_value_245

        Returns:
            float: the value of `property_value_245` or None if not set
        """
        return self._data["Property Value 245"]

    @property_value_245.setter
    def property_value_245(self, value=None):
        """  Corresponds to IDD Field `property_value_245`

        Args:
            value (float): value for IDD Field `property_value_245`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_245`'.format(value))

        self._data["Property Value 245"] = value

    @property
    def property_value_246(self):
        """Get property_value_246

        Returns:
            float: the value of `property_value_246` or None if not set
        """
        return self._data["Property Value 246"]

    @property_value_246.setter
    def property_value_246(self, value=None):
        """  Corresponds to IDD Field `property_value_246`

        Args:
            value (float): value for IDD Field `property_value_246`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_246`'.format(value))

        self._data["Property Value 246"] = value

    @property
    def property_value_247(self):
        """Get property_value_247

        Returns:
            float: the value of `property_value_247` or None if not set
        """
        return self._data["Property Value 247"]

    @property_value_247.setter
    def property_value_247(self, value=None):
        """  Corresponds to IDD Field `property_value_247`

        Args:
            value (float): value for IDD Field `property_value_247`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_247`'.format(value))

        self._data["Property Value 247"] = value

    @property
    def property_value_248(self):
        """Get property_value_248

        Returns:
            float: the value of `property_value_248` or None if not set
        """
        return self._data["Property Value 248"]

    @property_value_248.setter
    def property_value_248(self, value=None):
        """  Corresponds to IDD Field `property_value_248`

        Args:
            value (float): value for IDD Field `property_value_248`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_248`'.format(value))

        self._data["Property Value 248"] = value

    @property
    def property_value_249(self):
        """Get property_value_249

        Returns:
            float: the value of `property_value_249` or None if not set
        """
        return self._data["Property Value 249"]

    @property_value_249.setter
    def property_value_249(self, value=None):
        """  Corresponds to IDD Field `property_value_249`

        Args:
            value (float): value for IDD Field `property_value_249`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_249`'.format(value))

        self._data["Property Value 249"] = value

    @property
    def property_value_250(self):
        """Get property_value_250

        Returns:
            float: the value of `property_value_250` or None if not set
        """
        return self._data["Property Value 250"]

    @property_value_250.setter
    def property_value_250(self, value=None):
        """  Corresponds to IDD Field `property_value_250`

        Args:
            value (float): value for IDD Field `property_value_250`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_250`'.format(value))

        self._data["Property Value 250"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.fluid_name))
        out.append(self._to_str(self.fluid_property_type))
        out.append(self._to_str(self.temperature_values_name))
        out.append(self._to_str(self.pressure))
        out.append(self._to_str(self.property_value_1))
        out.append(self._to_str(self.property_value_2))
        out.append(self._to_str(self.property_value_3))
        out.append(self._to_str(self.property_value_4))
        out.append(self._to_str(self.property_value_5))
        out.append(self._to_str(self.property_value_6))
        out.append(self._to_str(self.property_value_7))
        out.append(self._to_str(self.property_value_8))
        out.append(self._to_str(self.property_value_9))
        out.append(self._to_str(self.property_value_10))
        out.append(self._to_str(self.property_value_11))
        out.append(self._to_str(self.property_value_12))
        out.append(self._to_str(self.property_value_13))
        out.append(self._to_str(self.property_value_14))
        out.append(self._to_str(self.property_value_15))
        out.append(self._to_str(self.property_value_16))
        out.append(self._to_str(self.property_value_17))
        out.append(self._to_str(self.property_value_18))
        out.append(self._to_str(self.property_value_19))
        out.append(self._to_str(self.property_value_20))
        out.append(self._to_str(self.property_value_21))
        out.append(self._to_str(self.property_value_22))
        out.append(self._to_str(self.property_value_23))
        out.append(self._to_str(self.property_value_24))
        out.append(self._to_str(self.property_value_25))
        out.append(self._to_str(self.property_value_26))
        out.append(self._to_str(self.property_value_27))
        out.append(self._to_str(self.property_value_28))
        out.append(self._to_str(self.property_value_29))
        out.append(self._to_str(self.property_value_30))
        out.append(self._to_str(self.property_value_31))
        out.append(self._to_str(self.property_value_32))
        out.append(self._to_str(self.property_value_33))
        out.append(self._to_str(self.property_value_34))
        out.append(self._to_str(self.property_value_35))
        out.append(self._to_str(self.property_value_36))
        out.append(self._to_str(self.property_value_37))
        out.append(self._to_str(self.property_value_38))
        out.append(self._to_str(self.property_value_39))
        out.append(self._to_str(self.property_value_40))
        out.append(self._to_str(self.property_value_41))
        out.append(self._to_str(self.property_value_42))
        out.append(self._to_str(self.property_value_43))
        out.append(self._to_str(self.property_value_44))
        out.append(self._to_str(self.property_value_45))
        out.append(self._to_str(self.property_value_46))
        out.append(self._to_str(self.property_value_47))
        out.append(self._to_str(self.property_value_48))
        out.append(self._to_str(self.property_value_49))
        out.append(self._to_str(self.property_value_50))
        out.append(self._to_str(self.property_value_51))
        out.append(self._to_str(self.property_value_52))
        out.append(self._to_str(self.property_value_53))
        out.append(self._to_str(self.property_value_54))
        out.append(self._to_str(self.property_value_55))
        out.append(self._to_str(self.property_value_56))
        out.append(self._to_str(self.property_value_57))
        out.append(self._to_str(self.property_value_58))
        out.append(self._to_str(self.property_value_59))
        out.append(self._to_str(self.property_value_60))
        out.append(self._to_str(self.property_value_61))
        out.append(self._to_str(self.property_value_62))
        out.append(self._to_str(self.property_value_63))
        out.append(self._to_str(self.property_value_64))
        out.append(self._to_str(self.property_value_65))
        out.append(self._to_str(self.property_value_66))
        out.append(self._to_str(self.property_value_67))
        out.append(self._to_str(self.property_value_68))
        out.append(self._to_str(self.property_value_69))
        out.append(self._to_str(self.property_value_70))
        out.append(self._to_str(self.property_value_71))
        out.append(self._to_str(self.property_value_72))
        out.append(self._to_str(self.property_value_73))
        out.append(self._to_str(self.property_value_74))
        out.append(self._to_str(self.property_value_75))
        out.append(self._to_str(self.property_value_76))
        out.append(self._to_str(self.property_value_77))
        out.append(self._to_str(self.property_value_78))
        out.append(self._to_str(self.property_value_79))
        out.append(self._to_str(self.property_value_80))
        out.append(self._to_str(self.property_value_81))
        out.append(self._to_str(self.property_value_82))
        out.append(self._to_str(self.property_value_83))
        out.append(self._to_str(self.property_value_84))
        out.append(self._to_str(self.property_value_85))
        out.append(self._to_str(self.property_value_86))
        out.append(self._to_str(self.property_value_87))
        out.append(self._to_str(self.property_value_88))
        out.append(self._to_str(self.property_value_89))
        out.append(self._to_str(self.property_value_90))
        out.append(self._to_str(self.property_value_91))
        out.append(self._to_str(self.property_value_92))
        out.append(self._to_str(self.property_value_93))
        out.append(self._to_str(self.property_value_94))
        out.append(self._to_str(self.property_value_95))
        out.append(self._to_str(self.property_value_96))
        out.append(self._to_str(self.property_value_97))
        out.append(self._to_str(self.property_value_98))
        out.append(self._to_str(self.property_value_99))
        out.append(self._to_str(self.property_value_100))
        out.append(self._to_str(self.property_value_101))
        out.append(self._to_str(self.property_value_102))
        out.append(self._to_str(self.property_value_103))
        out.append(self._to_str(self.property_value_104))
        out.append(self._to_str(self.property_value_105))
        out.append(self._to_str(self.property_value_106))
        out.append(self._to_str(self.property_value_107))
        out.append(self._to_str(self.property_value_108))
        out.append(self._to_str(self.property_value_109))
        out.append(self._to_str(self.property_value_110))
        out.append(self._to_str(self.property_value_111))
        out.append(self._to_str(self.property_value_112))
        out.append(self._to_str(self.property_value_113))
        out.append(self._to_str(self.property_value_114))
        out.append(self._to_str(self.property_value_115))
        out.append(self._to_str(self.property_value_116))
        out.append(self._to_str(self.property_value_117))
        out.append(self._to_str(self.property_value_118))
        out.append(self._to_str(self.property_value_119))
        out.append(self._to_str(self.property_value_120))
        out.append(self._to_str(self.property_value_121))
        out.append(self._to_str(self.property_value_122))
        out.append(self._to_str(self.property_value_123))
        out.append(self._to_str(self.property_value_124))
        out.append(self._to_str(self.property_value_125))
        out.append(self._to_str(self.property_value_126))
        out.append(self._to_str(self.property_value_127))
        out.append(self._to_str(self.property_value_128))
        out.append(self._to_str(self.property_value_129))
        out.append(self._to_str(self.property_value_130))
        out.append(self._to_str(self.property_value_131))
        out.append(self._to_str(self.property_value_132))
        out.append(self._to_str(self.property_value_133))
        out.append(self._to_str(self.property_value_134))
        out.append(self._to_str(self.property_value_135))
        out.append(self._to_str(self.property_value_136))
        out.append(self._to_str(self.property_value_137))
        out.append(self._to_str(self.property_value_138))
        out.append(self._to_str(self.property_value_139))
        out.append(self._to_str(self.property_value_140))
        out.append(self._to_str(self.property_value_141))
        out.append(self._to_str(self.property_value_142))
        out.append(self._to_str(self.property_value_143))
        out.append(self._to_str(self.property_value_144))
        out.append(self._to_str(self.property_value_145))
        out.append(self._to_str(self.property_value_146))
        out.append(self._to_str(self.property_value_147))
        out.append(self._to_str(self.property_value_148))
        out.append(self._to_str(self.property_value_149))
        out.append(self._to_str(self.property_value_150))
        out.append(self._to_str(self.property_value_151))
        out.append(self._to_str(self.property_value_152))
        out.append(self._to_str(self.property_value_153))
        out.append(self._to_str(self.property_value_154))
        out.append(self._to_str(self.property_value_155))
        out.append(self._to_str(self.property_value_156))
        out.append(self._to_str(self.property_value_157))
        out.append(self._to_str(self.property_value_158))
        out.append(self._to_str(self.property_value_159))
        out.append(self._to_str(self.property_value_160))
        out.append(self._to_str(self.property_value_161))
        out.append(self._to_str(self.property_value_162))
        out.append(self._to_str(self.property_value_163))
        out.append(self._to_str(self.property_value_164))
        out.append(self._to_str(self.property_value_165))
        out.append(self._to_str(self.property_value_166))
        out.append(self._to_str(self.property_value_167))
        out.append(self._to_str(self.property_value_168))
        out.append(self._to_str(self.property_value_169))
        out.append(self._to_str(self.property_value_170))
        out.append(self._to_str(self.property_value_171))
        out.append(self._to_str(self.property_value_172))
        out.append(self._to_str(self.property_value_173))
        out.append(self._to_str(self.property_value_174))
        out.append(self._to_str(self.property_value_175))
        out.append(self._to_str(self.property_value_176))
        out.append(self._to_str(self.property_value_177))
        out.append(self._to_str(self.property_value_178))
        out.append(self._to_str(self.property_value_179))
        out.append(self._to_str(self.property_value_180))
        out.append(self._to_str(self.property_value_181))
        out.append(self._to_str(self.property_value_182))
        out.append(self._to_str(self.property_value_183))
        out.append(self._to_str(self.property_value_184))
        out.append(self._to_str(self.property_value_185))
        out.append(self._to_str(self.property_value_186))
        out.append(self._to_str(self.property_value_187))
        out.append(self._to_str(self.property_value_188))
        out.append(self._to_str(self.property_value_189))
        out.append(self._to_str(self.property_value_190))
        out.append(self._to_str(self.property_value_191))
        out.append(self._to_str(self.property_value_192))
        out.append(self._to_str(self.property_value_193))
        out.append(self._to_str(self.property_value_194))
        out.append(self._to_str(self.property_value_195))
        out.append(self._to_str(self.property_value_196))
        out.append(self._to_str(self.property_value_197))
        out.append(self._to_str(self.property_value_198))
        out.append(self._to_str(self.property_value_199))
        out.append(self._to_str(self.property_value_200))
        out.append(self._to_str(self.property_value_201))
        out.append(self._to_str(self.property_value_202))
        out.append(self._to_str(self.property_value_203))
        out.append(self._to_str(self.property_value_204))
        out.append(self._to_str(self.property_value_205))
        out.append(self._to_str(self.property_value_206))
        out.append(self._to_str(self.property_value_207))
        out.append(self._to_str(self.property_value_208))
        out.append(self._to_str(self.property_value_209))
        out.append(self._to_str(self.property_value_210))
        out.append(self._to_str(self.property_value_211))
        out.append(self._to_str(self.property_value_212))
        out.append(self._to_str(self.property_value_213))
        out.append(self._to_str(self.property_value_214))
        out.append(self._to_str(self.property_value_215))
        out.append(self._to_str(self.property_value_216))
        out.append(self._to_str(self.property_value_217))
        out.append(self._to_str(self.property_value_218))
        out.append(self._to_str(self.property_value_219))
        out.append(self._to_str(self.property_value_220))
        out.append(self._to_str(self.property_value_221))
        out.append(self._to_str(self.property_value_222))
        out.append(self._to_str(self.property_value_223))
        out.append(self._to_str(self.property_value_224))
        out.append(self._to_str(self.property_value_225))
        out.append(self._to_str(self.property_value_226))
        out.append(self._to_str(self.property_value_227))
        out.append(self._to_str(self.property_value_228))
        out.append(self._to_str(self.property_value_229))
        out.append(self._to_str(self.property_value_230))
        out.append(self._to_str(self.property_value_231))
        out.append(self._to_str(self.property_value_232))
        out.append(self._to_str(self.property_value_233))
        out.append(self._to_str(self.property_value_234))
        out.append(self._to_str(self.property_value_235))
        out.append(self._to_str(self.property_value_236))
        out.append(self._to_str(self.property_value_237))
        out.append(self._to_str(self.property_value_238))
        out.append(self._to_str(self.property_value_239))
        out.append(self._to_str(self.property_value_240))
        out.append(self._to_str(self.property_value_241))
        out.append(self._to_str(self.property_value_242))
        out.append(self._to_str(self.property_value_243))
        out.append(self._to_str(self.property_value_244))
        out.append(self._to_str(self.property_value_245))
        out.append(self._to_str(self.property_value_246))
        out.append(self._to_str(self.property_value_247))
        out.append(self._to_str(self.property_value_248))
        out.append(self._to_str(self.property_value_249))
        out.append(self._to_str(self.property_value_250))
        return ",".join(out)

class FluidPropertiesConcentration(object):
    """ Corresponds to IDD object `FluidProperties:Concentration`
        fluid properties for water/other fluid mixtures
    
    """
    internal_name = "FluidProperties:Concentration"
    field_count = 254
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `FluidProperties:Concentration`
        """
        self._data = OrderedDict()
        self._data["Fluid Name"] = None
        self._data["Fluid Property Type"] = None
        self._data["Temperature Values Name"] = None
        self._data["Concentration"] = None
        self._data["Property Value 1"] = None
        self._data["Property Value 2"] = None
        self._data["Property Value 3"] = None
        self._data["Property Value 4"] = None
        self._data["Property Value 5"] = None
        self._data["Property Value 6"] = None
        self._data["Property Value 7"] = None
        self._data["Property Value 8"] = None
        self._data["Property Value 9"] = None
        self._data["Property Value 10"] = None
        self._data["Property Value 11"] = None
        self._data["Property Value 12"] = None
        self._data["Property Value 13"] = None
        self._data["Property Value 14"] = None
        self._data["Property Value 15"] = None
        self._data["Property Value 16"] = None
        self._data["Property Value 17"] = None
        self._data["Property Value 18"] = None
        self._data["Property Value 19"] = None
        self._data["Property Value 20"] = None
        self._data["Property Value 21"] = None
        self._data["Property Value 22"] = None
        self._data["Property Value 23"] = None
        self._data["Property Value 24"] = None
        self._data["Property Value 25"] = None
        self._data["Property Value 26"] = None
        self._data["Property Value 27"] = None
        self._data["Property Value 28"] = None
        self._data["Property Value 29"] = None
        self._data["Property Value 30"] = None
        self._data["Property Value 31"] = None
        self._data["Property Value 32"] = None
        self._data["Property Value 33"] = None
        self._data["Property Value 34"] = None
        self._data["Property Value 35"] = None
        self._data["Property Value 36"] = None
        self._data["Property Value 37"] = None
        self._data["Property Value 38"] = None
        self._data["Property Value 39"] = None
        self._data["Property Value 40"] = None
        self._data["Property Value 41"] = None
        self._data["Property Value 42"] = None
        self._data["Property Value 43"] = None
        self._data["Property Value 44"] = None
        self._data["Property Value 45"] = None
        self._data["Property Value 46"] = None
        self._data["Property Value 47"] = None
        self._data["Property Value 48"] = None
        self._data["Property Value 49"] = None
        self._data["Property Value 50"] = None
        self._data["Property Value 51"] = None
        self._data["Property Value 52"] = None
        self._data["Property Value 53"] = None
        self._data["Property Value 54"] = None
        self._data["Property Value 55"] = None
        self._data["Property Value 56"] = None
        self._data["Property Value 57"] = None
        self._data["Property Value 58"] = None
        self._data["Property Value 59"] = None
        self._data["Property Value 60"] = None
        self._data["Property Value 61"] = None
        self._data["Property Value 62"] = None
        self._data["Property Value 63"] = None
        self._data["Property Value 64"] = None
        self._data["Property Value 65"] = None
        self._data["Property Value 66"] = None
        self._data["Property Value 67"] = None
        self._data["Property Value 68"] = None
        self._data["Property Value 69"] = None
        self._data["Property Value 70"] = None
        self._data["Property Value 71"] = None
        self._data["Property Value 72"] = None
        self._data["Property Value 73"] = None
        self._data["Property Value 74"] = None
        self._data["Property Value 75"] = None
        self._data["Property Value 76"] = None
        self._data["Property Value 77"] = None
        self._data["Property Value 78"] = None
        self._data["Property Value 79"] = None
        self._data["Property Value 80"] = None
        self._data["Property Value 81"] = None
        self._data["Property Value 82"] = None
        self._data["Property Value 83"] = None
        self._data["Property Value 84"] = None
        self._data["Property Value 85"] = None
        self._data["Property Value 86"] = None
        self._data["Property Value 87"] = None
        self._data["Property Value 88"] = None
        self._data["Property Value 89"] = None
        self._data["Property Value 90"] = None
        self._data["Property Value 91"] = None
        self._data["Property Value 92"] = None
        self._data["Property Value 93"] = None
        self._data["Property Value 94"] = None
        self._data["Property Value 95"] = None
        self._data["Property Value 96"] = None
        self._data["Property Value 97"] = None
        self._data["Property Value 98"] = None
        self._data["Property Value 99"] = None
        self._data["Property Value 100"] = None
        self._data["Property Value 101"] = None
        self._data["Property Value 102"] = None
        self._data["Property Value 103"] = None
        self._data["Property Value 104"] = None
        self._data["Property Value 105"] = None
        self._data["Property Value 106"] = None
        self._data["Property Value 107"] = None
        self._data["Property Value 108"] = None
        self._data["Property Value 109"] = None
        self._data["Property Value 110"] = None
        self._data["Property Value 111"] = None
        self._data["Property Value 112"] = None
        self._data["Property Value 113"] = None
        self._data["Property Value 114"] = None
        self._data["Property Value 115"] = None
        self._data["Property Value 116"] = None
        self._data["Property Value 117"] = None
        self._data["Property Value 118"] = None
        self._data["Property Value 119"] = None
        self._data["Property Value 120"] = None
        self._data["Property Value 121"] = None
        self._data["Property Value 122"] = None
        self._data["Property Value 123"] = None
        self._data["Property Value 124"] = None
        self._data["Property Value 125"] = None
        self._data["Property Value 126"] = None
        self._data["Property Value 127"] = None
        self._data["Property Value 128"] = None
        self._data["Property Value 129"] = None
        self._data["Property Value 130"] = None
        self._data["Property Value 131"] = None
        self._data["Property Value 132"] = None
        self._data["Property Value 133"] = None
        self._data["Property Value 134"] = None
        self._data["Property Value 135"] = None
        self._data["Property Value 136"] = None
        self._data["Property Value 137"] = None
        self._data["Property Value 138"] = None
        self._data["Property Value 139"] = None
        self._data["Property Value 140"] = None
        self._data["Property Value 141"] = None
        self._data["Property Value 142"] = None
        self._data["Property Value 143"] = None
        self._data["Property Value 144"] = None
        self._data["Property Value 145"] = None
        self._data["Property Value 146"] = None
        self._data["Property Value 147"] = None
        self._data["Property Value 148"] = None
        self._data["Property Value 149"] = None
        self._data["Property Value 150"] = None
        self._data["Property Value 151"] = None
        self._data["Property Value 152"] = None
        self._data["Property Value 153"] = None
        self._data["Property Value 154"] = None
        self._data["Property Value 155"] = None
        self._data["Property Value 156"] = None
        self._data["Property Value 157"] = None
        self._data["Property Value 158"] = None
        self._data["Property Value 159"] = None
        self._data["Property Value 160"] = None
        self._data["Property Value 161"] = None
        self._data["Property Value 162"] = None
        self._data["Property Value 163"] = None
        self._data["Property Value 164"] = None
        self._data["Property Value 165"] = None
        self._data["Property Value 166"] = None
        self._data["Property Value 167"] = None
        self._data["Property Value 168"] = None
        self._data["Property Value 169"] = None
        self._data["Property Value 170"] = None
        self._data["Property Value 171"] = None
        self._data["Property Value 172"] = None
        self._data["Property Value 173"] = None
        self._data["Property Value 174"] = None
        self._data["Property Value 175"] = None
        self._data["Property Value 176"] = None
        self._data["Property Value 177"] = None
        self._data["Property Value 178"] = None
        self._data["Property Value 179"] = None
        self._data["Property Value 180"] = None
        self._data["Property Value 181"] = None
        self._data["Property Value 182"] = None
        self._data["Property Value 183"] = None
        self._data["Property Value 184"] = None
        self._data["Property Value 185"] = None
        self._data["Property Value 186"] = None
        self._data["Property Value 187"] = None
        self._data["Property Value 188"] = None
        self._data["Property Value 189"] = None
        self._data["Property Value 190"] = None
        self._data["Property Value 191"] = None
        self._data["Property Value 192"] = None
        self._data["Property Value 193"] = None
        self._data["Property Value 194"] = None
        self._data["Property Value 195"] = None
        self._data["Property Value 196"] = None
        self._data["Property Value 197"] = None
        self._data["Property Value 198"] = None
        self._data["Property Value 199"] = None
        self._data["Property Value 200"] = None
        self._data["Property Value 201"] = None
        self._data["Property Value 202"] = None
        self._data["Property Value 203"] = None
        self._data["Property Value 204"] = None
        self._data["Property Value 205"] = None
        self._data["Property Value 206"] = None
        self._data["Property Value 207"] = None
        self._data["Property Value 208"] = None
        self._data["Property Value 209"] = None
        self._data["Property Value 210"] = None
        self._data["Property Value 211"] = None
        self._data["Property Value 212"] = None
        self._data["Property Value 213"] = None
        self._data["Property Value 214"] = None
        self._data["Property Value 215"] = None
        self._data["Property Value 216"] = None
        self._data["Property Value 217"] = None
        self._data["Property Value 218"] = None
        self._data["Property Value 219"] = None
        self._data["Property Value 220"] = None
        self._data["Property Value 221"] = None
        self._data["Property Value 222"] = None
        self._data["Property Value 223"] = None
        self._data["Property Value 224"] = None
        self._data["Property Value 225"] = None
        self._data["Property Value 226"] = None
        self._data["Property Value 227"] = None
        self._data["Property Value 228"] = None
        self._data["Property Value 229"] = None
        self._data["Property Value 230"] = None
        self._data["Property Value 231"] = None
        self._data["Property Value 232"] = None
        self._data["Property Value 233"] = None
        self._data["Property Value 234"] = None
        self._data["Property Value 235"] = None
        self._data["Property Value 236"] = None
        self._data["Property Value 237"] = None
        self._data["Property Value 238"] = None
        self._data["Property Value 239"] = None
        self._data["Property Value 240"] = None
        self._data["Property Value 241"] = None
        self._data["Property Value 242"] = None
        self._data["Property Value 243"] = None
        self._data["Property Value 244"] = None
        self._data["Property Value 245"] = None
        self._data["Property Value 246"] = None
        self._data["Property Value 247"] = None
        self._data["Property Value 248"] = None
        self._data["Property Value 249"] = None
        self._data["Property Value 250"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.fluid_name = None
        else:
            self.fluid_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fluid_property_type = None
        else:
            self.fluid_property_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.temperature_values_name = None
        else:
            self.temperature_values_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.concentration = None
        else:
            self.concentration = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_1 = None
        else:
            self.property_value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_2 = None
        else:
            self.property_value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_3 = None
        else:
            self.property_value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_4 = None
        else:
            self.property_value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_5 = None
        else:
            self.property_value_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_6 = None
        else:
            self.property_value_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_7 = None
        else:
            self.property_value_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_8 = None
        else:
            self.property_value_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_9 = None
        else:
            self.property_value_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_10 = None
        else:
            self.property_value_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_11 = None
        else:
            self.property_value_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_12 = None
        else:
            self.property_value_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_13 = None
        else:
            self.property_value_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_14 = None
        else:
            self.property_value_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_15 = None
        else:
            self.property_value_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_16 = None
        else:
            self.property_value_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_17 = None
        else:
            self.property_value_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_18 = None
        else:
            self.property_value_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_19 = None
        else:
            self.property_value_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_20 = None
        else:
            self.property_value_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_21 = None
        else:
            self.property_value_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_22 = None
        else:
            self.property_value_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_23 = None
        else:
            self.property_value_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_24 = None
        else:
            self.property_value_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_25 = None
        else:
            self.property_value_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_26 = None
        else:
            self.property_value_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_27 = None
        else:
            self.property_value_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_28 = None
        else:
            self.property_value_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_29 = None
        else:
            self.property_value_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_30 = None
        else:
            self.property_value_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_31 = None
        else:
            self.property_value_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_32 = None
        else:
            self.property_value_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_33 = None
        else:
            self.property_value_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_34 = None
        else:
            self.property_value_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_35 = None
        else:
            self.property_value_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_36 = None
        else:
            self.property_value_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_37 = None
        else:
            self.property_value_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_38 = None
        else:
            self.property_value_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_39 = None
        else:
            self.property_value_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_40 = None
        else:
            self.property_value_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_41 = None
        else:
            self.property_value_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_42 = None
        else:
            self.property_value_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_43 = None
        else:
            self.property_value_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_44 = None
        else:
            self.property_value_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_45 = None
        else:
            self.property_value_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_46 = None
        else:
            self.property_value_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_47 = None
        else:
            self.property_value_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_48 = None
        else:
            self.property_value_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_49 = None
        else:
            self.property_value_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_50 = None
        else:
            self.property_value_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_51 = None
        else:
            self.property_value_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_52 = None
        else:
            self.property_value_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_53 = None
        else:
            self.property_value_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_54 = None
        else:
            self.property_value_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_55 = None
        else:
            self.property_value_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_56 = None
        else:
            self.property_value_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_57 = None
        else:
            self.property_value_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_58 = None
        else:
            self.property_value_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_59 = None
        else:
            self.property_value_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_60 = None
        else:
            self.property_value_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_61 = None
        else:
            self.property_value_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_62 = None
        else:
            self.property_value_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_63 = None
        else:
            self.property_value_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_64 = None
        else:
            self.property_value_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_65 = None
        else:
            self.property_value_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_66 = None
        else:
            self.property_value_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_67 = None
        else:
            self.property_value_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_68 = None
        else:
            self.property_value_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_69 = None
        else:
            self.property_value_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_70 = None
        else:
            self.property_value_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_71 = None
        else:
            self.property_value_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_72 = None
        else:
            self.property_value_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_73 = None
        else:
            self.property_value_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_74 = None
        else:
            self.property_value_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_75 = None
        else:
            self.property_value_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_76 = None
        else:
            self.property_value_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_77 = None
        else:
            self.property_value_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_78 = None
        else:
            self.property_value_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_79 = None
        else:
            self.property_value_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_80 = None
        else:
            self.property_value_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_81 = None
        else:
            self.property_value_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_82 = None
        else:
            self.property_value_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_83 = None
        else:
            self.property_value_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_84 = None
        else:
            self.property_value_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_85 = None
        else:
            self.property_value_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_86 = None
        else:
            self.property_value_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_87 = None
        else:
            self.property_value_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_88 = None
        else:
            self.property_value_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_89 = None
        else:
            self.property_value_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_90 = None
        else:
            self.property_value_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_91 = None
        else:
            self.property_value_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_92 = None
        else:
            self.property_value_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_93 = None
        else:
            self.property_value_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_94 = None
        else:
            self.property_value_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_95 = None
        else:
            self.property_value_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_96 = None
        else:
            self.property_value_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_97 = None
        else:
            self.property_value_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_98 = None
        else:
            self.property_value_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_99 = None
        else:
            self.property_value_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_100 = None
        else:
            self.property_value_100 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_101 = None
        else:
            self.property_value_101 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_102 = None
        else:
            self.property_value_102 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_103 = None
        else:
            self.property_value_103 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_104 = None
        else:
            self.property_value_104 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_105 = None
        else:
            self.property_value_105 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_106 = None
        else:
            self.property_value_106 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_107 = None
        else:
            self.property_value_107 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_108 = None
        else:
            self.property_value_108 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_109 = None
        else:
            self.property_value_109 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_110 = None
        else:
            self.property_value_110 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_111 = None
        else:
            self.property_value_111 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_112 = None
        else:
            self.property_value_112 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_113 = None
        else:
            self.property_value_113 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_114 = None
        else:
            self.property_value_114 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_115 = None
        else:
            self.property_value_115 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_116 = None
        else:
            self.property_value_116 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_117 = None
        else:
            self.property_value_117 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_118 = None
        else:
            self.property_value_118 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_119 = None
        else:
            self.property_value_119 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_120 = None
        else:
            self.property_value_120 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_121 = None
        else:
            self.property_value_121 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_122 = None
        else:
            self.property_value_122 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_123 = None
        else:
            self.property_value_123 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_124 = None
        else:
            self.property_value_124 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_125 = None
        else:
            self.property_value_125 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_126 = None
        else:
            self.property_value_126 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_127 = None
        else:
            self.property_value_127 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_128 = None
        else:
            self.property_value_128 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_129 = None
        else:
            self.property_value_129 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_130 = None
        else:
            self.property_value_130 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_131 = None
        else:
            self.property_value_131 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_132 = None
        else:
            self.property_value_132 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_133 = None
        else:
            self.property_value_133 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_134 = None
        else:
            self.property_value_134 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_135 = None
        else:
            self.property_value_135 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_136 = None
        else:
            self.property_value_136 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_137 = None
        else:
            self.property_value_137 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_138 = None
        else:
            self.property_value_138 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_139 = None
        else:
            self.property_value_139 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_140 = None
        else:
            self.property_value_140 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_141 = None
        else:
            self.property_value_141 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_142 = None
        else:
            self.property_value_142 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_143 = None
        else:
            self.property_value_143 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_144 = None
        else:
            self.property_value_144 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_145 = None
        else:
            self.property_value_145 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_146 = None
        else:
            self.property_value_146 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_147 = None
        else:
            self.property_value_147 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_148 = None
        else:
            self.property_value_148 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_149 = None
        else:
            self.property_value_149 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_150 = None
        else:
            self.property_value_150 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_151 = None
        else:
            self.property_value_151 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_152 = None
        else:
            self.property_value_152 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_153 = None
        else:
            self.property_value_153 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_154 = None
        else:
            self.property_value_154 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_155 = None
        else:
            self.property_value_155 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_156 = None
        else:
            self.property_value_156 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_157 = None
        else:
            self.property_value_157 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_158 = None
        else:
            self.property_value_158 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_159 = None
        else:
            self.property_value_159 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_160 = None
        else:
            self.property_value_160 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_161 = None
        else:
            self.property_value_161 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_162 = None
        else:
            self.property_value_162 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_163 = None
        else:
            self.property_value_163 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_164 = None
        else:
            self.property_value_164 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_165 = None
        else:
            self.property_value_165 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_166 = None
        else:
            self.property_value_166 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_167 = None
        else:
            self.property_value_167 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_168 = None
        else:
            self.property_value_168 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_169 = None
        else:
            self.property_value_169 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_170 = None
        else:
            self.property_value_170 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_171 = None
        else:
            self.property_value_171 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_172 = None
        else:
            self.property_value_172 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_173 = None
        else:
            self.property_value_173 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_174 = None
        else:
            self.property_value_174 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_175 = None
        else:
            self.property_value_175 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_176 = None
        else:
            self.property_value_176 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_177 = None
        else:
            self.property_value_177 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_178 = None
        else:
            self.property_value_178 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_179 = None
        else:
            self.property_value_179 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_180 = None
        else:
            self.property_value_180 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_181 = None
        else:
            self.property_value_181 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_182 = None
        else:
            self.property_value_182 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_183 = None
        else:
            self.property_value_183 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_184 = None
        else:
            self.property_value_184 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_185 = None
        else:
            self.property_value_185 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_186 = None
        else:
            self.property_value_186 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_187 = None
        else:
            self.property_value_187 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_188 = None
        else:
            self.property_value_188 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_189 = None
        else:
            self.property_value_189 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_190 = None
        else:
            self.property_value_190 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_191 = None
        else:
            self.property_value_191 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_192 = None
        else:
            self.property_value_192 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_193 = None
        else:
            self.property_value_193 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_194 = None
        else:
            self.property_value_194 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_195 = None
        else:
            self.property_value_195 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_196 = None
        else:
            self.property_value_196 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_197 = None
        else:
            self.property_value_197 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_198 = None
        else:
            self.property_value_198 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_199 = None
        else:
            self.property_value_199 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_200 = None
        else:
            self.property_value_200 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_201 = None
        else:
            self.property_value_201 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_202 = None
        else:
            self.property_value_202 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_203 = None
        else:
            self.property_value_203 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_204 = None
        else:
            self.property_value_204 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_205 = None
        else:
            self.property_value_205 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_206 = None
        else:
            self.property_value_206 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_207 = None
        else:
            self.property_value_207 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_208 = None
        else:
            self.property_value_208 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_209 = None
        else:
            self.property_value_209 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_210 = None
        else:
            self.property_value_210 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_211 = None
        else:
            self.property_value_211 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_212 = None
        else:
            self.property_value_212 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_213 = None
        else:
            self.property_value_213 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_214 = None
        else:
            self.property_value_214 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_215 = None
        else:
            self.property_value_215 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_216 = None
        else:
            self.property_value_216 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_217 = None
        else:
            self.property_value_217 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_218 = None
        else:
            self.property_value_218 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_219 = None
        else:
            self.property_value_219 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_220 = None
        else:
            self.property_value_220 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_221 = None
        else:
            self.property_value_221 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_222 = None
        else:
            self.property_value_222 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_223 = None
        else:
            self.property_value_223 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_224 = None
        else:
            self.property_value_224 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_225 = None
        else:
            self.property_value_225 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_226 = None
        else:
            self.property_value_226 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_227 = None
        else:
            self.property_value_227 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_228 = None
        else:
            self.property_value_228 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_229 = None
        else:
            self.property_value_229 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_230 = None
        else:
            self.property_value_230 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_231 = None
        else:
            self.property_value_231 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_232 = None
        else:
            self.property_value_232 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_233 = None
        else:
            self.property_value_233 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_234 = None
        else:
            self.property_value_234 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_235 = None
        else:
            self.property_value_235 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_236 = None
        else:
            self.property_value_236 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_237 = None
        else:
            self.property_value_237 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_238 = None
        else:
            self.property_value_238 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_239 = None
        else:
            self.property_value_239 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_240 = None
        else:
            self.property_value_240 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_241 = None
        else:
            self.property_value_241 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_242 = None
        else:
            self.property_value_242 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_243 = None
        else:
            self.property_value_243 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_244 = None
        else:
            self.property_value_244 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_245 = None
        else:
            self.property_value_245 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_246 = None
        else:
            self.property_value_246 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_247 = None
        else:
            self.property_value_247 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_248 = None
        else:
            self.property_value_248 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_249 = None
        else:
            self.property_value_249 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.property_value_250 = None
        else:
            self.property_value_250 = vals[i]
        i += 1

    @property
    def fluid_name(self):
        """Get fluid_name

        Returns:
            str: the value of `fluid_name` or None if not set
        """
        return self._data["Fluid Name"]

    @fluid_name.setter
    def fluid_name(self, value=None):
        """  Corresponds to IDD Field `fluid_name`
        should not be any of the defaults (Water, EthyleneGlycol, or PropyleneGlycol)

        Args:
            value (str): value for IDD Field `fluid_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_name`')

        self._data["Fluid Name"] = value

    @property
    def fluid_property_type(self):
        """Get fluid_property_type

        Returns:
            str: the value of `fluid_property_type` or None if not set
        """
        return self._data["Fluid Property Type"]

    @fluid_property_type.setter
    def fluid_property_type(self, value=None):
        """  Corresponds to IDD Field `fluid_property_type`
        Density Units are kg/m3
        SpecificHeat Units are J/kg-K
        Conductivity Units are W/m-K
        Viscosity Units are N-s/m2

        Args:
            value (str): value for IDD Field `fluid_property_type`
                Accepted values are:
                      - Density      ! Units are kg/m3
                      - SpecificHeat ! Units are J/kg-K
                      - Conductivity ! Units are W/m-K
                      - Viscosity    ! Units are N-s/m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fluid_property_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fluid_property_type`')
            vals = set()
            vals.add("Density      ! Units are kg/m3")
            vals.add("SpecificHeat ! Units are J/kg-K")
            vals.add("Conductivity ! Units are W/m-K")
            vals.add("Viscosity    ! Units are N-s/m2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fluid_property_type`'.format(value))

        self._data["Fluid Property Type"] = value

    @property
    def temperature_values_name(self):
        """Get temperature_values_name

        Returns:
            str: the value of `temperature_values_name` or None if not set
        """
        return self._data["Temperature Values Name"]

    @temperature_values_name.setter
    def temperature_values_name(self, value=None):
        """  Corresponds to IDD Field `temperature_values_name`
        Enter the name of a FluidProperties:Temperatures object.

        Args:
            value (str): value for IDD Field `temperature_values_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_values_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_values_name`')

        self._data["Temperature Values Name"] = value

    @property
    def concentration(self):
        """Get concentration

        Returns:
            float: the value of `concentration` or None if not set
        """
        return self._data["Concentration"]

    @concentration.setter
    def concentration(self, value=None):
        """  Corresponds to IDD Field `concentration`
        Glycol concentration for this list of properties entered as a fraction

        Args:
            value (float): value for IDD Field `concentration`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `concentration`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `concentration`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `concentration`')

        self._data["Concentration"] = value

    @property
    def property_value_1(self):
        """Get property_value_1

        Returns:
            float: the value of `property_value_1` or None if not set
        """
        return self._data["Property Value 1"]

    @property_value_1.setter
    def property_value_1(self, value=None):
        """  Corresponds to IDD Field `property_value_1`

        Args:
            value (float): value for IDD Field `property_value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_1`'.format(value))

        self._data["Property Value 1"] = value

    @property
    def property_value_2(self):
        """Get property_value_2

        Returns:
            float: the value of `property_value_2` or None if not set
        """
        return self._data["Property Value 2"]

    @property_value_2.setter
    def property_value_2(self, value=None):
        """  Corresponds to IDD Field `property_value_2`

        Args:
            value (float): value for IDD Field `property_value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_2`'.format(value))

        self._data["Property Value 2"] = value

    @property
    def property_value_3(self):
        """Get property_value_3

        Returns:
            float: the value of `property_value_3` or None if not set
        """
        return self._data["Property Value 3"]

    @property_value_3.setter
    def property_value_3(self, value=None):
        """  Corresponds to IDD Field `property_value_3`

        Args:
            value (float): value for IDD Field `property_value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_3`'.format(value))

        self._data["Property Value 3"] = value

    @property
    def property_value_4(self):
        """Get property_value_4

        Returns:
            float: the value of `property_value_4` or None if not set
        """
        return self._data["Property Value 4"]

    @property_value_4.setter
    def property_value_4(self, value=None):
        """  Corresponds to IDD Field `property_value_4`

        Args:
            value (float): value for IDD Field `property_value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_4`'.format(value))

        self._data["Property Value 4"] = value

    @property
    def property_value_5(self):
        """Get property_value_5

        Returns:
            float: the value of `property_value_5` or None if not set
        """
        return self._data["Property Value 5"]

    @property_value_5.setter
    def property_value_5(self, value=None):
        """  Corresponds to IDD Field `property_value_5`

        Args:
            value (float): value for IDD Field `property_value_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_5`'.format(value))

        self._data["Property Value 5"] = value

    @property
    def property_value_6(self):
        """Get property_value_6

        Returns:
            float: the value of `property_value_6` or None if not set
        """
        return self._data["Property Value 6"]

    @property_value_6.setter
    def property_value_6(self, value=None):
        """  Corresponds to IDD Field `property_value_6`

        Args:
            value (float): value for IDD Field `property_value_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_6`'.format(value))

        self._data["Property Value 6"] = value

    @property
    def property_value_7(self):
        """Get property_value_7

        Returns:
            float: the value of `property_value_7` or None if not set
        """
        return self._data["Property Value 7"]

    @property_value_7.setter
    def property_value_7(self, value=None):
        """  Corresponds to IDD Field `property_value_7`

        Args:
            value (float): value for IDD Field `property_value_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_7`'.format(value))

        self._data["Property Value 7"] = value

    @property
    def property_value_8(self):
        """Get property_value_8

        Returns:
            float: the value of `property_value_8` or None if not set
        """
        return self._data["Property Value 8"]

    @property_value_8.setter
    def property_value_8(self, value=None):
        """  Corresponds to IDD Field `property_value_8`

        Args:
            value (float): value for IDD Field `property_value_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_8`'.format(value))

        self._data["Property Value 8"] = value

    @property
    def property_value_9(self):
        """Get property_value_9

        Returns:
            float: the value of `property_value_9` or None if not set
        """
        return self._data["Property Value 9"]

    @property_value_9.setter
    def property_value_9(self, value=None):
        """  Corresponds to IDD Field `property_value_9`

        Args:
            value (float): value for IDD Field `property_value_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_9`'.format(value))

        self._data["Property Value 9"] = value

    @property
    def property_value_10(self):
        """Get property_value_10

        Returns:
            float: the value of `property_value_10` or None if not set
        """
        return self._data["Property Value 10"]

    @property_value_10.setter
    def property_value_10(self, value=None):
        """  Corresponds to IDD Field `property_value_10`

        Args:
            value (float): value for IDD Field `property_value_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_10`'.format(value))

        self._data["Property Value 10"] = value

    @property
    def property_value_11(self):
        """Get property_value_11

        Returns:
            float: the value of `property_value_11` or None if not set
        """
        return self._data["Property Value 11"]

    @property_value_11.setter
    def property_value_11(self, value=None):
        """  Corresponds to IDD Field `property_value_11`

        Args:
            value (float): value for IDD Field `property_value_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_11`'.format(value))

        self._data["Property Value 11"] = value

    @property
    def property_value_12(self):
        """Get property_value_12

        Returns:
            float: the value of `property_value_12` or None if not set
        """
        return self._data["Property Value 12"]

    @property_value_12.setter
    def property_value_12(self, value=None):
        """  Corresponds to IDD Field `property_value_12`

        Args:
            value (float): value for IDD Field `property_value_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_12`'.format(value))

        self._data["Property Value 12"] = value

    @property
    def property_value_13(self):
        """Get property_value_13

        Returns:
            float: the value of `property_value_13` or None if not set
        """
        return self._data["Property Value 13"]

    @property_value_13.setter
    def property_value_13(self, value=None):
        """  Corresponds to IDD Field `property_value_13`

        Args:
            value (float): value for IDD Field `property_value_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_13`'.format(value))

        self._data["Property Value 13"] = value

    @property
    def property_value_14(self):
        """Get property_value_14

        Returns:
            float: the value of `property_value_14` or None if not set
        """
        return self._data["Property Value 14"]

    @property_value_14.setter
    def property_value_14(self, value=None):
        """  Corresponds to IDD Field `property_value_14`

        Args:
            value (float): value for IDD Field `property_value_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_14`'.format(value))

        self._data["Property Value 14"] = value

    @property
    def property_value_15(self):
        """Get property_value_15

        Returns:
            float: the value of `property_value_15` or None if not set
        """
        return self._data["Property Value 15"]

    @property_value_15.setter
    def property_value_15(self, value=None):
        """  Corresponds to IDD Field `property_value_15`

        Args:
            value (float): value for IDD Field `property_value_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_15`'.format(value))

        self._data["Property Value 15"] = value

    @property
    def property_value_16(self):
        """Get property_value_16

        Returns:
            float: the value of `property_value_16` or None if not set
        """
        return self._data["Property Value 16"]

    @property_value_16.setter
    def property_value_16(self, value=None):
        """  Corresponds to IDD Field `property_value_16`

        Args:
            value (float): value for IDD Field `property_value_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_16`'.format(value))

        self._data["Property Value 16"] = value

    @property
    def property_value_17(self):
        """Get property_value_17

        Returns:
            float: the value of `property_value_17` or None if not set
        """
        return self._data["Property Value 17"]

    @property_value_17.setter
    def property_value_17(self, value=None):
        """  Corresponds to IDD Field `property_value_17`

        Args:
            value (float): value for IDD Field `property_value_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_17`'.format(value))

        self._data["Property Value 17"] = value

    @property
    def property_value_18(self):
        """Get property_value_18

        Returns:
            float: the value of `property_value_18` or None if not set
        """
        return self._data["Property Value 18"]

    @property_value_18.setter
    def property_value_18(self, value=None):
        """  Corresponds to IDD Field `property_value_18`

        Args:
            value (float): value for IDD Field `property_value_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_18`'.format(value))

        self._data["Property Value 18"] = value

    @property
    def property_value_19(self):
        """Get property_value_19

        Returns:
            float: the value of `property_value_19` or None if not set
        """
        return self._data["Property Value 19"]

    @property_value_19.setter
    def property_value_19(self, value=None):
        """  Corresponds to IDD Field `property_value_19`

        Args:
            value (float): value for IDD Field `property_value_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_19`'.format(value))

        self._data["Property Value 19"] = value

    @property
    def property_value_20(self):
        """Get property_value_20

        Returns:
            float: the value of `property_value_20` or None if not set
        """
        return self._data["Property Value 20"]

    @property_value_20.setter
    def property_value_20(self, value=None):
        """  Corresponds to IDD Field `property_value_20`

        Args:
            value (float): value for IDD Field `property_value_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_20`'.format(value))

        self._data["Property Value 20"] = value

    @property
    def property_value_21(self):
        """Get property_value_21

        Returns:
            float: the value of `property_value_21` or None if not set
        """
        return self._data["Property Value 21"]

    @property_value_21.setter
    def property_value_21(self, value=None):
        """  Corresponds to IDD Field `property_value_21`

        Args:
            value (float): value for IDD Field `property_value_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_21`'.format(value))

        self._data["Property Value 21"] = value

    @property
    def property_value_22(self):
        """Get property_value_22

        Returns:
            float: the value of `property_value_22` or None if not set
        """
        return self._data["Property Value 22"]

    @property_value_22.setter
    def property_value_22(self, value=None):
        """  Corresponds to IDD Field `property_value_22`

        Args:
            value (float): value for IDD Field `property_value_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_22`'.format(value))

        self._data["Property Value 22"] = value

    @property
    def property_value_23(self):
        """Get property_value_23

        Returns:
            float: the value of `property_value_23` or None if not set
        """
        return self._data["Property Value 23"]

    @property_value_23.setter
    def property_value_23(self, value=None):
        """  Corresponds to IDD Field `property_value_23`

        Args:
            value (float): value for IDD Field `property_value_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_23`'.format(value))

        self._data["Property Value 23"] = value

    @property
    def property_value_24(self):
        """Get property_value_24

        Returns:
            float: the value of `property_value_24` or None if not set
        """
        return self._data["Property Value 24"]

    @property_value_24.setter
    def property_value_24(self, value=None):
        """  Corresponds to IDD Field `property_value_24`

        Args:
            value (float): value for IDD Field `property_value_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_24`'.format(value))

        self._data["Property Value 24"] = value

    @property
    def property_value_25(self):
        """Get property_value_25

        Returns:
            float: the value of `property_value_25` or None if not set
        """
        return self._data["Property Value 25"]

    @property_value_25.setter
    def property_value_25(self, value=None):
        """  Corresponds to IDD Field `property_value_25`

        Args:
            value (float): value for IDD Field `property_value_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_25`'.format(value))

        self._data["Property Value 25"] = value

    @property
    def property_value_26(self):
        """Get property_value_26

        Returns:
            float: the value of `property_value_26` or None if not set
        """
        return self._data["Property Value 26"]

    @property_value_26.setter
    def property_value_26(self, value=None):
        """  Corresponds to IDD Field `property_value_26`

        Args:
            value (float): value for IDD Field `property_value_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_26`'.format(value))

        self._data["Property Value 26"] = value

    @property
    def property_value_27(self):
        """Get property_value_27

        Returns:
            float: the value of `property_value_27` or None if not set
        """
        return self._data["Property Value 27"]

    @property_value_27.setter
    def property_value_27(self, value=None):
        """  Corresponds to IDD Field `property_value_27`

        Args:
            value (float): value for IDD Field `property_value_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_27`'.format(value))

        self._data["Property Value 27"] = value

    @property
    def property_value_28(self):
        """Get property_value_28

        Returns:
            float: the value of `property_value_28` or None if not set
        """
        return self._data["Property Value 28"]

    @property_value_28.setter
    def property_value_28(self, value=None):
        """  Corresponds to IDD Field `property_value_28`

        Args:
            value (float): value for IDD Field `property_value_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_28`'.format(value))

        self._data["Property Value 28"] = value

    @property
    def property_value_29(self):
        """Get property_value_29

        Returns:
            float: the value of `property_value_29` or None if not set
        """
        return self._data["Property Value 29"]

    @property_value_29.setter
    def property_value_29(self, value=None):
        """  Corresponds to IDD Field `property_value_29`

        Args:
            value (float): value for IDD Field `property_value_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_29`'.format(value))

        self._data["Property Value 29"] = value

    @property
    def property_value_30(self):
        """Get property_value_30

        Returns:
            float: the value of `property_value_30` or None if not set
        """
        return self._data["Property Value 30"]

    @property_value_30.setter
    def property_value_30(self, value=None):
        """  Corresponds to IDD Field `property_value_30`

        Args:
            value (float): value for IDD Field `property_value_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_30`'.format(value))

        self._data["Property Value 30"] = value

    @property
    def property_value_31(self):
        """Get property_value_31

        Returns:
            float: the value of `property_value_31` or None if not set
        """
        return self._data["Property Value 31"]

    @property_value_31.setter
    def property_value_31(self, value=None):
        """  Corresponds to IDD Field `property_value_31`

        Args:
            value (float): value for IDD Field `property_value_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_31`'.format(value))

        self._data["Property Value 31"] = value

    @property
    def property_value_32(self):
        """Get property_value_32

        Returns:
            float: the value of `property_value_32` or None if not set
        """
        return self._data["Property Value 32"]

    @property_value_32.setter
    def property_value_32(self, value=None):
        """  Corresponds to IDD Field `property_value_32`

        Args:
            value (float): value for IDD Field `property_value_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_32`'.format(value))

        self._data["Property Value 32"] = value

    @property
    def property_value_33(self):
        """Get property_value_33

        Returns:
            float: the value of `property_value_33` or None if not set
        """
        return self._data["Property Value 33"]

    @property_value_33.setter
    def property_value_33(self, value=None):
        """  Corresponds to IDD Field `property_value_33`

        Args:
            value (float): value for IDD Field `property_value_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_33`'.format(value))

        self._data["Property Value 33"] = value

    @property
    def property_value_34(self):
        """Get property_value_34

        Returns:
            float: the value of `property_value_34` or None if not set
        """
        return self._data["Property Value 34"]

    @property_value_34.setter
    def property_value_34(self, value=None):
        """  Corresponds to IDD Field `property_value_34`

        Args:
            value (float): value for IDD Field `property_value_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_34`'.format(value))

        self._data["Property Value 34"] = value

    @property
    def property_value_35(self):
        """Get property_value_35

        Returns:
            float: the value of `property_value_35` or None if not set
        """
        return self._data["Property Value 35"]

    @property_value_35.setter
    def property_value_35(self, value=None):
        """  Corresponds to IDD Field `property_value_35`

        Args:
            value (float): value for IDD Field `property_value_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_35`'.format(value))

        self._data["Property Value 35"] = value

    @property
    def property_value_36(self):
        """Get property_value_36

        Returns:
            float: the value of `property_value_36` or None if not set
        """
        return self._data["Property Value 36"]

    @property_value_36.setter
    def property_value_36(self, value=None):
        """  Corresponds to IDD Field `property_value_36`

        Args:
            value (float): value for IDD Field `property_value_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_36`'.format(value))

        self._data["Property Value 36"] = value

    @property
    def property_value_37(self):
        """Get property_value_37

        Returns:
            float: the value of `property_value_37` or None if not set
        """
        return self._data["Property Value 37"]

    @property_value_37.setter
    def property_value_37(self, value=None):
        """  Corresponds to IDD Field `property_value_37`

        Args:
            value (float): value for IDD Field `property_value_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_37`'.format(value))

        self._data["Property Value 37"] = value

    @property
    def property_value_38(self):
        """Get property_value_38

        Returns:
            float: the value of `property_value_38` or None if not set
        """
        return self._data["Property Value 38"]

    @property_value_38.setter
    def property_value_38(self, value=None):
        """  Corresponds to IDD Field `property_value_38`

        Args:
            value (float): value for IDD Field `property_value_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_38`'.format(value))

        self._data["Property Value 38"] = value

    @property
    def property_value_39(self):
        """Get property_value_39

        Returns:
            float: the value of `property_value_39` or None if not set
        """
        return self._data["Property Value 39"]

    @property_value_39.setter
    def property_value_39(self, value=None):
        """  Corresponds to IDD Field `property_value_39`

        Args:
            value (float): value for IDD Field `property_value_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_39`'.format(value))

        self._data["Property Value 39"] = value

    @property
    def property_value_40(self):
        """Get property_value_40

        Returns:
            float: the value of `property_value_40` or None if not set
        """
        return self._data["Property Value 40"]

    @property_value_40.setter
    def property_value_40(self, value=None):
        """  Corresponds to IDD Field `property_value_40`

        Args:
            value (float): value for IDD Field `property_value_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_40`'.format(value))

        self._data["Property Value 40"] = value

    @property
    def property_value_41(self):
        """Get property_value_41

        Returns:
            float: the value of `property_value_41` or None if not set
        """
        return self._data["Property Value 41"]

    @property_value_41.setter
    def property_value_41(self, value=None):
        """  Corresponds to IDD Field `property_value_41`

        Args:
            value (float): value for IDD Field `property_value_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_41`'.format(value))

        self._data["Property Value 41"] = value

    @property
    def property_value_42(self):
        """Get property_value_42

        Returns:
            float: the value of `property_value_42` or None if not set
        """
        return self._data["Property Value 42"]

    @property_value_42.setter
    def property_value_42(self, value=None):
        """  Corresponds to IDD Field `property_value_42`

        Args:
            value (float): value for IDD Field `property_value_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_42`'.format(value))

        self._data["Property Value 42"] = value

    @property
    def property_value_43(self):
        """Get property_value_43

        Returns:
            float: the value of `property_value_43` or None if not set
        """
        return self._data["Property Value 43"]

    @property_value_43.setter
    def property_value_43(self, value=None):
        """  Corresponds to IDD Field `property_value_43`

        Args:
            value (float): value for IDD Field `property_value_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_43`'.format(value))

        self._data["Property Value 43"] = value

    @property
    def property_value_44(self):
        """Get property_value_44

        Returns:
            float: the value of `property_value_44` or None if not set
        """
        return self._data["Property Value 44"]

    @property_value_44.setter
    def property_value_44(self, value=None):
        """  Corresponds to IDD Field `property_value_44`

        Args:
            value (float): value for IDD Field `property_value_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_44`'.format(value))

        self._data["Property Value 44"] = value

    @property
    def property_value_45(self):
        """Get property_value_45

        Returns:
            float: the value of `property_value_45` or None if not set
        """
        return self._data["Property Value 45"]

    @property_value_45.setter
    def property_value_45(self, value=None):
        """  Corresponds to IDD Field `property_value_45`

        Args:
            value (float): value for IDD Field `property_value_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_45`'.format(value))

        self._data["Property Value 45"] = value

    @property
    def property_value_46(self):
        """Get property_value_46

        Returns:
            float: the value of `property_value_46` or None if not set
        """
        return self._data["Property Value 46"]

    @property_value_46.setter
    def property_value_46(self, value=None):
        """  Corresponds to IDD Field `property_value_46`

        Args:
            value (float): value for IDD Field `property_value_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_46`'.format(value))

        self._data["Property Value 46"] = value

    @property
    def property_value_47(self):
        """Get property_value_47

        Returns:
            float: the value of `property_value_47` or None if not set
        """
        return self._data["Property Value 47"]

    @property_value_47.setter
    def property_value_47(self, value=None):
        """  Corresponds to IDD Field `property_value_47`

        Args:
            value (float): value for IDD Field `property_value_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_47`'.format(value))

        self._data["Property Value 47"] = value

    @property
    def property_value_48(self):
        """Get property_value_48

        Returns:
            float: the value of `property_value_48` or None if not set
        """
        return self._data["Property Value 48"]

    @property_value_48.setter
    def property_value_48(self, value=None):
        """  Corresponds to IDD Field `property_value_48`

        Args:
            value (float): value for IDD Field `property_value_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_48`'.format(value))

        self._data["Property Value 48"] = value

    @property
    def property_value_49(self):
        """Get property_value_49

        Returns:
            float: the value of `property_value_49` or None if not set
        """
        return self._data["Property Value 49"]

    @property_value_49.setter
    def property_value_49(self, value=None):
        """  Corresponds to IDD Field `property_value_49`

        Args:
            value (float): value for IDD Field `property_value_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_49`'.format(value))

        self._data["Property Value 49"] = value

    @property
    def property_value_50(self):
        """Get property_value_50

        Returns:
            float: the value of `property_value_50` or None if not set
        """
        return self._data["Property Value 50"]

    @property_value_50.setter
    def property_value_50(self, value=None):
        """  Corresponds to IDD Field `property_value_50`

        Args:
            value (float): value for IDD Field `property_value_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_50`'.format(value))

        self._data["Property Value 50"] = value

    @property
    def property_value_51(self):
        """Get property_value_51

        Returns:
            float: the value of `property_value_51` or None if not set
        """
        return self._data["Property Value 51"]

    @property_value_51.setter
    def property_value_51(self, value=None):
        """  Corresponds to IDD Field `property_value_51`

        Args:
            value (float): value for IDD Field `property_value_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_51`'.format(value))

        self._data["Property Value 51"] = value

    @property
    def property_value_52(self):
        """Get property_value_52

        Returns:
            float: the value of `property_value_52` or None if not set
        """
        return self._data["Property Value 52"]

    @property_value_52.setter
    def property_value_52(self, value=None):
        """  Corresponds to IDD Field `property_value_52`

        Args:
            value (float): value for IDD Field `property_value_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_52`'.format(value))

        self._data["Property Value 52"] = value

    @property
    def property_value_53(self):
        """Get property_value_53

        Returns:
            float: the value of `property_value_53` or None if not set
        """
        return self._data["Property Value 53"]

    @property_value_53.setter
    def property_value_53(self, value=None):
        """  Corresponds to IDD Field `property_value_53`

        Args:
            value (float): value for IDD Field `property_value_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_53`'.format(value))

        self._data["Property Value 53"] = value

    @property
    def property_value_54(self):
        """Get property_value_54

        Returns:
            float: the value of `property_value_54` or None if not set
        """
        return self._data["Property Value 54"]

    @property_value_54.setter
    def property_value_54(self, value=None):
        """  Corresponds to IDD Field `property_value_54`

        Args:
            value (float): value for IDD Field `property_value_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_54`'.format(value))

        self._data["Property Value 54"] = value

    @property
    def property_value_55(self):
        """Get property_value_55

        Returns:
            float: the value of `property_value_55` or None if not set
        """
        return self._data["Property Value 55"]

    @property_value_55.setter
    def property_value_55(self, value=None):
        """  Corresponds to IDD Field `property_value_55`

        Args:
            value (float): value for IDD Field `property_value_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_55`'.format(value))

        self._data["Property Value 55"] = value

    @property
    def property_value_56(self):
        """Get property_value_56

        Returns:
            float: the value of `property_value_56` or None if not set
        """
        return self._data["Property Value 56"]

    @property_value_56.setter
    def property_value_56(self, value=None):
        """  Corresponds to IDD Field `property_value_56`

        Args:
            value (float): value for IDD Field `property_value_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_56`'.format(value))

        self._data["Property Value 56"] = value

    @property
    def property_value_57(self):
        """Get property_value_57

        Returns:
            float: the value of `property_value_57` or None if not set
        """
        return self._data["Property Value 57"]

    @property_value_57.setter
    def property_value_57(self, value=None):
        """  Corresponds to IDD Field `property_value_57`

        Args:
            value (float): value for IDD Field `property_value_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_57`'.format(value))

        self._data["Property Value 57"] = value

    @property
    def property_value_58(self):
        """Get property_value_58

        Returns:
            float: the value of `property_value_58` or None if not set
        """
        return self._data["Property Value 58"]

    @property_value_58.setter
    def property_value_58(self, value=None):
        """  Corresponds to IDD Field `property_value_58`

        Args:
            value (float): value for IDD Field `property_value_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_58`'.format(value))

        self._data["Property Value 58"] = value

    @property
    def property_value_59(self):
        """Get property_value_59

        Returns:
            float: the value of `property_value_59` or None if not set
        """
        return self._data["Property Value 59"]

    @property_value_59.setter
    def property_value_59(self, value=None):
        """  Corresponds to IDD Field `property_value_59`

        Args:
            value (float): value for IDD Field `property_value_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_59`'.format(value))

        self._data["Property Value 59"] = value

    @property
    def property_value_60(self):
        """Get property_value_60

        Returns:
            float: the value of `property_value_60` or None if not set
        """
        return self._data["Property Value 60"]

    @property_value_60.setter
    def property_value_60(self, value=None):
        """  Corresponds to IDD Field `property_value_60`

        Args:
            value (float): value for IDD Field `property_value_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_60`'.format(value))

        self._data["Property Value 60"] = value

    @property
    def property_value_61(self):
        """Get property_value_61

        Returns:
            float: the value of `property_value_61` or None if not set
        """
        return self._data["Property Value 61"]

    @property_value_61.setter
    def property_value_61(self, value=None):
        """  Corresponds to IDD Field `property_value_61`

        Args:
            value (float): value for IDD Field `property_value_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_61`'.format(value))

        self._data["Property Value 61"] = value

    @property
    def property_value_62(self):
        """Get property_value_62

        Returns:
            float: the value of `property_value_62` or None if not set
        """
        return self._data["Property Value 62"]

    @property_value_62.setter
    def property_value_62(self, value=None):
        """  Corresponds to IDD Field `property_value_62`

        Args:
            value (float): value for IDD Field `property_value_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_62`'.format(value))

        self._data["Property Value 62"] = value

    @property
    def property_value_63(self):
        """Get property_value_63

        Returns:
            float: the value of `property_value_63` or None if not set
        """
        return self._data["Property Value 63"]

    @property_value_63.setter
    def property_value_63(self, value=None):
        """  Corresponds to IDD Field `property_value_63`

        Args:
            value (float): value for IDD Field `property_value_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_63`'.format(value))

        self._data["Property Value 63"] = value

    @property
    def property_value_64(self):
        """Get property_value_64

        Returns:
            float: the value of `property_value_64` or None if not set
        """
        return self._data["Property Value 64"]

    @property_value_64.setter
    def property_value_64(self, value=None):
        """  Corresponds to IDD Field `property_value_64`

        Args:
            value (float): value for IDD Field `property_value_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_64`'.format(value))

        self._data["Property Value 64"] = value

    @property
    def property_value_65(self):
        """Get property_value_65

        Returns:
            float: the value of `property_value_65` or None if not set
        """
        return self._data["Property Value 65"]

    @property_value_65.setter
    def property_value_65(self, value=None):
        """  Corresponds to IDD Field `property_value_65`

        Args:
            value (float): value for IDD Field `property_value_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_65`'.format(value))

        self._data["Property Value 65"] = value

    @property
    def property_value_66(self):
        """Get property_value_66

        Returns:
            float: the value of `property_value_66` or None if not set
        """
        return self._data["Property Value 66"]

    @property_value_66.setter
    def property_value_66(self, value=None):
        """  Corresponds to IDD Field `property_value_66`

        Args:
            value (float): value for IDD Field `property_value_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_66`'.format(value))

        self._data["Property Value 66"] = value

    @property
    def property_value_67(self):
        """Get property_value_67

        Returns:
            float: the value of `property_value_67` or None if not set
        """
        return self._data["Property Value 67"]

    @property_value_67.setter
    def property_value_67(self, value=None):
        """  Corresponds to IDD Field `property_value_67`

        Args:
            value (float): value for IDD Field `property_value_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_67`'.format(value))

        self._data["Property Value 67"] = value

    @property
    def property_value_68(self):
        """Get property_value_68

        Returns:
            float: the value of `property_value_68` or None if not set
        """
        return self._data["Property Value 68"]

    @property_value_68.setter
    def property_value_68(self, value=None):
        """  Corresponds to IDD Field `property_value_68`

        Args:
            value (float): value for IDD Field `property_value_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_68`'.format(value))

        self._data["Property Value 68"] = value

    @property
    def property_value_69(self):
        """Get property_value_69

        Returns:
            float: the value of `property_value_69` or None if not set
        """
        return self._data["Property Value 69"]

    @property_value_69.setter
    def property_value_69(self, value=None):
        """  Corresponds to IDD Field `property_value_69`

        Args:
            value (float): value for IDD Field `property_value_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_69`'.format(value))

        self._data["Property Value 69"] = value

    @property
    def property_value_70(self):
        """Get property_value_70

        Returns:
            float: the value of `property_value_70` or None if not set
        """
        return self._data["Property Value 70"]

    @property_value_70.setter
    def property_value_70(self, value=None):
        """  Corresponds to IDD Field `property_value_70`

        Args:
            value (float): value for IDD Field `property_value_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_70`'.format(value))

        self._data["Property Value 70"] = value

    @property
    def property_value_71(self):
        """Get property_value_71

        Returns:
            float: the value of `property_value_71` or None if not set
        """
        return self._data["Property Value 71"]

    @property_value_71.setter
    def property_value_71(self, value=None):
        """  Corresponds to IDD Field `property_value_71`

        Args:
            value (float): value for IDD Field `property_value_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_71`'.format(value))

        self._data["Property Value 71"] = value

    @property
    def property_value_72(self):
        """Get property_value_72

        Returns:
            float: the value of `property_value_72` or None if not set
        """
        return self._data["Property Value 72"]

    @property_value_72.setter
    def property_value_72(self, value=None):
        """  Corresponds to IDD Field `property_value_72`

        Args:
            value (float): value for IDD Field `property_value_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_72`'.format(value))

        self._data["Property Value 72"] = value

    @property
    def property_value_73(self):
        """Get property_value_73

        Returns:
            float: the value of `property_value_73` or None if not set
        """
        return self._data["Property Value 73"]

    @property_value_73.setter
    def property_value_73(self, value=None):
        """  Corresponds to IDD Field `property_value_73`

        Args:
            value (float): value for IDD Field `property_value_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_73`'.format(value))

        self._data["Property Value 73"] = value

    @property
    def property_value_74(self):
        """Get property_value_74

        Returns:
            float: the value of `property_value_74` or None if not set
        """
        return self._data["Property Value 74"]

    @property_value_74.setter
    def property_value_74(self, value=None):
        """  Corresponds to IDD Field `property_value_74`

        Args:
            value (float): value for IDD Field `property_value_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_74`'.format(value))

        self._data["Property Value 74"] = value

    @property
    def property_value_75(self):
        """Get property_value_75

        Returns:
            float: the value of `property_value_75` or None if not set
        """
        return self._data["Property Value 75"]

    @property_value_75.setter
    def property_value_75(self, value=None):
        """  Corresponds to IDD Field `property_value_75`

        Args:
            value (float): value for IDD Field `property_value_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_75`'.format(value))

        self._data["Property Value 75"] = value

    @property
    def property_value_76(self):
        """Get property_value_76

        Returns:
            float: the value of `property_value_76` or None if not set
        """
        return self._data["Property Value 76"]

    @property_value_76.setter
    def property_value_76(self, value=None):
        """  Corresponds to IDD Field `property_value_76`

        Args:
            value (float): value for IDD Field `property_value_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_76`'.format(value))

        self._data["Property Value 76"] = value

    @property
    def property_value_77(self):
        """Get property_value_77

        Returns:
            float: the value of `property_value_77` or None if not set
        """
        return self._data["Property Value 77"]

    @property_value_77.setter
    def property_value_77(self, value=None):
        """  Corresponds to IDD Field `property_value_77`

        Args:
            value (float): value for IDD Field `property_value_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_77`'.format(value))

        self._data["Property Value 77"] = value

    @property
    def property_value_78(self):
        """Get property_value_78

        Returns:
            float: the value of `property_value_78` or None if not set
        """
        return self._data["Property Value 78"]

    @property_value_78.setter
    def property_value_78(self, value=None):
        """  Corresponds to IDD Field `property_value_78`

        Args:
            value (float): value for IDD Field `property_value_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_78`'.format(value))

        self._data["Property Value 78"] = value

    @property
    def property_value_79(self):
        """Get property_value_79

        Returns:
            float: the value of `property_value_79` or None if not set
        """
        return self._data["Property Value 79"]

    @property_value_79.setter
    def property_value_79(self, value=None):
        """  Corresponds to IDD Field `property_value_79`

        Args:
            value (float): value for IDD Field `property_value_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_79`'.format(value))

        self._data["Property Value 79"] = value

    @property
    def property_value_80(self):
        """Get property_value_80

        Returns:
            float: the value of `property_value_80` or None if not set
        """
        return self._data["Property Value 80"]

    @property_value_80.setter
    def property_value_80(self, value=None):
        """  Corresponds to IDD Field `property_value_80`

        Args:
            value (float): value for IDD Field `property_value_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_80`'.format(value))

        self._data["Property Value 80"] = value

    @property
    def property_value_81(self):
        """Get property_value_81

        Returns:
            float: the value of `property_value_81` or None if not set
        """
        return self._data["Property Value 81"]

    @property_value_81.setter
    def property_value_81(self, value=None):
        """  Corresponds to IDD Field `property_value_81`

        Args:
            value (float): value for IDD Field `property_value_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_81`'.format(value))

        self._data["Property Value 81"] = value

    @property
    def property_value_82(self):
        """Get property_value_82

        Returns:
            float: the value of `property_value_82` or None if not set
        """
        return self._data["Property Value 82"]

    @property_value_82.setter
    def property_value_82(self, value=None):
        """  Corresponds to IDD Field `property_value_82`

        Args:
            value (float): value for IDD Field `property_value_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_82`'.format(value))

        self._data["Property Value 82"] = value

    @property
    def property_value_83(self):
        """Get property_value_83

        Returns:
            float: the value of `property_value_83` or None if not set
        """
        return self._data["Property Value 83"]

    @property_value_83.setter
    def property_value_83(self, value=None):
        """  Corresponds to IDD Field `property_value_83`

        Args:
            value (float): value for IDD Field `property_value_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_83`'.format(value))

        self._data["Property Value 83"] = value

    @property
    def property_value_84(self):
        """Get property_value_84

        Returns:
            float: the value of `property_value_84` or None if not set
        """
        return self._data["Property Value 84"]

    @property_value_84.setter
    def property_value_84(self, value=None):
        """  Corresponds to IDD Field `property_value_84`

        Args:
            value (float): value for IDD Field `property_value_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_84`'.format(value))

        self._data["Property Value 84"] = value

    @property
    def property_value_85(self):
        """Get property_value_85

        Returns:
            float: the value of `property_value_85` or None if not set
        """
        return self._data["Property Value 85"]

    @property_value_85.setter
    def property_value_85(self, value=None):
        """  Corresponds to IDD Field `property_value_85`

        Args:
            value (float): value for IDD Field `property_value_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_85`'.format(value))

        self._data["Property Value 85"] = value

    @property
    def property_value_86(self):
        """Get property_value_86

        Returns:
            float: the value of `property_value_86` or None if not set
        """
        return self._data["Property Value 86"]

    @property_value_86.setter
    def property_value_86(self, value=None):
        """  Corresponds to IDD Field `property_value_86`

        Args:
            value (float): value for IDD Field `property_value_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_86`'.format(value))

        self._data["Property Value 86"] = value

    @property
    def property_value_87(self):
        """Get property_value_87

        Returns:
            float: the value of `property_value_87` or None if not set
        """
        return self._data["Property Value 87"]

    @property_value_87.setter
    def property_value_87(self, value=None):
        """  Corresponds to IDD Field `property_value_87`

        Args:
            value (float): value for IDD Field `property_value_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_87`'.format(value))

        self._data["Property Value 87"] = value

    @property
    def property_value_88(self):
        """Get property_value_88

        Returns:
            float: the value of `property_value_88` or None if not set
        """
        return self._data["Property Value 88"]

    @property_value_88.setter
    def property_value_88(self, value=None):
        """  Corresponds to IDD Field `property_value_88`

        Args:
            value (float): value for IDD Field `property_value_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_88`'.format(value))

        self._data["Property Value 88"] = value

    @property
    def property_value_89(self):
        """Get property_value_89

        Returns:
            float: the value of `property_value_89` or None if not set
        """
        return self._data["Property Value 89"]

    @property_value_89.setter
    def property_value_89(self, value=None):
        """  Corresponds to IDD Field `property_value_89`

        Args:
            value (float): value for IDD Field `property_value_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_89`'.format(value))

        self._data["Property Value 89"] = value

    @property
    def property_value_90(self):
        """Get property_value_90

        Returns:
            float: the value of `property_value_90` or None if not set
        """
        return self._data["Property Value 90"]

    @property_value_90.setter
    def property_value_90(self, value=None):
        """  Corresponds to IDD Field `property_value_90`

        Args:
            value (float): value for IDD Field `property_value_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_90`'.format(value))

        self._data["Property Value 90"] = value

    @property
    def property_value_91(self):
        """Get property_value_91

        Returns:
            float: the value of `property_value_91` or None if not set
        """
        return self._data["Property Value 91"]

    @property_value_91.setter
    def property_value_91(self, value=None):
        """  Corresponds to IDD Field `property_value_91`

        Args:
            value (float): value for IDD Field `property_value_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_91`'.format(value))

        self._data["Property Value 91"] = value

    @property
    def property_value_92(self):
        """Get property_value_92

        Returns:
            float: the value of `property_value_92` or None if not set
        """
        return self._data["Property Value 92"]

    @property_value_92.setter
    def property_value_92(self, value=None):
        """  Corresponds to IDD Field `property_value_92`

        Args:
            value (float): value for IDD Field `property_value_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_92`'.format(value))

        self._data["Property Value 92"] = value

    @property
    def property_value_93(self):
        """Get property_value_93

        Returns:
            float: the value of `property_value_93` or None if not set
        """
        return self._data["Property Value 93"]

    @property_value_93.setter
    def property_value_93(self, value=None):
        """  Corresponds to IDD Field `property_value_93`

        Args:
            value (float): value for IDD Field `property_value_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_93`'.format(value))

        self._data["Property Value 93"] = value

    @property
    def property_value_94(self):
        """Get property_value_94

        Returns:
            float: the value of `property_value_94` or None if not set
        """
        return self._data["Property Value 94"]

    @property_value_94.setter
    def property_value_94(self, value=None):
        """  Corresponds to IDD Field `property_value_94`

        Args:
            value (float): value for IDD Field `property_value_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_94`'.format(value))

        self._data["Property Value 94"] = value

    @property
    def property_value_95(self):
        """Get property_value_95

        Returns:
            float: the value of `property_value_95` or None if not set
        """
        return self._data["Property Value 95"]

    @property_value_95.setter
    def property_value_95(self, value=None):
        """  Corresponds to IDD Field `property_value_95`

        Args:
            value (float): value for IDD Field `property_value_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_95`'.format(value))

        self._data["Property Value 95"] = value

    @property
    def property_value_96(self):
        """Get property_value_96

        Returns:
            float: the value of `property_value_96` or None if not set
        """
        return self._data["Property Value 96"]

    @property_value_96.setter
    def property_value_96(self, value=None):
        """  Corresponds to IDD Field `property_value_96`

        Args:
            value (float): value for IDD Field `property_value_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_96`'.format(value))

        self._data["Property Value 96"] = value

    @property
    def property_value_97(self):
        """Get property_value_97

        Returns:
            float: the value of `property_value_97` or None if not set
        """
        return self._data["Property Value 97"]

    @property_value_97.setter
    def property_value_97(self, value=None):
        """  Corresponds to IDD Field `property_value_97`

        Args:
            value (float): value for IDD Field `property_value_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_97`'.format(value))

        self._data["Property Value 97"] = value

    @property
    def property_value_98(self):
        """Get property_value_98

        Returns:
            float: the value of `property_value_98` or None if not set
        """
        return self._data["Property Value 98"]

    @property_value_98.setter
    def property_value_98(self, value=None):
        """  Corresponds to IDD Field `property_value_98`

        Args:
            value (float): value for IDD Field `property_value_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_98`'.format(value))

        self._data["Property Value 98"] = value

    @property
    def property_value_99(self):
        """Get property_value_99

        Returns:
            float: the value of `property_value_99` or None if not set
        """
        return self._data["Property Value 99"]

    @property_value_99.setter
    def property_value_99(self, value=None):
        """  Corresponds to IDD Field `property_value_99`

        Args:
            value (float): value for IDD Field `property_value_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_99`'.format(value))

        self._data["Property Value 99"] = value

    @property
    def property_value_100(self):
        """Get property_value_100

        Returns:
            float: the value of `property_value_100` or None if not set
        """
        return self._data["Property Value 100"]

    @property_value_100.setter
    def property_value_100(self, value=None):
        """  Corresponds to IDD Field `property_value_100`

        Args:
            value (float): value for IDD Field `property_value_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_100`'.format(value))

        self._data["Property Value 100"] = value

    @property
    def property_value_101(self):
        """Get property_value_101

        Returns:
            float: the value of `property_value_101` or None if not set
        """
        return self._data["Property Value 101"]

    @property_value_101.setter
    def property_value_101(self, value=None):
        """  Corresponds to IDD Field `property_value_101`

        Args:
            value (float): value for IDD Field `property_value_101`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_101`'.format(value))

        self._data["Property Value 101"] = value

    @property
    def property_value_102(self):
        """Get property_value_102

        Returns:
            float: the value of `property_value_102` or None if not set
        """
        return self._data["Property Value 102"]

    @property_value_102.setter
    def property_value_102(self, value=None):
        """  Corresponds to IDD Field `property_value_102`

        Args:
            value (float): value for IDD Field `property_value_102`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_102`'.format(value))

        self._data["Property Value 102"] = value

    @property
    def property_value_103(self):
        """Get property_value_103

        Returns:
            float: the value of `property_value_103` or None if not set
        """
        return self._data["Property Value 103"]

    @property_value_103.setter
    def property_value_103(self, value=None):
        """  Corresponds to IDD Field `property_value_103`

        Args:
            value (float): value for IDD Field `property_value_103`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_103`'.format(value))

        self._data["Property Value 103"] = value

    @property
    def property_value_104(self):
        """Get property_value_104

        Returns:
            float: the value of `property_value_104` or None if not set
        """
        return self._data["Property Value 104"]

    @property_value_104.setter
    def property_value_104(self, value=None):
        """  Corresponds to IDD Field `property_value_104`

        Args:
            value (float): value for IDD Field `property_value_104`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_104`'.format(value))

        self._data["Property Value 104"] = value

    @property
    def property_value_105(self):
        """Get property_value_105

        Returns:
            float: the value of `property_value_105` or None if not set
        """
        return self._data["Property Value 105"]

    @property_value_105.setter
    def property_value_105(self, value=None):
        """  Corresponds to IDD Field `property_value_105`

        Args:
            value (float): value for IDD Field `property_value_105`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_105`'.format(value))

        self._data["Property Value 105"] = value

    @property
    def property_value_106(self):
        """Get property_value_106

        Returns:
            float: the value of `property_value_106` or None if not set
        """
        return self._data["Property Value 106"]

    @property_value_106.setter
    def property_value_106(self, value=None):
        """  Corresponds to IDD Field `property_value_106`

        Args:
            value (float): value for IDD Field `property_value_106`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_106`'.format(value))

        self._data["Property Value 106"] = value

    @property
    def property_value_107(self):
        """Get property_value_107

        Returns:
            float: the value of `property_value_107` or None if not set
        """
        return self._data["Property Value 107"]

    @property_value_107.setter
    def property_value_107(self, value=None):
        """  Corresponds to IDD Field `property_value_107`

        Args:
            value (float): value for IDD Field `property_value_107`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_107`'.format(value))

        self._data["Property Value 107"] = value

    @property
    def property_value_108(self):
        """Get property_value_108

        Returns:
            float: the value of `property_value_108` or None if not set
        """
        return self._data["Property Value 108"]

    @property_value_108.setter
    def property_value_108(self, value=None):
        """  Corresponds to IDD Field `property_value_108`

        Args:
            value (float): value for IDD Field `property_value_108`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_108`'.format(value))

        self._data["Property Value 108"] = value

    @property
    def property_value_109(self):
        """Get property_value_109

        Returns:
            float: the value of `property_value_109` or None if not set
        """
        return self._data["Property Value 109"]

    @property_value_109.setter
    def property_value_109(self, value=None):
        """  Corresponds to IDD Field `property_value_109`

        Args:
            value (float): value for IDD Field `property_value_109`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_109`'.format(value))

        self._data["Property Value 109"] = value

    @property
    def property_value_110(self):
        """Get property_value_110

        Returns:
            float: the value of `property_value_110` or None if not set
        """
        return self._data["Property Value 110"]

    @property_value_110.setter
    def property_value_110(self, value=None):
        """  Corresponds to IDD Field `property_value_110`

        Args:
            value (float): value for IDD Field `property_value_110`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_110`'.format(value))

        self._data["Property Value 110"] = value

    @property
    def property_value_111(self):
        """Get property_value_111

        Returns:
            float: the value of `property_value_111` or None if not set
        """
        return self._data["Property Value 111"]

    @property_value_111.setter
    def property_value_111(self, value=None):
        """  Corresponds to IDD Field `property_value_111`

        Args:
            value (float): value for IDD Field `property_value_111`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_111`'.format(value))

        self._data["Property Value 111"] = value

    @property
    def property_value_112(self):
        """Get property_value_112

        Returns:
            float: the value of `property_value_112` or None if not set
        """
        return self._data["Property Value 112"]

    @property_value_112.setter
    def property_value_112(self, value=None):
        """  Corresponds to IDD Field `property_value_112`

        Args:
            value (float): value for IDD Field `property_value_112`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_112`'.format(value))

        self._data["Property Value 112"] = value

    @property
    def property_value_113(self):
        """Get property_value_113

        Returns:
            float: the value of `property_value_113` or None if not set
        """
        return self._data["Property Value 113"]

    @property_value_113.setter
    def property_value_113(self, value=None):
        """  Corresponds to IDD Field `property_value_113`

        Args:
            value (float): value for IDD Field `property_value_113`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_113`'.format(value))

        self._data["Property Value 113"] = value

    @property
    def property_value_114(self):
        """Get property_value_114

        Returns:
            float: the value of `property_value_114` or None if not set
        """
        return self._data["Property Value 114"]

    @property_value_114.setter
    def property_value_114(self, value=None):
        """  Corresponds to IDD Field `property_value_114`

        Args:
            value (float): value for IDD Field `property_value_114`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_114`'.format(value))

        self._data["Property Value 114"] = value

    @property
    def property_value_115(self):
        """Get property_value_115

        Returns:
            float: the value of `property_value_115` or None if not set
        """
        return self._data["Property Value 115"]

    @property_value_115.setter
    def property_value_115(self, value=None):
        """  Corresponds to IDD Field `property_value_115`

        Args:
            value (float): value for IDD Field `property_value_115`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_115`'.format(value))

        self._data["Property Value 115"] = value

    @property
    def property_value_116(self):
        """Get property_value_116

        Returns:
            float: the value of `property_value_116` or None if not set
        """
        return self._data["Property Value 116"]

    @property_value_116.setter
    def property_value_116(self, value=None):
        """  Corresponds to IDD Field `property_value_116`

        Args:
            value (float): value for IDD Field `property_value_116`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_116`'.format(value))

        self._data["Property Value 116"] = value

    @property
    def property_value_117(self):
        """Get property_value_117

        Returns:
            float: the value of `property_value_117` or None if not set
        """
        return self._data["Property Value 117"]

    @property_value_117.setter
    def property_value_117(self, value=None):
        """  Corresponds to IDD Field `property_value_117`

        Args:
            value (float): value for IDD Field `property_value_117`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_117`'.format(value))

        self._data["Property Value 117"] = value

    @property
    def property_value_118(self):
        """Get property_value_118

        Returns:
            float: the value of `property_value_118` or None if not set
        """
        return self._data["Property Value 118"]

    @property_value_118.setter
    def property_value_118(self, value=None):
        """  Corresponds to IDD Field `property_value_118`

        Args:
            value (float): value for IDD Field `property_value_118`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_118`'.format(value))

        self._data["Property Value 118"] = value

    @property
    def property_value_119(self):
        """Get property_value_119

        Returns:
            float: the value of `property_value_119` or None if not set
        """
        return self._data["Property Value 119"]

    @property_value_119.setter
    def property_value_119(self, value=None):
        """  Corresponds to IDD Field `property_value_119`

        Args:
            value (float): value for IDD Field `property_value_119`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_119`'.format(value))

        self._data["Property Value 119"] = value

    @property
    def property_value_120(self):
        """Get property_value_120

        Returns:
            float: the value of `property_value_120` or None if not set
        """
        return self._data["Property Value 120"]

    @property_value_120.setter
    def property_value_120(self, value=None):
        """  Corresponds to IDD Field `property_value_120`

        Args:
            value (float): value for IDD Field `property_value_120`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_120`'.format(value))

        self._data["Property Value 120"] = value

    @property
    def property_value_121(self):
        """Get property_value_121

        Returns:
            float: the value of `property_value_121` or None if not set
        """
        return self._data["Property Value 121"]

    @property_value_121.setter
    def property_value_121(self, value=None):
        """  Corresponds to IDD Field `property_value_121`

        Args:
            value (float): value for IDD Field `property_value_121`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_121`'.format(value))

        self._data["Property Value 121"] = value

    @property
    def property_value_122(self):
        """Get property_value_122

        Returns:
            float: the value of `property_value_122` or None if not set
        """
        return self._data["Property Value 122"]

    @property_value_122.setter
    def property_value_122(self, value=None):
        """  Corresponds to IDD Field `property_value_122`

        Args:
            value (float): value for IDD Field `property_value_122`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_122`'.format(value))

        self._data["Property Value 122"] = value

    @property
    def property_value_123(self):
        """Get property_value_123

        Returns:
            float: the value of `property_value_123` or None if not set
        """
        return self._data["Property Value 123"]

    @property_value_123.setter
    def property_value_123(self, value=None):
        """  Corresponds to IDD Field `property_value_123`

        Args:
            value (float): value for IDD Field `property_value_123`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_123`'.format(value))

        self._data["Property Value 123"] = value

    @property
    def property_value_124(self):
        """Get property_value_124

        Returns:
            float: the value of `property_value_124` or None if not set
        """
        return self._data["Property Value 124"]

    @property_value_124.setter
    def property_value_124(self, value=None):
        """  Corresponds to IDD Field `property_value_124`

        Args:
            value (float): value for IDD Field `property_value_124`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_124`'.format(value))

        self._data["Property Value 124"] = value

    @property
    def property_value_125(self):
        """Get property_value_125

        Returns:
            float: the value of `property_value_125` or None if not set
        """
        return self._data["Property Value 125"]

    @property_value_125.setter
    def property_value_125(self, value=None):
        """  Corresponds to IDD Field `property_value_125`

        Args:
            value (float): value for IDD Field `property_value_125`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_125`'.format(value))

        self._data["Property Value 125"] = value

    @property
    def property_value_126(self):
        """Get property_value_126

        Returns:
            float: the value of `property_value_126` or None if not set
        """
        return self._data["Property Value 126"]

    @property_value_126.setter
    def property_value_126(self, value=None):
        """  Corresponds to IDD Field `property_value_126`

        Args:
            value (float): value for IDD Field `property_value_126`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_126`'.format(value))

        self._data["Property Value 126"] = value

    @property
    def property_value_127(self):
        """Get property_value_127

        Returns:
            float: the value of `property_value_127` or None if not set
        """
        return self._data["Property Value 127"]

    @property_value_127.setter
    def property_value_127(self, value=None):
        """  Corresponds to IDD Field `property_value_127`

        Args:
            value (float): value for IDD Field `property_value_127`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_127`'.format(value))

        self._data["Property Value 127"] = value

    @property
    def property_value_128(self):
        """Get property_value_128

        Returns:
            float: the value of `property_value_128` or None if not set
        """
        return self._data["Property Value 128"]

    @property_value_128.setter
    def property_value_128(self, value=None):
        """  Corresponds to IDD Field `property_value_128`

        Args:
            value (float): value for IDD Field `property_value_128`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_128`'.format(value))

        self._data["Property Value 128"] = value

    @property
    def property_value_129(self):
        """Get property_value_129

        Returns:
            float: the value of `property_value_129` or None if not set
        """
        return self._data["Property Value 129"]

    @property_value_129.setter
    def property_value_129(self, value=None):
        """  Corresponds to IDD Field `property_value_129`

        Args:
            value (float): value for IDD Field `property_value_129`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_129`'.format(value))

        self._data["Property Value 129"] = value

    @property
    def property_value_130(self):
        """Get property_value_130

        Returns:
            float: the value of `property_value_130` or None if not set
        """
        return self._data["Property Value 130"]

    @property_value_130.setter
    def property_value_130(self, value=None):
        """  Corresponds to IDD Field `property_value_130`

        Args:
            value (float): value for IDD Field `property_value_130`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_130`'.format(value))

        self._data["Property Value 130"] = value

    @property
    def property_value_131(self):
        """Get property_value_131

        Returns:
            float: the value of `property_value_131` or None if not set
        """
        return self._data["Property Value 131"]

    @property_value_131.setter
    def property_value_131(self, value=None):
        """  Corresponds to IDD Field `property_value_131`

        Args:
            value (float): value for IDD Field `property_value_131`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_131`'.format(value))

        self._data["Property Value 131"] = value

    @property
    def property_value_132(self):
        """Get property_value_132

        Returns:
            float: the value of `property_value_132` or None if not set
        """
        return self._data["Property Value 132"]

    @property_value_132.setter
    def property_value_132(self, value=None):
        """  Corresponds to IDD Field `property_value_132`

        Args:
            value (float): value for IDD Field `property_value_132`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_132`'.format(value))

        self._data["Property Value 132"] = value

    @property
    def property_value_133(self):
        """Get property_value_133

        Returns:
            float: the value of `property_value_133` or None if not set
        """
        return self._data["Property Value 133"]

    @property_value_133.setter
    def property_value_133(self, value=None):
        """  Corresponds to IDD Field `property_value_133`

        Args:
            value (float): value for IDD Field `property_value_133`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_133`'.format(value))

        self._data["Property Value 133"] = value

    @property
    def property_value_134(self):
        """Get property_value_134

        Returns:
            float: the value of `property_value_134` or None if not set
        """
        return self._data["Property Value 134"]

    @property_value_134.setter
    def property_value_134(self, value=None):
        """  Corresponds to IDD Field `property_value_134`

        Args:
            value (float): value for IDD Field `property_value_134`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_134`'.format(value))

        self._data["Property Value 134"] = value

    @property
    def property_value_135(self):
        """Get property_value_135

        Returns:
            float: the value of `property_value_135` or None if not set
        """
        return self._data["Property Value 135"]

    @property_value_135.setter
    def property_value_135(self, value=None):
        """  Corresponds to IDD Field `property_value_135`

        Args:
            value (float): value for IDD Field `property_value_135`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_135`'.format(value))

        self._data["Property Value 135"] = value

    @property
    def property_value_136(self):
        """Get property_value_136

        Returns:
            float: the value of `property_value_136` or None if not set
        """
        return self._data["Property Value 136"]

    @property_value_136.setter
    def property_value_136(self, value=None):
        """  Corresponds to IDD Field `property_value_136`

        Args:
            value (float): value for IDD Field `property_value_136`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_136`'.format(value))

        self._data["Property Value 136"] = value

    @property
    def property_value_137(self):
        """Get property_value_137

        Returns:
            float: the value of `property_value_137` or None if not set
        """
        return self._data["Property Value 137"]

    @property_value_137.setter
    def property_value_137(self, value=None):
        """  Corresponds to IDD Field `property_value_137`

        Args:
            value (float): value for IDD Field `property_value_137`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_137`'.format(value))

        self._data["Property Value 137"] = value

    @property
    def property_value_138(self):
        """Get property_value_138

        Returns:
            float: the value of `property_value_138` or None if not set
        """
        return self._data["Property Value 138"]

    @property_value_138.setter
    def property_value_138(self, value=None):
        """  Corresponds to IDD Field `property_value_138`

        Args:
            value (float): value for IDD Field `property_value_138`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_138`'.format(value))

        self._data["Property Value 138"] = value

    @property
    def property_value_139(self):
        """Get property_value_139

        Returns:
            float: the value of `property_value_139` or None if not set
        """
        return self._data["Property Value 139"]

    @property_value_139.setter
    def property_value_139(self, value=None):
        """  Corresponds to IDD Field `property_value_139`

        Args:
            value (float): value for IDD Field `property_value_139`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_139`'.format(value))

        self._data["Property Value 139"] = value

    @property
    def property_value_140(self):
        """Get property_value_140

        Returns:
            float: the value of `property_value_140` or None if not set
        """
        return self._data["Property Value 140"]

    @property_value_140.setter
    def property_value_140(self, value=None):
        """  Corresponds to IDD Field `property_value_140`

        Args:
            value (float): value for IDD Field `property_value_140`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_140`'.format(value))

        self._data["Property Value 140"] = value

    @property
    def property_value_141(self):
        """Get property_value_141

        Returns:
            float: the value of `property_value_141` or None if not set
        """
        return self._data["Property Value 141"]

    @property_value_141.setter
    def property_value_141(self, value=None):
        """  Corresponds to IDD Field `property_value_141`

        Args:
            value (float): value for IDD Field `property_value_141`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_141`'.format(value))

        self._data["Property Value 141"] = value

    @property
    def property_value_142(self):
        """Get property_value_142

        Returns:
            float: the value of `property_value_142` or None if not set
        """
        return self._data["Property Value 142"]

    @property_value_142.setter
    def property_value_142(self, value=None):
        """  Corresponds to IDD Field `property_value_142`

        Args:
            value (float): value for IDD Field `property_value_142`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_142`'.format(value))

        self._data["Property Value 142"] = value

    @property
    def property_value_143(self):
        """Get property_value_143

        Returns:
            float: the value of `property_value_143` or None if not set
        """
        return self._data["Property Value 143"]

    @property_value_143.setter
    def property_value_143(self, value=None):
        """  Corresponds to IDD Field `property_value_143`

        Args:
            value (float): value for IDD Field `property_value_143`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_143`'.format(value))

        self._data["Property Value 143"] = value

    @property
    def property_value_144(self):
        """Get property_value_144

        Returns:
            float: the value of `property_value_144` or None if not set
        """
        return self._data["Property Value 144"]

    @property_value_144.setter
    def property_value_144(self, value=None):
        """  Corresponds to IDD Field `property_value_144`

        Args:
            value (float): value for IDD Field `property_value_144`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_144`'.format(value))

        self._data["Property Value 144"] = value

    @property
    def property_value_145(self):
        """Get property_value_145

        Returns:
            float: the value of `property_value_145` or None if not set
        """
        return self._data["Property Value 145"]

    @property_value_145.setter
    def property_value_145(self, value=None):
        """  Corresponds to IDD Field `property_value_145`

        Args:
            value (float): value for IDD Field `property_value_145`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_145`'.format(value))

        self._data["Property Value 145"] = value

    @property
    def property_value_146(self):
        """Get property_value_146

        Returns:
            float: the value of `property_value_146` or None if not set
        """
        return self._data["Property Value 146"]

    @property_value_146.setter
    def property_value_146(self, value=None):
        """  Corresponds to IDD Field `property_value_146`

        Args:
            value (float): value for IDD Field `property_value_146`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_146`'.format(value))

        self._data["Property Value 146"] = value

    @property
    def property_value_147(self):
        """Get property_value_147

        Returns:
            float: the value of `property_value_147` or None if not set
        """
        return self._data["Property Value 147"]

    @property_value_147.setter
    def property_value_147(self, value=None):
        """  Corresponds to IDD Field `property_value_147`

        Args:
            value (float): value for IDD Field `property_value_147`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_147`'.format(value))

        self._data["Property Value 147"] = value

    @property
    def property_value_148(self):
        """Get property_value_148

        Returns:
            float: the value of `property_value_148` or None if not set
        """
        return self._data["Property Value 148"]

    @property_value_148.setter
    def property_value_148(self, value=None):
        """  Corresponds to IDD Field `property_value_148`

        Args:
            value (float): value for IDD Field `property_value_148`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_148`'.format(value))

        self._data["Property Value 148"] = value

    @property
    def property_value_149(self):
        """Get property_value_149

        Returns:
            float: the value of `property_value_149` or None if not set
        """
        return self._data["Property Value 149"]

    @property_value_149.setter
    def property_value_149(self, value=None):
        """  Corresponds to IDD Field `property_value_149`

        Args:
            value (float): value for IDD Field `property_value_149`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_149`'.format(value))

        self._data["Property Value 149"] = value

    @property
    def property_value_150(self):
        """Get property_value_150

        Returns:
            float: the value of `property_value_150` or None if not set
        """
        return self._data["Property Value 150"]

    @property_value_150.setter
    def property_value_150(self, value=None):
        """  Corresponds to IDD Field `property_value_150`

        Args:
            value (float): value for IDD Field `property_value_150`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_150`'.format(value))

        self._data["Property Value 150"] = value

    @property
    def property_value_151(self):
        """Get property_value_151

        Returns:
            float: the value of `property_value_151` or None if not set
        """
        return self._data["Property Value 151"]

    @property_value_151.setter
    def property_value_151(self, value=None):
        """  Corresponds to IDD Field `property_value_151`

        Args:
            value (float): value for IDD Field `property_value_151`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_151`'.format(value))

        self._data["Property Value 151"] = value

    @property
    def property_value_152(self):
        """Get property_value_152

        Returns:
            float: the value of `property_value_152` or None if not set
        """
        return self._data["Property Value 152"]

    @property_value_152.setter
    def property_value_152(self, value=None):
        """  Corresponds to IDD Field `property_value_152`

        Args:
            value (float): value for IDD Field `property_value_152`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_152`'.format(value))

        self._data["Property Value 152"] = value

    @property
    def property_value_153(self):
        """Get property_value_153

        Returns:
            float: the value of `property_value_153` or None if not set
        """
        return self._data["Property Value 153"]

    @property_value_153.setter
    def property_value_153(self, value=None):
        """  Corresponds to IDD Field `property_value_153`

        Args:
            value (float): value for IDD Field `property_value_153`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_153`'.format(value))

        self._data["Property Value 153"] = value

    @property
    def property_value_154(self):
        """Get property_value_154

        Returns:
            float: the value of `property_value_154` or None if not set
        """
        return self._data["Property Value 154"]

    @property_value_154.setter
    def property_value_154(self, value=None):
        """  Corresponds to IDD Field `property_value_154`

        Args:
            value (float): value for IDD Field `property_value_154`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_154`'.format(value))

        self._data["Property Value 154"] = value

    @property
    def property_value_155(self):
        """Get property_value_155

        Returns:
            float: the value of `property_value_155` or None if not set
        """
        return self._data["Property Value 155"]

    @property_value_155.setter
    def property_value_155(self, value=None):
        """  Corresponds to IDD Field `property_value_155`

        Args:
            value (float): value for IDD Field `property_value_155`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_155`'.format(value))

        self._data["Property Value 155"] = value

    @property
    def property_value_156(self):
        """Get property_value_156

        Returns:
            float: the value of `property_value_156` or None if not set
        """
        return self._data["Property Value 156"]

    @property_value_156.setter
    def property_value_156(self, value=None):
        """  Corresponds to IDD Field `property_value_156`

        Args:
            value (float): value for IDD Field `property_value_156`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_156`'.format(value))

        self._data["Property Value 156"] = value

    @property
    def property_value_157(self):
        """Get property_value_157

        Returns:
            float: the value of `property_value_157` or None if not set
        """
        return self._data["Property Value 157"]

    @property_value_157.setter
    def property_value_157(self, value=None):
        """  Corresponds to IDD Field `property_value_157`

        Args:
            value (float): value for IDD Field `property_value_157`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_157`'.format(value))

        self._data["Property Value 157"] = value

    @property
    def property_value_158(self):
        """Get property_value_158

        Returns:
            float: the value of `property_value_158` or None if not set
        """
        return self._data["Property Value 158"]

    @property_value_158.setter
    def property_value_158(self, value=None):
        """  Corresponds to IDD Field `property_value_158`

        Args:
            value (float): value for IDD Field `property_value_158`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_158`'.format(value))

        self._data["Property Value 158"] = value

    @property
    def property_value_159(self):
        """Get property_value_159

        Returns:
            float: the value of `property_value_159` or None if not set
        """
        return self._data["Property Value 159"]

    @property_value_159.setter
    def property_value_159(self, value=None):
        """  Corresponds to IDD Field `property_value_159`

        Args:
            value (float): value for IDD Field `property_value_159`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_159`'.format(value))

        self._data["Property Value 159"] = value

    @property
    def property_value_160(self):
        """Get property_value_160

        Returns:
            float: the value of `property_value_160` or None if not set
        """
        return self._data["Property Value 160"]

    @property_value_160.setter
    def property_value_160(self, value=None):
        """  Corresponds to IDD Field `property_value_160`

        Args:
            value (float): value for IDD Field `property_value_160`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_160`'.format(value))

        self._data["Property Value 160"] = value

    @property
    def property_value_161(self):
        """Get property_value_161

        Returns:
            float: the value of `property_value_161` or None if not set
        """
        return self._data["Property Value 161"]

    @property_value_161.setter
    def property_value_161(self, value=None):
        """  Corresponds to IDD Field `property_value_161`

        Args:
            value (float): value for IDD Field `property_value_161`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_161`'.format(value))

        self._data["Property Value 161"] = value

    @property
    def property_value_162(self):
        """Get property_value_162

        Returns:
            float: the value of `property_value_162` or None if not set
        """
        return self._data["Property Value 162"]

    @property_value_162.setter
    def property_value_162(self, value=None):
        """  Corresponds to IDD Field `property_value_162`

        Args:
            value (float): value for IDD Field `property_value_162`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_162`'.format(value))

        self._data["Property Value 162"] = value

    @property
    def property_value_163(self):
        """Get property_value_163

        Returns:
            float: the value of `property_value_163` or None if not set
        """
        return self._data["Property Value 163"]

    @property_value_163.setter
    def property_value_163(self, value=None):
        """  Corresponds to IDD Field `property_value_163`

        Args:
            value (float): value for IDD Field `property_value_163`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_163`'.format(value))

        self._data["Property Value 163"] = value

    @property
    def property_value_164(self):
        """Get property_value_164

        Returns:
            float: the value of `property_value_164` or None if not set
        """
        return self._data["Property Value 164"]

    @property_value_164.setter
    def property_value_164(self, value=None):
        """  Corresponds to IDD Field `property_value_164`

        Args:
            value (float): value for IDD Field `property_value_164`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_164`'.format(value))

        self._data["Property Value 164"] = value

    @property
    def property_value_165(self):
        """Get property_value_165

        Returns:
            float: the value of `property_value_165` or None if not set
        """
        return self._data["Property Value 165"]

    @property_value_165.setter
    def property_value_165(self, value=None):
        """  Corresponds to IDD Field `property_value_165`

        Args:
            value (float): value for IDD Field `property_value_165`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_165`'.format(value))

        self._data["Property Value 165"] = value

    @property
    def property_value_166(self):
        """Get property_value_166

        Returns:
            float: the value of `property_value_166` or None if not set
        """
        return self._data["Property Value 166"]

    @property_value_166.setter
    def property_value_166(self, value=None):
        """  Corresponds to IDD Field `property_value_166`

        Args:
            value (float): value for IDD Field `property_value_166`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_166`'.format(value))

        self._data["Property Value 166"] = value

    @property
    def property_value_167(self):
        """Get property_value_167

        Returns:
            float: the value of `property_value_167` or None if not set
        """
        return self._data["Property Value 167"]

    @property_value_167.setter
    def property_value_167(self, value=None):
        """  Corresponds to IDD Field `property_value_167`

        Args:
            value (float): value for IDD Field `property_value_167`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_167`'.format(value))

        self._data["Property Value 167"] = value

    @property
    def property_value_168(self):
        """Get property_value_168

        Returns:
            float: the value of `property_value_168` or None if not set
        """
        return self._data["Property Value 168"]

    @property_value_168.setter
    def property_value_168(self, value=None):
        """  Corresponds to IDD Field `property_value_168`

        Args:
            value (float): value for IDD Field `property_value_168`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_168`'.format(value))

        self._data["Property Value 168"] = value

    @property
    def property_value_169(self):
        """Get property_value_169

        Returns:
            float: the value of `property_value_169` or None if not set
        """
        return self._data["Property Value 169"]

    @property_value_169.setter
    def property_value_169(self, value=None):
        """  Corresponds to IDD Field `property_value_169`

        Args:
            value (float): value for IDD Field `property_value_169`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_169`'.format(value))

        self._data["Property Value 169"] = value

    @property
    def property_value_170(self):
        """Get property_value_170

        Returns:
            float: the value of `property_value_170` or None if not set
        """
        return self._data["Property Value 170"]

    @property_value_170.setter
    def property_value_170(self, value=None):
        """  Corresponds to IDD Field `property_value_170`

        Args:
            value (float): value for IDD Field `property_value_170`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_170`'.format(value))

        self._data["Property Value 170"] = value

    @property
    def property_value_171(self):
        """Get property_value_171

        Returns:
            float: the value of `property_value_171` or None if not set
        """
        return self._data["Property Value 171"]

    @property_value_171.setter
    def property_value_171(self, value=None):
        """  Corresponds to IDD Field `property_value_171`

        Args:
            value (float): value for IDD Field `property_value_171`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_171`'.format(value))

        self._data["Property Value 171"] = value

    @property
    def property_value_172(self):
        """Get property_value_172

        Returns:
            float: the value of `property_value_172` or None if not set
        """
        return self._data["Property Value 172"]

    @property_value_172.setter
    def property_value_172(self, value=None):
        """  Corresponds to IDD Field `property_value_172`

        Args:
            value (float): value for IDD Field `property_value_172`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_172`'.format(value))

        self._data["Property Value 172"] = value

    @property
    def property_value_173(self):
        """Get property_value_173

        Returns:
            float: the value of `property_value_173` or None if not set
        """
        return self._data["Property Value 173"]

    @property_value_173.setter
    def property_value_173(self, value=None):
        """  Corresponds to IDD Field `property_value_173`

        Args:
            value (float): value for IDD Field `property_value_173`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_173`'.format(value))

        self._data["Property Value 173"] = value

    @property
    def property_value_174(self):
        """Get property_value_174

        Returns:
            float: the value of `property_value_174` or None if not set
        """
        return self._data["Property Value 174"]

    @property_value_174.setter
    def property_value_174(self, value=None):
        """  Corresponds to IDD Field `property_value_174`

        Args:
            value (float): value for IDD Field `property_value_174`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_174`'.format(value))

        self._data["Property Value 174"] = value

    @property
    def property_value_175(self):
        """Get property_value_175

        Returns:
            float: the value of `property_value_175` or None if not set
        """
        return self._data["Property Value 175"]

    @property_value_175.setter
    def property_value_175(self, value=None):
        """  Corresponds to IDD Field `property_value_175`

        Args:
            value (float): value for IDD Field `property_value_175`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_175`'.format(value))

        self._data["Property Value 175"] = value

    @property
    def property_value_176(self):
        """Get property_value_176

        Returns:
            float: the value of `property_value_176` or None if not set
        """
        return self._data["Property Value 176"]

    @property_value_176.setter
    def property_value_176(self, value=None):
        """  Corresponds to IDD Field `property_value_176`

        Args:
            value (float): value for IDD Field `property_value_176`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_176`'.format(value))

        self._data["Property Value 176"] = value

    @property
    def property_value_177(self):
        """Get property_value_177

        Returns:
            float: the value of `property_value_177` or None if not set
        """
        return self._data["Property Value 177"]

    @property_value_177.setter
    def property_value_177(self, value=None):
        """  Corresponds to IDD Field `property_value_177`

        Args:
            value (float): value for IDD Field `property_value_177`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_177`'.format(value))

        self._data["Property Value 177"] = value

    @property
    def property_value_178(self):
        """Get property_value_178

        Returns:
            float: the value of `property_value_178` or None if not set
        """
        return self._data["Property Value 178"]

    @property_value_178.setter
    def property_value_178(self, value=None):
        """  Corresponds to IDD Field `property_value_178`

        Args:
            value (float): value for IDD Field `property_value_178`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_178`'.format(value))

        self._data["Property Value 178"] = value

    @property
    def property_value_179(self):
        """Get property_value_179

        Returns:
            float: the value of `property_value_179` or None if not set
        """
        return self._data["Property Value 179"]

    @property_value_179.setter
    def property_value_179(self, value=None):
        """  Corresponds to IDD Field `property_value_179`

        Args:
            value (float): value for IDD Field `property_value_179`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_179`'.format(value))

        self._data["Property Value 179"] = value

    @property
    def property_value_180(self):
        """Get property_value_180

        Returns:
            float: the value of `property_value_180` or None if not set
        """
        return self._data["Property Value 180"]

    @property_value_180.setter
    def property_value_180(self, value=None):
        """  Corresponds to IDD Field `property_value_180`

        Args:
            value (float): value for IDD Field `property_value_180`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_180`'.format(value))

        self._data["Property Value 180"] = value

    @property
    def property_value_181(self):
        """Get property_value_181

        Returns:
            float: the value of `property_value_181` or None if not set
        """
        return self._data["Property Value 181"]

    @property_value_181.setter
    def property_value_181(self, value=None):
        """  Corresponds to IDD Field `property_value_181`

        Args:
            value (float): value for IDD Field `property_value_181`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_181`'.format(value))

        self._data["Property Value 181"] = value

    @property
    def property_value_182(self):
        """Get property_value_182

        Returns:
            float: the value of `property_value_182` or None if not set
        """
        return self._data["Property Value 182"]

    @property_value_182.setter
    def property_value_182(self, value=None):
        """  Corresponds to IDD Field `property_value_182`

        Args:
            value (float): value for IDD Field `property_value_182`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_182`'.format(value))

        self._data["Property Value 182"] = value

    @property
    def property_value_183(self):
        """Get property_value_183

        Returns:
            float: the value of `property_value_183` or None if not set
        """
        return self._data["Property Value 183"]

    @property_value_183.setter
    def property_value_183(self, value=None):
        """  Corresponds to IDD Field `property_value_183`

        Args:
            value (float): value for IDD Field `property_value_183`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_183`'.format(value))

        self._data["Property Value 183"] = value

    @property
    def property_value_184(self):
        """Get property_value_184

        Returns:
            float: the value of `property_value_184` or None if not set
        """
        return self._data["Property Value 184"]

    @property_value_184.setter
    def property_value_184(self, value=None):
        """  Corresponds to IDD Field `property_value_184`

        Args:
            value (float): value for IDD Field `property_value_184`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_184`'.format(value))

        self._data["Property Value 184"] = value

    @property
    def property_value_185(self):
        """Get property_value_185

        Returns:
            float: the value of `property_value_185` or None if not set
        """
        return self._data["Property Value 185"]

    @property_value_185.setter
    def property_value_185(self, value=None):
        """  Corresponds to IDD Field `property_value_185`

        Args:
            value (float): value for IDD Field `property_value_185`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_185`'.format(value))

        self._data["Property Value 185"] = value

    @property
    def property_value_186(self):
        """Get property_value_186

        Returns:
            float: the value of `property_value_186` or None if not set
        """
        return self._data["Property Value 186"]

    @property_value_186.setter
    def property_value_186(self, value=None):
        """  Corresponds to IDD Field `property_value_186`

        Args:
            value (float): value for IDD Field `property_value_186`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_186`'.format(value))

        self._data["Property Value 186"] = value

    @property
    def property_value_187(self):
        """Get property_value_187

        Returns:
            float: the value of `property_value_187` or None if not set
        """
        return self._data["Property Value 187"]

    @property_value_187.setter
    def property_value_187(self, value=None):
        """  Corresponds to IDD Field `property_value_187`

        Args:
            value (float): value for IDD Field `property_value_187`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_187`'.format(value))

        self._data["Property Value 187"] = value

    @property
    def property_value_188(self):
        """Get property_value_188

        Returns:
            float: the value of `property_value_188` or None if not set
        """
        return self._data["Property Value 188"]

    @property_value_188.setter
    def property_value_188(self, value=None):
        """  Corresponds to IDD Field `property_value_188`

        Args:
            value (float): value for IDD Field `property_value_188`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_188`'.format(value))

        self._data["Property Value 188"] = value

    @property
    def property_value_189(self):
        """Get property_value_189

        Returns:
            float: the value of `property_value_189` or None if not set
        """
        return self._data["Property Value 189"]

    @property_value_189.setter
    def property_value_189(self, value=None):
        """  Corresponds to IDD Field `property_value_189`

        Args:
            value (float): value for IDD Field `property_value_189`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_189`'.format(value))

        self._data["Property Value 189"] = value

    @property
    def property_value_190(self):
        """Get property_value_190

        Returns:
            float: the value of `property_value_190` or None if not set
        """
        return self._data["Property Value 190"]

    @property_value_190.setter
    def property_value_190(self, value=None):
        """  Corresponds to IDD Field `property_value_190`

        Args:
            value (float): value for IDD Field `property_value_190`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_190`'.format(value))

        self._data["Property Value 190"] = value

    @property
    def property_value_191(self):
        """Get property_value_191

        Returns:
            float: the value of `property_value_191` or None if not set
        """
        return self._data["Property Value 191"]

    @property_value_191.setter
    def property_value_191(self, value=None):
        """  Corresponds to IDD Field `property_value_191`

        Args:
            value (float): value for IDD Field `property_value_191`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_191`'.format(value))

        self._data["Property Value 191"] = value

    @property
    def property_value_192(self):
        """Get property_value_192

        Returns:
            float: the value of `property_value_192` or None if not set
        """
        return self._data["Property Value 192"]

    @property_value_192.setter
    def property_value_192(self, value=None):
        """  Corresponds to IDD Field `property_value_192`

        Args:
            value (float): value for IDD Field `property_value_192`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_192`'.format(value))

        self._data["Property Value 192"] = value

    @property
    def property_value_193(self):
        """Get property_value_193

        Returns:
            float: the value of `property_value_193` or None if not set
        """
        return self._data["Property Value 193"]

    @property_value_193.setter
    def property_value_193(self, value=None):
        """  Corresponds to IDD Field `property_value_193`

        Args:
            value (float): value for IDD Field `property_value_193`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_193`'.format(value))

        self._data["Property Value 193"] = value

    @property
    def property_value_194(self):
        """Get property_value_194

        Returns:
            float: the value of `property_value_194` or None if not set
        """
        return self._data["Property Value 194"]

    @property_value_194.setter
    def property_value_194(self, value=None):
        """  Corresponds to IDD Field `property_value_194`

        Args:
            value (float): value for IDD Field `property_value_194`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_194`'.format(value))

        self._data["Property Value 194"] = value

    @property
    def property_value_195(self):
        """Get property_value_195

        Returns:
            float: the value of `property_value_195` or None if not set
        """
        return self._data["Property Value 195"]

    @property_value_195.setter
    def property_value_195(self, value=None):
        """  Corresponds to IDD Field `property_value_195`

        Args:
            value (float): value for IDD Field `property_value_195`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_195`'.format(value))

        self._data["Property Value 195"] = value

    @property
    def property_value_196(self):
        """Get property_value_196

        Returns:
            float: the value of `property_value_196` or None if not set
        """
        return self._data["Property Value 196"]

    @property_value_196.setter
    def property_value_196(self, value=None):
        """  Corresponds to IDD Field `property_value_196`

        Args:
            value (float): value for IDD Field `property_value_196`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_196`'.format(value))

        self._data["Property Value 196"] = value

    @property
    def property_value_197(self):
        """Get property_value_197

        Returns:
            float: the value of `property_value_197` or None if not set
        """
        return self._data["Property Value 197"]

    @property_value_197.setter
    def property_value_197(self, value=None):
        """  Corresponds to IDD Field `property_value_197`

        Args:
            value (float): value for IDD Field `property_value_197`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_197`'.format(value))

        self._data["Property Value 197"] = value

    @property
    def property_value_198(self):
        """Get property_value_198

        Returns:
            float: the value of `property_value_198` or None if not set
        """
        return self._data["Property Value 198"]

    @property_value_198.setter
    def property_value_198(self, value=None):
        """  Corresponds to IDD Field `property_value_198`

        Args:
            value (float): value for IDD Field `property_value_198`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_198`'.format(value))

        self._data["Property Value 198"] = value

    @property
    def property_value_199(self):
        """Get property_value_199

        Returns:
            float: the value of `property_value_199` or None if not set
        """
        return self._data["Property Value 199"]

    @property_value_199.setter
    def property_value_199(self, value=None):
        """  Corresponds to IDD Field `property_value_199`

        Args:
            value (float): value for IDD Field `property_value_199`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_199`'.format(value))

        self._data["Property Value 199"] = value

    @property
    def property_value_200(self):
        """Get property_value_200

        Returns:
            float: the value of `property_value_200` or None if not set
        """
        return self._data["Property Value 200"]

    @property_value_200.setter
    def property_value_200(self, value=None):
        """  Corresponds to IDD Field `property_value_200`

        Args:
            value (float): value for IDD Field `property_value_200`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_200`'.format(value))

        self._data["Property Value 200"] = value

    @property
    def property_value_201(self):
        """Get property_value_201

        Returns:
            float: the value of `property_value_201` or None if not set
        """
        return self._data["Property Value 201"]

    @property_value_201.setter
    def property_value_201(self, value=None):
        """  Corresponds to IDD Field `property_value_201`

        Args:
            value (float): value for IDD Field `property_value_201`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_201`'.format(value))

        self._data["Property Value 201"] = value

    @property
    def property_value_202(self):
        """Get property_value_202

        Returns:
            float: the value of `property_value_202` or None if not set
        """
        return self._data["Property Value 202"]

    @property_value_202.setter
    def property_value_202(self, value=None):
        """  Corresponds to IDD Field `property_value_202`

        Args:
            value (float): value for IDD Field `property_value_202`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_202`'.format(value))

        self._data["Property Value 202"] = value

    @property
    def property_value_203(self):
        """Get property_value_203

        Returns:
            float: the value of `property_value_203` or None if not set
        """
        return self._data["Property Value 203"]

    @property_value_203.setter
    def property_value_203(self, value=None):
        """  Corresponds to IDD Field `property_value_203`

        Args:
            value (float): value for IDD Field `property_value_203`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_203`'.format(value))

        self._data["Property Value 203"] = value

    @property
    def property_value_204(self):
        """Get property_value_204

        Returns:
            float: the value of `property_value_204` or None if not set
        """
        return self._data["Property Value 204"]

    @property_value_204.setter
    def property_value_204(self, value=None):
        """  Corresponds to IDD Field `property_value_204`

        Args:
            value (float): value for IDD Field `property_value_204`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_204`'.format(value))

        self._data["Property Value 204"] = value

    @property
    def property_value_205(self):
        """Get property_value_205

        Returns:
            float: the value of `property_value_205` or None if not set
        """
        return self._data["Property Value 205"]

    @property_value_205.setter
    def property_value_205(self, value=None):
        """  Corresponds to IDD Field `property_value_205`

        Args:
            value (float): value for IDD Field `property_value_205`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_205`'.format(value))

        self._data["Property Value 205"] = value

    @property
    def property_value_206(self):
        """Get property_value_206

        Returns:
            float: the value of `property_value_206` or None if not set
        """
        return self._data["Property Value 206"]

    @property_value_206.setter
    def property_value_206(self, value=None):
        """  Corresponds to IDD Field `property_value_206`

        Args:
            value (float): value for IDD Field `property_value_206`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_206`'.format(value))

        self._data["Property Value 206"] = value

    @property
    def property_value_207(self):
        """Get property_value_207

        Returns:
            float: the value of `property_value_207` or None if not set
        """
        return self._data["Property Value 207"]

    @property_value_207.setter
    def property_value_207(self, value=None):
        """  Corresponds to IDD Field `property_value_207`

        Args:
            value (float): value for IDD Field `property_value_207`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_207`'.format(value))

        self._data["Property Value 207"] = value

    @property
    def property_value_208(self):
        """Get property_value_208

        Returns:
            float: the value of `property_value_208` or None if not set
        """
        return self._data["Property Value 208"]

    @property_value_208.setter
    def property_value_208(self, value=None):
        """  Corresponds to IDD Field `property_value_208`

        Args:
            value (float): value for IDD Field `property_value_208`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_208`'.format(value))

        self._data["Property Value 208"] = value

    @property
    def property_value_209(self):
        """Get property_value_209

        Returns:
            float: the value of `property_value_209` or None if not set
        """
        return self._data["Property Value 209"]

    @property_value_209.setter
    def property_value_209(self, value=None):
        """  Corresponds to IDD Field `property_value_209`

        Args:
            value (float): value for IDD Field `property_value_209`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_209`'.format(value))

        self._data["Property Value 209"] = value

    @property
    def property_value_210(self):
        """Get property_value_210

        Returns:
            float: the value of `property_value_210` or None if not set
        """
        return self._data["Property Value 210"]

    @property_value_210.setter
    def property_value_210(self, value=None):
        """  Corresponds to IDD Field `property_value_210`

        Args:
            value (float): value for IDD Field `property_value_210`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_210`'.format(value))

        self._data["Property Value 210"] = value

    @property
    def property_value_211(self):
        """Get property_value_211

        Returns:
            float: the value of `property_value_211` or None if not set
        """
        return self._data["Property Value 211"]

    @property_value_211.setter
    def property_value_211(self, value=None):
        """  Corresponds to IDD Field `property_value_211`

        Args:
            value (float): value for IDD Field `property_value_211`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_211`'.format(value))

        self._data["Property Value 211"] = value

    @property
    def property_value_212(self):
        """Get property_value_212

        Returns:
            float: the value of `property_value_212` or None if not set
        """
        return self._data["Property Value 212"]

    @property_value_212.setter
    def property_value_212(self, value=None):
        """  Corresponds to IDD Field `property_value_212`

        Args:
            value (float): value for IDD Field `property_value_212`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_212`'.format(value))

        self._data["Property Value 212"] = value

    @property
    def property_value_213(self):
        """Get property_value_213

        Returns:
            float: the value of `property_value_213` or None if not set
        """
        return self._data["Property Value 213"]

    @property_value_213.setter
    def property_value_213(self, value=None):
        """  Corresponds to IDD Field `property_value_213`

        Args:
            value (float): value for IDD Field `property_value_213`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_213`'.format(value))

        self._data["Property Value 213"] = value

    @property
    def property_value_214(self):
        """Get property_value_214

        Returns:
            float: the value of `property_value_214` or None if not set
        """
        return self._data["Property Value 214"]

    @property_value_214.setter
    def property_value_214(self, value=None):
        """  Corresponds to IDD Field `property_value_214`

        Args:
            value (float): value for IDD Field `property_value_214`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_214`'.format(value))

        self._data["Property Value 214"] = value

    @property
    def property_value_215(self):
        """Get property_value_215

        Returns:
            float: the value of `property_value_215` or None if not set
        """
        return self._data["Property Value 215"]

    @property_value_215.setter
    def property_value_215(self, value=None):
        """  Corresponds to IDD Field `property_value_215`

        Args:
            value (float): value for IDD Field `property_value_215`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_215`'.format(value))

        self._data["Property Value 215"] = value

    @property
    def property_value_216(self):
        """Get property_value_216

        Returns:
            float: the value of `property_value_216` or None if not set
        """
        return self._data["Property Value 216"]

    @property_value_216.setter
    def property_value_216(self, value=None):
        """  Corresponds to IDD Field `property_value_216`

        Args:
            value (float): value for IDD Field `property_value_216`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_216`'.format(value))

        self._data["Property Value 216"] = value

    @property
    def property_value_217(self):
        """Get property_value_217

        Returns:
            float: the value of `property_value_217` or None if not set
        """
        return self._data["Property Value 217"]

    @property_value_217.setter
    def property_value_217(self, value=None):
        """  Corresponds to IDD Field `property_value_217`

        Args:
            value (float): value for IDD Field `property_value_217`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_217`'.format(value))

        self._data["Property Value 217"] = value

    @property
    def property_value_218(self):
        """Get property_value_218

        Returns:
            float: the value of `property_value_218` or None if not set
        """
        return self._data["Property Value 218"]

    @property_value_218.setter
    def property_value_218(self, value=None):
        """  Corresponds to IDD Field `property_value_218`

        Args:
            value (float): value for IDD Field `property_value_218`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_218`'.format(value))

        self._data["Property Value 218"] = value

    @property
    def property_value_219(self):
        """Get property_value_219

        Returns:
            float: the value of `property_value_219` or None if not set
        """
        return self._data["Property Value 219"]

    @property_value_219.setter
    def property_value_219(self, value=None):
        """  Corresponds to IDD Field `property_value_219`

        Args:
            value (float): value for IDD Field `property_value_219`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_219`'.format(value))

        self._data["Property Value 219"] = value

    @property
    def property_value_220(self):
        """Get property_value_220

        Returns:
            float: the value of `property_value_220` or None if not set
        """
        return self._data["Property Value 220"]

    @property_value_220.setter
    def property_value_220(self, value=None):
        """  Corresponds to IDD Field `property_value_220`

        Args:
            value (float): value for IDD Field `property_value_220`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_220`'.format(value))

        self._data["Property Value 220"] = value

    @property
    def property_value_221(self):
        """Get property_value_221

        Returns:
            float: the value of `property_value_221` or None if not set
        """
        return self._data["Property Value 221"]

    @property_value_221.setter
    def property_value_221(self, value=None):
        """  Corresponds to IDD Field `property_value_221`

        Args:
            value (float): value for IDD Field `property_value_221`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_221`'.format(value))

        self._data["Property Value 221"] = value

    @property
    def property_value_222(self):
        """Get property_value_222

        Returns:
            float: the value of `property_value_222` or None if not set
        """
        return self._data["Property Value 222"]

    @property_value_222.setter
    def property_value_222(self, value=None):
        """  Corresponds to IDD Field `property_value_222`

        Args:
            value (float): value for IDD Field `property_value_222`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_222`'.format(value))

        self._data["Property Value 222"] = value

    @property
    def property_value_223(self):
        """Get property_value_223

        Returns:
            float: the value of `property_value_223` or None if not set
        """
        return self._data["Property Value 223"]

    @property_value_223.setter
    def property_value_223(self, value=None):
        """  Corresponds to IDD Field `property_value_223`

        Args:
            value (float): value for IDD Field `property_value_223`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_223`'.format(value))

        self._data["Property Value 223"] = value

    @property
    def property_value_224(self):
        """Get property_value_224

        Returns:
            float: the value of `property_value_224` or None if not set
        """
        return self._data["Property Value 224"]

    @property_value_224.setter
    def property_value_224(self, value=None):
        """  Corresponds to IDD Field `property_value_224`

        Args:
            value (float): value for IDD Field `property_value_224`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_224`'.format(value))

        self._data["Property Value 224"] = value

    @property
    def property_value_225(self):
        """Get property_value_225

        Returns:
            float: the value of `property_value_225` or None if not set
        """
        return self._data["Property Value 225"]

    @property_value_225.setter
    def property_value_225(self, value=None):
        """  Corresponds to IDD Field `property_value_225`

        Args:
            value (float): value for IDD Field `property_value_225`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_225`'.format(value))

        self._data["Property Value 225"] = value

    @property
    def property_value_226(self):
        """Get property_value_226

        Returns:
            float: the value of `property_value_226` or None if not set
        """
        return self._data["Property Value 226"]

    @property_value_226.setter
    def property_value_226(self, value=None):
        """  Corresponds to IDD Field `property_value_226`

        Args:
            value (float): value for IDD Field `property_value_226`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_226`'.format(value))

        self._data["Property Value 226"] = value

    @property
    def property_value_227(self):
        """Get property_value_227

        Returns:
            float: the value of `property_value_227` or None if not set
        """
        return self._data["Property Value 227"]

    @property_value_227.setter
    def property_value_227(self, value=None):
        """  Corresponds to IDD Field `property_value_227`

        Args:
            value (float): value for IDD Field `property_value_227`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_227`'.format(value))

        self._data["Property Value 227"] = value

    @property
    def property_value_228(self):
        """Get property_value_228

        Returns:
            float: the value of `property_value_228` or None if not set
        """
        return self._data["Property Value 228"]

    @property_value_228.setter
    def property_value_228(self, value=None):
        """  Corresponds to IDD Field `property_value_228`

        Args:
            value (float): value for IDD Field `property_value_228`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_228`'.format(value))

        self._data["Property Value 228"] = value

    @property
    def property_value_229(self):
        """Get property_value_229

        Returns:
            float: the value of `property_value_229` or None if not set
        """
        return self._data["Property Value 229"]

    @property_value_229.setter
    def property_value_229(self, value=None):
        """  Corresponds to IDD Field `property_value_229`

        Args:
            value (float): value for IDD Field `property_value_229`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_229`'.format(value))

        self._data["Property Value 229"] = value

    @property
    def property_value_230(self):
        """Get property_value_230

        Returns:
            float: the value of `property_value_230` or None if not set
        """
        return self._data["Property Value 230"]

    @property_value_230.setter
    def property_value_230(self, value=None):
        """  Corresponds to IDD Field `property_value_230`

        Args:
            value (float): value for IDD Field `property_value_230`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_230`'.format(value))

        self._data["Property Value 230"] = value

    @property
    def property_value_231(self):
        """Get property_value_231

        Returns:
            float: the value of `property_value_231` or None if not set
        """
        return self._data["Property Value 231"]

    @property_value_231.setter
    def property_value_231(self, value=None):
        """  Corresponds to IDD Field `property_value_231`

        Args:
            value (float): value for IDD Field `property_value_231`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_231`'.format(value))

        self._data["Property Value 231"] = value

    @property
    def property_value_232(self):
        """Get property_value_232

        Returns:
            float: the value of `property_value_232` or None if not set
        """
        return self._data["Property Value 232"]

    @property_value_232.setter
    def property_value_232(self, value=None):
        """  Corresponds to IDD Field `property_value_232`

        Args:
            value (float): value for IDD Field `property_value_232`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_232`'.format(value))

        self._data["Property Value 232"] = value

    @property
    def property_value_233(self):
        """Get property_value_233

        Returns:
            float: the value of `property_value_233` or None if not set
        """
        return self._data["Property Value 233"]

    @property_value_233.setter
    def property_value_233(self, value=None):
        """  Corresponds to IDD Field `property_value_233`

        Args:
            value (float): value for IDD Field `property_value_233`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_233`'.format(value))

        self._data["Property Value 233"] = value

    @property
    def property_value_234(self):
        """Get property_value_234

        Returns:
            float: the value of `property_value_234` or None if not set
        """
        return self._data["Property Value 234"]

    @property_value_234.setter
    def property_value_234(self, value=None):
        """  Corresponds to IDD Field `property_value_234`

        Args:
            value (float): value for IDD Field `property_value_234`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_234`'.format(value))

        self._data["Property Value 234"] = value

    @property
    def property_value_235(self):
        """Get property_value_235

        Returns:
            float: the value of `property_value_235` or None if not set
        """
        return self._data["Property Value 235"]

    @property_value_235.setter
    def property_value_235(self, value=None):
        """  Corresponds to IDD Field `property_value_235`

        Args:
            value (float): value for IDD Field `property_value_235`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_235`'.format(value))

        self._data["Property Value 235"] = value

    @property
    def property_value_236(self):
        """Get property_value_236

        Returns:
            float: the value of `property_value_236` or None if not set
        """
        return self._data["Property Value 236"]

    @property_value_236.setter
    def property_value_236(self, value=None):
        """  Corresponds to IDD Field `property_value_236`

        Args:
            value (float): value for IDD Field `property_value_236`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_236`'.format(value))

        self._data["Property Value 236"] = value

    @property
    def property_value_237(self):
        """Get property_value_237

        Returns:
            float: the value of `property_value_237` or None if not set
        """
        return self._data["Property Value 237"]

    @property_value_237.setter
    def property_value_237(self, value=None):
        """  Corresponds to IDD Field `property_value_237`

        Args:
            value (float): value for IDD Field `property_value_237`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_237`'.format(value))

        self._data["Property Value 237"] = value

    @property
    def property_value_238(self):
        """Get property_value_238

        Returns:
            float: the value of `property_value_238` or None if not set
        """
        return self._data["Property Value 238"]

    @property_value_238.setter
    def property_value_238(self, value=None):
        """  Corresponds to IDD Field `property_value_238`

        Args:
            value (float): value for IDD Field `property_value_238`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_238`'.format(value))

        self._data["Property Value 238"] = value

    @property
    def property_value_239(self):
        """Get property_value_239

        Returns:
            float: the value of `property_value_239` or None if not set
        """
        return self._data["Property Value 239"]

    @property_value_239.setter
    def property_value_239(self, value=None):
        """  Corresponds to IDD Field `property_value_239`

        Args:
            value (float): value for IDD Field `property_value_239`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_239`'.format(value))

        self._data["Property Value 239"] = value

    @property
    def property_value_240(self):
        """Get property_value_240

        Returns:
            float: the value of `property_value_240` or None if not set
        """
        return self._data["Property Value 240"]

    @property_value_240.setter
    def property_value_240(self, value=None):
        """  Corresponds to IDD Field `property_value_240`

        Args:
            value (float): value for IDD Field `property_value_240`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_240`'.format(value))

        self._data["Property Value 240"] = value

    @property
    def property_value_241(self):
        """Get property_value_241

        Returns:
            float: the value of `property_value_241` or None if not set
        """
        return self._data["Property Value 241"]

    @property_value_241.setter
    def property_value_241(self, value=None):
        """  Corresponds to IDD Field `property_value_241`

        Args:
            value (float): value for IDD Field `property_value_241`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_241`'.format(value))

        self._data["Property Value 241"] = value

    @property
    def property_value_242(self):
        """Get property_value_242

        Returns:
            float: the value of `property_value_242` or None if not set
        """
        return self._data["Property Value 242"]

    @property_value_242.setter
    def property_value_242(self, value=None):
        """  Corresponds to IDD Field `property_value_242`

        Args:
            value (float): value for IDD Field `property_value_242`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_242`'.format(value))

        self._data["Property Value 242"] = value

    @property
    def property_value_243(self):
        """Get property_value_243

        Returns:
            float: the value of `property_value_243` or None if not set
        """
        return self._data["Property Value 243"]

    @property_value_243.setter
    def property_value_243(self, value=None):
        """  Corresponds to IDD Field `property_value_243`

        Args:
            value (float): value for IDD Field `property_value_243`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_243`'.format(value))

        self._data["Property Value 243"] = value

    @property
    def property_value_244(self):
        """Get property_value_244

        Returns:
            float: the value of `property_value_244` or None if not set
        """
        return self._data["Property Value 244"]

    @property_value_244.setter
    def property_value_244(self, value=None):
        """  Corresponds to IDD Field `property_value_244`

        Args:
            value (float): value for IDD Field `property_value_244`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_244`'.format(value))

        self._data["Property Value 244"] = value

    @property
    def property_value_245(self):
        """Get property_value_245

        Returns:
            float: the value of `property_value_245` or None if not set
        """
        return self._data["Property Value 245"]

    @property_value_245.setter
    def property_value_245(self, value=None):
        """  Corresponds to IDD Field `property_value_245`

        Args:
            value (float): value for IDD Field `property_value_245`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_245`'.format(value))

        self._data["Property Value 245"] = value

    @property
    def property_value_246(self):
        """Get property_value_246

        Returns:
            float: the value of `property_value_246` or None if not set
        """
        return self._data["Property Value 246"]

    @property_value_246.setter
    def property_value_246(self, value=None):
        """  Corresponds to IDD Field `property_value_246`

        Args:
            value (float): value for IDD Field `property_value_246`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_246`'.format(value))

        self._data["Property Value 246"] = value

    @property
    def property_value_247(self):
        """Get property_value_247

        Returns:
            float: the value of `property_value_247` or None if not set
        """
        return self._data["Property Value 247"]

    @property_value_247.setter
    def property_value_247(self, value=None):
        """  Corresponds to IDD Field `property_value_247`

        Args:
            value (float): value for IDD Field `property_value_247`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_247`'.format(value))

        self._data["Property Value 247"] = value

    @property
    def property_value_248(self):
        """Get property_value_248

        Returns:
            float: the value of `property_value_248` or None if not set
        """
        return self._data["Property Value 248"]

    @property_value_248.setter
    def property_value_248(self, value=None):
        """  Corresponds to IDD Field `property_value_248`

        Args:
            value (float): value for IDD Field `property_value_248`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_248`'.format(value))

        self._data["Property Value 248"] = value

    @property
    def property_value_249(self):
        """Get property_value_249

        Returns:
            float: the value of `property_value_249` or None if not set
        """
        return self._data["Property Value 249"]

    @property_value_249.setter
    def property_value_249(self, value=None):
        """  Corresponds to IDD Field `property_value_249`

        Args:
            value (float): value for IDD Field `property_value_249`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_249`'.format(value))

        self._data["Property Value 249"] = value

    @property
    def property_value_250(self):
        """Get property_value_250

        Returns:
            float: the value of `property_value_250` or None if not set
        """
        return self._data["Property Value 250"]

    @property_value_250.setter
    def property_value_250(self, value=None):
        """  Corresponds to IDD Field `property_value_250`

        Args:
            value (float): value for IDD Field `property_value_250`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `property_value_250`'.format(value))

        self._data["Property Value 250"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.fluid_name))
        out.append(self._to_str(self.fluid_property_type))
        out.append(self._to_str(self.temperature_values_name))
        out.append(self._to_str(self.concentration))
        out.append(self._to_str(self.property_value_1))
        out.append(self._to_str(self.property_value_2))
        out.append(self._to_str(self.property_value_3))
        out.append(self._to_str(self.property_value_4))
        out.append(self._to_str(self.property_value_5))
        out.append(self._to_str(self.property_value_6))
        out.append(self._to_str(self.property_value_7))
        out.append(self._to_str(self.property_value_8))
        out.append(self._to_str(self.property_value_9))
        out.append(self._to_str(self.property_value_10))
        out.append(self._to_str(self.property_value_11))
        out.append(self._to_str(self.property_value_12))
        out.append(self._to_str(self.property_value_13))
        out.append(self._to_str(self.property_value_14))
        out.append(self._to_str(self.property_value_15))
        out.append(self._to_str(self.property_value_16))
        out.append(self._to_str(self.property_value_17))
        out.append(self._to_str(self.property_value_18))
        out.append(self._to_str(self.property_value_19))
        out.append(self._to_str(self.property_value_20))
        out.append(self._to_str(self.property_value_21))
        out.append(self._to_str(self.property_value_22))
        out.append(self._to_str(self.property_value_23))
        out.append(self._to_str(self.property_value_24))
        out.append(self._to_str(self.property_value_25))
        out.append(self._to_str(self.property_value_26))
        out.append(self._to_str(self.property_value_27))
        out.append(self._to_str(self.property_value_28))
        out.append(self._to_str(self.property_value_29))
        out.append(self._to_str(self.property_value_30))
        out.append(self._to_str(self.property_value_31))
        out.append(self._to_str(self.property_value_32))
        out.append(self._to_str(self.property_value_33))
        out.append(self._to_str(self.property_value_34))
        out.append(self._to_str(self.property_value_35))
        out.append(self._to_str(self.property_value_36))
        out.append(self._to_str(self.property_value_37))
        out.append(self._to_str(self.property_value_38))
        out.append(self._to_str(self.property_value_39))
        out.append(self._to_str(self.property_value_40))
        out.append(self._to_str(self.property_value_41))
        out.append(self._to_str(self.property_value_42))
        out.append(self._to_str(self.property_value_43))
        out.append(self._to_str(self.property_value_44))
        out.append(self._to_str(self.property_value_45))
        out.append(self._to_str(self.property_value_46))
        out.append(self._to_str(self.property_value_47))
        out.append(self._to_str(self.property_value_48))
        out.append(self._to_str(self.property_value_49))
        out.append(self._to_str(self.property_value_50))
        out.append(self._to_str(self.property_value_51))
        out.append(self._to_str(self.property_value_52))
        out.append(self._to_str(self.property_value_53))
        out.append(self._to_str(self.property_value_54))
        out.append(self._to_str(self.property_value_55))
        out.append(self._to_str(self.property_value_56))
        out.append(self._to_str(self.property_value_57))
        out.append(self._to_str(self.property_value_58))
        out.append(self._to_str(self.property_value_59))
        out.append(self._to_str(self.property_value_60))
        out.append(self._to_str(self.property_value_61))
        out.append(self._to_str(self.property_value_62))
        out.append(self._to_str(self.property_value_63))
        out.append(self._to_str(self.property_value_64))
        out.append(self._to_str(self.property_value_65))
        out.append(self._to_str(self.property_value_66))
        out.append(self._to_str(self.property_value_67))
        out.append(self._to_str(self.property_value_68))
        out.append(self._to_str(self.property_value_69))
        out.append(self._to_str(self.property_value_70))
        out.append(self._to_str(self.property_value_71))
        out.append(self._to_str(self.property_value_72))
        out.append(self._to_str(self.property_value_73))
        out.append(self._to_str(self.property_value_74))
        out.append(self._to_str(self.property_value_75))
        out.append(self._to_str(self.property_value_76))
        out.append(self._to_str(self.property_value_77))
        out.append(self._to_str(self.property_value_78))
        out.append(self._to_str(self.property_value_79))
        out.append(self._to_str(self.property_value_80))
        out.append(self._to_str(self.property_value_81))
        out.append(self._to_str(self.property_value_82))
        out.append(self._to_str(self.property_value_83))
        out.append(self._to_str(self.property_value_84))
        out.append(self._to_str(self.property_value_85))
        out.append(self._to_str(self.property_value_86))
        out.append(self._to_str(self.property_value_87))
        out.append(self._to_str(self.property_value_88))
        out.append(self._to_str(self.property_value_89))
        out.append(self._to_str(self.property_value_90))
        out.append(self._to_str(self.property_value_91))
        out.append(self._to_str(self.property_value_92))
        out.append(self._to_str(self.property_value_93))
        out.append(self._to_str(self.property_value_94))
        out.append(self._to_str(self.property_value_95))
        out.append(self._to_str(self.property_value_96))
        out.append(self._to_str(self.property_value_97))
        out.append(self._to_str(self.property_value_98))
        out.append(self._to_str(self.property_value_99))
        out.append(self._to_str(self.property_value_100))
        out.append(self._to_str(self.property_value_101))
        out.append(self._to_str(self.property_value_102))
        out.append(self._to_str(self.property_value_103))
        out.append(self._to_str(self.property_value_104))
        out.append(self._to_str(self.property_value_105))
        out.append(self._to_str(self.property_value_106))
        out.append(self._to_str(self.property_value_107))
        out.append(self._to_str(self.property_value_108))
        out.append(self._to_str(self.property_value_109))
        out.append(self._to_str(self.property_value_110))
        out.append(self._to_str(self.property_value_111))
        out.append(self._to_str(self.property_value_112))
        out.append(self._to_str(self.property_value_113))
        out.append(self._to_str(self.property_value_114))
        out.append(self._to_str(self.property_value_115))
        out.append(self._to_str(self.property_value_116))
        out.append(self._to_str(self.property_value_117))
        out.append(self._to_str(self.property_value_118))
        out.append(self._to_str(self.property_value_119))
        out.append(self._to_str(self.property_value_120))
        out.append(self._to_str(self.property_value_121))
        out.append(self._to_str(self.property_value_122))
        out.append(self._to_str(self.property_value_123))
        out.append(self._to_str(self.property_value_124))
        out.append(self._to_str(self.property_value_125))
        out.append(self._to_str(self.property_value_126))
        out.append(self._to_str(self.property_value_127))
        out.append(self._to_str(self.property_value_128))
        out.append(self._to_str(self.property_value_129))
        out.append(self._to_str(self.property_value_130))
        out.append(self._to_str(self.property_value_131))
        out.append(self._to_str(self.property_value_132))
        out.append(self._to_str(self.property_value_133))
        out.append(self._to_str(self.property_value_134))
        out.append(self._to_str(self.property_value_135))
        out.append(self._to_str(self.property_value_136))
        out.append(self._to_str(self.property_value_137))
        out.append(self._to_str(self.property_value_138))
        out.append(self._to_str(self.property_value_139))
        out.append(self._to_str(self.property_value_140))
        out.append(self._to_str(self.property_value_141))
        out.append(self._to_str(self.property_value_142))
        out.append(self._to_str(self.property_value_143))
        out.append(self._to_str(self.property_value_144))
        out.append(self._to_str(self.property_value_145))
        out.append(self._to_str(self.property_value_146))
        out.append(self._to_str(self.property_value_147))
        out.append(self._to_str(self.property_value_148))
        out.append(self._to_str(self.property_value_149))
        out.append(self._to_str(self.property_value_150))
        out.append(self._to_str(self.property_value_151))
        out.append(self._to_str(self.property_value_152))
        out.append(self._to_str(self.property_value_153))
        out.append(self._to_str(self.property_value_154))
        out.append(self._to_str(self.property_value_155))
        out.append(self._to_str(self.property_value_156))
        out.append(self._to_str(self.property_value_157))
        out.append(self._to_str(self.property_value_158))
        out.append(self._to_str(self.property_value_159))
        out.append(self._to_str(self.property_value_160))
        out.append(self._to_str(self.property_value_161))
        out.append(self._to_str(self.property_value_162))
        out.append(self._to_str(self.property_value_163))
        out.append(self._to_str(self.property_value_164))
        out.append(self._to_str(self.property_value_165))
        out.append(self._to_str(self.property_value_166))
        out.append(self._to_str(self.property_value_167))
        out.append(self._to_str(self.property_value_168))
        out.append(self._to_str(self.property_value_169))
        out.append(self._to_str(self.property_value_170))
        out.append(self._to_str(self.property_value_171))
        out.append(self._to_str(self.property_value_172))
        out.append(self._to_str(self.property_value_173))
        out.append(self._to_str(self.property_value_174))
        out.append(self._to_str(self.property_value_175))
        out.append(self._to_str(self.property_value_176))
        out.append(self._to_str(self.property_value_177))
        out.append(self._to_str(self.property_value_178))
        out.append(self._to_str(self.property_value_179))
        out.append(self._to_str(self.property_value_180))
        out.append(self._to_str(self.property_value_181))
        out.append(self._to_str(self.property_value_182))
        out.append(self._to_str(self.property_value_183))
        out.append(self._to_str(self.property_value_184))
        out.append(self._to_str(self.property_value_185))
        out.append(self._to_str(self.property_value_186))
        out.append(self._to_str(self.property_value_187))
        out.append(self._to_str(self.property_value_188))
        out.append(self._to_str(self.property_value_189))
        out.append(self._to_str(self.property_value_190))
        out.append(self._to_str(self.property_value_191))
        out.append(self._to_str(self.property_value_192))
        out.append(self._to_str(self.property_value_193))
        out.append(self._to_str(self.property_value_194))
        out.append(self._to_str(self.property_value_195))
        out.append(self._to_str(self.property_value_196))
        out.append(self._to_str(self.property_value_197))
        out.append(self._to_str(self.property_value_198))
        out.append(self._to_str(self.property_value_199))
        out.append(self._to_str(self.property_value_200))
        out.append(self._to_str(self.property_value_201))
        out.append(self._to_str(self.property_value_202))
        out.append(self._to_str(self.property_value_203))
        out.append(self._to_str(self.property_value_204))
        out.append(self._to_str(self.property_value_205))
        out.append(self._to_str(self.property_value_206))
        out.append(self._to_str(self.property_value_207))
        out.append(self._to_str(self.property_value_208))
        out.append(self._to_str(self.property_value_209))
        out.append(self._to_str(self.property_value_210))
        out.append(self._to_str(self.property_value_211))
        out.append(self._to_str(self.property_value_212))
        out.append(self._to_str(self.property_value_213))
        out.append(self._to_str(self.property_value_214))
        out.append(self._to_str(self.property_value_215))
        out.append(self._to_str(self.property_value_216))
        out.append(self._to_str(self.property_value_217))
        out.append(self._to_str(self.property_value_218))
        out.append(self._to_str(self.property_value_219))
        out.append(self._to_str(self.property_value_220))
        out.append(self._to_str(self.property_value_221))
        out.append(self._to_str(self.property_value_222))
        out.append(self._to_str(self.property_value_223))
        out.append(self._to_str(self.property_value_224))
        out.append(self._to_str(self.property_value_225))
        out.append(self._to_str(self.property_value_226))
        out.append(self._to_str(self.property_value_227))
        out.append(self._to_str(self.property_value_228))
        out.append(self._to_str(self.property_value_229))
        out.append(self._to_str(self.property_value_230))
        out.append(self._to_str(self.property_value_231))
        out.append(self._to_str(self.property_value_232))
        out.append(self._to_str(self.property_value_233))
        out.append(self._to_str(self.property_value_234))
        out.append(self._to_str(self.property_value_235))
        out.append(self._to_str(self.property_value_236))
        out.append(self._to_str(self.property_value_237))
        out.append(self._to_str(self.property_value_238))
        out.append(self._to_str(self.property_value_239))
        out.append(self._to_str(self.property_value_240))
        out.append(self._to_str(self.property_value_241))
        out.append(self._to_str(self.property_value_242))
        out.append(self._to_str(self.property_value_243))
        out.append(self._to_str(self.property_value_244))
        out.append(self._to_str(self.property_value_245))
        out.append(self._to_str(self.property_value_246))
        out.append(self._to_str(self.property_value_247))
        out.append(self._to_str(self.property_value_248))
        out.append(self._to_str(self.property_value_249))
        out.append(self._to_str(self.property_value_250))
        return ",".join(out)

class CurrencyType(object):
    """ Corresponds to IDD object `CurrencyType`
        If CurrencyType is not specified, it will default to USD and produce $ in the reports.
    
    """
    internal_name = "CurrencyType"
    field_count = 1
    required_fields = ["Monetary Unit"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CurrencyType`
        """
        self._data = OrderedDict()
        self._data["Monetary Unit"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.monetary_unit = None
        else:
            self.monetary_unit = vals[i]
        i += 1

    @property
    def monetary_unit(self):
        """Get monetary_unit

        Returns:
            str: the value of `monetary_unit` or None if not set
        """
        return self._data["Monetary Unit"]

    @monetary_unit.setter
    def monetary_unit(self, value=None):
        """  Corresponds to IDD Field `monetary_unit`
        The commonly used three letter currency code for the units of money for the country or region.
        Based on ISO 4217 currency codes.  Common currency codes are USD for $ and EUR for Euros.

        Args:
            value (str): value for IDD Field `monetary_unit`
                Accepted values are:
                      - USD
                      - AFN
                      - ALL
                      - ANG
                      - ARS
                      - AUD
                      - AWG
                      - AZN
                      - BAM
                      - BBD
                      - BGN
                      - BMD
                      - BND
                      - BOB
                      - BRL
                      - BSD
                      - BWP
                      - BYR
                      - BZD
                      - CAD
                      - CHF
                      - CLP
                      - CNY
                      - COP
                      - CRC
                      - CUP
                      - CZK
                      - DKK
                      - DOP
                      - EEK
                      - EGP
                      - EUR
                      - FJD
                      - GBP
                      - GHC
                      - GIP
                      - GTQ
                      - GYD
                      - HKD
                      - HNL
                      - HRK
                      - HUF
                      - IDR
                      - ILS
                      - IMP
                      - INR
                      - IRR
                      - ISK
                      - JEP
                      - JMD
                      - JPY
                      - KGS
                      - KHR
                      - KPW
                      - KRW
                      - KYD
                      - KZT
                      - LAK
                      - LBP
                      - LKR
                      - LRD
                      - LTL
                      - LVL
                      - MKD
                      - MNT
                      - MUR
                      - MXN
                      - MYR
                      - MZN
                      - NAD
                      - NGN
                      - NIO
                      - NOK
                      - NPR
                      - NZD
                      - OMR
                      - PAB
                      - PEN
                      - PHP
                      - PKR
                      - PLN
                      - PYG
                      - QAR
                      - RON
                      - RSD
                      - RUB
                      - SAR
                      - SBD
                      - SCR
                      - SEK
                      - SGD
                      - SHP
                      - SOS
                      - SRD
                      - SVC
                      - SYP
                      - THB
                      - TRL
                      - TRY
                      - TTD
                      - TVD
                      - TWD
                      - UAH
                      - UYU
                      - UZS
                      - VEF
                      - VND
                      - XCD
                      - YER
                      - ZAR
                      - ZWD
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `monetary_unit`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `monetary_unit`')
            vals = set()
            vals.add("USD")
            vals.add("AFN")
            vals.add("ALL")
            vals.add("ANG")
            vals.add("ARS")
            vals.add("AUD")
            vals.add("AWG")
            vals.add("AZN")
            vals.add("BAM")
            vals.add("BBD")
            vals.add("BGN")
            vals.add("BMD")
            vals.add("BND")
            vals.add("BOB")
            vals.add("BRL")
            vals.add("BSD")
            vals.add("BWP")
            vals.add("BYR")
            vals.add("BZD")
            vals.add("CAD")
            vals.add("CHF")
            vals.add("CLP")
            vals.add("CNY")
            vals.add("COP")
            vals.add("CRC")
            vals.add("CUP")
            vals.add("CZK")
            vals.add("DKK")
            vals.add("DOP")
            vals.add("EEK")
            vals.add("EGP")
            vals.add("EUR")
            vals.add("FJD")
            vals.add("GBP")
            vals.add("GHC")
            vals.add("GIP")
            vals.add("GTQ")
            vals.add("GYD")
            vals.add("HKD")
            vals.add("HNL")
            vals.add("HRK")
            vals.add("HUF")
            vals.add("IDR")
            vals.add("ILS")
            vals.add("IMP")
            vals.add("INR")
            vals.add("IRR")
            vals.add("ISK")
            vals.add("JEP")
            vals.add("JMD")
            vals.add("JPY")
            vals.add("KGS")
            vals.add("KHR")
            vals.add("KPW")
            vals.add("KRW")
            vals.add("KYD")
            vals.add("KZT")
            vals.add("LAK")
            vals.add("LBP")
            vals.add("LKR")
            vals.add("LRD")
            vals.add("LTL")
            vals.add("LVL")
            vals.add("MKD")
            vals.add("MNT")
            vals.add("MUR")
            vals.add("MXN")
            vals.add("MYR")
            vals.add("MZN")
            vals.add("NAD")
            vals.add("NGN")
            vals.add("NIO")
            vals.add("NOK")
            vals.add("NPR")
            vals.add("NZD")
            vals.add("OMR")
            vals.add("PAB")
            vals.add("PEN")
            vals.add("PHP")
            vals.add("PKR")
            vals.add("PLN")
            vals.add("PYG")
            vals.add("QAR")
            vals.add("RON")
            vals.add("RSD")
            vals.add("RUB")
            vals.add("SAR")
            vals.add("SBD")
            vals.add("SCR")
            vals.add("SEK")
            vals.add("SGD")
            vals.add("SHP")
            vals.add("SOS")
            vals.add("SRD")
            vals.add("SVC")
            vals.add("SYP")
            vals.add("THB")
            vals.add("TRL")
            vals.add("TRY")
            vals.add("TTD")
            vals.add("TVD")
            vals.add("TWD")
            vals.add("UAH")
            vals.add("UYU")
            vals.add("UZS")
            vals.add("VEF")
            vals.add("VND")
            vals.add("XCD")
            vals.add("YER")
            vals.add("ZAR")
            vals.add("ZWD")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `monetary_unit`'.format(value))

        self._data["Monetary Unit"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.monetary_unit))
        return ",".join(out)

class ComponentCostAdjustments(object):
    """ Corresponds to IDD object `ComponentCost:Adjustments`
        Used to perform various modifications to the construction costs to arrive at an
        estimate for total project costs. This object allows extending the line item model
        so that the overall costs of the project will reflect various profit and fees.
    
    """
    internal_name = "ComponentCost:Adjustments"
    field_count = 7
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ComponentCost:Adjustments`
        """
        self._data = OrderedDict()
        self._data["Miscellaneous Cost per Conditioned Area"] = None
        self._data["Design and Engineering Fees"] = None
        self._data["Contractor Fee"] = None
        self._data["Contingency"] = None
        self._data["Permits, Bonding and Insurance"] = None
        self._data["Commissioning Fee"] = None
        self._data["Regional Adjustment Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.miscellaneous_cost_per_conditioned_area = None
        else:
            self.miscellaneous_cost_per_conditioned_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.design_and_engineering_fees = None
        else:
            self.design_and_engineering_fees = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.contractor_fee = None
        else:
            self.contractor_fee = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.contingency = None
        else:
            self.contingency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.permits_bonding_and_insurance = None
        else:
            self.permits_bonding_and_insurance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.commissioning_fee = None
        else:
            self.commissioning_fee = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.regional_adjustment_factor = None
        else:
            self.regional_adjustment_factor = vals[i]
        i += 1

    @property
    def miscellaneous_cost_per_conditioned_area(self):
        """Get miscellaneous_cost_per_conditioned_area

        Returns:
            float: the value of `miscellaneous_cost_per_conditioned_area` or None if not set
        """
        return self._data["Miscellaneous Cost per Conditioned Area"]

    @miscellaneous_cost_per_conditioned_area.setter
    def miscellaneous_cost_per_conditioned_area(self, value=None):
        """  Corresponds to IDD Field `miscellaneous_cost_per_conditioned_area`
        based on conditioned floor area
        for cost not accounted for in current line item cost model

        Args:
            value (float): value for IDD Field `miscellaneous_cost_per_conditioned_area`
                Units: $/m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `miscellaneous_cost_per_conditioned_area`'.format(value))

        self._data["Miscellaneous Cost per Conditioned Area"] = value

    @property
    def design_and_engineering_fees(self):
        """Get design_and_engineering_fees

        Returns:
            float: the value of `design_and_engineering_fees` or None if not set
        """
        return self._data["Design and Engineering Fees"]

    @design_and_engineering_fees.setter
    def design_and_engineering_fees(self, value=None):
        """  Corresponds to IDD Field `design_and_engineering_fees`

        Args:
            value (float): value for IDD Field `design_and_engineering_fees`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_and_engineering_fees`'.format(value))

        self._data["Design and Engineering Fees"] = value

    @property
    def contractor_fee(self):
        """Get contractor_fee

        Returns:
            float: the value of `contractor_fee` or None if not set
        """
        return self._data["Contractor Fee"]

    @contractor_fee.setter
    def contractor_fee(self, value=None):
        """  Corresponds to IDD Field `contractor_fee`

        Args:
            value (float): value for IDD Field `contractor_fee`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `contractor_fee`'.format(value))

        self._data["Contractor Fee"] = value

    @property
    def contingency(self):
        """Get contingency

        Returns:
            float: the value of `contingency` or None if not set
        """
        return self._data["Contingency"]

    @contingency.setter
    def contingency(self, value=None):
        """  Corresponds to IDD Field `contingency`

        Args:
            value (float): value for IDD Field `contingency`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `contingency`'.format(value))

        self._data["Contingency"] = value

    @property
    def permits_bonding_and_insurance(self):
        """Get permits_bonding_and_insurance

        Returns:
            float: the value of `permits_bonding_and_insurance` or None if not set
        """
        return self._data["Permits, Bonding and Insurance"]

    @permits_bonding_and_insurance.setter
    def permits_bonding_and_insurance(self, value=None):
        """  Corresponds to IDD Field `permits_bonding_and_insurance`

        Args:
            value (float): value for IDD Field `permits_bonding_and_insurance`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `permits_bonding_and_insurance`'.format(value))

        self._data["Permits, Bonding and Insurance"] = value

    @property
    def commissioning_fee(self):
        """Get commissioning_fee

        Returns:
            float: the value of `commissioning_fee` or None if not set
        """
        return self._data["Commissioning Fee"]

    @commissioning_fee.setter
    def commissioning_fee(self, value=None):
        """  Corresponds to IDD Field `commissioning_fee`

        Args:
            value (float): value for IDD Field `commissioning_fee`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `commissioning_fee`'.format(value))

        self._data["Commissioning Fee"] = value

    @property
    def regional_adjustment_factor(self):
        """Get regional_adjustment_factor

        Returns:
            float: the value of `regional_adjustment_factor` or None if not set
        """
        return self._data["Regional Adjustment Factor"]

    @regional_adjustment_factor.setter
    def regional_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `regional_adjustment_factor`
        for use with average data in line item and Misc cost models

        Args:
            value (float): value for IDD Field `regional_adjustment_factor`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `regional_adjustment_factor`'.format(value))

        self._data["Regional Adjustment Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.miscellaneous_cost_per_conditioned_area))
        out.append(self._to_str(self.design_and_engineering_fees))
        out.append(self._to_str(self.contractor_fee))
        out.append(self._to_str(self.contingency))
        out.append(self._to_str(self.permits_bonding_and_insurance))
        out.append(self._to_str(self.commissioning_fee))
        out.append(self._to_str(self.regional_adjustment_factor))
        return ",".join(out)

class ComponentCostReference(object):
    """ Corresponds to IDD object `ComponentCost:Reference`
        Used to allow comparing the current cost estimate to the results of a previous
        estimate for a reference building. This object parallels the ComponentCost:Adjustments
        object but adds a field for entering the cost line item model result for the reference
        building. The factors entered in this object are applied to the reference building
        while the factors listed in the ComponentCost:Adjustments object are applied to the
        current building model cost estimate.
    
    """
    internal_name = "ComponentCost:Reference"
    field_count = 8
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ComponentCost:Reference`
        """
        self._data = OrderedDict()
        self._data["Reference Building Line Item Costs"] = None
        self._data["Reference Building Miscellaneous Cost per Conditioned Area"] = None
        self._data["Reference Building Design and Engineering Fees"] = None
        self._data["Reference Building Contractor Fee"] = None
        self._data["Reference Building Contingency"] = None
        self._data["Reference Building Permits, Bonding and Insurance"] = None
        self._data["Reference Building Commissioning Fee"] = None
        self._data["Reference Building Regional Adjustment Factor"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.reference_building_line_item_costs = None
        else:
            self.reference_building_line_item_costs = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_miscellaneous_cost_per_conditioned_area = None
        else:
            self.reference_building_miscellaneous_cost_per_conditioned_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_design_and_engineering_fees = None
        else:
            self.reference_building_design_and_engineering_fees = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_contractor_fee = None
        else:
            self.reference_building_contractor_fee = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_contingency = None
        else:
            self.reference_building_contingency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_permits_bonding_and_insurance = None
        else:
            self.reference_building_permits_bonding_and_insurance = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_commissioning_fee = None
        else:
            self.reference_building_commissioning_fee = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reference_building_regional_adjustment_factor = None
        else:
            self.reference_building_regional_adjustment_factor = vals[i]
        i += 1

    @property
    def reference_building_line_item_costs(self):
        """Get reference_building_line_item_costs

        Returns:
            float: the value of `reference_building_line_item_costs` or None if not set
        """
        return self._data["Reference Building Line Item Costs"]

    @reference_building_line_item_costs.setter
    def reference_building_line_item_costs(self, value=None):
        """  Corresponds to IDD Field `reference_building_line_item_costs`
        should be comparable to the components in current line item cost model

        Args:
            value (float): value for IDD Field `reference_building_line_item_costs`
                Units: $
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_line_item_costs`'.format(value))

        self._data["Reference Building Line Item Costs"] = value

    @property
    def reference_building_miscellaneous_cost_per_conditioned_area(self):
        """Get reference_building_miscellaneous_cost_per_conditioned_area

        Returns:
            float: the value of `reference_building_miscellaneous_cost_per_conditioned_area` or None if not set
        """
        return self._data["Reference Building Miscellaneous Cost per Conditioned Area"]

    @reference_building_miscellaneous_cost_per_conditioned_area.setter
    def reference_building_miscellaneous_cost_per_conditioned_area(self, value=None):
        """  Corresponds to IDD Field `reference_building_miscellaneous_cost_per_conditioned_area`
        based on conditioned floor area
        for cost not accounted for in reference line item costs

        Args:
            value (float): value for IDD Field `reference_building_miscellaneous_cost_per_conditioned_area`
                Units: $/m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_miscellaneous_cost_per_conditioned_area`'.format(value))

        self._data["Reference Building Miscellaneous Cost per Conditioned Area"] = value

    @property
    def reference_building_design_and_engineering_fees(self):
        """Get reference_building_design_and_engineering_fees

        Returns:
            float: the value of `reference_building_design_and_engineering_fees` or None if not set
        """
        return self._data["Reference Building Design and Engineering Fees"]

    @reference_building_design_and_engineering_fees.setter
    def reference_building_design_and_engineering_fees(self, value=None):
        """  Corresponds to IDD Field `reference_building_design_and_engineering_fees`

        Args:
            value (float): value for IDD Field `reference_building_design_and_engineering_fees`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_design_and_engineering_fees`'.format(value))

        self._data["Reference Building Design and Engineering Fees"] = value

    @property
    def reference_building_contractor_fee(self):
        """Get reference_building_contractor_fee

        Returns:
            float: the value of `reference_building_contractor_fee` or None if not set
        """
        return self._data["Reference Building Contractor Fee"]

    @reference_building_contractor_fee.setter
    def reference_building_contractor_fee(self, value=None):
        """  Corresponds to IDD Field `reference_building_contractor_fee`

        Args:
            value (float): value for IDD Field `reference_building_contractor_fee`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_contractor_fee`'.format(value))

        self._data["Reference Building Contractor Fee"] = value

    @property
    def reference_building_contingency(self):
        """Get reference_building_contingency

        Returns:
            float: the value of `reference_building_contingency` or None if not set
        """
        return self._data["Reference Building Contingency"]

    @reference_building_contingency.setter
    def reference_building_contingency(self, value=None):
        """  Corresponds to IDD Field `reference_building_contingency`

        Args:
            value (float): value for IDD Field `reference_building_contingency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_contingency`'.format(value))

        self._data["Reference Building Contingency"] = value

    @property
    def reference_building_permits_bonding_and_insurance(self):
        """Get reference_building_permits_bonding_and_insurance

        Returns:
            float: the value of `reference_building_permits_bonding_and_insurance` or None if not set
        """
        return self._data["Reference Building Permits, Bonding and Insurance"]

    @reference_building_permits_bonding_and_insurance.setter
    def reference_building_permits_bonding_and_insurance(self, value=None):
        """  Corresponds to IDD Field `reference_building_permits_bonding_and_insurance`

        Args:
            value (float): value for IDD Field `reference_building_permits_bonding_and_insurance`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_permits_bonding_and_insurance`'.format(value))

        self._data["Reference Building Permits, Bonding and Insurance"] = value

    @property
    def reference_building_commissioning_fee(self):
        """Get reference_building_commissioning_fee

        Returns:
            float: the value of `reference_building_commissioning_fee` or None if not set
        """
        return self._data["Reference Building Commissioning Fee"]

    @reference_building_commissioning_fee.setter
    def reference_building_commissioning_fee(self, value=None):
        """  Corresponds to IDD Field `reference_building_commissioning_fee`

        Args:
            value (float): value for IDD Field `reference_building_commissioning_fee`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_commissioning_fee`'.format(value))

        self._data["Reference Building Commissioning Fee"] = value

    @property
    def reference_building_regional_adjustment_factor(self):
        """Get reference_building_regional_adjustment_factor

        Returns:
            float: the value of `reference_building_regional_adjustment_factor` or None if not set
        """
        return self._data["Reference Building Regional Adjustment Factor"]

    @reference_building_regional_adjustment_factor.setter
    def reference_building_regional_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `reference_building_regional_adjustment_factor`
        for use with average data in line item and Misc cost models

        Args:
            value (float): value for IDD Field `reference_building_regional_adjustment_factor`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `reference_building_regional_adjustment_factor`'.format(value))

        self._data["Reference Building Regional Adjustment Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.reference_building_line_item_costs))
        out.append(self._to_str(self.reference_building_miscellaneous_cost_per_conditioned_area))
        out.append(self._to_str(self.reference_building_design_and_engineering_fees))
        out.append(self._to_str(self.reference_building_contractor_fee))
        out.append(self._to_str(self.reference_building_contingency))
        out.append(self._to_str(self.reference_building_permits_bonding_and_insurance))
        out.append(self._to_str(self.reference_building_commissioning_fee))
        out.append(self._to_str(self.reference_building_regional_adjustment_factor))
        return ",".join(out)

class ComponentCostLineItem(object):
    """ Corresponds to IDD object `ComponentCost:LineItem`
        Each instance of this object creates a cost line item and will contribute to the total
        for a cost estimate.
    
    """
    internal_name = "ComponentCost:LineItem"
    field_count = 13
    required_fields = ["Line Item Type", "Item Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ComponentCost:LineItem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Type"] = None
        self._data["Line Item Type"] = None
        self._data["Item Name"] = None
        self._data["Object End-Use Key"] = None
        self._data["Cost per Each"] = None
        self._data["Cost per Area"] = None
        self._data["Cost per Unit of Output Capacity"] = None
        self._data["Cost per Unit of Output Capacity per COP"] = None
        self._data["Cost per Volume"] = None
        self._data["Cost per Volume Rate"] = None
        self._data["Cost per Energy per Temperature Difference"] = None
        self._data["Quantity"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.type = None
        else:
            self.type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.line_item_type = None
        else:
            self.line_item_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.item_name = None
        else:
            self.item_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.object_enduse_key = None
        else:
            self.object_enduse_key = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_each = None
        else:
            self.cost_per_each = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_area = None
        else:
            self.cost_per_area = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_unit_of_output_capacity = None
        else:
            self.cost_per_unit_of_output_capacity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_unit_of_output_capacity_per_cop = None
        else:
            self.cost_per_unit_of_output_capacity_per_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_volume = None
        else:
            self.cost_per_volume = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_volume_rate = None
        else:
            self.cost_per_volume_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_energy_per_temperature_difference = None
        else:
            self.cost_per_energy_per_temperature_difference = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.quantity = None
        else:
            self.quantity = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def type(self):
        """Get type

        Returns:
            str: the value of `type` or None if not set
        """
        return self._data["Type"]

    @type.setter
    def type(self, value=None):
        """  Corresponds to IDD Field `type`

        Args:
            value (str): value for IDD Field `type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `type`')

        self._data["Type"] = value

    @property
    def line_item_type(self):
        """Get line_item_type

        Returns:
            str: the value of `line_item_type` or None if not set
        """
        return self._data["Line Item Type"]

    @line_item_type.setter
    def line_item_type(self, value=None):
        """  Corresponds to IDD Field `line_item_type`
        extend choice-keys as Cases are added to code

        Args:
            value (str): value for IDD Field `line_item_type`
                Accepted values are:
                      - General
                      - Construction
                      - Coil:DX
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Heating:Gas
                      - Chiller:Electric
                      - Daylighting:Controls
                      - Shading:Zone:Detailed
                      - Lights
                      - Generator:Photovoltaic
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `line_item_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `line_item_type`')
            vals = set()
            vals.add("General")
            vals.add("Construction")
            vals.add("Coil:DX")
            vals.add("Coil:Cooling:DX:SingleSpeed")
            vals.add("Coil:Heating:Gas")
            vals.add("Chiller:Electric")
            vals.add("Daylighting:Controls")
            vals.add("Shading:Zone:Detailed")
            vals.add("Lights")
            vals.add("Generator:Photovoltaic")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `line_item_type`'.format(value))

        self._data["Line Item Type"] = value

    @property
    def item_name(self):
        """Get item_name

        Returns:
            str: the value of `item_name` or None if not set
        """
        return self._data["Item Name"]

    @item_name.setter
    def item_name(self, value=None):
        """  Corresponds to IDD Field `item_name`
        wildcard "*" is acceptable for some components

        Args:
            value (str): value for IDD Field `item_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `item_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `item_name`')

        self._data["Item Name"] = value

    @property
    def object_enduse_key(self):
        """Get object_enduse_key

        Returns:
            str: the value of `object_enduse_key` or None if not set
        """
        return self._data["Object End-Use Key"]

    @object_enduse_key.setter
    def object_enduse_key(self, value=None):
        """  Corresponds to IDD Field `object_enduse_key`
        not yet used

        Args:
            value (str): value for IDD Field `object_enduse_key`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `object_enduse_key`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `object_enduse_key`')

        self._data["Object End-Use Key"] = value

    @property
    def cost_per_each(self):
        """Get cost_per_each

        Returns:
            float: the value of `cost_per_each` or None if not set
        """
        return self._data["Cost per Each"]

    @cost_per_each.setter
    def cost_per_each(self, value=None):
        """  Corresponds to IDD Field `cost_per_each`

        Args:
            value (float): value for IDD Field `cost_per_each`
                Units: $
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_each`'.format(value))

        self._data["Cost per Each"] = value

    @property
    def cost_per_area(self):
        """Get cost_per_area

        Returns:
            float: the value of `cost_per_area` or None if not set
        """
        return self._data["Cost per Area"]

    @cost_per_area.setter
    def cost_per_area(self, value=None):
        """  Corresponds to IDD Field `cost_per_area`

        Args:
            value (float): value for IDD Field `cost_per_area`
                Units: $/m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_area`'.format(value))

        self._data["Cost per Area"] = value

    @property
    def cost_per_unit_of_output_capacity(self):
        """Get cost_per_unit_of_output_capacity

        Returns:
            float: the value of `cost_per_unit_of_output_capacity` or None if not set
        """
        return self._data["Cost per Unit of Output Capacity"]

    @cost_per_unit_of_output_capacity.setter
    def cost_per_unit_of_output_capacity(self, value=None):
        """  Corresponds to IDD Field `cost_per_unit_of_output_capacity`

        Args:
            value (float): value for IDD Field `cost_per_unit_of_output_capacity`
                Units: $/kW
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_unit_of_output_capacity`'.format(value))

        self._data["Cost per Unit of Output Capacity"] = value

    @property
    def cost_per_unit_of_output_capacity_per_cop(self):
        """Get cost_per_unit_of_output_capacity_per_cop

        Returns:
            float: the value of `cost_per_unit_of_output_capacity_per_cop` or None if not set
        """
        return self._data["Cost per Unit of Output Capacity per COP"]

    @cost_per_unit_of_output_capacity_per_cop.setter
    def cost_per_unit_of_output_capacity_per_cop(self, value=None):
        """  Corresponds to IDD Field `cost_per_unit_of_output_capacity_per_cop`
        The value is per change in COP.

        Args:
            value (float): value for IDD Field `cost_per_unit_of_output_capacity_per_cop`
                Units: $/kW
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_unit_of_output_capacity_per_cop`'.format(value))

        self._data["Cost per Unit of Output Capacity per COP"] = value

    @property
    def cost_per_volume(self):
        """Get cost_per_volume

        Returns:
            float: the value of `cost_per_volume` or None if not set
        """
        return self._data["Cost per Volume"]

    @cost_per_volume.setter
    def cost_per_volume(self, value=None):
        """  Corresponds to IDD Field `cost_per_volume`

        Args:
            value (float): value for IDD Field `cost_per_volume`
                Units: $/m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_volume`'.format(value))

        self._data["Cost per Volume"] = value

    @property
    def cost_per_volume_rate(self):
        """Get cost_per_volume_rate

        Returns:
            float: the value of `cost_per_volume_rate` or None if not set
        """
        return self._data["Cost per Volume Rate"]

    @cost_per_volume_rate.setter
    def cost_per_volume_rate(self, value=None):
        """  Corresponds to IDD Field `cost_per_volume_rate`

        Args:
            value (float): value for IDD Field `cost_per_volume_rate`
                Units: $/(m3/s)
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_volume_rate`'.format(value))

        self._data["Cost per Volume Rate"] = value

    @property
    def cost_per_energy_per_temperature_difference(self):
        """Get cost_per_energy_per_temperature_difference

        Returns:
            float: the value of `cost_per_energy_per_temperature_difference` or None if not set
        """
        return self._data["Cost per Energy per Temperature Difference"]

    @cost_per_energy_per_temperature_difference.setter
    def cost_per_energy_per_temperature_difference(self, value=None):
        """  Corresponds to IDD Field `cost_per_energy_per_temperature_difference`
        as in for use with UA sizing of Coils

        Args:
            value (float): value for IDD Field `cost_per_energy_per_temperature_difference`
                Units: $/(W/K)
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost_per_energy_per_temperature_difference`'.format(value))

        self._data["Cost per Energy per Temperature Difference"] = value

    @property
    def quantity(self):
        """Get quantity

        Returns:
            float: the value of `quantity` or None if not set
        """
        return self._data["Quantity"]

    @quantity.setter
    def quantity(self, value=None):
        """  Corresponds to IDD Field `quantity`
        optional for use with Cost per Each and "General" object Type

        Args:
            value (float): value for IDD Field `quantity`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `quantity`'.format(value))

        self._data["Quantity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.type))
        out.append(self._to_str(self.line_item_type))
        out.append(self._to_str(self.item_name))
        out.append(self._to_str(self.object_enduse_key))
        out.append(self._to_str(self.cost_per_each))
        out.append(self._to_str(self.cost_per_area))
        out.append(self._to_str(self.cost_per_unit_of_output_capacity))
        out.append(self._to_str(self.cost_per_unit_of_output_capacity_per_cop))
        out.append(self._to_str(self.cost_per_volume))
        out.append(self._to_str(self.cost_per_volume_rate))
        out.append(self._to_str(self.cost_per_energy_per_temperature_difference))
        out.append(self._to_str(self.quantity))
        return ",".join(out)

class UtilityCostTariff(object):
    """ Corresponds to IDD object `UtilityCost:Tariff`
        Defines the name of a utility cost tariff, the type of tariff, and other details
        about the overall tariff. Each other object that is part of the tariff model
        references the tariff name.  See UtilityCost:Charge:Simple, UtilityCost:Charge:Block,
        UtilityCost:Ratchet, UtilityCost:Qualify, UtilityCost:Variable and
        UtilityCost:Computation objects.
    
    """
    internal_name = "UtilityCost:Tariff"
    field_count = 15
    required_fields = ["Name", "Output Meter Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Tariff`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Output Meter Name"] = None
        self._data["Conversion Factor Choice"] = None
        self._data["Energy Conversion Factor"] = None
        self._data["Demand Conversion Factor"] = None
        self._data["Time of Use Period Schedule Name"] = None
        self._data["Season Schedule Name"] = None
        self._data["Month Schedule Name"] = None
        self._data["Demand Window Length"] = None
        self._data["Monthly Charge or Variable Name"] = None
        self._data["Minimum Monthly Charge or Variable Name"] = None
        self._data["Real Time Pricing Charge Schedule Name"] = None
        self._data["Customer Baseline Load Schedule Name"] = None
        self._data["Group Name"] = None
        self._data["Buy Or Sell"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_meter_name = None
        else:
            self.output_meter_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.conversion_factor_choice = None
        else:
            self.conversion_factor_choice = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.energy_conversion_factor = None
        else:
            self.energy_conversion_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_conversion_factor = None
        else:
            self.demand_conversion_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.time_of_use_period_schedule_name = None
        else:
            self.time_of_use_period_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.season_schedule_name = None
        else:
            self.season_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.month_schedule_name = None
        else:
            self.month_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.demand_window_length = None
        else:
            self.demand_window_length = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.monthly_charge_or_variable_name = None
        else:
            self.monthly_charge_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.minimum_monthly_charge_or_variable_name = None
        else:
            self.minimum_monthly_charge_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.real_time_pricing_charge_schedule_name = None
        else:
            self.real_time_pricing_charge_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.customer_baseline_load_schedule_name = None
        else:
            self.customer_baseline_load_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.group_name = None
        else:
            self.group_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.buy_or_sell = None
        else:
            self.buy_or_sell = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        The name of the tariff. Tariffs are sometimes called rates. The name is used in identifying
        the output results and in associating all of the charges and other objects that make up a tariff.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def output_meter_name(self):
        """Get output_meter_name

        Returns:
            str: the value of `output_meter_name` or None if not set
        """
        return self._data["Output Meter Name"]

    @output_meter_name.setter
    def output_meter_name(self, value=None):
        """  Corresponds to IDD Field `output_meter_name`
        The name of any standard meter or custom meter or but usually set to either Electricity:Facility or Gas:Facility

        Args:
            value (str): value for IDD Field `output_meter_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_meter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_meter_name`')

        self._data["Output Meter Name"] = value

    @property
    def conversion_factor_choice(self):
        """Get conversion_factor_choice

        Returns:
            str: the value of `conversion_factor_choice` or None if not set
        """
        return self._data["Conversion Factor Choice"]

    @conversion_factor_choice.setter
    def conversion_factor_choice(self, value=None):
        """  Corresponds to IDD Field `conversion_factor_choice`
        A choice that allows several different predefined conversion factors to be used; otherwise user
        defined conversion factors are used as defined in the next two fields.

        Args:
            value (str): value for IDD Field `conversion_factor_choice`
                Accepted values are:
                      - UserDefined
                      - kWh
                      - Therm
                      - MMBtu
                      - MJ
                      - kBtu
                      - MCF
                      - CCF
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `conversion_factor_choice`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `conversion_factor_choice`')
            vals = set()
            vals.add("UserDefined")
            vals.add("kWh")
            vals.add("Therm")
            vals.add("MMBtu")
            vals.add("MJ")
            vals.add("kBtu")
            vals.add("MCF")
            vals.add("CCF")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `conversion_factor_choice`'.format(value))

        self._data["Conversion Factor Choice"] = value

    @property
    def energy_conversion_factor(self):
        """Get energy_conversion_factor

        Returns:
            float: the value of `energy_conversion_factor` or None if not set
        """
        return self._data["Energy Conversion Factor"]

    @energy_conversion_factor.setter
    def energy_conversion_factor(self, value=None):
        """  Corresponds to IDD Field `energy_conversion_factor`
        Is a multiplier used to convert energy into the units specified by the utility in their tariff. If
        left blank it defaults to 1 (no conversion). This field should will be used only if Conversion Factor
        Choice is set to UserDefined.  Within EnergyPlus energy always has units of J (joules).  For
        conversion from J to kWh use the value of 0.0000002778. This is also used for all objects that
        reference the UtilityCost:Tariff.

        Args:
            value (float): value for IDD Field `energy_conversion_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `energy_conversion_factor`'.format(value))

        self._data["Energy Conversion Factor"] = value

    @property
    def demand_conversion_factor(self):
        """Get demand_conversion_factor

        Returns:
            float: the value of `demand_conversion_factor` or None if not set
        """
        return self._data["Demand Conversion Factor"]

    @demand_conversion_factor.setter
    def demand_conversion_factor(self, value=None):
        """  Corresponds to IDD Field `demand_conversion_factor`
        Is a multiplier used to convert demand into the units specified by the utility in their tariff. If
        left blank it defaults to 1 (no conversion).  This field should will be used only if Conversion
        Factor Choice is set to UserDefined.  Within EnergyPlus demand always has units of J/s (joules/sec)
        which equivalent to W (watts).  For conversion from W to kW use the value of 0.001. This is also used
        for all objects that reference the UtilityCost:Tariff.

        Args:
            value (float): value for IDD Field `demand_conversion_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `demand_conversion_factor`'.format(value))

        self._data["Demand Conversion Factor"] = value

    @property
    def time_of_use_period_schedule_name(self):
        """Get time_of_use_period_schedule_name

        Returns:
            str: the value of `time_of_use_period_schedule_name` or None if not set
        """
        return self._data["Time of Use Period Schedule Name"]

    @time_of_use_period_schedule_name.setter
    def time_of_use_period_schedule_name(self, value=None):
        """  Corresponds to IDD Field `time_of_use_period_schedule_name`
        The name of the schedule that defines the time-of-use periods that occur each day. The values for the
        different variables are: 1 for Peak. 2 for Shoulder. 3 for OffPeak. 4 for MidPeak.

        Args:
            value (str): value for IDD Field `time_of_use_period_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `time_of_use_period_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `time_of_use_period_schedule_name`')

        self._data["Time of Use Period Schedule Name"] = value

    @property
    def season_schedule_name(self):
        """Get season_schedule_name

        Returns:
            str: the value of `season_schedule_name` or None if not set
        """
        return self._data["Season Schedule Name"]

    @season_schedule_name.setter
    def season_schedule_name(self, value=None):
        """  Corresponds to IDD Field `season_schedule_name`
        The name of a schedule that defines the seasons.  The schedule values are: 1 for Winter. 2 for Spring.
        3 for Summer. 4 for Autumn.

        Args:
            value (str): value for IDD Field `season_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `season_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `season_schedule_name`')

        self._data["Season Schedule Name"] = value

    @property
    def month_schedule_name(self):
        """Get month_schedule_name

        Returns:
            str: the value of `month_schedule_name` or None if not set
        """
        return self._data["Month Schedule Name"]

    @month_schedule_name.setter
    def month_schedule_name(self, value=None):
        """  Corresponds to IDD Field `month_schedule_name`
        The name of the schedule that defines the billing periods of the year. Normally this entry is allowed
        to default and a schedule will be internally used that has the breaks between billing periods occurring
        at the same time as the breaks between months i.e. at midnight prior to the first day of the month.
        If other billing periods are used such as two month cycles or a single bill for an entire season such
        as some natural gas companies do in the summer then the month schedule may be used to redefine it.
        Make sure that the month schedule and season schedule are consistent otherwise an error will be issued.

        Args:
            value (str): value for IDD Field `month_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `month_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `month_schedule_name`')

        self._data["Month Schedule Name"] = value

    @property
    def demand_window_length(self):
        """Get demand_window_length

        Returns:
            str: the value of `demand_window_length` or None if not set
        """
        return self._data["Demand Window Length"]

    @demand_window_length.setter
    def demand_window_length(self, value=None):
        """  Corresponds to IDD Field `demand_window_length`
        The determination of demand can vary by utility. Some utilities use the peak instantaneous demand
        measured but most use a fifteen minute average demand or a one hour average demand. Some gas utilities
        measure demand as the use during the peak day or peak week.

        Args:
            value (str): value for IDD Field `demand_window_length`
                Accepted values are:
                      - QuarterHour
                      - HalfHour
                      - FullHour
                      - Day
                      - Week
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `demand_window_length`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `demand_window_length`')
            vals = set()
            vals.add("QuarterHour")
            vals.add("HalfHour")
            vals.add("FullHour")
            vals.add("Day")
            vals.add("Week")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `demand_window_length`'.format(value))

        self._data["Demand Window Length"] = value

    @property
    def monthly_charge_or_variable_name(self):
        """Get monthly_charge_or_variable_name

        Returns:
            str: the value of `monthly_charge_or_variable_name` or None if not set
        """
        return self._data["Monthly Charge or Variable Name"]

    @monthly_charge_or_variable_name.setter
    def monthly_charge_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `monthly_charge_or_variable_name`
        The fixed monthly service charge that many utilities have.  The entry may be numeric and gets added to
        the ServiceCharges variable or if a variable name is entered here its values for each month are used.

        Args:
            value (str): value for IDD Field `monthly_charge_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `monthly_charge_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `monthly_charge_or_variable_name`')

        self._data["Monthly Charge or Variable Name"] = value

    @property
    def minimum_monthly_charge_or_variable_name(self):
        """Get minimum_monthly_charge_or_variable_name

        Returns:
            str: the value of `minimum_monthly_charge_or_variable_name` or None if not set
        """
        return self._data["Minimum Monthly Charge or Variable Name"]

    @minimum_monthly_charge_or_variable_name.setter
    def minimum_monthly_charge_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `minimum_monthly_charge_or_variable_name`
        The minimum total charge for the tariff or if a variable name is entered here its
        values for each month are used.

        Args:
            value (str): value for IDD Field `minimum_monthly_charge_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_monthly_charge_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_monthly_charge_or_variable_name`')

        self._data["Minimum Monthly Charge or Variable Name"] = value

    @property
    def real_time_pricing_charge_schedule_name(self):
        """Get real_time_pricing_charge_schedule_name

        Returns:
            str: the value of `real_time_pricing_charge_schedule_name` or None if not set
        """
        return self._data["Real Time Pricing Charge Schedule Name"]

    @real_time_pricing_charge_schedule_name.setter
    def real_time_pricing_charge_schedule_name(self, value=None):
        """  Corresponds to IDD Field `real_time_pricing_charge_schedule_name`
        Used with real time pricing rates. The name of a schedule that contains the cost of
        energy for that particular time period of the year. Real time rates can be modeled using a charge
        schedule with the actual real time prices entered in the schedule.

        Args:
            value (str): value for IDD Field `real_time_pricing_charge_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `real_time_pricing_charge_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `real_time_pricing_charge_schedule_name`')

        self._data["Real Time Pricing Charge Schedule Name"] = value

    @property
    def customer_baseline_load_schedule_name(self):
        """Get customer_baseline_load_schedule_name

        Returns:
            str: the value of `customer_baseline_load_schedule_name` or None if not set
        """
        return self._data["Customer Baseline Load Schedule Name"]

    @customer_baseline_load_schedule_name.setter
    def customer_baseline_load_schedule_name(self, value=None):
        """  Corresponds to IDD Field `customer_baseline_load_schedule_name`
        Used with real time pricing rates. The name of a schedule that contains the baseline
        energy use for the customer. Many real time rates apply the charges as a credit or debit only to the
        difference between the baseline use and the actual use.

        Args:
            value (str): value for IDD Field `customer_baseline_load_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `customer_baseline_load_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `customer_baseline_load_schedule_name`')

        self._data["Customer Baseline Load Schedule Name"] = value

    @property
    def group_name(self):
        """Get group_name

        Returns:
            str: the value of `group_name` or None if not set
        """
        return self._data["Group Name"]

    @group_name.setter
    def group_name(self, value=None):
        """  Corresponds to IDD Field `group_name`
        The group name of the tariff such as distribution transmission supplier etc. If more than one tariff
        with the same group name is present and qualifies only the lowest cost tariff is used. Usually the group
        name field is left blank which results in all tariffs using the same meter variable being compared and
        the lowest cost one being selected.

        Args:
            value (str): value for IDD Field `group_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `group_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `group_name`')

        self._data["Group Name"] = value

    @property
    def buy_or_sell(self):
        """Get buy_or_sell

        Returns:
            str: the value of `buy_or_sell` or None if not set
        """
        return self._data["Buy Or Sell"]

    @buy_or_sell.setter
    def buy_or_sell(self, value="BuyFromUtility"):
        """  Corresponds to IDD Field `buy_or_sell`
        Sets whether the tariff is used for buying selling or both to the utility.  This
        should be allowed to default to buyFromUtility unless a power generation system is included in the
        building that may generate more power than the building needs during the year

        Args:
            value (str): value for IDD Field `buy_or_sell`
                Accepted values are:
                      - BuyFromUtility
                      - SellToUtility
                      - NetMetering
                Default value: BuyFromUtility
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `buy_or_sell`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `buy_or_sell`')
            vals = set()
            vals.add("BuyFromUtility")
            vals.add("SellToUtility")
            vals.add("NetMetering")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `buy_or_sell`'.format(value))

        self._data["Buy Or Sell"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.output_meter_name))
        out.append(self._to_str(self.conversion_factor_choice))
        out.append(self._to_str(self.energy_conversion_factor))
        out.append(self._to_str(self.demand_conversion_factor))
        out.append(self._to_str(self.time_of_use_period_schedule_name))
        out.append(self._to_str(self.season_schedule_name))
        out.append(self._to_str(self.month_schedule_name))
        out.append(self._to_str(self.demand_window_length))
        out.append(self._to_str(self.monthly_charge_or_variable_name))
        out.append(self._to_str(self.minimum_monthly_charge_or_variable_name))
        out.append(self._to_str(self.real_time_pricing_charge_schedule_name))
        out.append(self._to_str(self.customer_baseline_load_schedule_name))
        out.append(self._to_str(self.group_name))
        out.append(self._to_str(self.buy_or_sell))
        return ",".join(out)

class UtilityCostQualify(object):
    """ Corresponds to IDD object `UtilityCost:Qualify`
        The qualify object allows only tariffs to be selected based on limits which may apply
        such as maximum or minimum demand requirements. If the results of the simulation fall
        outside of the range of qualifications, that tariff is still calculated but the
        "Qualified" entry will say "No" and the UtilityCost:Qualify that caused its exclusion
        is shown. Multiple UtilityCost:Qualify objects can appear for the same tarriff and
        they can be based on any variable.
    
    """
    internal_name = "UtilityCost:Qualify"
    field_count = 8
    required_fields = ["Name", "Tariff Name", "Variable Name", "Threshold Value or Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Qualify`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tariff Name"] = None
        self._data["Variable Name"] = None
        self._data["Qualify Type"] = None
        self._data["Threshold Value or Variable Name"] = None
        self._data["Season"] = None
        self._data["Threshold Test"] = None
        self._data["Number of Months"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tariff_name = None
        else:
            self.tariff_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.qualify_type = None
        else:
            self.qualify_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.threshold_value_or_variable_name = None
        else:
            self.threshold_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.season = None
        else:
            self.season = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.threshold_test = None
        else:
            self.threshold_test = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_months = None
        else:
            self.number_of_months = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Displayed in the report if the tariff does not qualify

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tariff_name(self):
        """Get tariff_name

        Returns:
            str: the value of `tariff_name` or None if not set
        """
        return self._data["Tariff Name"]

    @tariff_name.setter
    def tariff_name(self, value=None):
        """  Corresponds to IDD Field `tariff_name`
        The name of the UtilityCost:Tariff that is associated with this UtilityCost:Qualify.

        Args:
            value (str): value for IDD Field `tariff_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tariff_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tariff_name`')

        self._data["Tariff Name"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `variable_name`
        The name of the variable used. For energy and demand the automatically created variables totalEnergy
        and totalDemand should be used respectively.

        Args:
            value (str): value for IDD Field `variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')

        self._data["Variable Name"] = value

    @property
    def qualify_type(self):
        """Get qualify_type

        Returns:
            str: the value of `qualify_type` or None if not set
        """
        return self._data["Qualify Type"]

    @qualify_type.setter
    def qualify_type(self, value="Maximum"):
        """  Corresponds to IDD Field `qualify_type`

        Args:
            value (str): value for IDD Field `qualify_type`
                Accepted values are:
                      - Minimum
                      - Maximum
                Default value: Maximum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `qualify_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `qualify_type`')
            vals = set()
            vals.add("Minimum")
            vals.add("Maximum")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `qualify_type`'.format(value))

        self._data["Qualify Type"] = value

    @property
    def threshold_value_or_variable_name(self):
        """Get threshold_value_or_variable_name

        Returns:
            str: the value of `threshold_value_or_variable_name` or None if not set
        """
        return self._data["Threshold Value or Variable Name"]

    @threshold_value_or_variable_name.setter
    def threshold_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `threshold_value_or_variable_name`
        The minimum or maximum value for the qualify. If the variable has values that are less than this value
        when the qualify type is minimum then the tariff may be disqualified.  If the variable has values that
        are greater than this value when the qualify type is maximum then the tariff may be disqualified.

        Args:
            value (str): value for IDD Field `threshold_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `threshold_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `threshold_value_or_variable_name`')

        self._data["Threshold Value or Variable Name"] = value

    @property
    def season(self):
        """Get season

        Returns:
            str: the value of `season` or None if not set
        """
        return self._data["Season"]

    @season.setter
    def season(self, value=None):
        """  Corresponds to IDD Field `season`
        If the UtilityCost:Qualify only applies to a season enter the season name. If this field is left blank
        it defaults to Annual.

        Args:
            value (str): value for IDD Field `season`
                Accepted values are:
                      - Annual
                      - Summer
                      - Winter
                      - Spring
                      - Fall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `season`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `season`')
            vals = set()
            vals.add("Annual")
            vals.add("Summer")
            vals.add("Winter")
            vals.add("Spring")
            vals.add("Fall")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `season`'.format(value))

        self._data["Season"] = value

    @property
    def threshold_test(self):
        """Get threshold_test

        Returns:
            str: the value of `threshold_test` or None if not set
        """
        return self._data["Threshold Test"]

    @threshold_test.setter
    def threshold_test(self, value="Consecutive"):
        """  Corresponds to IDD Field `threshold_test`
        Uses the number in Number of Months in one of two different ways depending on the Threshold  Test. If
        the Threshold Test is set to Count then the qualification is based on the count of the total number
        of months per year.  If the Threshold Test is set to consecutive then the qualification is based on
        a consecutive number of months.

        Args:
            value (str): value for IDD Field `threshold_test`
                Accepted values are:
                      - Count
                      - Consecutive
                Default value: Consecutive
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `threshold_test`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `threshold_test`')
            vals = set()
            vals.add("Count")
            vals.add("Consecutive")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `threshold_test`'.format(value))

        self._data["Threshold Test"] = value

    @property
    def number_of_months(self):
        """Get number_of_months

        Returns:
            float: the value of `number_of_months` or None if not set
        """
        return self._data["Number of Months"]

    @number_of_months.setter
    def number_of_months(self, value=None):
        """  Corresponds to IDD Field `number_of_months`
        A number from 1 to 12.  If no value entered 12 is assumed when the qualify type is minimum and 1 when
        the qualify type is maximum.  This is the number of months that the threshold test applies to determine
        if the rate qualifies or not.  If the season is less than 12 months (if it is not annual) then the
        value is automatically reduced to the number of months of the seaon.

        Args:
            value (float): value for IDD Field `number_of_months`
                value >= 1.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_months`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_months`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `number_of_months`')

        self._data["Number of Months"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tariff_name))
        out.append(self._to_str(self.variable_name))
        out.append(self._to_str(self.qualify_type))
        out.append(self._to_str(self.threshold_value_or_variable_name))
        out.append(self._to_str(self.season))
        out.append(self._to_str(self.threshold_test))
        out.append(self._to_str(self.number_of_months))
        return ",".join(out)

class UtilityCostChargeSimple(object):
    """ Corresponds to IDD object `UtilityCost:Charge:Simple`
        UtilityCost:Charge:Simple is one of the most often used objects for tariff
        calculation. It is used to compute energy and demand charges that are very simple.
        It may also be used for taxes, surcharges and any other charges that occur on a
        utility bill. Multiple UtilityCost:Charge:Simple objects may be defined for a single
        tariff and they will be added together.
    
    """
    internal_name = "UtilityCost:Charge:Simple"
    field_count = 6
    required_fields = ["Name", "Tariff Name", "Source Variable", "Category Variable Name", "Cost per Unit Value or Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Charge:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tariff Name"] = None
        self._data["Source Variable"] = None
        self._data["Season"] = None
        self._data["Category Variable Name"] = None
        self._data["Cost per Unit Value or Variable Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tariff_name = None
        else:
            self.tariff_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_variable = None
        else:
            self.source_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.season = None
        else:
            self.season = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.category_variable_name = None
        else:
            self.category_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost_per_unit_value_or_variable_name = None
        else:
            self.cost_per_unit_value_or_variable_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Charge Variable Name
        This is the name associated with the UtilityCost:Charge:Simple object and will appear in the report.
        In addition the results of the UtilityCost:Charge:Simple calculation are stored in a variable with the
        same name.  That way the results may be used for further calculation.  Spaces are not significant in
        Charge variable names. They are removed during the utility bill calculation process.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tariff_name(self):
        """Get tariff_name

        Returns:
            str: the value of `tariff_name` or None if not set
        """
        return self._data["Tariff Name"]

    @tariff_name.setter
    def tariff_name(self, value=None):
        """  Corresponds to IDD Field `tariff_name`
        The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charge:Simple.

        Args:
            value (str): value for IDD Field `tariff_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tariff_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tariff_name`')

        self._data["Tariff Name"] = value

    @property
    def source_variable(self):
        """Get source_variable

        Returns:
            str: the value of `source_variable` or None if not set
        """
        return self._data["Source Variable"]

    @source_variable.setter
    def source_variable(self, value=None):
        """  Corresponds to IDD Field `source_variable`
        The name of the source used by the UtilityCost:Charge:Simple.  This is usually the name of the variable
        holding the energy or demand but may also be the name of any variable including the subtotal or basis
        if other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges
        ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then
        peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand.
        In addition see the Tariff Report to see other native variablles that may be available. Also you can
        create additional user defined variables to model complex tariffs.

        Args:
            value (str): value for IDD Field `source_variable`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_variable`')

        self._data["Source Variable"] = value

    @property
    def season(self):
        """Get season

        Returns:
            str: the value of `season` or None if not set
        """
        return self._data["Season"]

    @season.setter
    def season(self, value=None):
        """  Corresponds to IDD Field `season`
        If this is set to annual the calculations are performed for the UtilityCost:Charge:Simple for the entire
        year (all months) otherwise it is calculated only for those months in the season defined.

        Args:
            value (str): value for IDD Field `season`
                Accepted values are:
                      - Annual
                      - Summer
                      - Winter
                      - Spring
                      - Fall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `season`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `season`')
            vals = set()
            vals.add("Annual")
            vals.add("Summer")
            vals.add("Winter")
            vals.add("Spring")
            vals.add("Fall")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `season`'.format(value))

        self._data["Season"] = value

    @property
    def category_variable_name(self):
        """Get category_variable_name

        Returns:
            str: the value of `category_variable_name` or None if not set
        """
        return self._data["Category Variable Name"]

    @category_variable_name.setter
    def category_variable_name(self, value=None):
        """  Corresponds to IDD Field `category_variable_name`
        This field shows where the charge should be added. The reason to enter this field appropriately is so
        that the charge gets reported in a reasonable category.  The charge automatically gets added to the
        variable that is the category.

        Args:
            value (str): value for IDD Field `category_variable_name`
                Accepted values are:
                      - EnergyCharges
                      - DemandCharges
                      - ServiceCharges
                      - Basis
                      - Adjustment
                      - Surcharge
                      - Subtotal
                      - Taxes
                      - Total
                      - NotIncluded
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `category_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `category_variable_name`')
            vals = set()
            vals.add("EnergyCharges")
            vals.add("DemandCharges")
            vals.add("ServiceCharges")
            vals.add("Basis")
            vals.add("Adjustment")
            vals.add("Surcharge")
            vals.add("Subtotal")
            vals.add("Taxes")
            vals.add("Total")
            vals.add("NotIncluded")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `category_variable_name`'.format(value))

        self._data["Category Variable Name"] = value

    @property
    def cost_per_unit_value_or_variable_name(self):
        """Get cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Cost per Unit Value or Variable Name"]

    @cost_per_unit_value_or_variable_name.setter
    def cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `cost_per_unit_value_or_variable_name`
        This field contains either a single number or the name of a variable.  The number is multiplied with
        all of the energy or demand or other source that is specified in the source field.  If a variable is
        used then the monthly values of the variable are multiplied against the variable specified in the
        source field.  This field makes it easy to include a simple charge without specifying block sizes.
        This is a good way to include a tax or cost adjustment.

        Args:
            value (str): value for IDD Field `cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cost_per_unit_value_or_variable_name`')

        self._data["Cost per Unit Value or Variable Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tariff_name))
        out.append(self._to_str(self.source_variable))
        out.append(self._to_str(self.season))
        out.append(self._to_str(self.category_variable_name))
        out.append(self._to_str(self.cost_per_unit_value_or_variable_name))
        return ",".join(out)

class UtilityCostChargeBlock(object):
    """ Corresponds to IDD object `UtilityCost:Charge:Block`
        Used to compute energy and demand charges (or any other charges) that are structured
        in blocks of charges. Multiple UtilityCost:Charge:Block objects may be defined for a
        single tariff and they will be added together.
    
    """
    internal_name = "UtilityCost:Charge:Block"
    field_count = 37
    required_fields = ["Name", "Tariff Name", "Source Variable", "Category Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Charge:Block`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tariff Name"] = None
        self._data["Source Variable"] = None
        self._data["Season"] = None
        self._data["Category Variable Name"] = None
        self._data["Remaining Into Variable"] = None
        self._data["Block Size Multiplier Value or Variable Name"] = None
        self._data["Block Size 1 Value or Variable Name"] = None
        self._data["Block 1 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 2 Value or Variable Name"] = None
        self._data["Block 2 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 3 Value or Variable Name"] = None
        self._data["Block 3 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 4 Value or Variable Name"] = None
        self._data["Block 4 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 5 Value or Variable Name"] = None
        self._data["Block 5 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 6 Value or Variable Name"] = None
        self._data["Block 6 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 7 Value or Variable Name"] = None
        self._data["Block 7 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 8 Value or Variable Name"] = None
        self._data["Block 8 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 9 Value or Variable Name"] = None
        self._data["Block 9 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 10 Value or Variable Name"] = None
        self._data["Block 10 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 11 Value or Variable Name"] = None
        self._data["Block 11 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 12 Value or Variable Name"] = None
        self._data["Block 12 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 13 Value or Variable Name"] = None
        self._data["Block 13 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 14 Value or Variable Name"] = None
        self._data["Block 14 Cost per Unit Value or Variable Name"] = None
        self._data["Block Size 15 Value or Variable Name"] = None
        self._data["Block 15 Cost per Unit Value or Variable Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tariff_name = None
        else:
            self.tariff_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_variable = None
        else:
            self.source_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.season = None
        else:
            self.season = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.category_variable_name = None
        else:
            self.category_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.remaining_into_variable = None
        else:
            self.remaining_into_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_multiplier_value_or_variable_name = None
        else:
            self.block_size_multiplier_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_1_value_or_variable_name = None
        else:
            self.block_size_1_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_1_cost_per_unit_value_or_variable_name = None
        else:
            self.block_1_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_2_value_or_variable_name = None
        else:
            self.block_size_2_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_2_cost_per_unit_value_or_variable_name = None
        else:
            self.block_2_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_3_value_or_variable_name = None
        else:
            self.block_size_3_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_3_cost_per_unit_value_or_variable_name = None
        else:
            self.block_3_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_4_value_or_variable_name = None
        else:
            self.block_size_4_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_4_cost_per_unit_value_or_variable_name = None
        else:
            self.block_4_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_5_value_or_variable_name = None
        else:
            self.block_size_5_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_5_cost_per_unit_value_or_variable_name = None
        else:
            self.block_5_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_6_value_or_variable_name = None
        else:
            self.block_size_6_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_6_cost_per_unit_value_or_variable_name = None
        else:
            self.block_6_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_7_value_or_variable_name = None
        else:
            self.block_size_7_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_7_cost_per_unit_value_or_variable_name = None
        else:
            self.block_7_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_8_value_or_variable_name = None
        else:
            self.block_size_8_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_8_cost_per_unit_value_or_variable_name = None
        else:
            self.block_8_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_9_value_or_variable_name = None
        else:
            self.block_size_9_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_9_cost_per_unit_value_or_variable_name = None
        else:
            self.block_9_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_10_value_or_variable_name = None
        else:
            self.block_size_10_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_10_cost_per_unit_value_or_variable_name = None
        else:
            self.block_10_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_11_value_or_variable_name = None
        else:
            self.block_size_11_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_11_cost_per_unit_value_or_variable_name = None
        else:
            self.block_11_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_12_value_or_variable_name = None
        else:
            self.block_size_12_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_12_cost_per_unit_value_or_variable_name = None
        else:
            self.block_12_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_13_value_or_variable_name = None
        else:
            self.block_size_13_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_13_cost_per_unit_value_or_variable_name = None
        else:
            self.block_13_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_14_value_or_variable_name = None
        else:
            self.block_size_14_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_14_cost_per_unit_value_or_variable_name = None
        else:
            self.block_14_cost_per_unit_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_size_15_value_or_variable_name = None
        else:
            self.block_size_15_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.block_15_cost_per_unit_value_or_variable_name = None
        else:
            self.block_15_cost_per_unit_value_or_variable_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Charge Variable Name
        This is the name associated with the UtilityCost:Charge:Block object and will appear in the report.
        In addition the results of the UtilityCost:Charge:Block are stored in a variable with the same name.
        That way the results may be used for further calculation.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tariff_name(self):
        """Get tariff_name

        Returns:
            str: the value of `tariff_name` or None if not set
        """
        return self._data["Tariff Name"]

    @tariff_name.setter
    def tariff_name(self, value=None):
        """  Corresponds to IDD Field `tariff_name`
        The name of the UtilityCost:Tariff that is associated with this UtilityCost:Charge:Block.

        Args:
            value (str): value for IDD Field `tariff_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tariff_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tariff_name`')

        self._data["Tariff Name"] = value

    @property
    def source_variable(self):
        """Get source_variable

        Returns:
            str: the value of `source_variable` or None if not set
        """
        return self._data["Source Variable"]

    @source_variable.setter
    def source_variable(self, value=None):
        """  Corresponds to IDD Field `source_variable`
        The name of the source used by the UtilityCost:Charge:Block.  This is usually the name of the variable
        holding the energy or demand but may also be the name of any variable including the subtotal or basis if
        other charges are based on those. Typical values include totalEnergy totalDemand EnergyCharges DemandCharges
        ServiceCharges Basis Adjustments Surcharges Subtotal Taxes and Total. If it is a time-of-use rate then
        peakEnergy peakDemand shoulderEnergy shoulderDemand offPeakEnergy offPeakDemand midPeakEnergy and midPeakDemand.
        In addition see the Tariff Report to see other native variablles that may be available. Also you can
        create additional user defined variables to model complex tariffs.

        Args:
            value (str): value for IDD Field `source_variable`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_variable`')

        self._data["Source Variable"] = value

    @property
    def season(self):
        """Get season

        Returns:
            str: the value of `season` or None if not set
        """
        return self._data["Season"]

    @season.setter
    def season(self, value="Season"):
        """  Corresponds to IDD Field `season`
        If this is set to annual the calculations are performed for the UtilityCost:Charge:Block for the entire
        year (all months) otherwise it is calculated only for those months in the season defined.

        Args:
            value (str): value for IDD Field `season`
                Accepted values are:
                      - Annual
                      - Summer
                      - Winter
                      - Spring
                      - Fall
                Default value: Season
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `season`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `season`')
            vals = set()
            vals.add("Annual")
            vals.add("Summer")
            vals.add("Winter")
            vals.add("Spring")
            vals.add("Fall")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `season`'.format(value))

        self._data["Season"] = value

    @property
    def category_variable_name(self):
        """Get category_variable_name

        Returns:
            str: the value of `category_variable_name` or None if not set
        """
        return self._data["Category Variable Name"]

    @category_variable_name.setter
    def category_variable_name(self, value=None):
        """  Corresponds to IDD Field `category_variable_name`
        This field shows where the charge should be added. The reason to enter this field appropriately is so
        that the charge gets reported in a reasonable category.  The charge automatically gets added to the
        variable that is the category.

        Args:
            value (str): value for IDD Field `category_variable_name`
                Accepted values are:
                      - EnergyCharges
                      - DemandCharges
                      - ServiceCharges
                      - Basis
                      - Adjustment
                      - Surcharge
                      - Subtotal
                      - Taxes
                      - Total
                      - NotIncluded
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `category_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `category_variable_name`')
            vals = set()
            vals.add("EnergyCharges")
            vals.add("DemandCharges")
            vals.add("ServiceCharges")
            vals.add("Basis")
            vals.add("Adjustment")
            vals.add("Surcharge")
            vals.add("Subtotal")
            vals.add("Taxes")
            vals.add("Total")
            vals.add("NotIncluded")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `category_variable_name`'.format(value))

        self._data["Category Variable Name"] = value

    @property
    def remaining_into_variable(self):
        """Get remaining_into_variable

        Returns:
            str: the value of `remaining_into_variable` or None if not set
        """
        return self._data["Remaining Into Variable"]

    @remaining_into_variable.setter
    def remaining_into_variable(self, value=None):
        """  Corresponds to IDD Field `remaining_into_variable`
        If the blocks do not use all of the energy or demand from the source some energy and demand remains
        then the remaining amount should be assigned to a variable. If no variable is assigned and some amount
        of energy or demand is not used in the block structure a warning will be issued.

        Args:
            value (str): value for IDD Field `remaining_into_variable`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `remaining_into_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `remaining_into_variable`')

        self._data["Remaining Into Variable"] = value

    @property
    def block_size_multiplier_value_or_variable_name(self):
        """Get block_size_multiplier_value_or_variable_name

        Returns:
            str: the value of `block_size_multiplier_value_or_variable_name` or None if not set
        """
        return self._data["Block Size Multiplier Value or Variable Name"]

    @block_size_multiplier_value_or_variable_name.setter
    def block_size_multiplier_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_multiplier_value_or_variable_name`
        The sizes of the blocks are usually used directly but if a value or a variable is entered here the block
        sizes entered in the rest of the charge are first multiplied by the entered value prior to being used.
        This is common for rates that are kWh/kW rates and in that case the variable that holds the monthly
        total electric demand would be entered.  If no value is entered a default value of one is assumed so
        that the block sizes remain exactly as entered.  This field is unusual for the EnergyPlus syntax because
        it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_multiplier_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_multiplier_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_multiplier_value_or_variable_name`')

        self._data["Block Size Multiplier Value or Variable Name"] = value

    @property
    def block_size_1_value_or_variable_name(self):
        """Get block_size_1_value_or_variable_name

        Returns:
            str: the value of `block_size_1_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 1 Value or Variable Name"]

    @block_size_1_value_or_variable_name.setter
    def block_size_1_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_1_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_1_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_1_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_1_value_or_variable_name`')

        self._data["Block Size 1 Value or Variable Name"] = value

    @property
    def block_1_cost_per_unit_value_or_variable_name(self):
        """Get block_1_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_1_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 1 Cost per Unit Value or Variable Name"]

    @block_1_cost_per_unit_value_or_variable_name.setter
    def block_1_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_1_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_1_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_1_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_1_cost_per_unit_value_or_variable_name`')

        self._data["Block 1 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_2_value_or_variable_name(self):
        """Get block_size_2_value_or_variable_name

        Returns:
            str: the value of `block_size_2_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 2 Value or Variable Name"]

    @block_size_2_value_or_variable_name.setter
    def block_size_2_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_2_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_2_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_2_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_2_value_or_variable_name`')

        self._data["Block Size 2 Value or Variable Name"] = value

    @property
    def block_2_cost_per_unit_value_or_variable_name(self):
        """Get block_2_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_2_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 2 Cost per Unit Value or Variable Name"]

    @block_2_cost_per_unit_value_or_variable_name.setter
    def block_2_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_2_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_2_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_2_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_2_cost_per_unit_value_or_variable_name`')

        self._data["Block 2 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_3_value_or_variable_name(self):
        """Get block_size_3_value_or_variable_name

        Returns:
            str: the value of `block_size_3_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 3 Value or Variable Name"]

    @block_size_3_value_or_variable_name.setter
    def block_size_3_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_3_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_3_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_3_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_3_value_or_variable_name`')

        self._data["Block Size 3 Value or Variable Name"] = value

    @property
    def block_3_cost_per_unit_value_or_variable_name(self):
        """Get block_3_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_3_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 3 Cost per Unit Value or Variable Name"]

    @block_3_cost_per_unit_value_or_variable_name.setter
    def block_3_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_3_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_3_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_3_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_3_cost_per_unit_value_or_variable_name`')

        self._data["Block 3 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_4_value_or_variable_name(self):
        """Get block_size_4_value_or_variable_name

        Returns:
            str: the value of `block_size_4_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 4 Value or Variable Name"]

    @block_size_4_value_or_variable_name.setter
    def block_size_4_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_4_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_4_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_4_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_4_value_or_variable_name`')

        self._data["Block Size 4 Value or Variable Name"] = value

    @property
    def block_4_cost_per_unit_value_or_variable_name(self):
        """Get block_4_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_4_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 4 Cost per Unit Value or Variable Name"]

    @block_4_cost_per_unit_value_or_variable_name.setter
    def block_4_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_4_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_4_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_4_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_4_cost_per_unit_value_or_variable_name`')

        self._data["Block 4 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_5_value_or_variable_name(self):
        """Get block_size_5_value_or_variable_name

        Returns:
            str: the value of `block_size_5_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 5 Value or Variable Name"]

    @block_size_5_value_or_variable_name.setter
    def block_size_5_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_5_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_5_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_5_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_5_value_or_variable_name`')

        self._data["Block Size 5 Value or Variable Name"] = value

    @property
    def block_5_cost_per_unit_value_or_variable_name(self):
        """Get block_5_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_5_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 5 Cost per Unit Value or Variable Name"]

    @block_5_cost_per_unit_value_or_variable_name.setter
    def block_5_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_5_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_5_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_5_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_5_cost_per_unit_value_or_variable_name`')

        self._data["Block 5 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_6_value_or_variable_name(self):
        """Get block_size_6_value_or_variable_name

        Returns:
            str: the value of `block_size_6_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 6 Value or Variable Name"]

    @block_size_6_value_or_variable_name.setter
    def block_size_6_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_6_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_6_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_6_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_6_value_or_variable_name`')

        self._data["Block Size 6 Value or Variable Name"] = value

    @property
    def block_6_cost_per_unit_value_or_variable_name(self):
        """Get block_6_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_6_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 6 Cost per Unit Value or Variable Name"]

    @block_6_cost_per_unit_value_or_variable_name.setter
    def block_6_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_6_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_6_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_6_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_6_cost_per_unit_value_or_variable_name`')

        self._data["Block 6 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_7_value_or_variable_name(self):
        """Get block_size_7_value_or_variable_name

        Returns:
            str: the value of `block_size_7_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 7 Value or Variable Name"]

    @block_size_7_value_or_variable_name.setter
    def block_size_7_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_7_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_7_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_7_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_7_value_or_variable_name`')

        self._data["Block Size 7 Value or Variable Name"] = value

    @property
    def block_7_cost_per_unit_value_or_variable_name(self):
        """Get block_7_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_7_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 7 Cost per Unit Value or Variable Name"]

    @block_7_cost_per_unit_value_or_variable_name.setter
    def block_7_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_7_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_7_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_7_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_7_cost_per_unit_value_or_variable_name`')

        self._data["Block 7 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_8_value_or_variable_name(self):
        """Get block_size_8_value_or_variable_name

        Returns:
            str: the value of `block_size_8_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 8 Value or Variable Name"]

    @block_size_8_value_or_variable_name.setter
    def block_size_8_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_8_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_8_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_8_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_8_value_or_variable_name`')

        self._data["Block Size 8 Value or Variable Name"] = value

    @property
    def block_8_cost_per_unit_value_or_variable_name(self):
        """Get block_8_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_8_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 8 Cost per Unit Value or Variable Name"]

    @block_8_cost_per_unit_value_or_variable_name.setter
    def block_8_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_8_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_8_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_8_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_8_cost_per_unit_value_or_variable_name`')

        self._data["Block 8 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_9_value_or_variable_name(self):
        """Get block_size_9_value_or_variable_name

        Returns:
            str: the value of `block_size_9_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 9 Value or Variable Name"]

    @block_size_9_value_or_variable_name.setter
    def block_size_9_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_9_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_9_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_9_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_9_value_or_variable_name`')

        self._data["Block Size 9 Value or Variable Name"] = value

    @property
    def block_9_cost_per_unit_value_or_variable_name(self):
        """Get block_9_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_9_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 9 Cost per Unit Value or Variable Name"]

    @block_9_cost_per_unit_value_or_variable_name.setter
    def block_9_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_9_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_9_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_9_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_9_cost_per_unit_value_or_variable_name`')

        self._data["Block 9 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_10_value_or_variable_name(self):
        """Get block_size_10_value_or_variable_name

        Returns:
            str: the value of `block_size_10_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 10 Value or Variable Name"]

    @block_size_10_value_or_variable_name.setter
    def block_size_10_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_10_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_10_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_10_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_10_value_or_variable_name`')

        self._data["Block Size 10 Value or Variable Name"] = value

    @property
    def block_10_cost_per_unit_value_or_variable_name(self):
        """Get block_10_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_10_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 10 Cost per Unit Value or Variable Name"]

    @block_10_cost_per_unit_value_or_variable_name.setter
    def block_10_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_10_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_10_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_10_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_10_cost_per_unit_value_or_variable_name`')

        self._data["Block 10 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_11_value_or_variable_name(self):
        """Get block_size_11_value_or_variable_name

        Returns:
            str: the value of `block_size_11_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 11 Value or Variable Name"]

    @block_size_11_value_or_variable_name.setter
    def block_size_11_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_11_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_11_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_11_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_11_value_or_variable_name`')

        self._data["Block Size 11 Value or Variable Name"] = value

    @property
    def block_11_cost_per_unit_value_or_variable_name(self):
        """Get block_11_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_11_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 11 Cost per Unit Value or Variable Name"]

    @block_11_cost_per_unit_value_or_variable_name.setter
    def block_11_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_11_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_11_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_11_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_11_cost_per_unit_value_or_variable_name`')

        self._data["Block 11 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_12_value_or_variable_name(self):
        """Get block_size_12_value_or_variable_name

        Returns:
            str: the value of `block_size_12_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 12 Value or Variable Name"]

    @block_size_12_value_or_variable_name.setter
    def block_size_12_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_12_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_12_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_12_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_12_value_or_variable_name`')

        self._data["Block Size 12 Value or Variable Name"] = value

    @property
    def block_12_cost_per_unit_value_or_variable_name(self):
        """Get block_12_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_12_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 12 Cost per Unit Value or Variable Name"]

    @block_12_cost_per_unit_value_or_variable_name.setter
    def block_12_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_12_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_12_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_12_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_12_cost_per_unit_value_or_variable_name`')

        self._data["Block 12 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_13_value_or_variable_name(self):
        """Get block_size_13_value_or_variable_name

        Returns:
            str: the value of `block_size_13_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 13 Value or Variable Name"]

    @block_size_13_value_or_variable_name.setter
    def block_size_13_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_13_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_13_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_13_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_13_value_or_variable_name`')

        self._data["Block Size 13 Value or Variable Name"] = value

    @property
    def block_13_cost_per_unit_value_or_variable_name(self):
        """Get block_13_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_13_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 13 Cost per Unit Value or Variable Name"]

    @block_13_cost_per_unit_value_or_variable_name.setter
    def block_13_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_13_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_13_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_13_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_13_cost_per_unit_value_or_variable_name`')

        self._data["Block 13 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_14_value_or_variable_name(self):
        """Get block_size_14_value_or_variable_name

        Returns:
            str: the value of `block_size_14_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 14 Value or Variable Name"]

    @block_size_14_value_or_variable_name.setter
    def block_size_14_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_14_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_14_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_14_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_14_value_or_variable_name`')

        self._data["Block Size 14 Value or Variable Name"] = value

    @property
    def block_14_cost_per_unit_value_or_variable_name(self):
        """Get block_14_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_14_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 14 Cost per Unit Value or Variable Name"]

    @block_14_cost_per_unit_value_or_variable_name.setter
    def block_14_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_14_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_14_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_14_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_14_cost_per_unit_value_or_variable_name`')

        self._data["Block 14 Cost per Unit Value or Variable Name"] = value

    @property
    def block_size_15_value_or_variable_name(self):
        """Get block_size_15_value_or_variable_name

        Returns:
            str: the value of `block_size_15_value_or_variable_name` or None if not set
        """
        return self._data["Block Size 15 Value or Variable Name"]

    @block_size_15_value_or_variable_name.setter
    def block_size_15_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_size_15_value_or_variable_name`
        The size of the block of the charges is entered here. For most rates that use multiple blocks this will
        be the value for the block size. Using remaining may be used when the remaining amount should be included
        in that block.  This field is unusual because it can be either a number or a name of a variable.

        Args:
            value (str): value for IDD Field `block_size_15_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_size_15_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_size_15_value_or_variable_name`')

        self._data["Block Size 15 Value or Variable Name"] = value

    @property
    def block_15_cost_per_unit_value_or_variable_name(self):
        """Get block_15_cost_per_unit_value_or_variable_name

        Returns:
            str: the value of `block_15_cost_per_unit_value_or_variable_name` or None if not set
        """
        return self._data["Block 15 Cost per Unit Value or Variable Name"]

    @block_15_cost_per_unit_value_or_variable_name.setter
    def block_15_cost_per_unit_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `block_15_cost_per_unit_value_or_variable_name`
        The cost of the block. This field is unusual for the EnergyPlus syntax because it can be either a number
        or a name of a variable.

        Args:
            value (str): value for IDD Field `block_15_cost_per_unit_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `block_15_cost_per_unit_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `block_15_cost_per_unit_value_or_variable_name`')

        self._data["Block 15 Cost per Unit Value or Variable Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tariff_name))
        out.append(self._to_str(self.source_variable))
        out.append(self._to_str(self.season))
        out.append(self._to_str(self.category_variable_name))
        out.append(self._to_str(self.remaining_into_variable))
        out.append(self._to_str(self.block_size_multiplier_value_or_variable_name))
        out.append(self._to_str(self.block_size_1_value_or_variable_name))
        out.append(self._to_str(self.block_1_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_2_value_or_variable_name))
        out.append(self._to_str(self.block_2_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_3_value_or_variable_name))
        out.append(self._to_str(self.block_3_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_4_value_or_variable_name))
        out.append(self._to_str(self.block_4_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_5_value_or_variable_name))
        out.append(self._to_str(self.block_5_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_6_value_or_variable_name))
        out.append(self._to_str(self.block_6_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_7_value_or_variable_name))
        out.append(self._to_str(self.block_7_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_8_value_or_variable_name))
        out.append(self._to_str(self.block_8_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_9_value_or_variable_name))
        out.append(self._to_str(self.block_9_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_10_value_or_variable_name))
        out.append(self._to_str(self.block_10_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_11_value_or_variable_name))
        out.append(self._to_str(self.block_11_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_12_value_or_variable_name))
        out.append(self._to_str(self.block_12_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_13_value_or_variable_name))
        out.append(self._to_str(self.block_13_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_14_value_or_variable_name))
        out.append(self._to_str(self.block_14_cost_per_unit_value_or_variable_name))
        out.append(self._to_str(self.block_size_15_value_or_variable_name))
        out.append(self._to_str(self.block_15_cost_per_unit_value_or_variable_name))
        return ",".join(out)

class UtilityCostRatchet(object):
    """ Corresponds to IDD object `UtilityCost:Ratchet`
        Allows the modeling of tariffs that include some type of seasonal ratcheting.
        Ratchets are most common when used with electric demand charges. A ratchet is when a
        utility requires that the demand charge for a month with a low demand may be
        increased to be more consistent with a month that set a higher demand charge.
    
    """
    internal_name = "UtilityCost:Ratchet"
    field_count = 8
    required_fields = ["Name", "Tariff Name", "Baseline Source Variable", "Adjustment Source Variable"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Ratchet`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tariff Name"] = None
        self._data["Baseline Source Variable"] = None
        self._data["Adjustment Source Variable"] = None
        self._data["Season From"] = None
        self._data["Season To"] = None
        self._data["Multiplier Value or Variable Name"] = None
        self._data["Offset Value or Variable Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tariff_name = None
        else:
            self.tariff_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.baseline_source_variable = None
        else:
            self.baseline_source_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.adjustment_source_variable = None
        else:
            self.adjustment_source_variable = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.season_from = None
        else:
            self.season_from = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.season_to = None
        else:
            self.season_to = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.multiplier_value_or_variable_name = None
        else:
            self.multiplier_value_or_variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.offset_value_or_variable_name = None
        else:
            self.offset_value_or_variable_name = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Ratchet Variable Name
        The name of the ratchet and the name of the result of this single ratchet.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tariff_name(self):
        """Get tariff_name

        Returns:
            str: the value of `tariff_name` or None if not set
        """
        return self._data["Tariff Name"]

    @tariff_name.setter
    def tariff_name(self, value=None):
        """  Corresponds to IDD Field `tariff_name`
        The name of the UtilityCost:Tariff that is associated with this UtilityCost:Ratchet.

        Args:
            value (str): value for IDD Field `tariff_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tariff_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tariff_name`')

        self._data["Tariff Name"] = value

    @property
    def baseline_source_variable(self):
        """Get baseline_source_variable

        Returns:
            str: the value of `baseline_source_variable` or None if not set
        """
        return self._data["Baseline Source Variable"]

    @baseline_source_variable.setter
    def baseline_source_variable(self, value=None):
        """  Corresponds to IDD Field `baseline_source_variable`
        When the ratcheted value exceeds the baseline value for a month the ratcheted value is used but when the
        baseline value is greater then the ratcheted value the baseline value is used. Usually the electric
        demand charge is used.  The baseline source variable can be the results of another ratchet object. This
        allows utility tariffs that have multiple ratchets to be modeled.

        Args:
            value (str): value for IDD Field `baseline_source_variable`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `baseline_source_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `baseline_source_variable`')

        self._data["Baseline Source Variable"] = value

    @property
    def adjustment_source_variable(self):
        """Get adjustment_source_variable

        Returns:
            str: the value of `adjustment_source_variable` or None if not set
        """
        return self._data["Adjustment Source Variable"]

    @adjustment_source_variable.setter
    def adjustment_source_variable(self, value=None):
        """  Corresponds to IDD Field `adjustment_source_variable`
        The variable that the ratchet is calculated from. It is often but not always the same as the baseline
        source variable.  The ratcheting calculations using offset and multiplier are using the values from the
        adjustment source variable. If left blank the adjustment source variable is the same as the baseline
        source variable.

        Args:
            value (str): value for IDD Field `adjustment_source_variable`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `adjustment_source_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `adjustment_source_variable`')

        self._data["Adjustment Source Variable"] = value

    @property
    def season_from(self):
        """Get season_from

        Returns:
            str: the value of `season_from` or None if not set
        """
        return self._data["Season From"]

    @season_from.setter
    def season_from(self, value=None):
        """  Corresponds to IDD Field `season_from`
        The name of the season that is being examined.  The maximum value for all of the months in the named
        season is what is used with the multiplier and offset.  This is most commonly Summer or Annual.  When
        Monthly is used the adjustment source variable is used directly for all months.

        Args:
            value (str): value for IDD Field `season_from`
                Accepted values are:
                      - Annual
                      - Summer
                      - Winter
                      - Spring
                      - Fall
                      - Monthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `season_from`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `season_from`')
            vals = set()
            vals.add("Annual")
            vals.add("Summer")
            vals.add("Winter")
            vals.add("Spring")
            vals.add("Fall")
            vals.add("Monthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `season_from`'.format(value))

        self._data["Season From"] = value

    @property
    def season_to(self):
        """Get season_to

        Returns:
            str: the value of `season_to` or None if not set
        """
        return self._data["Season To"]

    @season_to.setter
    def season_to(self, value=None):
        """  Corresponds to IDD Field `season_to`
        The name of the season when the ratchet would be calculated.  This is most commonly Winter.  The ratchet
        only is applied to the months in the named season. The resulting variable for months not in the Season To
        selection will contain the values as appear in the baseline source variable.

        Args:
            value (str): value for IDD Field `season_to`
                Accepted values are:
                      - Annual
                      - Summer
                      - Winter
                      - Spring
                      - Fall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `season_to`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `season_to`')
            vals = set()
            vals.add("Annual")
            vals.add("Summer")
            vals.add("Winter")
            vals.add("Spring")
            vals.add("Fall")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `season_to`'.format(value))

        self._data["Season To"] = value

    @property
    def multiplier_value_or_variable_name(self):
        """Get multiplier_value_or_variable_name

        Returns:
            str: the value of `multiplier_value_or_variable_name` or None if not set
        """
        return self._data["Multiplier Value or Variable Name"]

    @multiplier_value_or_variable_name.setter
    def multiplier_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `multiplier_value_or_variable_name`
        Often the ratchet has a clause such as "the current month demand or 90% of the summer month demand".  For
        this case a value of 0.9 would be entered here as the multiplier.  This value may be left blank if no
        multiplier is needed and a value of one will be used as a default.

        Args:
            value (str): value for IDD Field `multiplier_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `multiplier_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `multiplier_value_or_variable_name`')

        self._data["Multiplier Value or Variable Name"] = value

    @property
    def offset_value_or_variable_name(self):
        """Get offset_value_or_variable_name

        Returns:
            str: the value of `offset_value_or_variable_name` or None if not set
        """
        return self._data["Offset Value or Variable Name"]

    @offset_value_or_variable_name.setter
    def offset_value_or_variable_name(self, value=None):
        """  Corresponds to IDD Field `offset_value_or_variable_name`
        A less common strategy is to say that the ratchet must be all demand greater than a value in this case
        an offset that is added to the demand may be entered here. If entered it is common for the offset value
        to be negative representing that the demand be reduced.   If no value is entered it is assumed to be
        zero and not affect the ratchet.

        Args:
            value (str): value for IDD Field `offset_value_or_variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `offset_value_or_variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `offset_value_or_variable_name`')

        self._data["Offset Value or Variable Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tariff_name))
        out.append(self._to_str(self.baseline_source_variable))
        out.append(self._to_str(self.adjustment_source_variable))
        out.append(self._to_str(self.season_from))
        out.append(self._to_str(self.season_to))
        out.append(self._to_str(self.multiplier_value_or_variable_name))
        out.append(self._to_str(self.offset_value_or_variable_name))
        return ",".join(out)

class UtilityCostVariable(object):
    """ Corresponds to IDD object `UtilityCost:Variable`
        Allows for the direct entry of monthly values into a utility tariff variable.
    
    """
    internal_name = "UtilityCost:Variable"
    field_count = 15
    required_fields = ["Name", "Tariff Name", "Variable Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Variable`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tariff Name"] = None
        self._data["Variable Type"] = None
        self._data["January Value"] = None
        self._data["February Value"] = None
        self._data["March Value"] = None
        self._data["April Value"] = None
        self._data["May Value"] = None
        self._data["June Value"] = None
        self._data["July Value"] = None
        self._data["August Value"] = None
        self._data["September Value"] = None
        self._data["October Value"] = None
        self._data["November Value"] = None
        self._data["December Value"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tariff_name = None
        else:
            self.tariff_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_type = None
        else:
            self.variable_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.january_value = None
        else:
            self.january_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.february_value = None
        else:
            self.february_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.march_value = None
        else:
            self.march_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.april_value = None
        else:
            self.april_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.may_value = None
        else:
            self.may_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.june_value = None
        else:
            self.june_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.july_value = None
        else:
            self.july_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.august_value = None
        else:
            self.august_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.september_value = None
        else:
            self.september_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.october_value = None
        else:
            self.october_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.november_value = None
        else:
            self.november_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.december_value = None
        else:
            self.december_value = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tariff_name(self):
        """Get tariff_name

        Returns:
            str: the value of `tariff_name` or None if not set
        """
        return self._data["Tariff Name"]

    @tariff_name.setter
    def tariff_name(self, value=None):
        """  Corresponds to IDD Field `tariff_name`
        The name of the UtilityCost:Tariff that is associated with this UtilityCost:Variable.

        Args:
            value (str): value for IDD Field `tariff_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tariff_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tariff_name`')

        self._data["Tariff Name"] = value

    @property
    def variable_type(self):
        """Get variable_type

        Returns:
            str: the value of `variable_type` or None if not set
        """
        return self._data["Variable Type"]

    @variable_type.setter
    def variable_type(self, value="Dimensionless"):
        """  Corresponds to IDD Field `variable_type`

        Args:
            value (str): value for IDD Field `variable_type`
                Accepted values are:
                      - Energy
                      - Power
                      - Dimensionless
                      - Currency
                Default value: Dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_type`')
            vals = set()
            vals.add("Energy")
            vals.add("Power")
            vals.add("Dimensionless")
            vals.add("Currency")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `variable_type`'.format(value))

        self._data["Variable Type"] = value

    @property
    def january_value(self):
        """Get january_value

        Returns:
            float: the value of `january_value` or None if not set
        """
        return self._data["January Value"]

    @january_value.setter
    def january_value(self, value=None):
        """  Corresponds to IDD Field `january_value`

        Args:
            value (float): value for IDD Field `january_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `january_value`'.format(value))

        self._data["January Value"] = value

    @property
    def february_value(self):
        """Get february_value

        Returns:
            float: the value of `february_value` or None if not set
        """
        return self._data["February Value"]

    @february_value.setter
    def february_value(self, value=None):
        """  Corresponds to IDD Field `february_value`

        Args:
            value (float): value for IDD Field `february_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `february_value`'.format(value))

        self._data["February Value"] = value

    @property
    def march_value(self):
        """Get march_value

        Returns:
            float: the value of `march_value` or None if not set
        """
        return self._data["March Value"]

    @march_value.setter
    def march_value(self, value=None):
        """  Corresponds to IDD Field `march_value`

        Args:
            value (float): value for IDD Field `march_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `march_value`'.format(value))

        self._data["March Value"] = value

    @property
    def april_value(self):
        """Get april_value

        Returns:
            float: the value of `april_value` or None if not set
        """
        return self._data["April Value"]

    @april_value.setter
    def april_value(self, value=None):
        """  Corresponds to IDD Field `april_value`

        Args:
            value (float): value for IDD Field `april_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `april_value`'.format(value))

        self._data["April Value"] = value

    @property
    def may_value(self):
        """Get may_value

        Returns:
            float: the value of `may_value` or None if not set
        """
        return self._data["May Value"]

    @may_value.setter
    def may_value(self, value=None):
        """  Corresponds to IDD Field `may_value`

        Args:
            value (float): value for IDD Field `may_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `may_value`'.format(value))

        self._data["May Value"] = value

    @property
    def june_value(self):
        """Get june_value

        Returns:
            float: the value of `june_value` or None if not set
        """
        return self._data["June Value"]

    @june_value.setter
    def june_value(self, value=None):
        """  Corresponds to IDD Field `june_value`

        Args:
            value (float): value for IDD Field `june_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `june_value`'.format(value))

        self._data["June Value"] = value

    @property
    def july_value(self):
        """Get july_value

        Returns:
            float: the value of `july_value` or None if not set
        """
        return self._data["July Value"]

    @july_value.setter
    def july_value(self, value=None):
        """  Corresponds to IDD Field `july_value`

        Args:
            value (float): value for IDD Field `july_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `july_value`'.format(value))

        self._data["July Value"] = value

    @property
    def august_value(self):
        """Get august_value

        Returns:
            float: the value of `august_value` or None if not set
        """
        return self._data["August Value"]

    @august_value.setter
    def august_value(self, value=None):
        """  Corresponds to IDD Field `august_value`

        Args:
            value (float): value for IDD Field `august_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `august_value`'.format(value))

        self._data["August Value"] = value

    @property
    def september_value(self):
        """Get september_value

        Returns:
            float: the value of `september_value` or None if not set
        """
        return self._data["September Value"]

    @september_value.setter
    def september_value(self, value=None):
        """  Corresponds to IDD Field `september_value`

        Args:
            value (float): value for IDD Field `september_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `september_value`'.format(value))

        self._data["September Value"] = value

    @property
    def october_value(self):
        """Get october_value

        Returns:
            float: the value of `october_value` or None if not set
        """
        return self._data["October Value"]

    @october_value.setter
    def october_value(self, value=None):
        """  Corresponds to IDD Field `october_value`

        Args:
            value (float): value for IDD Field `october_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `october_value`'.format(value))

        self._data["October Value"] = value

    @property
    def november_value(self):
        """Get november_value

        Returns:
            float: the value of `november_value` or None if not set
        """
        return self._data["November Value"]

    @november_value.setter
    def november_value(self, value=None):
        """  Corresponds to IDD Field `november_value`

        Args:
            value (float): value for IDD Field `november_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `november_value`'.format(value))

        self._data["November Value"] = value

    @property
    def december_value(self):
        """Get december_value

        Returns:
            float: the value of `december_value` or None if not set
        """
        return self._data["December Value"]

    @december_value.setter
    def december_value(self, value=None):
        """  Corresponds to IDD Field `december_value`

        Args:
            value (float): value for IDD Field `december_value`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `december_value`'.format(value))

        self._data["December Value"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tariff_name))
        out.append(self._to_str(self.variable_type))
        out.append(self._to_str(self.january_value))
        out.append(self._to_str(self.february_value))
        out.append(self._to_str(self.march_value))
        out.append(self._to_str(self.april_value))
        out.append(self._to_str(self.may_value))
        out.append(self._to_str(self.june_value))
        out.append(self._to_str(self.july_value))
        out.append(self._to_str(self.august_value))
        out.append(self._to_str(self.september_value))
        out.append(self._to_str(self.october_value))
        out.append(self._to_str(self.november_value))
        out.append(self._to_str(self.december_value))
        return ",".join(out)

class UtilityCostComputation(object):
    """ Corresponds to IDD object `UtilityCost:Computation`
        The object lists a series of computations that are used to perform the utility bill
        calculation. The object is only used for complex tariffs that cannot be modeled any
        other way. For most utility tariffs, UtilityCost:Computation is unnecessary and
        should be avoided. If UtilityCost:Computation is used, it must contain references
        to all objects involved in the rate in the order that they should be computed.
    
    """
    internal_name = "UtilityCost:Computation"
    field_count = 32
    required_fields = ["Name", "Tariff Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `UtilityCost:Computation`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Tariff Name"] = None
        self._data["Compute Step 1"] = None
        self._data["Compute Step 2"] = None
        self._data["Compute Step 3"] = None
        self._data["Compute Step 4"] = None
        self._data["Compute Step 5"] = None
        self._data["Compute Step 6"] = None
        self._data["Compute Step 7"] = None
        self._data["Compute Step 8"] = None
        self._data["Compute Step 9"] = None
        self._data["Compute Step 10"] = None
        self._data["Compute Step 11"] = None
        self._data["Compute Step 12"] = None
        self._data["Compute Step 13"] = None
        self._data["Compute Step 14"] = None
        self._data["Compute Step 15"] = None
        self._data["Compute Step 16"] = None
        self._data["Compute Step 17"] = None
        self._data["Compute Step 18"] = None
        self._data["Compute Step 19"] = None
        self._data["Compute Step 20"] = None
        self._data["Compute Step 21"] = None
        self._data["Compute Step 22"] = None
        self._data["Compute Step 23"] = None
        self._data["Compute Step 24"] = None
        self._data["Compute Step 25"] = None
        self._data["Compute Step 26"] = None
        self._data["Compute Step 27"] = None
        self._data["Compute Step 28"] = None
        self._data["Compute Step 29"] = None
        self._data["Compute Step 30"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tariff_name = None
        else:
            self.tariff_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_1 = None
        else:
            self.compute_step_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_2 = None
        else:
            self.compute_step_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_3 = None
        else:
            self.compute_step_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_4 = None
        else:
            self.compute_step_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_5 = None
        else:
            self.compute_step_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_6 = None
        else:
            self.compute_step_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_7 = None
        else:
            self.compute_step_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_8 = None
        else:
            self.compute_step_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_9 = None
        else:
            self.compute_step_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_10 = None
        else:
            self.compute_step_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_11 = None
        else:
            self.compute_step_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_12 = None
        else:
            self.compute_step_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_13 = None
        else:
            self.compute_step_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_14 = None
        else:
            self.compute_step_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_15 = None
        else:
            self.compute_step_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_16 = None
        else:
            self.compute_step_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_17 = None
        else:
            self.compute_step_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_18 = None
        else:
            self.compute_step_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_19 = None
        else:
            self.compute_step_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_20 = None
        else:
            self.compute_step_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_21 = None
        else:
            self.compute_step_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_22 = None
        else:
            self.compute_step_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_23 = None
        else:
            self.compute_step_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_24 = None
        else:
            self.compute_step_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_25 = None
        else:
            self.compute_step_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_26 = None
        else:
            self.compute_step_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_27 = None
        else:
            self.compute_step_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_28 = None
        else:
            self.compute_step_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_29 = None
        else:
            self.compute_step_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.compute_step_30 = None
        else:
            self.compute_step_30 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def tariff_name(self):
        """Get tariff_name

        Returns:
            str: the value of `tariff_name` or None if not set
        """
        return self._data["Tariff Name"]

    @tariff_name.setter
    def tariff_name(self, value=None):
        """  Corresponds to IDD Field `tariff_name`
        The name of the UtilityCost:Tariff that is associated with this UtilityCost:Variable.

        Args:
            value (str): value for IDD Field `tariff_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `tariff_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tariff_name`')

        self._data["Tariff Name"] = value

    @property
    def compute_step_1(self):
        """Get compute_step_1

        Returns:
            str: the value of `compute_step_1` or None if not set
        """
        return self._data["Compute Step 1"]

    @compute_step_1.setter
    def compute_step_1(self, value=None):
        """  Corresponds to IDD Field `compute_step_1`
        Contain a simple language that describes the steps used in the computation process similar to a
        programming language.

        Args:
            value (str): value for IDD Field `compute_step_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_1`')

        self._data["Compute Step 1"] = value

    @property
    def compute_step_2(self):
        """Get compute_step_2

        Returns:
            str: the value of `compute_step_2` or None if not set
        """
        return self._data["Compute Step 2"]

    @compute_step_2.setter
    def compute_step_2(self, value=None):
        """  Corresponds to IDD Field `compute_step_2`

        Args:
            value (str): value for IDD Field `compute_step_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_2`')

        self._data["Compute Step 2"] = value

    @property
    def compute_step_3(self):
        """Get compute_step_3

        Returns:
            str: the value of `compute_step_3` or None if not set
        """
        return self._data["Compute Step 3"]

    @compute_step_3.setter
    def compute_step_3(self, value=None):
        """  Corresponds to IDD Field `compute_step_3`

        Args:
            value (str): value for IDD Field `compute_step_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_3`')

        self._data["Compute Step 3"] = value

    @property
    def compute_step_4(self):
        """Get compute_step_4

        Returns:
            str: the value of `compute_step_4` or None if not set
        """
        return self._data["Compute Step 4"]

    @compute_step_4.setter
    def compute_step_4(self, value=None):
        """  Corresponds to IDD Field `compute_step_4`

        Args:
            value (str): value for IDD Field `compute_step_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_4`')

        self._data["Compute Step 4"] = value

    @property
    def compute_step_5(self):
        """Get compute_step_5

        Returns:
            str: the value of `compute_step_5` or None if not set
        """
        return self._data["Compute Step 5"]

    @compute_step_5.setter
    def compute_step_5(self, value=None):
        """  Corresponds to IDD Field `compute_step_5`

        Args:
            value (str): value for IDD Field `compute_step_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_5`')

        self._data["Compute Step 5"] = value

    @property
    def compute_step_6(self):
        """Get compute_step_6

        Returns:
            str: the value of `compute_step_6` or None if not set
        """
        return self._data["Compute Step 6"]

    @compute_step_6.setter
    def compute_step_6(self, value=None):
        """  Corresponds to IDD Field `compute_step_6`

        Args:
            value (str): value for IDD Field `compute_step_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_6`')

        self._data["Compute Step 6"] = value

    @property
    def compute_step_7(self):
        """Get compute_step_7

        Returns:
            str: the value of `compute_step_7` or None if not set
        """
        return self._data["Compute Step 7"]

    @compute_step_7.setter
    def compute_step_7(self, value=None):
        """  Corresponds to IDD Field `compute_step_7`

        Args:
            value (str): value for IDD Field `compute_step_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_7`')

        self._data["Compute Step 7"] = value

    @property
    def compute_step_8(self):
        """Get compute_step_8

        Returns:
            str: the value of `compute_step_8` or None if not set
        """
        return self._data["Compute Step 8"]

    @compute_step_8.setter
    def compute_step_8(self, value=None):
        """  Corresponds to IDD Field `compute_step_8`

        Args:
            value (str): value for IDD Field `compute_step_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_8`')

        self._data["Compute Step 8"] = value

    @property
    def compute_step_9(self):
        """Get compute_step_9

        Returns:
            str: the value of `compute_step_9` or None if not set
        """
        return self._data["Compute Step 9"]

    @compute_step_9.setter
    def compute_step_9(self, value=None):
        """  Corresponds to IDD Field `compute_step_9`

        Args:
            value (str): value for IDD Field `compute_step_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_9`')

        self._data["Compute Step 9"] = value

    @property
    def compute_step_10(self):
        """Get compute_step_10

        Returns:
            str: the value of `compute_step_10` or None if not set
        """
        return self._data["Compute Step 10"]

    @compute_step_10.setter
    def compute_step_10(self, value=None):
        """  Corresponds to IDD Field `compute_step_10`

        Args:
            value (str): value for IDD Field `compute_step_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_10`')

        self._data["Compute Step 10"] = value

    @property
    def compute_step_11(self):
        """Get compute_step_11

        Returns:
            str: the value of `compute_step_11` or None if not set
        """
        return self._data["Compute Step 11"]

    @compute_step_11.setter
    def compute_step_11(self, value=None):
        """  Corresponds to IDD Field `compute_step_11`

        Args:
            value (str): value for IDD Field `compute_step_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_11`')

        self._data["Compute Step 11"] = value

    @property
    def compute_step_12(self):
        """Get compute_step_12

        Returns:
            str: the value of `compute_step_12` or None if not set
        """
        return self._data["Compute Step 12"]

    @compute_step_12.setter
    def compute_step_12(self, value=None):
        """  Corresponds to IDD Field `compute_step_12`

        Args:
            value (str): value for IDD Field `compute_step_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_12`')

        self._data["Compute Step 12"] = value

    @property
    def compute_step_13(self):
        """Get compute_step_13

        Returns:
            str: the value of `compute_step_13` or None if not set
        """
        return self._data["Compute Step 13"]

    @compute_step_13.setter
    def compute_step_13(self, value=None):
        """  Corresponds to IDD Field `compute_step_13`

        Args:
            value (str): value for IDD Field `compute_step_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_13`')

        self._data["Compute Step 13"] = value

    @property
    def compute_step_14(self):
        """Get compute_step_14

        Returns:
            str: the value of `compute_step_14` or None if not set
        """
        return self._data["Compute Step 14"]

    @compute_step_14.setter
    def compute_step_14(self, value=None):
        """  Corresponds to IDD Field `compute_step_14`

        Args:
            value (str): value for IDD Field `compute_step_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_14`')

        self._data["Compute Step 14"] = value

    @property
    def compute_step_15(self):
        """Get compute_step_15

        Returns:
            str: the value of `compute_step_15` or None if not set
        """
        return self._data["Compute Step 15"]

    @compute_step_15.setter
    def compute_step_15(self, value=None):
        """  Corresponds to IDD Field `compute_step_15`

        Args:
            value (str): value for IDD Field `compute_step_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_15`')

        self._data["Compute Step 15"] = value

    @property
    def compute_step_16(self):
        """Get compute_step_16

        Returns:
            str: the value of `compute_step_16` or None if not set
        """
        return self._data["Compute Step 16"]

    @compute_step_16.setter
    def compute_step_16(self, value=None):
        """  Corresponds to IDD Field `compute_step_16`

        Args:
            value (str): value for IDD Field `compute_step_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_16`')

        self._data["Compute Step 16"] = value

    @property
    def compute_step_17(self):
        """Get compute_step_17

        Returns:
            str: the value of `compute_step_17` or None if not set
        """
        return self._data["Compute Step 17"]

    @compute_step_17.setter
    def compute_step_17(self, value=None):
        """  Corresponds to IDD Field `compute_step_17`

        Args:
            value (str): value for IDD Field `compute_step_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_17`')

        self._data["Compute Step 17"] = value

    @property
    def compute_step_18(self):
        """Get compute_step_18

        Returns:
            str: the value of `compute_step_18` or None if not set
        """
        return self._data["Compute Step 18"]

    @compute_step_18.setter
    def compute_step_18(self, value=None):
        """  Corresponds to IDD Field `compute_step_18`

        Args:
            value (str): value for IDD Field `compute_step_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_18`')

        self._data["Compute Step 18"] = value

    @property
    def compute_step_19(self):
        """Get compute_step_19

        Returns:
            str: the value of `compute_step_19` or None if not set
        """
        return self._data["Compute Step 19"]

    @compute_step_19.setter
    def compute_step_19(self, value=None):
        """  Corresponds to IDD Field `compute_step_19`

        Args:
            value (str): value for IDD Field `compute_step_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_19`')

        self._data["Compute Step 19"] = value

    @property
    def compute_step_20(self):
        """Get compute_step_20

        Returns:
            str: the value of `compute_step_20` or None if not set
        """
        return self._data["Compute Step 20"]

    @compute_step_20.setter
    def compute_step_20(self, value=None):
        """  Corresponds to IDD Field `compute_step_20`

        Args:
            value (str): value for IDD Field `compute_step_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_20`')

        self._data["Compute Step 20"] = value

    @property
    def compute_step_21(self):
        """Get compute_step_21

        Returns:
            str: the value of `compute_step_21` or None if not set
        """
        return self._data["Compute Step 21"]

    @compute_step_21.setter
    def compute_step_21(self, value=None):
        """  Corresponds to IDD Field `compute_step_21`

        Args:
            value (str): value for IDD Field `compute_step_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_21`')

        self._data["Compute Step 21"] = value

    @property
    def compute_step_22(self):
        """Get compute_step_22

        Returns:
            str: the value of `compute_step_22` or None if not set
        """
        return self._data["Compute Step 22"]

    @compute_step_22.setter
    def compute_step_22(self, value=None):
        """  Corresponds to IDD Field `compute_step_22`

        Args:
            value (str): value for IDD Field `compute_step_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_22`')

        self._data["Compute Step 22"] = value

    @property
    def compute_step_23(self):
        """Get compute_step_23

        Returns:
            str: the value of `compute_step_23` or None if not set
        """
        return self._data["Compute Step 23"]

    @compute_step_23.setter
    def compute_step_23(self, value=None):
        """  Corresponds to IDD Field `compute_step_23`

        Args:
            value (str): value for IDD Field `compute_step_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_23`')

        self._data["Compute Step 23"] = value

    @property
    def compute_step_24(self):
        """Get compute_step_24

        Returns:
            str: the value of `compute_step_24` or None if not set
        """
        return self._data["Compute Step 24"]

    @compute_step_24.setter
    def compute_step_24(self, value=None):
        """  Corresponds to IDD Field `compute_step_24`

        Args:
            value (str): value for IDD Field `compute_step_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_24`')

        self._data["Compute Step 24"] = value

    @property
    def compute_step_25(self):
        """Get compute_step_25

        Returns:
            str: the value of `compute_step_25` or None if not set
        """
        return self._data["Compute Step 25"]

    @compute_step_25.setter
    def compute_step_25(self, value=None):
        """  Corresponds to IDD Field `compute_step_25`

        Args:
            value (str): value for IDD Field `compute_step_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_25`')

        self._data["Compute Step 25"] = value

    @property
    def compute_step_26(self):
        """Get compute_step_26

        Returns:
            str: the value of `compute_step_26` or None if not set
        """
        return self._data["Compute Step 26"]

    @compute_step_26.setter
    def compute_step_26(self, value=None):
        """  Corresponds to IDD Field `compute_step_26`

        Args:
            value (str): value for IDD Field `compute_step_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_26`')

        self._data["Compute Step 26"] = value

    @property
    def compute_step_27(self):
        """Get compute_step_27

        Returns:
            str: the value of `compute_step_27` or None if not set
        """
        return self._data["Compute Step 27"]

    @compute_step_27.setter
    def compute_step_27(self, value=None):
        """  Corresponds to IDD Field `compute_step_27`

        Args:
            value (str): value for IDD Field `compute_step_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_27`')

        self._data["Compute Step 27"] = value

    @property
    def compute_step_28(self):
        """Get compute_step_28

        Returns:
            str: the value of `compute_step_28` or None if not set
        """
        return self._data["Compute Step 28"]

    @compute_step_28.setter
    def compute_step_28(self, value=None):
        """  Corresponds to IDD Field `compute_step_28`

        Args:
            value (str): value for IDD Field `compute_step_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_28`')

        self._data["Compute Step 28"] = value

    @property
    def compute_step_29(self):
        """Get compute_step_29

        Returns:
            str: the value of `compute_step_29` or None if not set
        """
        return self._data["Compute Step 29"]

    @compute_step_29.setter
    def compute_step_29(self, value=None):
        """  Corresponds to IDD Field `compute_step_29`

        Args:
            value (str): value for IDD Field `compute_step_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_29`')

        self._data["Compute Step 29"] = value

    @property
    def compute_step_30(self):
        """Get compute_step_30

        Returns:
            str: the value of `compute_step_30` or None if not set
        """
        return self._data["Compute Step 30"]

    @compute_step_30.setter
    def compute_step_30(self, value=None):
        """  Corresponds to IDD Field `compute_step_30`

        Args:
            value (str): value for IDD Field `compute_step_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `compute_step_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compute_step_30`')

        self._data["Compute Step 30"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.tariff_name))
        out.append(self._to_str(self.compute_step_1))
        out.append(self._to_str(self.compute_step_2))
        out.append(self._to_str(self.compute_step_3))
        out.append(self._to_str(self.compute_step_4))
        out.append(self._to_str(self.compute_step_5))
        out.append(self._to_str(self.compute_step_6))
        out.append(self._to_str(self.compute_step_7))
        out.append(self._to_str(self.compute_step_8))
        out.append(self._to_str(self.compute_step_9))
        out.append(self._to_str(self.compute_step_10))
        out.append(self._to_str(self.compute_step_11))
        out.append(self._to_str(self.compute_step_12))
        out.append(self._to_str(self.compute_step_13))
        out.append(self._to_str(self.compute_step_14))
        out.append(self._to_str(self.compute_step_15))
        out.append(self._to_str(self.compute_step_16))
        out.append(self._to_str(self.compute_step_17))
        out.append(self._to_str(self.compute_step_18))
        out.append(self._to_str(self.compute_step_19))
        out.append(self._to_str(self.compute_step_20))
        out.append(self._to_str(self.compute_step_21))
        out.append(self._to_str(self.compute_step_22))
        out.append(self._to_str(self.compute_step_23))
        out.append(self._to_str(self.compute_step_24))
        out.append(self._to_str(self.compute_step_25))
        out.append(self._to_str(self.compute_step_26))
        out.append(self._to_str(self.compute_step_27))
        out.append(self._to_str(self.compute_step_28))
        out.append(self._to_str(self.compute_step_29))
        out.append(self._to_str(self.compute_step_30))
        return ",".join(out)

class LifeCycleCostParameters(object):
    """ Corresponds to IDD object `LifeCycleCost:Parameters`
        Provides inputs related to the overall life-cycle analysis. It establishes many of
        the assumptions used in computing the present value. It is important that when
        comparing the results of multiple simulations that the fields in the
        LifeCycleCost:Parameters objects are the same for all the simulations. When this
        object is present the tabular report file will contain the Life-Cycle Cost Report.
    
    """
    internal_name = "LifeCycleCost:Parameters"
    field_count = 13
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `LifeCycleCost:Parameters`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Discounting Convention"] = None
        self._data["Inflation Approach"] = None
        self._data["Real Discount Rate"] = None
        self._data["Nominal Discount Rate"] = None
        self._data["Inflation"] = None
        self._data["Base Date Month"] = None
        self._data["Base Date Year"] = None
        self._data["Service Date Month"] = None
        self._data["Service Date Year"] = None
        self._data["Length of Study Period in Years"] = None
        self._data["Tax rate"] = None
        self._data["Depreciation Method"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.discounting_convention = None
        else:
            self.discounting_convention = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inflation_approach = None
        else:
            self.inflation_approach = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.real_discount_rate = None
        else:
            self.real_discount_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nominal_discount_rate = None
        else:
            self.nominal_discount_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.inflation = None
        else:
            self.inflation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.base_date_month = None
        else:
            self.base_date_month = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.base_date_year = None
        else:
            self.base_date_year = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.service_date_month = None
        else:
            self.service_date_month = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.service_date_year = None
        else:
            self.service_date_year = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.length_of_study_period_in_years = None
        else:
            self.length_of_study_period_in_years = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tax_rate = None
        else:
            self.tax_rate = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.depreciation_method = None
        else:
            self.depreciation_method = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def discounting_convention(self):
        """Get discounting_convention

        Returns:
            str: the value of `discounting_convention` or None if not set
        """
        return self._data["Discounting Convention"]

    @discounting_convention.setter
    def discounting_convention(self, value="EndOfYear"):
        """  Corresponds to IDD Field `discounting_convention`
        The field specifies if the discounting of future costs should be computed as occurring at the end
        of each year or the middle of each year or the beginning of each year. The most common discounting
        convention uses the end of each year.

        Args:
            value (str): value for IDD Field `discounting_convention`
                Accepted values are:
                      - EndOfYear
                      - MidYear
                      - BeginningOfYear
                Default value: EndOfYear
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `discounting_convention`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discounting_convention`')
            vals = set()
            vals.add("EndOfYear")
            vals.add("MidYear")
            vals.add("BeginningOfYear")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `discounting_convention`'.format(value))

        self._data["Discounting Convention"] = value

    @property
    def inflation_approach(self):
        """Get inflation_approach

        Returns:
            str: the value of `inflation_approach` or None if not set
        """
        return self._data["Inflation Approach"]

    @inflation_approach.setter
    def inflation_approach(self, value="ConstantDollar"):
        """  Corresponds to IDD Field `inflation_approach`
        This field is used to determine if the analysis should use constant dollars or current dollars
        which is related to how inflation is treated. If ConstantDollar is selected then the Real Discount
        Rate input is used and it excludes the rate of inflation. If CurrentDollar is selected then the
        Nominal Discount Rate input is used and it includes the rate of inflation.

        Args:
            value (str): value for IDD Field `inflation_approach`
                Accepted values are:
                      - ConstantDollar
                      - CurrentDollar
                Default value: ConstantDollar
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `inflation_approach`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inflation_approach`')
            vals = set()
            vals.add("ConstantDollar")
            vals.add("CurrentDollar")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `inflation_approach`'.format(value))

        self._data["Inflation Approach"] = value

    @property
    def real_discount_rate(self):
        """Get real_discount_rate

        Returns:
            float: the value of `real_discount_rate` or None if not set
        """
        return self._data["Real Discount Rate"]

    @real_discount_rate.setter
    def real_discount_rate(self, value=None):
        """  Corresponds to IDD Field `real_discount_rate`
        Enter the real discount rate as a decimal. For a 3% rate enter the value 0.03. This input is
        used when the Inflation Approach is ConstantDollar. The real discount rate reflects the interest
        rates needed to make current and future expenditures have comparable equivalent values when
        general inflation is ignored. When Inflation Approach is set to CurrentDollar this input is ignored.

        Args:
            value (float): value for IDD Field `real_discount_rate`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `real_discount_rate`'.format(value))

        self._data["Real Discount Rate"] = value

    @property
    def nominal_discount_rate(self):
        """Get nominal_discount_rate

        Returns:
            float: the value of `nominal_discount_rate` or None if not set
        """
        return self._data["Nominal Discount Rate"]

    @nominal_discount_rate.setter
    def nominal_discount_rate(self, value=None):
        """  Corresponds to IDD Field `nominal_discount_rate`
        Enter the nominal discount rate as a decimal. For a 5% rate enter the value 0.05. This input
        is used when the Inflation Approach is CurrentDollar. The real discount rate reflects the interest
        rates needed to make current and future expenditures have comparable equivalent values when general
        inflation is included. When Inflation Approach is set to ConstantDollar this input is ignored.

        Args:
            value (float): value for IDD Field `nominal_discount_rate`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_discount_rate`'.format(value))

        self._data["Nominal Discount Rate"] = value

    @property
    def inflation(self):
        """Get inflation

        Returns:
            float: the value of `inflation` or None if not set
        """
        return self._data["Inflation"]

    @inflation.setter
    def inflation(self, value=None):
        """  Corresponds to IDD Field `inflation`
        Enter the rate of inflation for general goods and services as a decimal. For a 2% rate enter
        the value 0.02.

        Args:
            value (float): value for IDD Field `inflation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `inflation`'.format(value))

        self._data["Inflation"] = value

    @property
    def base_date_month(self):
        """Get base_date_month

        Returns:
            str: the value of `base_date_month` or None if not set
        """
        return self._data["Base Date Month"]

    @base_date_month.setter
    def base_date_month(self, value="January"):
        """  Corresponds to IDD Field `base_date_month`
        Enter the month that is the beginning of study period also known as the beginning of the base period.

        Args:
            value (str): value for IDD Field `base_date_month`
                Accepted values are:
                      - January
                      - February
                      - March
                      - April
                      - May
                      - June
                      - July
                      - August
                      - September
                      - October
                      - November
                      - December
                Default value: January
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `base_date_month`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `base_date_month`')
            vals = set()
            vals.add("January")
            vals.add("February")
            vals.add("March")
            vals.add("April")
            vals.add("May")
            vals.add("June")
            vals.add("July")
            vals.add("August")
            vals.add("September")
            vals.add("October")
            vals.add("November")
            vals.add("December")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `base_date_month`'.format(value))

        self._data["Base Date Month"] = value

    @property
    def base_date_year(self):
        """Get base_date_year

        Returns:
            int: the value of `base_date_year` or None if not set
        """
        return self._data["Base Date Year"]

    @base_date_year.setter
    def base_date_year(self, value=None):
        """  Corresponds to IDD Field `base_date_year`
        Enter the four digit year that is the beginning of study period such as 2010. The study period is
        also known as the base period.

        Args:
            value (int): value for IDD Field `base_date_year`
                value >= 1900
                value <= 2100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `base_date_year`'.format(value))
            if value < 1900:
                raise ValueError('value need to be greater or equal 1900 '
                                 'for field `base_date_year`')
            if value > 2100:
                raise ValueError('value need to be smaller 2100 '
                                 'for field `base_date_year`')

        self._data["Base Date Year"] = value

    @property
    def service_date_month(self):
        """Get service_date_month

        Returns:
            str: the value of `service_date_month` or None if not set
        """
        return self._data["Service Date Month"]

    @service_date_month.setter
    def service_date_month(self, value="January"):
        """  Corresponds to IDD Field `service_date_month`
        Enter the month that is the beginning of building occupancy. Energy costs computed by EnergyPlus
        are assumed to occur during the year following the service date. The service date must be the
        same or later than the Base Date. This field could also be referred to as part of beneficial
        occupancy date.

        Args:
            value (str): value for IDD Field `service_date_month`
                Accepted values are:
                      - January
                      - February
                      - March
                      - April
                      - May
                      - June
                      - July
                      - August
                      - September
                      - October
                      - November
                      - December
                Default value: January
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `service_date_month`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `service_date_month`')
            vals = set()
            vals.add("January")
            vals.add("February")
            vals.add("March")
            vals.add("April")
            vals.add("May")
            vals.add("June")
            vals.add("July")
            vals.add("August")
            vals.add("September")
            vals.add("October")
            vals.add("November")
            vals.add("December")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `service_date_month`'.format(value))

        self._data["Service Date Month"] = value

    @property
    def service_date_year(self):
        """Get service_date_year

        Returns:
            int: the value of `service_date_year` or None if not set
        """
        return self._data["Service Date Year"]

    @service_date_year.setter
    def service_date_year(self, value=None):
        """  Corresponds to IDD Field `service_date_year`
        Enter the four digit year that is the beginning of occupancy such as 2010.

        Args:
            value (int): value for IDD Field `service_date_year`
                value >= 1900
                value <= 2100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `service_date_year`'.format(value))
            if value < 1900:
                raise ValueError('value need to be greater or equal 1900 '
                                 'for field `service_date_year`')
            if value > 2100:
                raise ValueError('value need to be smaller 2100 '
                                 'for field `service_date_year`')

        self._data["Service Date Year"] = value

    @property
    def length_of_study_period_in_years(self):
        """Get length_of_study_period_in_years

        Returns:
            int: the value of `length_of_study_period_in_years` or None if not set
        """
        return self._data["Length of Study Period in Years"]

    @length_of_study_period_in_years.setter
    def length_of_study_period_in_years(self, value=None):
        """  Corresponds to IDD Field `length_of_study_period_in_years`
        Enter the number of years of the study period. It is the number of years that the study continues
        based on the start at the base date. The default value is 25 years. Only integers may be used
        indicating whole years.

        Args:
            value (int): value for IDD Field `length_of_study_period_in_years`
                value >= 1
                value <= 100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `length_of_study_period_in_years`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `length_of_study_period_in_years`')
            if value > 100:
                raise ValueError('value need to be smaller 100 '
                                 'for field `length_of_study_period_in_years`')

        self._data["Length of Study Period in Years"] = value

    @property
    def tax_rate(self):
        """Get tax_rate

        Returns:
            float: the value of `tax_rate` or None if not set
        """
        return self._data["Tax rate"]

    @tax_rate.setter
    def tax_rate(self, value=None):
        """  Corresponds to IDD Field `tax_rate`
        Enter the overall marginal tax rate for the project costs. This does not include energy or water
        taxes. The tax rate entered should be based on the marginal tax rate for the entity and not the
        average tax rate. Enter the tax rate results in present value calculations after taxes. Most
        analyses do not factor in the impact of taxes and assume that all options under consideration
        have roughly the same tax impact. Due to this many times the tax rate can be left to default
        to zero and the present value results before taxes are used to make decisions. The value
        should be entered as a decimal value. For 15% enter 0.15. For an analysis that does not include
        tax impacts enter 0.0.

        Args:
            value (float): value for IDD Field `tax_rate`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `tax_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tax_rate`')

        self._data["Tax rate"] = value

    @property
    def depreciation_method(self):
        """Get depreciation_method

        Returns:
            str: the value of `depreciation_method` or None if not set
        """
        return self._data["Depreciation Method"]

    @depreciation_method.setter
    def depreciation_method(self, value="None"):
        """  Corresponds to IDD Field `depreciation_method`
        For an analysis that includes income tax impacts this entry describes how capital costs are
        depreciated. Only one depreciation method may be used for an analysis and is applied to all
        capital expenditures.

        Args:
            value (str): value for IDD Field `depreciation_method`
                Accepted values are:
                      - ModifiedAcceleratedCostRecoverySystem-3year
                      - ModifiedAcceleratedCostRecoverySystem-5year
                      - ModifiedAcceleratedCostRecoverySystem-7year
                      - ModifiedAcceleratedCostRecoverySystem-10year
                      - ModifiedAcceleratedCostRecoverySystem-15year
                      - ModifiedAcceleratedCostRecoverySystem-20year
                      - StraightLine-27year
                      - StraightLine-31year
                      - StraightLine-39year
                      - StraightLine-40year
                      - None
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `depreciation_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `depreciation_method`')
            vals = set()
            vals.add("ModifiedAcceleratedCostRecoverySystem-3year")
            vals.add("ModifiedAcceleratedCostRecoverySystem-5year")
            vals.add("ModifiedAcceleratedCostRecoverySystem-7year")
            vals.add("ModifiedAcceleratedCostRecoverySystem-10year")
            vals.add("ModifiedAcceleratedCostRecoverySystem-15year")
            vals.add("ModifiedAcceleratedCostRecoverySystem-20year")
            vals.add("StraightLine-27year")
            vals.add("StraightLine-31year")
            vals.add("StraightLine-39year")
            vals.add("StraightLine-40year")
            vals.add("None")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `depreciation_method`'.format(value))

        self._data["Depreciation Method"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.discounting_convention))
        out.append(self._to_str(self.inflation_approach))
        out.append(self._to_str(self.real_discount_rate))
        out.append(self._to_str(self.nominal_discount_rate))
        out.append(self._to_str(self.inflation))
        out.append(self._to_str(self.base_date_month))
        out.append(self._to_str(self.base_date_year))
        out.append(self._to_str(self.service_date_month))
        out.append(self._to_str(self.service_date_year))
        out.append(self._to_str(self.length_of_study_period_in_years))
        out.append(self._to_str(self.tax_rate))
        out.append(self._to_str(self.depreciation_method))
        return ",".join(out)

class LifeCycleCostRecurringCosts(object):
    """ Corresponds to IDD object `LifeCycleCost:RecurringCosts`
        Recurring costs are costs that repeat over time on a regular schedule during the
        study period. If costs associated with equipment do repeat but not on a regular
        schedule, use LifeCycleCost:NonrecurringCost objects instead.
    
    """
    internal_name = "LifeCycleCost:RecurringCosts"
    field_count = 9
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `LifeCycleCost:RecurringCosts`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Category"] = None
        self._data["Cost"] = None
        self._data["Start of Costs"] = None
        self._data["Years from Start"] = None
        self._data["Months from Start"] = None
        self._data["Repeat Period Years"] = None
        self._data["Repeat Period Months"] = None
        self._data["Annual escalation rate"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.category = None
        else:
            self.category = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost = None
        else:
            self.cost = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_of_costs = None
        else:
            self.start_of_costs = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.years_from_start = None
        else:
            self.years_from_start = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.months_from_start = None
        else:
            self.months_from_start = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.repeat_period_years = None
        else:
            self.repeat_period_years = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.repeat_period_months = None
        else:
            self.repeat_period_months = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.annual_escalation_rate = None
        else:
            self.annual_escalation_rate = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def category(self):
        """Get category

        Returns:
            str: the value of `category` or None if not set
        """
        return self._data["Category"]

    @category.setter
    def category(self, value="Maintenance"):
        """  Corresponds to IDD Field `category`

        Args:
            value (str): value for IDD Field `category`
                Accepted values are:
                      - Maintenance
                      - Repair
                      - Operation
                      - Replacement
                      - MinorOverhaul
                      - MajorOverhaul
                      - OtherOperational
                Default value: Maintenance
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `category`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `category`')
            vals = set()
            vals.add("Maintenance")
            vals.add("Repair")
            vals.add("Operation")
            vals.add("Replacement")
            vals.add("MinorOverhaul")
            vals.add("MajorOverhaul")
            vals.add("OtherOperational")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `category`'.format(value))

        self._data["Category"] = value

    @property
    def cost(self):
        """Get cost

        Returns:
            float: the value of `cost` or None if not set
        """
        return self._data["Cost"]

    @cost.setter
    def cost(self, value=None):
        """  Corresponds to IDD Field `cost`
        Enter the cost in dollars (or the appropriate monetary unit) for the recurring costs. Enter
        the cost for each time it occurs. For example if the annual maintenance cost is 500 dolllars
        enter 500 here.

        Args:
            value (float): value for IDD Field `cost`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost`'.format(value))

        self._data["Cost"] = value

    @property
    def start_of_costs(self):
        """Get start_of_costs

        Returns:
            str: the value of `start_of_costs` or None if not set
        """
        return self._data["Start of Costs"]

    @start_of_costs.setter
    def start_of_costs(self, value="ServicePeriod"):
        """  Corresponds to IDD Field `start_of_costs`
        Enter when the costs start. The First Year of Cost is based on the number of years past the
        Start of Costs. For most maintenance costs the Start of Costs should be Service Period.

        Args:
            value (str): value for IDD Field `start_of_costs`
                Accepted values are:
                      - ServicePeriod
                      - BasePeriod
                Default value: ServicePeriod
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `start_of_costs`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `start_of_costs`')
            vals = set()
            vals.add("ServicePeriod")
            vals.add("BasePeriod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `start_of_costs`'.format(value))

        self._data["Start of Costs"] = value

    @property
    def years_from_start(self):
        """Get years_from_start

        Returns:
            int: the value of `years_from_start` or None if not set
        """
        return self._data["Years from Start"]

    @years_from_start.setter
    def years_from_start(self, value=None):
        """  Corresponds to IDD Field `years_from_start`
        This field and the Months From Start field together represent the time from either the start
        of the Service Period on the service month and year or start of the Base Period on the base
        month and year (depending on the Start of Costs field) that the costs start to occur. Only
        integers should be entered representing whole years.

        Args:
            value (int): value for IDD Field `years_from_start`
                value >= 0
                value <= 100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `years_from_start`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `years_from_start`')
            if value > 100:
                raise ValueError('value need to be smaller 100 '
                                 'for field `years_from_start`')

        self._data["Years from Start"] = value

    @property
    def months_from_start(self):
        """Get months_from_start

        Returns:
            int: the value of `months_from_start` or None if not set
        """
        return self._data["Months from Start"]

    @months_from_start.setter
    def months_from_start(self, value=None):
        """  Corresponds to IDD Field `months_from_start`
        This field and the Years From Start field together represent the time from either the start
        of the Service Period on the service month and year or start of the Base Period on the base
        month and year (depending on the Start of Costs field) that the costs start to occur. Only
        integers should be entered representing whole months. The Years From Start (times 12) and
        Months From Start are added together.

        Args:
            value (int): value for IDD Field `months_from_start`
                value >= 0
                value <= 1200
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `months_from_start`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `months_from_start`')
            if value > 1200:
                raise ValueError('value need to be smaller 1200 '
                                 'for field `months_from_start`')

        self._data["Months from Start"] = value

    @property
    def repeat_period_years(self):
        """Get repeat_period_years

        Returns:
            int: the value of `repeat_period_years` or None if not set
        """
        return self._data["Repeat Period Years"]

    @repeat_period_years.setter
    def repeat_period_years(self, value=1 ):
        """  Corresponds to IDD Field `repeat_period_years`
        This field and the Repeat Period Months field indicate how much time elapses between
        reoccurrences of the cost. For costs that occur every year such the Repeat Period Years
        should be 1 and Repeat Period Months should be 0. Only integers should be entered
        representing whole years.

        Args:
            value (int): value for IDD Field `repeat_period_years`
                Default value: 1
                value >= 0
                value <= 100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `repeat_period_years`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `repeat_period_years`')
            if value > 100:
                raise ValueError('value need to be smaller 100 '
                                 'for field `repeat_period_years`')

        self._data["Repeat Period Years"] = value

    @property
    def repeat_period_months(self):
        """Get repeat_period_months

        Returns:
            int: the value of `repeat_period_months` or None if not set
        """
        return self._data["Repeat Period Months"]

    @repeat_period_months.setter
    def repeat_period_months(self, value=0 ):
        """  Corresponds to IDD Field `repeat_period_months`
        This field and the Repeat Period Years field indicate how much time elapses between
        reoccurrences of the cost. Only integers should be entered representing whole years.
        The Repeat Period Years (times 12) and Repeat Period Months are added together.

        Args:
            value (int): value for IDD Field `repeat_period_months`
                Default value: 0
                value >= 0
                value <= 1200
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `repeat_period_months`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `repeat_period_months`')
            if value > 1200:
                raise ValueError('value need to be smaller 1200 '
                                 'for field `repeat_period_months`')

        self._data["Repeat Period Months"] = value

    @property
    def annual_escalation_rate(self):
        """Get annual_escalation_rate

        Returns:
            float: the value of `annual_escalation_rate` or None if not set
        """
        return self._data["Annual escalation rate"]

    @annual_escalation_rate.setter
    def annual_escalation_rate(self, value=None):
        """  Corresponds to IDD Field `annual_escalation_rate`
        Enter the annual escalation rate as a decimal. For a 1% rate enter the value 0.01.
        This input is used when the Inflation Approach is CurrentDollar. When Inflation
        Approach is set to ConstantDollar this input is ignored.

        Args:
            value (float): value for IDD Field `annual_escalation_rate`
                value >= -0.3
                value <= 0.3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `annual_escalation_rate`'.format(value))
            if value < -0.3:
                raise ValueError('value need to be greater or equal -0.3 '
                                 'for field `annual_escalation_rate`')
            if value > 0.3:
                raise ValueError('value need to be smaller 0.3 '
                                 'for field `annual_escalation_rate`')

        self._data["Annual escalation rate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.category))
        out.append(self._to_str(self.cost))
        out.append(self._to_str(self.start_of_costs))
        out.append(self._to_str(self.years_from_start))
        out.append(self._to_str(self.months_from_start))
        out.append(self._to_str(self.repeat_period_years))
        out.append(self._to_str(self.repeat_period_months))
        out.append(self._to_str(self.annual_escalation_rate))
        return ",".join(out)

class LifeCycleCostNonrecurringCost(object):
    """ Corresponds to IDD object `LifeCycleCost:NonrecurringCost`
        A non-recurring cost happens only once during the study period. For costs that occur
        more than once during the study period on a regular schedule, use the
        LifeCycleCost:RecurringCost object.
    
    """
    internal_name = "LifeCycleCost:NonrecurringCost"
    field_count = 6
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `LifeCycleCost:NonrecurringCost`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Category"] = None
        self._data["Cost"] = None
        self._data["Start of Costs"] = None
        self._data["Years from Start"] = None
        self._data["Months from Start"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.category = None
        else:
            self.category = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.cost = None
        else:
            self.cost = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.start_of_costs = None
        else:
            self.start_of_costs = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.years_from_start = None
        else:
            self.years_from_start = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.months_from_start = None
        else:
            self.months_from_start = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def category(self):
        """Get category

        Returns:
            str: the value of `category` or None if not set
        """
        return self._data["Category"]

    @category.setter
    def category(self, value="Construction"):
        """  Corresponds to IDD Field `category`

        Args:
            value (str): value for IDD Field `category`
                Accepted values are:
                      - Construction
                      - Salvage
                      - OtherCapital
                Default value: Construction
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `category`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `category`')
            vals = set()
            vals.add("Construction")
            vals.add("Salvage")
            vals.add("OtherCapital")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `category`'.format(value))

        self._data["Category"] = value

    @property
    def cost(self):
        """Get cost

        Returns:
            float: the value of `cost` or None if not set
        """
        return self._data["Cost"]

    @cost.setter
    def cost(self, value=None):
        """  Corresponds to IDD Field `cost`
        Enter the non-recurring cost value. For construction and other capital costs the value
        entered is typically a positive value. For salvage costs the value entered is typically a
        negative value which represents the money paid to the investor for the equipment at the
        end of the study period.

        Args:
            value (float): value for IDD Field `cost`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `cost`'.format(value))

        self._data["Cost"] = value

    @property
    def start_of_costs(self):
        """Get start_of_costs

        Returns:
            str: the value of `start_of_costs` or None if not set
        """
        return self._data["Start of Costs"]

    @start_of_costs.setter
    def start_of_costs(self, value="ServicePeriod"):
        """  Corresponds to IDD Field `start_of_costs`
        Enter when the costs start. The First Year of Cost is based on the number of years past the
        Start of Costs. For most non-recurring costs the Start of Costs should be Base Period which
        begins at the base month and year.

        Args:
            value (str): value for IDD Field `start_of_costs`
                Accepted values are:
                      - ServicePeriod
                      - BasePeriod
                Default value: ServicePeriod
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `start_of_costs`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `start_of_costs`')
            vals = set()
            vals.add("ServicePeriod")
            vals.add("BasePeriod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `start_of_costs`'.format(value))

        self._data["Start of Costs"] = value

    @property
    def years_from_start(self):
        """Get years_from_start

        Returns:
            int: the value of `years_from_start` or None if not set
        """
        return self._data["Years from Start"]

    @years_from_start.setter
    def years_from_start(self, value=None):
        """  Corresponds to IDD Field `years_from_start`
        This field and the Months From Start field together represent the time from either the start
        of the Service Period on the service month and year or start of the Base Period on the base
        month and year (depending on the Start of Cost field) that the costs start to occur. Only
        integers should be entered representing whole years.

        Args:
            value (int): value for IDD Field `years_from_start`
                value >= 0
                value <= 100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `years_from_start`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `years_from_start`')
            if value > 100:
                raise ValueError('value need to be smaller 100 '
                                 'for field `years_from_start`')

        self._data["Years from Start"] = value

    @property
    def months_from_start(self):
        """Get months_from_start

        Returns:
            int: the value of `months_from_start` or None if not set
        """
        return self._data["Months from Start"]

    @months_from_start.setter
    def months_from_start(self, value=None):
        """  Corresponds to IDD Field `months_from_start`
        This field and the Years From Start field together represent the time from either the start
        of the Service Period on the service month and year or start of the Base Period on the base
        month and year (depending on the Start of Cost field) that the costs start to occur. Only
        integers should be entered representing whole months. The Years From Start (times 12) and
        Months From Start are added together.

        Args:
            value (int): value for IDD Field `months_from_start`
                value >= 0
                value <= 1200
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `months_from_start`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `months_from_start`')
            if value > 1200:
                raise ValueError('value need to be smaller 1200 '
                                 'for field `months_from_start`')

        self._data["Months from Start"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.category))
        out.append(self._to_str(self.cost))
        out.append(self._to_str(self.start_of_costs))
        out.append(self._to_str(self.years_from_start))
        out.append(self._to_str(self.months_from_start))
        return ",".join(out)

class LifeCycleCostUsePriceEscalation(object):
    """ Corresponds to IDD object `LifeCycleCost:UsePriceEscalation`
        Life cycle cost escalation factors. The values for this object may be found in the
        annual supplement to NIST Handbook 135 in Tables Ca-1 to Ca-5 and are included in an
        EnergyPlus dataset file.
    
    """
    internal_name = "LifeCycleCost:UsePriceEscalation"
    field_count = 34
    required_fields = ["Name", "Resource"]

    def __init__(self):
        """ Init data dictionary object for IDD  `LifeCycleCost:UsePriceEscalation`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Resource"] = None
        self._data["Escalation Start Year"] = None
        self._data["Escalation Start Month"] = None
        self._data["Year 1 Escalation"] = None
        self._data["Year 2 Escalation"] = None
        self._data["Year 3 Escalation"] = None
        self._data["Year 4 Escalation"] = None
        self._data["Year 5 Escalation"] = None
        self._data["Year 6 Escalation"] = None
        self._data["Year 7 Escalation"] = None
        self._data["Year 8 Escalation"] = None
        self._data["Year 9 Escalation"] = None
        self._data["Year 10 Escalation"] = None
        self._data["Year 11 Escalation"] = None
        self._data["Year 12 Escalation"] = None
        self._data["Year 13 Escalation"] = None
        self._data["Year 14 Escalation"] = None
        self._data["Year 15 Escalation"] = None
        self._data["Year 16 Escalation"] = None
        self._data["Year 17 Escalation"] = None
        self._data["Year 18 Escalation"] = None
        self._data["Year 19 Escalation"] = None
        self._data["Year 20 Escalation"] = None
        self._data["Year 21 Escalation"] = None
        self._data["Year 22 Escalation"] = None
        self._data["Year 23 Escalation"] = None
        self._data["Year 24 Escalation"] = None
        self._data["Year 25 Escalation"] = None
        self._data["Year 26 Escalation"] = None
        self._data["Year 27 Escalation"] = None
        self._data["Year 28 Escalation"] = None
        self._data["Year 29 Escalation"] = None
        self._data["Year 30 Escalation"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.resource = None
        else:
            self.resource = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.escalation_start_year = None
        else:
            self.escalation_start_year = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.escalation_start_month = None
        else:
            self.escalation_start_month = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_1_escalation = None
        else:
            self.year_1_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_2_escalation = None
        else:
            self.year_2_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_3_escalation = None
        else:
            self.year_3_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_4_escalation = None
        else:
            self.year_4_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_5_escalation = None
        else:
            self.year_5_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_6_escalation = None
        else:
            self.year_6_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_7_escalation = None
        else:
            self.year_7_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_8_escalation = None
        else:
            self.year_8_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_9_escalation = None
        else:
            self.year_9_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_10_escalation = None
        else:
            self.year_10_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_11_escalation = None
        else:
            self.year_11_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_12_escalation = None
        else:
            self.year_12_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_13_escalation = None
        else:
            self.year_13_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_14_escalation = None
        else:
            self.year_14_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_15_escalation = None
        else:
            self.year_15_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_16_escalation = None
        else:
            self.year_16_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_17_escalation = None
        else:
            self.year_17_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_18_escalation = None
        else:
            self.year_18_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_19_escalation = None
        else:
            self.year_19_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_20_escalation = None
        else:
            self.year_20_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_21_escalation = None
        else:
            self.year_21_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_22_escalation = None
        else:
            self.year_22_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_23_escalation = None
        else:
            self.year_23_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_24_escalation = None
        else:
            self.year_24_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_25_escalation = None
        else:
            self.year_25_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_26_escalation = None
        else:
            self.year_26_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_27_escalation = None
        else:
            self.year_27_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_28_escalation = None
        else:
            self.year_28_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_29_escalation = None
        else:
            self.year_29_escalation = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_30_escalation = None
        else:
            self.year_30_escalation = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        The identifier used for the object. The name usually identifies the location (such as the
        state or region or country or census area) that the escalations apply to. In addition the
        name should identify the building class such as residential or commercial or industrial
        and the use type such as electricity or natural gas or water.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def resource(self):
        """Get resource

        Returns:
            str: the value of `resource` or None if not set
        """
        return self._data["Resource"]

    @resource.setter
    def resource(self, value=None):
        """  Corresponds to IDD Field `resource`

        Args:
            value (str): value for IDD Field `resource`
                Accepted values are:
                      - Electricity
                      - ElectricityPurchased
                      - ElectricityProduced
                      - ElectricitySurplusSold
                      - ElectricityNet
                      - NaturalGas
                      - Steam
                      - Gasoline
                      - Diesel
                      - Coal
                      - FuelOil#1
                      - FuelOil#2
                      - Propane
                      - OtherFuel1
                      - OtherFuel2
                      - Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `resource`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `resource`')
            vals = set()
            vals.add("Electricity")
            vals.add("ElectricityPurchased")
            vals.add("ElectricityProduced")
            vals.add("ElectricitySurplusSold")
            vals.add("ElectricityNet")
            vals.add("NaturalGas")
            vals.add("Steam")
            vals.add("Gasoline")
            vals.add("Diesel")
            vals.add("Coal")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Propane")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            vals.add("Water")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `resource`'.format(value))

        self._data["Resource"] = value

    @property
    def escalation_start_year(self):
        """Get escalation_start_year

        Returns:
            int: the value of `escalation_start_year` or None if not set
        """
        return self._data["Escalation Start Year"]

    @escalation_start_year.setter
    def escalation_start_year(self, value=None):
        """  Corresponds to IDD Field `escalation_start_year`
        This field and the Escalation Start Month define the time that corresponds to Year 1 Escalation
        such as 2010 when the escalation rates are applied. This field and the Escalation Start Month
        define the time that escalation begins.

        Args:
            value (int): value for IDD Field `escalation_start_year`
                value >= 1900
                value <= 2100
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `escalation_start_year`'.format(value))
            if value < 1900:
                raise ValueError('value need to be greater or equal 1900 '
                                 'for field `escalation_start_year`')
            if value > 2100:
                raise ValueError('value need to be smaller 2100 '
                                 'for field `escalation_start_year`')

        self._data["Escalation Start Year"] = value

    @property
    def escalation_start_month(self):
        """Get escalation_start_month

        Returns:
            str: the value of `escalation_start_month` or None if not set
        """
        return self._data["Escalation Start Month"]

    @escalation_start_month.setter
    def escalation_start_month(self, value="January"):
        """  Corresponds to IDD Field `escalation_start_month`
        This field and the Escalation Start Year define the time that corresponds to Year 1 Escalation
        such as 2010 when the escalation rates are applied. This field and the Escalation Start Year
        define the time that escalation begins.

        Args:
            value (str): value for IDD Field `escalation_start_month`
                Accepted values are:
                      - January
                      - February
                      - March
                      - April
                      - May
                      - June
                      - July
                      - August
                      - September
                      - October
                      - November
                      - December
                Default value: January
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `escalation_start_month`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `escalation_start_month`')
            vals = set()
            vals.add("January")
            vals.add("February")
            vals.add("March")
            vals.add("April")
            vals.add("May")
            vals.add("June")
            vals.add("July")
            vals.add("August")
            vals.add("September")
            vals.add("October")
            vals.add("November")
            vals.add("December")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `escalation_start_month`'.format(value))

        self._data["Escalation Start Month"] = value

    @property
    def year_1_escalation(self):
        """Get year_1_escalation

        Returns:
            float: the value of `year_1_escalation` or None if not set
        """
        return self._data["Year 1 Escalation"]

    @year_1_escalation.setter
    def year_1_escalation(self, value=None):
        """  Corresponds to IDD Field `year_1_escalation`
        The escalation in price of the energy or water use for the first year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_1_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_1_escalation`'.format(value))

        self._data["Year 1 Escalation"] = value

    @property
    def year_2_escalation(self):
        """Get year_2_escalation

        Returns:
            float: the value of `year_2_escalation` or None if not set
        """
        return self._data["Year 2 Escalation"]

    @year_2_escalation.setter
    def year_2_escalation(self, value=None):
        """  Corresponds to IDD Field `year_2_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_2_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_2_escalation`'.format(value))

        self._data["Year 2 Escalation"] = value

    @property
    def year_3_escalation(self):
        """Get year_3_escalation

        Returns:
            float: the value of `year_3_escalation` or None if not set
        """
        return self._data["Year 3 Escalation"]

    @year_3_escalation.setter
    def year_3_escalation(self, value=None):
        """  Corresponds to IDD Field `year_3_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_3_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_3_escalation`'.format(value))

        self._data["Year 3 Escalation"] = value

    @property
    def year_4_escalation(self):
        """Get year_4_escalation

        Returns:
            float: the value of `year_4_escalation` or None if not set
        """
        return self._data["Year 4 Escalation"]

    @year_4_escalation.setter
    def year_4_escalation(self, value=None):
        """  Corresponds to IDD Field `year_4_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_4_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_4_escalation`'.format(value))

        self._data["Year 4 Escalation"] = value

    @property
    def year_5_escalation(self):
        """Get year_5_escalation

        Returns:
            float: the value of `year_5_escalation` or None if not set
        """
        return self._data["Year 5 Escalation"]

    @year_5_escalation.setter
    def year_5_escalation(self, value=None):
        """  Corresponds to IDD Field `year_5_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_5_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_5_escalation`'.format(value))

        self._data["Year 5 Escalation"] = value

    @property
    def year_6_escalation(self):
        """Get year_6_escalation

        Returns:
            float: the value of `year_6_escalation` or None if not set
        """
        return self._data["Year 6 Escalation"]

    @year_6_escalation.setter
    def year_6_escalation(self, value=None):
        """  Corresponds to IDD Field `year_6_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_6_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_6_escalation`'.format(value))

        self._data["Year 6 Escalation"] = value

    @property
    def year_7_escalation(self):
        """Get year_7_escalation

        Returns:
            float: the value of `year_7_escalation` or None if not set
        """
        return self._data["Year 7 Escalation"]

    @year_7_escalation.setter
    def year_7_escalation(self, value=None):
        """  Corresponds to IDD Field `year_7_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_7_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_7_escalation`'.format(value))

        self._data["Year 7 Escalation"] = value

    @property
    def year_8_escalation(self):
        """Get year_8_escalation

        Returns:
            float: the value of `year_8_escalation` or None if not set
        """
        return self._data["Year 8 Escalation"]

    @year_8_escalation.setter
    def year_8_escalation(self, value=None):
        """  Corresponds to IDD Field `year_8_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_8_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_8_escalation`'.format(value))

        self._data["Year 8 Escalation"] = value

    @property
    def year_9_escalation(self):
        """Get year_9_escalation

        Returns:
            float: the value of `year_9_escalation` or None if not set
        """
        return self._data["Year 9 Escalation"]

    @year_9_escalation.setter
    def year_9_escalation(self, value=None):
        """  Corresponds to IDD Field `year_9_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_9_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_9_escalation`'.format(value))

        self._data["Year 9 Escalation"] = value

    @property
    def year_10_escalation(self):
        """Get year_10_escalation

        Returns:
            float: the value of `year_10_escalation` or None if not set
        """
        return self._data["Year 10 Escalation"]

    @year_10_escalation.setter
    def year_10_escalation(self, value=None):
        """  Corresponds to IDD Field `year_10_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_10_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_10_escalation`'.format(value))

        self._data["Year 10 Escalation"] = value

    @property
    def year_11_escalation(self):
        """Get year_11_escalation

        Returns:
            float: the value of `year_11_escalation` or None if not set
        """
        return self._data["Year 11 Escalation"]

    @year_11_escalation.setter
    def year_11_escalation(self, value=None):
        """  Corresponds to IDD Field `year_11_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_11_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_11_escalation`'.format(value))

        self._data["Year 11 Escalation"] = value

    @property
    def year_12_escalation(self):
        """Get year_12_escalation

        Returns:
            float: the value of `year_12_escalation` or None if not set
        """
        return self._data["Year 12 Escalation"]

    @year_12_escalation.setter
    def year_12_escalation(self, value=None):
        """  Corresponds to IDD Field `year_12_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_12_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_12_escalation`'.format(value))

        self._data["Year 12 Escalation"] = value

    @property
    def year_13_escalation(self):
        """Get year_13_escalation

        Returns:
            float: the value of `year_13_escalation` or None if not set
        """
        return self._data["Year 13 Escalation"]

    @year_13_escalation.setter
    def year_13_escalation(self, value=None):
        """  Corresponds to IDD Field `year_13_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_13_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_13_escalation`'.format(value))

        self._data["Year 13 Escalation"] = value

    @property
    def year_14_escalation(self):
        """Get year_14_escalation

        Returns:
            float: the value of `year_14_escalation` or None if not set
        """
        return self._data["Year 14 Escalation"]

    @year_14_escalation.setter
    def year_14_escalation(self, value=None):
        """  Corresponds to IDD Field `year_14_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_14_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_14_escalation`'.format(value))

        self._data["Year 14 Escalation"] = value

    @property
    def year_15_escalation(self):
        """Get year_15_escalation

        Returns:
            float: the value of `year_15_escalation` or None if not set
        """
        return self._data["Year 15 Escalation"]

    @year_15_escalation.setter
    def year_15_escalation(self, value=None):
        """  Corresponds to IDD Field `year_15_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_15_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_15_escalation`'.format(value))

        self._data["Year 15 Escalation"] = value

    @property
    def year_16_escalation(self):
        """Get year_16_escalation

        Returns:
            float: the value of `year_16_escalation` or None if not set
        """
        return self._data["Year 16 Escalation"]

    @year_16_escalation.setter
    def year_16_escalation(self, value=None):
        """  Corresponds to IDD Field `year_16_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_16_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_16_escalation`'.format(value))

        self._data["Year 16 Escalation"] = value

    @property
    def year_17_escalation(self):
        """Get year_17_escalation

        Returns:
            float: the value of `year_17_escalation` or None if not set
        """
        return self._data["Year 17 Escalation"]

    @year_17_escalation.setter
    def year_17_escalation(self, value=None):
        """  Corresponds to IDD Field `year_17_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_17_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_17_escalation`'.format(value))

        self._data["Year 17 Escalation"] = value

    @property
    def year_18_escalation(self):
        """Get year_18_escalation

        Returns:
            float: the value of `year_18_escalation` or None if not set
        """
        return self._data["Year 18 Escalation"]

    @year_18_escalation.setter
    def year_18_escalation(self, value=None):
        """  Corresponds to IDD Field `year_18_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_18_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_18_escalation`'.format(value))

        self._data["Year 18 Escalation"] = value

    @property
    def year_19_escalation(self):
        """Get year_19_escalation

        Returns:
            float: the value of `year_19_escalation` or None if not set
        """
        return self._data["Year 19 Escalation"]

    @year_19_escalation.setter
    def year_19_escalation(self, value=None):
        """  Corresponds to IDD Field `year_19_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_19_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_19_escalation`'.format(value))

        self._data["Year 19 Escalation"] = value

    @property
    def year_20_escalation(self):
        """Get year_20_escalation

        Returns:
            float: the value of `year_20_escalation` or None if not set
        """
        return self._data["Year 20 Escalation"]

    @year_20_escalation.setter
    def year_20_escalation(self, value=None):
        """  Corresponds to IDD Field `year_20_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_20_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_20_escalation`'.format(value))

        self._data["Year 20 Escalation"] = value

    @property
    def year_21_escalation(self):
        """Get year_21_escalation

        Returns:
            float: the value of `year_21_escalation` or None if not set
        """
        return self._data["Year 21 Escalation"]

    @year_21_escalation.setter
    def year_21_escalation(self, value=None):
        """  Corresponds to IDD Field `year_21_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_21_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_21_escalation`'.format(value))

        self._data["Year 21 Escalation"] = value

    @property
    def year_22_escalation(self):
        """Get year_22_escalation

        Returns:
            float: the value of `year_22_escalation` or None if not set
        """
        return self._data["Year 22 Escalation"]

    @year_22_escalation.setter
    def year_22_escalation(self, value=None):
        """  Corresponds to IDD Field `year_22_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_22_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_22_escalation`'.format(value))

        self._data["Year 22 Escalation"] = value

    @property
    def year_23_escalation(self):
        """Get year_23_escalation

        Returns:
            float: the value of `year_23_escalation` or None if not set
        """
        return self._data["Year 23 Escalation"]

    @year_23_escalation.setter
    def year_23_escalation(self, value=None):
        """  Corresponds to IDD Field `year_23_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_23_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_23_escalation`'.format(value))

        self._data["Year 23 Escalation"] = value

    @property
    def year_24_escalation(self):
        """Get year_24_escalation

        Returns:
            float: the value of `year_24_escalation` or None if not set
        """
        return self._data["Year 24 Escalation"]

    @year_24_escalation.setter
    def year_24_escalation(self, value=None):
        """  Corresponds to IDD Field `year_24_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_24_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_24_escalation`'.format(value))

        self._data["Year 24 Escalation"] = value

    @property
    def year_25_escalation(self):
        """Get year_25_escalation

        Returns:
            float: the value of `year_25_escalation` or None if not set
        """
        return self._data["Year 25 Escalation"]

    @year_25_escalation.setter
    def year_25_escalation(self, value=None):
        """  Corresponds to IDD Field `year_25_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_25_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_25_escalation`'.format(value))

        self._data["Year 25 Escalation"] = value

    @property
    def year_26_escalation(self):
        """Get year_26_escalation

        Returns:
            float: the value of `year_26_escalation` or None if not set
        """
        return self._data["Year 26 Escalation"]

    @year_26_escalation.setter
    def year_26_escalation(self, value=None):
        """  Corresponds to IDD Field `year_26_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_26_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_26_escalation`'.format(value))

        self._data["Year 26 Escalation"] = value

    @property
    def year_27_escalation(self):
        """Get year_27_escalation

        Returns:
            float: the value of `year_27_escalation` or None if not set
        """
        return self._data["Year 27 Escalation"]

    @year_27_escalation.setter
    def year_27_escalation(self, value=None):
        """  Corresponds to IDD Field `year_27_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_27_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_27_escalation`'.format(value))

        self._data["Year 27 Escalation"] = value

    @property
    def year_28_escalation(self):
        """Get year_28_escalation

        Returns:
            float: the value of `year_28_escalation` or None if not set
        """
        return self._data["Year 28 Escalation"]

    @year_28_escalation.setter
    def year_28_escalation(self, value=None):
        """  Corresponds to IDD Field `year_28_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_28_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_28_escalation`'.format(value))

        self._data["Year 28 Escalation"] = value

    @property
    def year_29_escalation(self):
        """Get year_29_escalation

        Returns:
            float: the value of `year_29_escalation` or None if not set
        """
        return self._data["Year 29 Escalation"]

    @year_29_escalation.setter
    def year_29_escalation(self, value=None):
        """  Corresponds to IDD Field `year_29_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_29_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_29_escalation`'.format(value))

        self._data["Year 29 Escalation"] = value

    @property
    def year_30_escalation(self):
        """Get year_30_escalation

        Returns:
            float: the value of `year_30_escalation` or None if not set
        """
        return self._data["Year 30 Escalation"]

    @year_30_escalation.setter
    def year_30_escalation(self, value=None):
        """  Corresponds to IDD Field `year_30_escalation`
        The escalation in price of the energy or water use for the year expressed as a decimal.

        Args:
            value (float): value for IDD Field `year_30_escalation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_30_escalation`'.format(value))

        self._data["Year 30 Escalation"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.resource))
        out.append(self._to_str(self.escalation_start_year))
        out.append(self._to_str(self.escalation_start_month))
        out.append(self._to_str(self.year_1_escalation))
        out.append(self._to_str(self.year_2_escalation))
        out.append(self._to_str(self.year_3_escalation))
        out.append(self._to_str(self.year_4_escalation))
        out.append(self._to_str(self.year_5_escalation))
        out.append(self._to_str(self.year_6_escalation))
        out.append(self._to_str(self.year_7_escalation))
        out.append(self._to_str(self.year_8_escalation))
        out.append(self._to_str(self.year_9_escalation))
        out.append(self._to_str(self.year_10_escalation))
        out.append(self._to_str(self.year_11_escalation))
        out.append(self._to_str(self.year_12_escalation))
        out.append(self._to_str(self.year_13_escalation))
        out.append(self._to_str(self.year_14_escalation))
        out.append(self._to_str(self.year_15_escalation))
        out.append(self._to_str(self.year_16_escalation))
        out.append(self._to_str(self.year_17_escalation))
        out.append(self._to_str(self.year_18_escalation))
        out.append(self._to_str(self.year_19_escalation))
        out.append(self._to_str(self.year_20_escalation))
        out.append(self._to_str(self.year_21_escalation))
        out.append(self._to_str(self.year_22_escalation))
        out.append(self._to_str(self.year_23_escalation))
        out.append(self._to_str(self.year_24_escalation))
        out.append(self._to_str(self.year_25_escalation))
        out.append(self._to_str(self.year_26_escalation))
        out.append(self._to_str(self.year_27_escalation))
        out.append(self._to_str(self.year_28_escalation))
        out.append(self._to_str(self.year_29_escalation))
        out.append(self._to_str(self.year_30_escalation))
        return ",".join(out)

class LifeCycleCostUseAdjustment(object):
    """ Corresponds to IDD object `LifeCycleCost:UseAdjustment`
        Used by advanced users to adjust the energy or water use costs for future years. This
        should not be used for compensating for inflation but should only be used to increase
        the costs of energy or water based on assumed changes to the actual usage, such as
        anticipated changes in the future function of the building. The adjustments begin at
        the start of the service period.
    
    """
    internal_name = "LifeCycleCost:UseAdjustment"
    field_count = 32
    required_fields = ["Name", "Resource"]

    def __init__(self):
        """ Init data dictionary object for IDD  `LifeCycleCost:UseAdjustment`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Resource"] = None
        self._data["Year 1 Multiplier"] = None
        self._data["Year 2 Multiplier"] = None
        self._data["Year 3 Multiplier"] = None
        self._data["Year 4 Multiplier"] = None
        self._data["Year 5 Multiplier"] = None
        self._data["Year 6 Multiplier"] = None
        self._data["Year 7 Multiplier"] = None
        self._data["Year 8 Multiplier"] = None
        self._data["Year 9 Multiplier"] = None
        self._data["Year 10 Multiplier"] = None
        self._data["Year 11 Multiplier"] = None
        self._data["Year 12 Multiplier"] = None
        self._data["Year 13 Multiplier"] = None
        self._data["Year 14 Multiplier"] = None
        self._data["Year 15 Multiplier"] = None
        self._data["Year 16 Multiplier"] = None
        self._data["Year 17 Multiplier"] = None
        self._data["Year 18 Multiplier"] = None
        self._data["Year 19 Multiplier"] = None
        self._data["Year 20 Multiplier"] = None
        self._data["Year 21 Multiplier"] = None
        self._data["Year 22 Multiplier"] = None
        self._data["Year 23 Multiplier"] = None
        self._data["Year 24 Multiplier"] = None
        self._data["Year 25 Multiplier"] = None
        self._data["Year 26 Multiplier"] = None
        self._data["Year 27 Multiplier"] = None
        self._data["Year 28 Multiplier"] = None
        self._data["Year 29 Multiplier"] = None
        self._data["Year 30 Multiplier"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.resource = None
        else:
            self.resource = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_1_multiplier = None
        else:
            self.year_1_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_2_multiplier = None
        else:
            self.year_2_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_3_multiplier = None
        else:
            self.year_3_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_4_multiplier = None
        else:
            self.year_4_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_5_multiplier = None
        else:
            self.year_5_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_6_multiplier = None
        else:
            self.year_6_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_7_multiplier = None
        else:
            self.year_7_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_8_multiplier = None
        else:
            self.year_8_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_9_multiplier = None
        else:
            self.year_9_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_10_multiplier = None
        else:
            self.year_10_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_11_multiplier = None
        else:
            self.year_11_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_12_multiplier = None
        else:
            self.year_12_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_13_multiplier = None
        else:
            self.year_13_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_14_multiplier = None
        else:
            self.year_14_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_15_multiplier = None
        else:
            self.year_15_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_16_multiplier = None
        else:
            self.year_16_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_17_multiplier = None
        else:
            self.year_17_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_18_multiplier = None
        else:
            self.year_18_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_19_multiplier = None
        else:
            self.year_19_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_20_multiplier = None
        else:
            self.year_20_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_21_multiplier = None
        else:
            self.year_21_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_22_multiplier = None
        else:
            self.year_22_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_23_multiplier = None
        else:
            self.year_23_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_24_multiplier = None
        else:
            self.year_24_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_25_multiplier = None
        else:
            self.year_25_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_26_multiplier = None
        else:
            self.year_26_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_27_multiplier = None
        else:
            self.year_27_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_28_multiplier = None
        else:
            self.year_28_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_29_multiplier = None
        else:
            self.year_29_multiplier = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.year_30_multiplier = None
        else:
            self.year_30_multiplier = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def resource(self):
        """Get resource

        Returns:
            str: the value of `resource` or None if not set
        """
        return self._data["Resource"]

    @resource.setter
    def resource(self, value=None):
        """  Corresponds to IDD Field `resource`

        Args:
            value (str): value for IDD Field `resource`
                Accepted values are:
                      - Electricity
                      - ElectricityPurchased
                      - ElectricityProduced
                      - ElectricitySurplusSold
                      - ElectricityNet
                      - NaturalGas
                      - Steam
                      - Gasoline
                      - Diesel
                      - Coal
                      - FuelOil#1
                      - FuelOil#2
                      - Propane
                      - OtherFuel1
                      - OtherFuel2
                      - Water
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `resource`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `resource`')
            vals = set()
            vals.add("Electricity")
            vals.add("ElectricityPurchased")
            vals.add("ElectricityProduced")
            vals.add("ElectricitySurplusSold")
            vals.add("ElectricityNet")
            vals.add("NaturalGas")
            vals.add("Steam")
            vals.add("Gasoline")
            vals.add("Diesel")
            vals.add("Coal")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Propane")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            vals.add("Water")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `resource`'.format(value))

        self._data["Resource"] = value

    @property
    def year_1_multiplier(self):
        """Get year_1_multiplier

        Returns:
            float: the value of `year_1_multiplier` or None if not set
        """
        return self._data["Year 1 Multiplier"]

    @year_1_multiplier.setter
    def year_1_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_1_multiplier`
        The multiplier to be applied to the end-use cost for the first year in the service period.
        The total utility costs for the selected end-use is multiplied by this value. For no change
        enter 1.0.

        Args:
            value (float): value for IDD Field `year_1_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_1_multiplier`'.format(value))

        self._data["Year 1 Multiplier"] = value

    @property
    def year_2_multiplier(self):
        """Get year_2_multiplier

        Returns:
            float: the value of `year_2_multiplier` or None if not set
        """
        return self._data["Year 2 Multiplier"]

    @year_2_multiplier.setter
    def year_2_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_2_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_2_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_2_multiplier`'.format(value))

        self._data["Year 2 Multiplier"] = value

    @property
    def year_3_multiplier(self):
        """Get year_3_multiplier

        Returns:
            float: the value of `year_3_multiplier` or None if not set
        """
        return self._data["Year 3 Multiplier"]

    @year_3_multiplier.setter
    def year_3_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_3_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_3_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_3_multiplier`'.format(value))

        self._data["Year 3 Multiplier"] = value

    @property
    def year_4_multiplier(self):
        """Get year_4_multiplier

        Returns:
            float: the value of `year_4_multiplier` or None if not set
        """
        return self._data["Year 4 Multiplier"]

    @year_4_multiplier.setter
    def year_4_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_4_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_4_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_4_multiplier`'.format(value))

        self._data["Year 4 Multiplier"] = value

    @property
    def year_5_multiplier(self):
        """Get year_5_multiplier

        Returns:
            float: the value of `year_5_multiplier` or None if not set
        """
        return self._data["Year 5 Multiplier"]

    @year_5_multiplier.setter
    def year_5_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_5_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_5_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_5_multiplier`'.format(value))

        self._data["Year 5 Multiplier"] = value

    @property
    def year_6_multiplier(self):
        """Get year_6_multiplier

        Returns:
            float: the value of `year_6_multiplier` or None if not set
        """
        return self._data["Year 6 Multiplier"]

    @year_6_multiplier.setter
    def year_6_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_6_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_6_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_6_multiplier`'.format(value))

        self._data["Year 6 Multiplier"] = value

    @property
    def year_7_multiplier(self):
        """Get year_7_multiplier

        Returns:
            float: the value of `year_7_multiplier` or None if not set
        """
        return self._data["Year 7 Multiplier"]

    @year_7_multiplier.setter
    def year_7_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_7_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_7_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_7_multiplier`'.format(value))

        self._data["Year 7 Multiplier"] = value

    @property
    def year_8_multiplier(self):
        """Get year_8_multiplier

        Returns:
            float: the value of `year_8_multiplier` or None if not set
        """
        return self._data["Year 8 Multiplier"]

    @year_8_multiplier.setter
    def year_8_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_8_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_8_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_8_multiplier`'.format(value))

        self._data["Year 8 Multiplier"] = value

    @property
    def year_9_multiplier(self):
        """Get year_9_multiplier

        Returns:
            float: the value of `year_9_multiplier` or None if not set
        """
        return self._data["Year 9 Multiplier"]

    @year_9_multiplier.setter
    def year_9_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_9_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_9_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_9_multiplier`'.format(value))

        self._data["Year 9 Multiplier"] = value

    @property
    def year_10_multiplier(self):
        """Get year_10_multiplier

        Returns:
            float: the value of `year_10_multiplier` or None if not set
        """
        return self._data["Year 10 Multiplier"]

    @year_10_multiplier.setter
    def year_10_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_10_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_10_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_10_multiplier`'.format(value))

        self._data["Year 10 Multiplier"] = value

    @property
    def year_11_multiplier(self):
        """Get year_11_multiplier

        Returns:
            float: the value of `year_11_multiplier` or None if not set
        """
        return self._data["Year 11 Multiplier"]

    @year_11_multiplier.setter
    def year_11_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_11_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_11_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_11_multiplier`'.format(value))

        self._data["Year 11 Multiplier"] = value

    @property
    def year_12_multiplier(self):
        """Get year_12_multiplier

        Returns:
            float: the value of `year_12_multiplier` or None if not set
        """
        return self._data["Year 12 Multiplier"]

    @year_12_multiplier.setter
    def year_12_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_12_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_12_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_12_multiplier`'.format(value))

        self._data["Year 12 Multiplier"] = value

    @property
    def year_13_multiplier(self):
        """Get year_13_multiplier

        Returns:
            float: the value of `year_13_multiplier` or None if not set
        """
        return self._data["Year 13 Multiplier"]

    @year_13_multiplier.setter
    def year_13_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_13_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_13_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_13_multiplier`'.format(value))

        self._data["Year 13 Multiplier"] = value

    @property
    def year_14_multiplier(self):
        """Get year_14_multiplier

        Returns:
            float: the value of `year_14_multiplier` or None if not set
        """
        return self._data["Year 14 Multiplier"]

    @year_14_multiplier.setter
    def year_14_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_14_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_14_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_14_multiplier`'.format(value))

        self._data["Year 14 Multiplier"] = value

    @property
    def year_15_multiplier(self):
        """Get year_15_multiplier

        Returns:
            float: the value of `year_15_multiplier` or None if not set
        """
        return self._data["Year 15 Multiplier"]

    @year_15_multiplier.setter
    def year_15_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_15_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_15_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_15_multiplier`'.format(value))

        self._data["Year 15 Multiplier"] = value

    @property
    def year_16_multiplier(self):
        """Get year_16_multiplier

        Returns:
            float: the value of `year_16_multiplier` or None if not set
        """
        return self._data["Year 16 Multiplier"]

    @year_16_multiplier.setter
    def year_16_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_16_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_16_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_16_multiplier`'.format(value))

        self._data["Year 16 Multiplier"] = value

    @property
    def year_17_multiplier(self):
        """Get year_17_multiplier

        Returns:
            float: the value of `year_17_multiplier` or None if not set
        """
        return self._data["Year 17 Multiplier"]

    @year_17_multiplier.setter
    def year_17_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_17_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_17_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_17_multiplier`'.format(value))

        self._data["Year 17 Multiplier"] = value

    @property
    def year_18_multiplier(self):
        """Get year_18_multiplier

        Returns:
            float: the value of `year_18_multiplier` or None if not set
        """
        return self._data["Year 18 Multiplier"]

    @year_18_multiplier.setter
    def year_18_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_18_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_18_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_18_multiplier`'.format(value))

        self._data["Year 18 Multiplier"] = value

    @property
    def year_19_multiplier(self):
        """Get year_19_multiplier

        Returns:
            float: the value of `year_19_multiplier` or None if not set
        """
        return self._data["Year 19 Multiplier"]

    @year_19_multiplier.setter
    def year_19_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_19_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_19_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_19_multiplier`'.format(value))

        self._data["Year 19 Multiplier"] = value

    @property
    def year_20_multiplier(self):
        """Get year_20_multiplier

        Returns:
            float: the value of `year_20_multiplier` or None if not set
        """
        return self._data["Year 20 Multiplier"]

    @year_20_multiplier.setter
    def year_20_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_20_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_20_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_20_multiplier`'.format(value))

        self._data["Year 20 Multiplier"] = value

    @property
    def year_21_multiplier(self):
        """Get year_21_multiplier

        Returns:
            float: the value of `year_21_multiplier` or None if not set
        """
        return self._data["Year 21 Multiplier"]

    @year_21_multiplier.setter
    def year_21_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_21_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_21_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_21_multiplier`'.format(value))

        self._data["Year 21 Multiplier"] = value

    @property
    def year_22_multiplier(self):
        """Get year_22_multiplier

        Returns:
            float: the value of `year_22_multiplier` or None if not set
        """
        return self._data["Year 22 Multiplier"]

    @year_22_multiplier.setter
    def year_22_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_22_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_22_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_22_multiplier`'.format(value))

        self._data["Year 22 Multiplier"] = value

    @property
    def year_23_multiplier(self):
        """Get year_23_multiplier

        Returns:
            float: the value of `year_23_multiplier` or None if not set
        """
        return self._data["Year 23 Multiplier"]

    @year_23_multiplier.setter
    def year_23_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_23_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_23_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_23_multiplier`'.format(value))

        self._data["Year 23 Multiplier"] = value

    @property
    def year_24_multiplier(self):
        """Get year_24_multiplier

        Returns:
            float: the value of `year_24_multiplier` or None if not set
        """
        return self._data["Year 24 Multiplier"]

    @year_24_multiplier.setter
    def year_24_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_24_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_24_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_24_multiplier`'.format(value))

        self._data["Year 24 Multiplier"] = value

    @property
    def year_25_multiplier(self):
        """Get year_25_multiplier

        Returns:
            float: the value of `year_25_multiplier` or None if not set
        """
        return self._data["Year 25 Multiplier"]

    @year_25_multiplier.setter
    def year_25_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_25_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_25_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_25_multiplier`'.format(value))

        self._data["Year 25 Multiplier"] = value

    @property
    def year_26_multiplier(self):
        """Get year_26_multiplier

        Returns:
            float: the value of `year_26_multiplier` or None if not set
        """
        return self._data["Year 26 Multiplier"]

    @year_26_multiplier.setter
    def year_26_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_26_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_26_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_26_multiplier`'.format(value))

        self._data["Year 26 Multiplier"] = value

    @property
    def year_27_multiplier(self):
        """Get year_27_multiplier

        Returns:
            float: the value of `year_27_multiplier` or None if not set
        """
        return self._data["Year 27 Multiplier"]

    @year_27_multiplier.setter
    def year_27_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_27_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_27_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_27_multiplier`'.format(value))

        self._data["Year 27 Multiplier"] = value

    @property
    def year_28_multiplier(self):
        """Get year_28_multiplier

        Returns:
            float: the value of `year_28_multiplier` or None if not set
        """
        return self._data["Year 28 Multiplier"]

    @year_28_multiplier.setter
    def year_28_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_28_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_28_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_28_multiplier`'.format(value))

        self._data["Year 28 Multiplier"] = value

    @property
    def year_29_multiplier(self):
        """Get year_29_multiplier

        Returns:
            float: the value of `year_29_multiplier` or None if not set
        """
        return self._data["Year 29 Multiplier"]

    @year_29_multiplier.setter
    def year_29_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_29_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_29_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_29_multiplier`'.format(value))

        self._data["Year 29 Multiplier"] = value

    @property
    def year_30_multiplier(self):
        """Get year_30_multiplier

        Returns:
            float: the value of `year_30_multiplier` or None if not set
        """
        return self._data["Year 30 Multiplier"]

    @year_30_multiplier.setter
    def year_30_multiplier(self, value=None):
        """  Corresponds to IDD Field `year_30_multiplier`
        The multiplier to be applied to the end-use cost for each following year. The total utility
        costs for the selected end-use is multiplied by this value. For no change enter 1.0.

        Args:
            value (float): value for IDD Field `year_30_multiplier`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `year_30_multiplier`'.format(value))

        self._data["Year 30 Multiplier"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.resource))
        out.append(self._to_str(self.year_1_multiplier))
        out.append(self._to_str(self.year_2_multiplier))
        out.append(self._to_str(self.year_3_multiplier))
        out.append(self._to_str(self.year_4_multiplier))
        out.append(self._to_str(self.year_5_multiplier))
        out.append(self._to_str(self.year_6_multiplier))
        out.append(self._to_str(self.year_7_multiplier))
        out.append(self._to_str(self.year_8_multiplier))
        out.append(self._to_str(self.year_9_multiplier))
        out.append(self._to_str(self.year_10_multiplier))
        out.append(self._to_str(self.year_11_multiplier))
        out.append(self._to_str(self.year_12_multiplier))
        out.append(self._to_str(self.year_13_multiplier))
        out.append(self._to_str(self.year_14_multiplier))
        out.append(self._to_str(self.year_15_multiplier))
        out.append(self._to_str(self.year_16_multiplier))
        out.append(self._to_str(self.year_17_multiplier))
        out.append(self._to_str(self.year_18_multiplier))
        out.append(self._to_str(self.year_19_multiplier))
        out.append(self._to_str(self.year_20_multiplier))
        out.append(self._to_str(self.year_21_multiplier))
        out.append(self._to_str(self.year_22_multiplier))
        out.append(self._to_str(self.year_23_multiplier))
        out.append(self._to_str(self.year_24_multiplier))
        out.append(self._to_str(self.year_25_multiplier))
        out.append(self._to_str(self.year_26_multiplier))
        out.append(self._to_str(self.year_27_multiplier))
        out.append(self._to_str(self.year_28_multiplier))
        out.append(self._to_str(self.year_29_multiplier))
        out.append(self._to_str(self.year_30_multiplier))
        return ",".join(out)

class ParametricSetValueForRun(object):
    """ Corresponds to IDD object `Parametric:SetValueForRun`
        Parametric objects allow a set of multiple simulations to be defined in a single idf
        file. The parametric preprocessor scans the idf for Parametric:* objects then creates
        and runs multiple idf files, one for each defined simulation.
        The core parametric object is Parametric:SetValueForRun which defines the name
        of a parameters and sets the parameter to different values depending on which
        run is being simulated.
    
    """
    internal_name = "Parametric:SetValueForRun"
    field_count = 101
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Parametric:SetValueForRun`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Value for Run 1"] = None
        self._data["Value for Run 2"] = None
        self._data["Value for Run 3"] = None
        self._data["Value for Run 4"] = None
        self._data["Value for Run 5"] = None
        self._data["Value for Run 6"] = None
        self._data["Value for Run 7"] = None
        self._data["Value for Run 8"] = None
        self._data["Value for Run 9"] = None
        self._data["Value for Run 10"] = None
        self._data["Value for Run 11"] = None
        self._data["Value for Run 12"] = None
        self._data["Value for Run 13"] = None
        self._data["Value for Run 14"] = None
        self._data["Value for Run 15"] = None
        self._data["Value for Run 16"] = None
        self._data["Value for Run 17"] = None
        self._data["Value for Run 18"] = None
        self._data["Value for Run 19"] = None
        self._data["Value for Run 20"] = None
        self._data["Value for Run 21"] = None
        self._data["Value for Run 22"] = None
        self._data["Value for Run 23"] = None
        self._data["Value for Run 24"] = None
        self._data["Value for Run 25"] = None
        self._data["Value for Run 26"] = None
        self._data["Value for Run 27"] = None
        self._data["Value for Run 28"] = None
        self._data["Value for Run 29"] = None
        self._data["Value for Run 30"] = None
        self._data["Value for Run 31"] = None
        self._data["Value for Run 32"] = None
        self._data["Value for Run 33"] = None
        self._data["Value for Run 34"] = None
        self._data["Value for Run 35"] = None
        self._data["Value for Run 36"] = None
        self._data["Value for Run 37"] = None
        self._data["Value for Run 38"] = None
        self._data["Value for Run 39"] = None
        self._data["Value for Run 40"] = None
        self._data["Value for Run 41"] = None
        self._data["Value for Run 42"] = None
        self._data["Value for Run 43"] = None
        self._data["Value for Run 44"] = None
        self._data["Value for Run 45"] = None
        self._data["Value for Run 46"] = None
        self._data["Value for Run 47"] = None
        self._data["Value for Run 48"] = None
        self._data["Value for Run 49"] = None
        self._data["Value for Run 50"] = None
        self._data["Value for Run 51"] = None
        self._data["Value for Run 52"] = None
        self._data["Value for Run 53"] = None
        self._data["Value for Run 54"] = None
        self._data["Value for Run 55"] = None
        self._data["Value for Run 56"] = None
        self._data["Value for Run 57"] = None
        self._data["Value for Run 58"] = None
        self._data["Value for Run 59"] = None
        self._data["Value for Run 60"] = None
        self._data["Value for Run 61"] = None
        self._data["Value for Run 62"] = None
        self._data["Value for Run 63"] = None
        self._data["Value for Run 64"] = None
        self._data["Value for Run 65"] = None
        self._data["Value for Run 66"] = None
        self._data["Value for Run 67"] = None
        self._data["Value for Run 68"] = None
        self._data["Value for Run 69"] = None
        self._data["Value for Run 70"] = None
        self._data["Value for Run 71"] = None
        self._data["Value for Run 72"] = None
        self._data["Value for Run 73"] = None
        self._data["Value for Run 74"] = None
        self._data["Value for Run 75"] = None
        self._data["Value for Run 76"] = None
        self._data["Value for Run 77"] = None
        self._data["Value for Run 78"] = None
        self._data["Value for Run 79"] = None
        self._data["Value for Run 80"] = None
        self._data["Value for Run 81"] = None
        self._data["Value for Run 82"] = None
        self._data["Value for Run 83"] = None
        self._data["Value for Run 84"] = None
        self._data["Value for Run 85"] = None
        self._data["Value for Run 86"] = None
        self._data["Value for Run 87"] = None
        self._data["Value for Run 88"] = None
        self._data["Value for Run 89"] = None
        self._data["Value for Run 90"] = None
        self._data["Value for Run 91"] = None
        self._data["Value for Run 92"] = None
        self._data["Value for Run 93"] = None
        self._data["Value for Run 94"] = None
        self._data["Value for Run 95"] = None
        self._data["Value for Run 96"] = None
        self._data["Value for Run 97"] = None
        self._data["Value for Run 98"] = None
        self._data["Value for Run 99"] = None
        self._data["Value for Run 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_1 = None
        else:
            self.value_for_run_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_2 = None
        else:
            self.value_for_run_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_3 = None
        else:
            self.value_for_run_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_4 = None
        else:
            self.value_for_run_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_5 = None
        else:
            self.value_for_run_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_6 = None
        else:
            self.value_for_run_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_7 = None
        else:
            self.value_for_run_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_8 = None
        else:
            self.value_for_run_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_9 = None
        else:
            self.value_for_run_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_10 = None
        else:
            self.value_for_run_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_11 = None
        else:
            self.value_for_run_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_12 = None
        else:
            self.value_for_run_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_13 = None
        else:
            self.value_for_run_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_14 = None
        else:
            self.value_for_run_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_15 = None
        else:
            self.value_for_run_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_16 = None
        else:
            self.value_for_run_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_17 = None
        else:
            self.value_for_run_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_18 = None
        else:
            self.value_for_run_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_19 = None
        else:
            self.value_for_run_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_20 = None
        else:
            self.value_for_run_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_21 = None
        else:
            self.value_for_run_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_22 = None
        else:
            self.value_for_run_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_23 = None
        else:
            self.value_for_run_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_24 = None
        else:
            self.value_for_run_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_25 = None
        else:
            self.value_for_run_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_26 = None
        else:
            self.value_for_run_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_27 = None
        else:
            self.value_for_run_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_28 = None
        else:
            self.value_for_run_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_29 = None
        else:
            self.value_for_run_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_30 = None
        else:
            self.value_for_run_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_31 = None
        else:
            self.value_for_run_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_32 = None
        else:
            self.value_for_run_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_33 = None
        else:
            self.value_for_run_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_34 = None
        else:
            self.value_for_run_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_35 = None
        else:
            self.value_for_run_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_36 = None
        else:
            self.value_for_run_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_37 = None
        else:
            self.value_for_run_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_38 = None
        else:
            self.value_for_run_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_39 = None
        else:
            self.value_for_run_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_40 = None
        else:
            self.value_for_run_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_41 = None
        else:
            self.value_for_run_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_42 = None
        else:
            self.value_for_run_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_43 = None
        else:
            self.value_for_run_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_44 = None
        else:
            self.value_for_run_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_45 = None
        else:
            self.value_for_run_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_46 = None
        else:
            self.value_for_run_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_47 = None
        else:
            self.value_for_run_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_48 = None
        else:
            self.value_for_run_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_49 = None
        else:
            self.value_for_run_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_50 = None
        else:
            self.value_for_run_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_51 = None
        else:
            self.value_for_run_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_52 = None
        else:
            self.value_for_run_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_53 = None
        else:
            self.value_for_run_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_54 = None
        else:
            self.value_for_run_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_55 = None
        else:
            self.value_for_run_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_56 = None
        else:
            self.value_for_run_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_57 = None
        else:
            self.value_for_run_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_58 = None
        else:
            self.value_for_run_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_59 = None
        else:
            self.value_for_run_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_60 = None
        else:
            self.value_for_run_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_61 = None
        else:
            self.value_for_run_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_62 = None
        else:
            self.value_for_run_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_63 = None
        else:
            self.value_for_run_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_64 = None
        else:
            self.value_for_run_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_65 = None
        else:
            self.value_for_run_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_66 = None
        else:
            self.value_for_run_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_67 = None
        else:
            self.value_for_run_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_68 = None
        else:
            self.value_for_run_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_69 = None
        else:
            self.value_for_run_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_70 = None
        else:
            self.value_for_run_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_71 = None
        else:
            self.value_for_run_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_72 = None
        else:
            self.value_for_run_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_73 = None
        else:
            self.value_for_run_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_74 = None
        else:
            self.value_for_run_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_75 = None
        else:
            self.value_for_run_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_76 = None
        else:
            self.value_for_run_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_77 = None
        else:
            self.value_for_run_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_78 = None
        else:
            self.value_for_run_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_79 = None
        else:
            self.value_for_run_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_80 = None
        else:
            self.value_for_run_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_81 = None
        else:
            self.value_for_run_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_82 = None
        else:
            self.value_for_run_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_83 = None
        else:
            self.value_for_run_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_84 = None
        else:
            self.value_for_run_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_85 = None
        else:
            self.value_for_run_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_86 = None
        else:
            self.value_for_run_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_87 = None
        else:
            self.value_for_run_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_88 = None
        else:
            self.value_for_run_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_89 = None
        else:
            self.value_for_run_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_90 = None
        else:
            self.value_for_run_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_91 = None
        else:
            self.value_for_run_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_92 = None
        else:
            self.value_for_run_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_93 = None
        else:
            self.value_for_run_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_94 = None
        else:
            self.value_for_run_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_95 = None
        else:
            self.value_for_run_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_96 = None
        else:
            self.value_for_run_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_97 = None
        else:
            self.value_for_run_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_98 = None
        else:
            self.value_for_run_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_99 = None
        else:
            self.value_for_run_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_for_run_100 = None
        else:
            self.value_for_run_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Parameter Name
        Must begin with the dollar sign character. The second character must be a letter.
        Remaining characters may only be letters or numbers. No spaces allowed.

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def value_for_run_1(self):
        """Get value_for_run_1

        Returns:
            str: the value of `value_for_run_1` or None if not set
        """
        return self._data["Value for Run 1"]

    @value_for_run_1.setter
    def value_for_run_1(self, value=None):
        """  Corresponds to IDD Field `value_for_run_1`

        Args:
            value (str): value for IDD Field `value_for_run_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_1`')

        self._data["Value for Run 1"] = value

    @property
    def value_for_run_2(self):
        """Get value_for_run_2

        Returns:
            str: the value of `value_for_run_2` or None if not set
        """
        return self._data["Value for Run 2"]

    @value_for_run_2.setter
    def value_for_run_2(self, value=None):
        """  Corresponds to IDD Field `value_for_run_2`

        Args:
            value (str): value for IDD Field `value_for_run_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_2`')

        self._data["Value for Run 2"] = value

    @property
    def value_for_run_3(self):
        """Get value_for_run_3

        Returns:
            str: the value of `value_for_run_3` or None if not set
        """
        return self._data["Value for Run 3"]

    @value_for_run_3.setter
    def value_for_run_3(self, value=None):
        """  Corresponds to IDD Field `value_for_run_3`

        Args:
            value (str): value for IDD Field `value_for_run_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_3`')

        self._data["Value for Run 3"] = value

    @property
    def value_for_run_4(self):
        """Get value_for_run_4

        Returns:
            str: the value of `value_for_run_4` or None if not set
        """
        return self._data["Value for Run 4"]

    @value_for_run_4.setter
    def value_for_run_4(self, value=None):
        """  Corresponds to IDD Field `value_for_run_4`

        Args:
            value (str): value for IDD Field `value_for_run_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_4`')

        self._data["Value for Run 4"] = value

    @property
    def value_for_run_5(self):
        """Get value_for_run_5

        Returns:
            str: the value of `value_for_run_5` or None if not set
        """
        return self._data["Value for Run 5"]

    @value_for_run_5.setter
    def value_for_run_5(self, value=None):
        """  Corresponds to IDD Field `value_for_run_5`

        Args:
            value (str): value for IDD Field `value_for_run_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_5`')

        self._data["Value for Run 5"] = value

    @property
    def value_for_run_6(self):
        """Get value_for_run_6

        Returns:
            str: the value of `value_for_run_6` or None if not set
        """
        return self._data["Value for Run 6"]

    @value_for_run_6.setter
    def value_for_run_6(self, value=None):
        """  Corresponds to IDD Field `value_for_run_6`

        Args:
            value (str): value for IDD Field `value_for_run_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_6`')

        self._data["Value for Run 6"] = value

    @property
    def value_for_run_7(self):
        """Get value_for_run_7

        Returns:
            str: the value of `value_for_run_7` or None if not set
        """
        return self._data["Value for Run 7"]

    @value_for_run_7.setter
    def value_for_run_7(self, value=None):
        """  Corresponds to IDD Field `value_for_run_7`

        Args:
            value (str): value for IDD Field `value_for_run_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_7`')

        self._data["Value for Run 7"] = value

    @property
    def value_for_run_8(self):
        """Get value_for_run_8

        Returns:
            str: the value of `value_for_run_8` or None if not set
        """
        return self._data["Value for Run 8"]

    @value_for_run_8.setter
    def value_for_run_8(self, value=None):
        """  Corresponds to IDD Field `value_for_run_8`

        Args:
            value (str): value for IDD Field `value_for_run_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_8`')

        self._data["Value for Run 8"] = value

    @property
    def value_for_run_9(self):
        """Get value_for_run_9

        Returns:
            str: the value of `value_for_run_9` or None if not set
        """
        return self._data["Value for Run 9"]

    @value_for_run_9.setter
    def value_for_run_9(self, value=None):
        """  Corresponds to IDD Field `value_for_run_9`

        Args:
            value (str): value for IDD Field `value_for_run_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_9`')

        self._data["Value for Run 9"] = value

    @property
    def value_for_run_10(self):
        """Get value_for_run_10

        Returns:
            str: the value of `value_for_run_10` or None if not set
        """
        return self._data["Value for Run 10"]

    @value_for_run_10.setter
    def value_for_run_10(self, value=None):
        """  Corresponds to IDD Field `value_for_run_10`

        Args:
            value (str): value for IDD Field `value_for_run_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_10`')

        self._data["Value for Run 10"] = value

    @property
    def value_for_run_11(self):
        """Get value_for_run_11

        Returns:
            str: the value of `value_for_run_11` or None if not set
        """
        return self._data["Value for Run 11"]

    @value_for_run_11.setter
    def value_for_run_11(self, value=None):
        """  Corresponds to IDD Field `value_for_run_11`

        Args:
            value (str): value for IDD Field `value_for_run_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_11`')

        self._data["Value for Run 11"] = value

    @property
    def value_for_run_12(self):
        """Get value_for_run_12

        Returns:
            str: the value of `value_for_run_12` or None if not set
        """
        return self._data["Value for Run 12"]

    @value_for_run_12.setter
    def value_for_run_12(self, value=None):
        """  Corresponds to IDD Field `value_for_run_12`

        Args:
            value (str): value for IDD Field `value_for_run_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_12`')

        self._data["Value for Run 12"] = value

    @property
    def value_for_run_13(self):
        """Get value_for_run_13

        Returns:
            str: the value of `value_for_run_13` or None if not set
        """
        return self._data["Value for Run 13"]

    @value_for_run_13.setter
    def value_for_run_13(self, value=None):
        """  Corresponds to IDD Field `value_for_run_13`

        Args:
            value (str): value for IDD Field `value_for_run_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_13`')

        self._data["Value for Run 13"] = value

    @property
    def value_for_run_14(self):
        """Get value_for_run_14

        Returns:
            str: the value of `value_for_run_14` or None if not set
        """
        return self._data["Value for Run 14"]

    @value_for_run_14.setter
    def value_for_run_14(self, value=None):
        """  Corresponds to IDD Field `value_for_run_14`

        Args:
            value (str): value for IDD Field `value_for_run_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_14`')

        self._data["Value for Run 14"] = value

    @property
    def value_for_run_15(self):
        """Get value_for_run_15

        Returns:
            str: the value of `value_for_run_15` or None if not set
        """
        return self._data["Value for Run 15"]

    @value_for_run_15.setter
    def value_for_run_15(self, value=None):
        """  Corresponds to IDD Field `value_for_run_15`

        Args:
            value (str): value for IDD Field `value_for_run_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_15`')

        self._data["Value for Run 15"] = value

    @property
    def value_for_run_16(self):
        """Get value_for_run_16

        Returns:
            str: the value of `value_for_run_16` or None if not set
        """
        return self._data["Value for Run 16"]

    @value_for_run_16.setter
    def value_for_run_16(self, value=None):
        """  Corresponds to IDD Field `value_for_run_16`

        Args:
            value (str): value for IDD Field `value_for_run_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_16`')

        self._data["Value for Run 16"] = value

    @property
    def value_for_run_17(self):
        """Get value_for_run_17

        Returns:
            str: the value of `value_for_run_17` or None if not set
        """
        return self._data["Value for Run 17"]

    @value_for_run_17.setter
    def value_for_run_17(self, value=None):
        """  Corresponds to IDD Field `value_for_run_17`

        Args:
            value (str): value for IDD Field `value_for_run_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_17`')

        self._data["Value for Run 17"] = value

    @property
    def value_for_run_18(self):
        """Get value_for_run_18

        Returns:
            str: the value of `value_for_run_18` or None if not set
        """
        return self._data["Value for Run 18"]

    @value_for_run_18.setter
    def value_for_run_18(self, value=None):
        """  Corresponds to IDD Field `value_for_run_18`

        Args:
            value (str): value for IDD Field `value_for_run_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_18`')

        self._data["Value for Run 18"] = value

    @property
    def value_for_run_19(self):
        """Get value_for_run_19

        Returns:
            str: the value of `value_for_run_19` or None if not set
        """
        return self._data["Value for Run 19"]

    @value_for_run_19.setter
    def value_for_run_19(self, value=None):
        """  Corresponds to IDD Field `value_for_run_19`

        Args:
            value (str): value for IDD Field `value_for_run_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_19`')

        self._data["Value for Run 19"] = value

    @property
    def value_for_run_20(self):
        """Get value_for_run_20

        Returns:
            str: the value of `value_for_run_20` or None if not set
        """
        return self._data["Value for Run 20"]

    @value_for_run_20.setter
    def value_for_run_20(self, value=None):
        """  Corresponds to IDD Field `value_for_run_20`

        Args:
            value (str): value for IDD Field `value_for_run_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_20`')

        self._data["Value for Run 20"] = value

    @property
    def value_for_run_21(self):
        """Get value_for_run_21

        Returns:
            str: the value of `value_for_run_21` or None if not set
        """
        return self._data["Value for Run 21"]

    @value_for_run_21.setter
    def value_for_run_21(self, value=None):
        """  Corresponds to IDD Field `value_for_run_21`

        Args:
            value (str): value for IDD Field `value_for_run_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_21`')

        self._data["Value for Run 21"] = value

    @property
    def value_for_run_22(self):
        """Get value_for_run_22

        Returns:
            str: the value of `value_for_run_22` or None if not set
        """
        return self._data["Value for Run 22"]

    @value_for_run_22.setter
    def value_for_run_22(self, value=None):
        """  Corresponds to IDD Field `value_for_run_22`

        Args:
            value (str): value for IDD Field `value_for_run_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_22`')

        self._data["Value for Run 22"] = value

    @property
    def value_for_run_23(self):
        """Get value_for_run_23

        Returns:
            str: the value of `value_for_run_23` or None if not set
        """
        return self._data["Value for Run 23"]

    @value_for_run_23.setter
    def value_for_run_23(self, value=None):
        """  Corresponds to IDD Field `value_for_run_23`

        Args:
            value (str): value for IDD Field `value_for_run_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_23`')

        self._data["Value for Run 23"] = value

    @property
    def value_for_run_24(self):
        """Get value_for_run_24

        Returns:
            str: the value of `value_for_run_24` or None if not set
        """
        return self._data["Value for Run 24"]

    @value_for_run_24.setter
    def value_for_run_24(self, value=None):
        """  Corresponds to IDD Field `value_for_run_24`

        Args:
            value (str): value for IDD Field `value_for_run_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_24`')

        self._data["Value for Run 24"] = value

    @property
    def value_for_run_25(self):
        """Get value_for_run_25

        Returns:
            str: the value of `value_for_run_25` or None if not set
        """
        return self._data["Value for Run 25"]

    @value_for_run_25.setter
    def value_for_run_25(self, value=None):
        """  Corresponds to IDD Field `value_for_run_25`

        Args:
            value (str): value for IDD Field `value_for_run_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_25`')

        self._data["Value for Run 25"] = value

    @property
    def value_for_run_26(self):
        """Get value_for_run_26

        Returns:
            str: the value of `value_for_run_26` or None if not set
        """
        return self._data["Value for Run 26"]

    @value_for_run_26.setter
    def value_for_run_26(self, value=None):
        """  Corresponds to IDD Field `value_for_run_26`

        Args:
            value (str): value for IDD Field `value_for_run_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_26`')

        self._data["Value for Run 26"] = value

    @property
    def value_for_run_27(self):
        """Get value_for_run_27

        Returns:
            str: the value of `value_for_run_27` or None if not set
        """
        return self._data["Value for Run 27"]

    @value_for_run_27.setter
    def value_for_run_27(self, value=None):
        """  Corresponds to IDD Field `value_for_run_27`

        Args:
            value (str): value for IDD Field `value_for_run_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_27`')

        self._data["Value for Run 27"] = value

    @property
    def value_for_run_28(self):
        """Get value_for_run_28

        Returns:
            str: the value of `value_for_run_28` or None if not set
        """
        return self._data["Value for Run 28"]

    @value_for_run_28.setter
    def value_for_run_28(self, value=None):
        """  Corresponds to IDD Field `value_for_run_28`

        Args:
            value (str): value for IDD Field `value_for_run_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_28`')

        self._data["Value for Run 28"] = value

    @property
    def value_for_run_29(self):
        """Get value_for_run_29

        Returns:
            str: the value of `value_for_run_29` or None if not set
        """
        return self._data["Value for Run 29"]

    @value_for_run_29.setter
    def value_for_run_29(self, value=None):
        """  Corresponds to IDD Field `value_for_run_29`

        Args:
            value (str): value for IDD Field `value_for_run_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_29`')

        self._data["Value for Run 29"] = value

    @property
    def value_for_run_30(self):
        """Get value_for_run_30

        Returns:
            str: the value of `value_for_run_30` or None if not set
        """
        return self._data["Value for Run 30"]

    @value_for_run_30.setter
    def value_for_run_30(self, value=None):
        """  Corresponds to IDD Field `value_for_run_30`

        Args:
            value (str): value for IDD Field `value_for_run_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_30`')

        self._data["Value for Run 30"] = value

    @property
    def value_for_run_31(self):
        """Get value_for_run_31

        Returns:
            str: the value of `value_for_run_31` or None if not set
        """
        return self._data["Value for Run 31"]

    @value_for_run_31.setter
    def value_for_run_31(self, value=None):
        """  Corresponds to IDD Field `value_for_run_31`

        Args:
            value (str): value for IDD Field `value_for_run_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_31`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_31`')

        self._data["Value for Run 31"] = value

    @property
    def value_for_run_32(self):
        """Get value_for_run_32

        Returns:
            str: the value of `value_for_run_32` or None if not set
        """
        return self._data["Value for Run 32"]

    @value_for_run_32.setter
    def value_for_run_32(self, value=None):
        """  Corresponds to IDD Field `value_for_run_32`

        Args:
            value (str): value for IDD Field `value_for_run_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_32`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_32`')

        self._data["Value for Run 32"] = value

    @property
    def value_for_run_33(self):
        """Get value_for_run_33

        Returns:
            str: the value of `value_for_run_33` or None if not set
        """
        return self._data["Value for Run 33"]

    @value_for_run_33.setter
    def value_for_run_33(self, value=None):
        """  Corresponds to IDD Field `value_for_run_33`

        Args:
            value (str): value for IDD Field `value_for_run_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_33`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_33`')

        self._data["Value for Run 33"] = value

    @property
    def value_for_run_34(self):
        """Get value_for_run_34

        Returns:
            str: the value of `value_for_run_34` or None if not set
        """
        return self._data["Value for Run 34"]

    @value_for_run_34.setter
    def value_for_run_34(self, value=None):
        """  Corresponds to IDD Field `value_for_run_34`

        Args:
            value (str): value for IDD Field `value_for_run_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_34`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_34`')

        self._data["Value for Run 34"] = value

    @property
    def value_for_run_35(self):
        """Get value_for_run_35

        Returns:
            str: the value of `value_for_run_35` or None if not set
        """
        return self._data["Value for Run 35"]

    @value_for_run_35.setter
    def value_for_run_35(self, value=None):
        """  Corresponds to IDD Field `value_for_run_35`

        Args:
            value (str): value for IDD Field `value_for_run_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_35`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_35`')

        self._data["Value for Run 35"] = value

    @property
    def value_for_run_36(self):
        """Get value_for_run_36

        Returns:
            str: the value of `value_for_run_36` or None if not set
        """
        return self._data["Value for Run 36"]

    @value_for_run_36.setter
    def value_for_run_36(self, value=None):
        """  Corresponds to IDD Field `value_for_run_36`

        Args:
            value (str): value for IDD Field `value_for_run_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_36`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_36`')

        self._data["Value for Run 36"] = value

    @property
    def value_for_run_37(self):
        """Get value_for_run_37

        Returns:
            str: the value of `value_for_run_37` or None if not set
        """
        return self._data["Value for Run 37"]

    @value_for_run_37.setter
    def value_for_run_37(self, value=None):
        """  Corresponds to IDD Field `value_for_run_37`

        Args:
            value (str): value for IDD Field `value_for_run_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_37`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_37`')

        self._data["Value for Run 37"] = value

    @property
    def value_for_run_38(self):
        """Get value_for_run_38

        Returns:
            str: the value of `value_for_run_38` or None if not set
        """
        return self._data["Value for Run 38"]

    @value_for_run_38.setter
    def value_for_run_38(self, value=None):
        """  Corresponds to IDD Field `value_for_run_38`

        Args:
            value (str): value for IDD Field `value_for_run_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_38`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_38`')

        self._data["Value for Run 38"] = value

    @property
    def value_for_run_39(self):
        """Get value_for_run_39

        Returns:
            str: the value of `value_for_run_39` or None if not set
        """
        return self._data["Value for Run 39"]

    @value_for_run_39.setter
    def value_for_run_39(self, value=None):
        """  Corresponds to IDD Field `value_for_run_39`

        Args:
            value (str): value for IDD Field `value_for_run_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_39`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_39`')

        self._data["Value for Run 39"] = value

    @property
    def value_for_run_40(self):
        """Get value_for_run_40

        Returns:
            str: the value of `value_for_run_40` or None if not set
        """
        return self._data["Value for Run 40"]

    @value_for_run_40.setter
    def value_for_run_40(self, value=None):
        """  Corresponds to IDD Field `value_for_run_40`

        Args:
            value (str): value for IDD Field `value_for_run_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_40`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_40`')

        self._data["Value for Run 40"] = value

    @property
    def value_for_run_41(self):
        """Get value_for_run_41

        Returns:
            str: the value of `value_for_run_41` or None if not set
        """
        return self._data["Value for Run 41"]

    @value_for_run_41.setter
    def value_for_run_41(self, value=None):
        """  Corresponds to IDD Field `value_for_run_41`

        Args:
            value (str): value for IDD Field `value_for_run_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_41`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_41`')

        self._data["Value for Run 41"] = value

    @property
    def value_for_run_42(self):
        """Get value_for_run_42

        Returns:
            str: the value of `value_for_run_42` or None if not set
        """
        return self._data["Value for Run 42"]

    @value_for_run_42.setter
    def value_for_run_42(self, value=None):
        """  Corresponds to IDD Field `value_for_run_42`

        Args:
            value (str): value for IDD Field `value_for_run_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_42`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_42`')

        self._data["Value for Run 42"] = value

    @property
    def value_for_run_43(self):
        """Get value_for_run_43

        Returns:
            str: the value of `value_for_run_43` or None if not set
        """
        return self._data["Value for Run 43"]

    @value_for_run_43.setter
    def value_for_run_43(self, value=None):
        """  Corresponds to IDD Field `value_for_run_43`

        Args:
            value (str): value for IDD Field `value_for_run_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_43`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_43`')

        self._data["Value for Run 43"] = value

    @property
    def value_for_run_44(self):
        """Get value_for_run_44

        Returns:
            str: the value of `value_for_run_44` or None if not set
        """
        return self._data["Value for Run 44"]

    @value_for_run_44.setter
    def value_for_run_44(self, value=None):
        """  Corresponds to IDD Field `value_for_run_44`

        Args:
            value (str): value for IDD Field `value_for_run_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_44`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_44`')

        self._data["Value for Run 44"] = value

    @property
    def value_for_run_45(self):
        """Get value_for_run_45

        Returns:
            str: the value of `value_for_run_45` or None if not set
        """
        return self._data["Value for Run 45"]

    @value_for_run_45.setter
    def value_for_run_45(self, value=None):
        """  Corresponds to IDD Field `value_for_run_45`

        Args:
            value (str): value for IDD Field `value_for_run_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_45`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_45`')

        self._data["Value for Run 45"] = value

    @property
    def value_for_run_46(self):
        """Get value_for_run_46

        Returns:
            str: the value of `value_for_run_46` or None if not set
        """
        return self._data["Value for Run 46"]

    @value_for_run_46.setter
    def value_for_run_46(self, value=None):
        """  Corresponds to IDD Field `value_for_run_46`

        Args:
            value (str): value for IDD Field `value_for_run_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_46`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_46`')

        self._data["Value for Run 46"] = value

    @property
    def value_for_run_47(self):
        """Get value_for_run_47

        Returns:
            str: the value of `value_for_run_47` or None if not set
        """
        return self._data["Value for Run 47"]

    @value_for_run_47.setter
    def value_for_run_47(self, value=None):
        """  Corresponds to IDD Field `value_for_run_47`

        Args:
            value (str): value for IDD Field `value_for_run_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_47`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_47`')

        self._data["Value for Run 47"] = value

    @property
    def value_for_run_48(self):
        """Get value_for_run_48

        Returns:
            str: the value of `value_for_run_48` or None if not set
        """
        return self._data["Value for Run 48"]

    @value_for_run_48.setter
    def value_for_run_48(self, value=None):
        """  Corresponds to IDD Field `value_for_run_48`

        Args:
            value (str): value for IDD Field `value_for_run_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_48`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_48`')

        self._data["Value for Run 48"] = value

    @property
    def value_for_run_49(self):
        """Get value_for_run_49

        Returns:
            str: the value of `value_for_run_49` or None if not set
        """
        return self._data["Value for Run 49"]

    @value_for_run_49.setter
    def value_for_run_49(self, value=None):
        """  Corresponds to IDD Field `value_for_run_49`

        Args:
            value (str): value for IDD Field `value_for_run_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_49`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_49`')

        self._data["Value for Run 49"] = value

    @property
    def value_for_run_50(self):
        """Get value_for_run_50

        Returns:
            str: the value of `value_for_run_50` or None if not set
        """
        return self._data["Value for Run 50"]

    @value_for_run_50.setter
    def value_for_run_50(self, value=None):
        """  Corresponds to IDD Field `value_for_run_50`

        Args:
            value (str): value for IDD Field `value_for_run_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_50`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_50`')

        self._data["Value for Run 50"] = value

    @property
    def value_for_run_51(self):
        """Get value_for_run_51

        Returns:
            str: the value of `value_for_run_51` or None if not set
        """
        return self._data["Value for Run 51"]

    @value_for_run_51.setter
    def value_for_run_51(self, value=None):
        """  Corresponds to IDD Field `value_for_run_51`

        Args:
            value (str): value for IDD Field `value_for_run_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_51`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_51`')

        self._data["Value for Run 51"] = value

    @property
    def value_for_run_52(self):
        """Get value_for_run_52

        Returns:
            str: the value of `value_for_run_52` or None if not set
        """
        return self._data["Value for Run 52"]

    @value_for_run_52.setter
    def value_for_run_52(self, value=None):
        """  Corresponds to IDD Field `value_for_run_52`

        Args:
            value (str): value for IDD Field `value_for_run_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_52`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_52`')

        self._data["Value for Run 52"] = value

    @property
    def value_for_run_53(self):
        """Get value_for_run_53

        Returns:
            str: the value of `value_for_run_53` or None if not set
        """
        return self._data["Value for Run 53"]

    @value_for_run_53.setter
    def value_for_run_53(self, value=None):
        """  Corresponds to IDD Field `value_for_run_53`

        Args:
            value (str): value for IDD Field `value_for_run_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_53`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_53`')

        self._data["Value for Run 53"] = value

    @property
    def value_for_run_54(self):
        """Get value_for_run_54

        Returns:
            str: the value of `value_for_run_54` or None if not set
        """
        return self._data["Value for Run 54"]

    @value_for_run_54.setter
    def value_for_run_54(self, value=None):
        """  Corresponds to IDD Field `value_for_run_54`

        Args:
            value (str): value for IDD Field `value_for_run_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_54`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_54`')

        self._data["Value for Run 54"] = value

    @property
    def value_for_run_55(self):
        """Get value_for_run_55

        Returns:
            str: the value of `value_for_run_55` or None if not set
        """
        return self._data["Value for Run 55"]

    @value_for_run_55.setter
    def value_for_run_55(self, value=None):
        """  Corresponds to IDD Field `value_for_run_55`

        Args:
            value (str): value for IDD Field `value_for_run_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_55`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_55`')

        self._data["Value for Run 55"] = value

    @property
    def value_for_run_56(self):
        """Get value_for_run_56

        Returns:
            str: the value of `value_for_run_56` or None if not set
        """
        return self._data["Value for Run 56"]

    @value_for_run_56.setter
    def value_for_run_56(self, value=None):
        """  Corresponds to IDD Field `value_for_run_56`

        Args:
            value (str): value for IDD Field `value_for_run_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_56`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_56`')

        self._data["Value for Run 56"] = value

    @property
    def value_for_run_57(self):
        """Get value_for_run_57

        Returns:
            str: the value of `value_for_run_57` or None if not set
        """
        return self._data["Value for Run 57"]

    @value_for_run_57.setter
    def value_for_run_57(self, value=None):
        """  Corresponds to IDD Field `value_for_run_57`

        Args:
            value (str): value for IDD Field `value_for_run_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_57`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_57`')

        self._data["Value for Run 57"] = value

    @property
    def value_for_run_58(self):
        """Get value_for_run_58

        Returns:
            str: the value of `value_for_run_58` or None if not set
        """
        return self._data["Value for Run 58"]

    @value_for_run_58.setter
    def value_for_run_58(self, value=None):
        """  Corresponds to IDD Field `value_for_run_58`

        Args:
            value (str): value for IDD Field `value_for_run_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_58`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_58`')

        self._data["Value for Run 58"] = value

    @property
    def value_for_run_59(self):
        """Get value_for_run_59

        Returns:
            str: the value of `value_for_run_59` or None if not set
        """
        return self._data["Value for Run 59"]

    @value_for_run_59.setter
    def value_for_run_59(self, value=None):
        """  Corresponds to IDD Field `value_for_run_59`

        Args:
            value (str): value for IDD Field `value_for_run_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_59`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_59`')

        self._data["Value for Run 59"] = value

    @property
    def value_for_run_60(self):
        """Get value_for_run_60

        Returns:
            str: the value of `value_for_run_60` or None if not set
        """
        return self._data["Value for Run 60"]

    @value_for_run_60.setter
    def value_for_run_60(self, value=None):
        """  Corresponds to IDD Field `value_for_run_60`

        Args:
            value (str): value for IDD Field `value_for_run_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_60`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_60`')

        self._data["Value for Run 60"] = value

    @property
    def value_for_run_61(self):
        """Get value_for_run_61

        Returns:
            str: the value of `value_for_run_61` or None if not set
        """
        return self._data["Value for Run 61"]

    @value_for_run_61.setter
    def value_for_run_61(self, value=None):
        """  Corresponds to IDD Field `value_for_run_61`

        Args:
            value (str): value for IDD Field `value_for_run_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_61`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_61`')

        self._data["Value for Run 61"] = value

    @property
    def value_for_run_62(self):
        """Get value_for_run_62

        Returns:
            str: the value of `value_for_run_62` or None if not set
        """
        return self._data["Value for Run 62"]

    @value_for_run_62.setter
    def value_for_run_62(self, value=None):
        """  Corresponds to IDD Field `value_for_run_62`

        Args:
            value (str): value for IDD Field `value_for_run_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_62`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_62`')

        self._data["Value for Run 62"] = value

    @property
    def value_for_run_63(self):
        """Get value_for_run_63

        Returns:
            str: the value of `value_for_run_63` or None if not set
        """
        return self._data["Value for Run 63"]

    @value_for_run_63.setter
    def value_for_run_63(self, value=None):
        """  Corresponds to IDD Field `value_for_run_63`

        Args:
            value (str): value for IDD Field `value_for_run_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_63`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_63`')

        self._data["Value for Run 63"] = value

    @property
    def value_for_run_64(self):
        """Get value_for_run_64

        Returns:
            str: the value of `value_for_run_64` or None if not set
        """
        return self._data["Value for Run 64"]

    @value_for_run_64.setter
    def value_for_run_64(self, value=None):
        """  Corresponds to IDD Field `value_for_run_64`

        Args:
            value (str): value for IDD Field `value_for_run_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_64`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_64`')

        self._data["Value for Run 64"] = value

    @property
    def value_for_run_65(self):
        """Get value_for_run_65

        Returns:
            str: the value of `value_for_run_65` or None if not set
        """
        return self._data["Value for Run 65"]

    @value_for_run_65.setter
    def value_for_run_65(self, value=None):
        """  Corresponds to IDD Field `value_for_run_65`

        Args:
            value (str): value for IDD Field `value_for_run_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_65`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_65`')

        self._data["Value for Run 65"] = value

    @property
    def value_for_run_66(self):
        """Get value_for_run_66

        Returns:
            str: the value of `value_for_run_66` or None if not set
        """
        return self._data["Value for Run 66"]

    @value_for_run_66.setter
    def value_for_run_66(self, value=None):
        """  Corresponds to IDD Field `value_for_run_66`

        Args:
            value (str): value for IDD Field `value_for_run_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_66`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_66`')

        self._data["Value for Run 66"] = value

    @property
    def value_for_run_67(self):
        """Get value_for_run_67

        Returns:
            str: the value of `value_for_run_67` or None if not set
        """
        return self._data["Value for Run 67"]

    @value_for_run_67.setter
    def value_for_run_67(self, value=None):
        """  Corresponds to IDD Field `value_for_run_67`

        Args:
            value (str): value for IDD Field `value_for_run_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_67`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_67`')

        self._data["Value for Run 67"] = value

    @property
    def value_for_run_68(self):
        """Get value_for_run_68

        Returns:
            str: the value of `value_for_run_68` or None if not set
        """
        return self._data["Value for Run 68"]

    @value_for_run_68.setter
    def value_for_run_68(self, value=None):
        """  Corresponds to IDD Field `value_for_run_68`

        Args:
            value (str): value for IDD Field `value_for_run_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_68`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_68`')

        self._data["Value for Run 68"] = value

    @property
    def value_for_run_69(self):
        """Get value_for_run_69

        Returns:
            str: the value of `value_for_run_69` or None if not set
        """
        return self._data["Value for Run 69"]

    @value_for_run_69.setter
    def value_for_run_69(self, value=None):
        """  Corresponds to IDD Field `value_for_run_69`

        Args:
            value (str): value for IDD Field `value_for_run_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_69`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_69`')

        self._data["Value for Run 69"] = value

    @property
    def value_for_run_70(self):
        """Get value_for_run_70

        Returns:
            str: the value of `value_for_run_70` or None if not set
        """
        return self._data["Value for Run 70"]

    @value_for_run_70.setter
    def value_for_run_70(self, value=None):
        """  Corresponds to IDD Field `value_for_run_70`

        Args:
            value (str): value for IDD Field `value_for_run_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_70`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_70`')

        self._data["Value for Run 70"] = value

    @property
    def value_for_run_71(self):
        """Get value_for_run_71

        Returns:
            str: the value of `value_for_run_71` or None if not set
        """
        return self._data["Value for Run 71"]

    @value_for_run_71.setter
    def value_for_run_71(self, value=None):
        """  Corresponds to IDD Field `value_for_run_71`

        Args:
            value (str): value for IDD Field `value_for_run_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_71`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_71`')

        self._data["Value for Run 71"] = value

    @property
    def value_for_run_72(self):
        """Get value_for_run_72

        Returns:
            str: the value of `value_for_run_72` or None if not set
        """
        return self._data["Value for Run 72"]

    @value_for_run_72.setter
    def value_for_run_72(self, value=None):
        """  Corresponds to IDD Field `value_for_run_72`

        Args:
            value (str): value for IDD Field `value_for_run_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_72`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_72`')

        self._data["Value for Run 72"] = value

    @property
    def value_for_run_73(self):
        """Get value_for_run_73

        Returns:
            str: the value of `value_for_run_73` or None if not set
        """
        return self._data["Value for Run 73"]

    @value_for_run_73.setter
    def value_for_run_73(self, value=None):
        """  Corresponds to IDD Field `value_for_run_73`

        Args:
            value (str): value for IDD Field `value_for_run_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_73`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_73`')

        self._data["Value for Run 73"] = value

    @property
    def value_for_run_74(self):
        """Get value_for_run_74

        Returns:
            str: the value of `value_for_run_74` or None if not set
        """
        return self._data["Value for Run 74"]

    @value_for_run_74.setter
    def value_for_run_74(self, value=None):
        """  Corresponds to IDD Field `value_for_run_74`

        Args:
            value (str): value for IDD Field `value_for_run_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_74`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_74`')

        self._data["Value for Run 74"] = value

    @property
    def value_for_run_75(self):
        """Get value_for_run_75

        Returns:
            str: the value of `value_for_run_75` or None if not set
        """
        return self._data["Value for Run 75"]

    @value_for_run_75.setter
    def value_for_run_75(self, value=None):
        """  Corresponds to IDD Field `value_for_run_75`

        Args:
            value (str): value for IDD Field `value_for_run_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_75`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_75`')

        self._data["Value for Run 75"] = value

    @property
    def value_for_run_76(self):
        """Get value_for_run_76

        Returns:
            str: the value of `value_for_run_76` or None if not set
        """
        return self._data["Value for Run 76"]

    @value_for_run_76.setter
    def value_for_run_76(self, value=None):
        """  Corresponds to IDD Field `value_for_run_76`

        Args:
            value (str): value for IDD Field `value_for_run_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_76`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_76`')

        self._data["Value for Run 76"] = value

    @property
    def value_for_run_77(self):
        """Get value_for_run_77

        Returns:
            str: the value of `value_for_run_77` or None if not set
        """
        return self._data["Value for Run 77"]

    @value_for_run_77.setter
    def value_for_run_77(self, value=None):
        """  Corresponds to IDD Field `value_for_run_77`

        Args:
            value (str): value for IDD Field `value_for_run_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_77`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_77`')

        self._data["Value for Run 77"] = value

    @property
    def value_for_run_78(self):
        """Get value_for_run_78

        Returns:
            str: the value of `value_for_run_78` or None if not set
        """
        return self._data["Value for Run 78"]

    @value_for_run_78.setter
    def value_for_run_78(self, value=None):
        """  Corresponds to IDD Field `value_for_run_78`

        Args:
            value (str): value for IDD Field `value_for_run_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_78`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_78`')

        self._data["Value for Run 78"] = value

    @property
    def value_for_run_79(self):
        """Get value_for_run_79

        Returns:
            str: the value of `value_for_run_79` or None if not set
        """
        return self._data["Value for Run 79"]

    @value_for_run_79.setter
    def value_for_run_79(self, value=None):
        """  Corresponds to IDD Field `value_for_run_79`

        Args:
            value (str): value for IDD Field `value_for_run_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_79`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_79`')

        self._data["Value for Run 79"] = value

    @property
    def value_for_run_80(self):
        """Get value_for_run_80

        Returns:
            str: the value of `value_for_run_80` or None if not set
        """
        return self._data["Value for Run 80"]

    @value_for_run_80.setter
    def value_for_run_80(self, value=None):
        """  Corresponds to IDD Field `value_for_run_80`

        Args:
            value (str): value for IDD Field `value_for_run_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_80`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_80`')

        self._data["Value for Run 80"] = value

    @property
    def value_for_run_81(self):
        """Get value_for_run_81

        Returns:
            str: the value of `value_for_run_81` or None if not set
        """
        return self._data["Value for Run 81"]

    @value_for_run_81.setter
    def value_for_run_81(self, value=None):
        """  Corresponds to IDD Field `value_for_run_81`

        Args:
            value (str): value for IDD Field `value_for_run_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_81`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_81`')

        self._data["Value for Run 81"] = value

    @property
    def value_for_run_82(self):
        """Get value_for_run_82

        Returns:
            str: the value of `value_for_run_82` or None if not set
        """
        return self._data["Value for Run 82"]

    @value_for_run_82.setter
    def value_for_run_82(self, value=None):
        """  Corresponds to IDD Field `value_for_run_82`

        Args:
            value (str): value for IDD Field `value_for_run_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_82`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_82`')

        self._data["Value for Run 82"] = value

    @property
    def value_for_run_83(self):
        """Get value_for_run_83

        Returns:
            str: the value of `value_for_run_83` or None if not set
        """
        return self._data["Value for Run 83"]

    @value_for_run_83.setter
    def value_for_run_83(self, value=None):
        """  Corresponds to IDD Field `value_for_run_83`

        Args:
            value (str): value for IDD Field `value_for_run_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_83`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_83`')

        self._data["Value for Run 83"] = value

    @property
    def value_for_run_84(self):
        """Get value_for_run_84

        Returns:
            str: the value of `value_for_run_84` or None if not set
        """
        return self._data["Value for Run 84"]

    @value_for_run_84.setter
    def value_for_run_84(self, value=None):
        """  Corresponds to IDD Field `value_for_run_84`

        Args:
            value (str): value for IDD Field `value_for_run_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_84`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_84`')

        self._data["Value for Run 84"] = value

    @property
    def value_for_run_85(self):
        """Get value_for_run_85

        Returns:
            str: the value of `value_for_run_85` or None if not set
        """
        return self._data["Value for Run 85"]

    @value_for_run_85.setter
    def value_for_run_85(self, value=None):
        """  Corresponds to IDD Field `value_for_run_85`

        Args:
            value (str): value for IDD Field `value_for_run_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_85`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_85`')

        self._data["Value for Run 85"] = value

    @property
    def value_for_run_86(self):
        """Get value_for_run_86

        Returns:
            str: the value of `value_for_run_86` or None if not set
        """
        return self._data["Value for Run 86"]

    @value_for_run_86.setter
    def value_for_run_86(self, value=None):
        """  Corresponds to IDD Field `value_for_run_86`

        Args:
            value (str): value for IDD Field `value_for_run_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_86`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_86`')

        self._data["Value for Run 86"] = value

    @property
    def value_for_run_87(self):
        """Get value_for_run_87

        Returns:
            str: the value of `value_for_run_87` or None if not set
        """
        return self._data["Value for Run 87"]

    @value_for_run_87.setter
    def value_for_run_87(self, value=None):
        """  Corresponds to IDD Field `value_for_run_87`

        Args:
            value (str): value for IDD Field `value_for_run_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_87`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_87`')

        self._data["Value for Run 87"] = value

    @property
    def value_for_run_88(self):
        """Get value_for_run_88

        Returns:
            str: the value of `value_for_run_88` or None if not set
        """
        return self._data["Value for Run 88"]

    @value_for_run_88.setter
    def value_for_run_88(self, value=None):
        """  Corresponds to IDD Field `value_for_run_88`

        Args:
            value (str): value for IDD Field `value_for_run_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_88`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_88`')

        self._data["Value for Run 88"] = value

    @property
    def value_for_run_89(self):
        """Get value_for_run_89

        Returns:
            str: the value of `value_for_run_89` or None if not set
        """
        return self._data["Value for Run 89"]

    @value_for_run_89.setter
    def value_for_run_89(self, value=None):
        """  Corresponds to IDD Field `value_for_run_89`

        Args:
            value (str): value for IDD Field `value_for_run_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_89`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_89`')

        self._data["Value for Run 89"] = value

    @property
    def value_for_run_90(self):
        """Get value_for_run_90

        Returns:
            str: the value of `value_for_run_90` or None if not set
        """
        return self._data["Value for Run 90"]

    @value_for_run_90.setter
    def value_for_run_90(self, value=None):
        """  Corresponds to IDD Field `value_for_run_90`

        Args:
            value (str): value for IDD Field `value_for_run_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_90`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_90`')

        self._data["Value for Run 90"] = value

    @property
    def value_for_run_91(self):
        """Get value_for_run_91

        Returns:
            str: the value of `value_for_run_91` or None if not set
        """
        return self._data["Value for Run 91"]

    @value_for_run_91.setter
    def value_for_run_91(self, value=None):
        """  Corresponds to IDD Field `value_for_run_91`

        Args:
            value (str): value for IDD Field `value_for_run_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_91`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_91`')

        self._data["Value for Run 91"] = value

    @property
    def value_for_run_92(self):
        """Get value_for_run_92

        Returns:
            str: the value of `value_for_run_92` or None if not set
        """
        return self._data["Value for Run 92"]

    @value_for_run_92.setter
    def value_for_run_92(self, value=None):
        """  Corresponds to IDD Field `value_for_run_92`

        Args:
            value (str): value for IDD Field `value_for_run_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_92`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_92`')

        self._data["Value for Run 92"] = value

    @property
    def value_for_run_93(self):
        """Get value_for_run_93

        Returns:
            str: the value of `value_for_run_93` or None if not set
        """
        return self._data["Value for Run 93"]

    @value_for_run_93.setter
    def value_for_run_93(self, value=None):
        """  Corresponds to IDD Field `value_for_run_93`

        Args:
            value (str): value for IDD Field `value_for_run_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_93`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_93`')

        self._data["Value for Run 93"] = value

    @property
    def value_for_run_94(self):
        """Get value_for_run_94

        Returns:
            str: the value of `value_for_run_94` or None if not set
        """
        return self._data["Value for Run 94"]

    @value_for_run_94.setter
    def value_for_run_94(self, value=None):
        """  Corresponds to IDD Field `value_for_run_94`

        Args:
            value (str): value for IDD Field `value_for_run_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_94`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_94`')

        self._data["Value for Run 94"] = value

    @property
    def value_for_run_95(self):
        """Get value_for_run_95

        Returns:
            str: the value of `value_for_run_95` or None if not set
        """
        return self._data["Value for Run 95"]

    @value_for_run_95.setter
    def value_for_run_95(self, value=None):
        """  Corresponds to IDD Field `value_for_run_95`

        Args:
            value (str): value for IDD Field `value_for_run_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_95`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_95`')

        self._data["Value for Run 95"] = value

    @property
    def value_for_run_96(self):
        """Get value_for_run_96

        Returns:
            str: the value of `value_for_run_96` or None if not set
        """
        return self._data["Value for Run 96"]

    @value_for_run_96.setter
    def value_for_run_96(self, value=None):
        """  Corresponds to IDD Field `value_for_run_96`

        Args:
            value (str): value for IDD Field `value_for_run_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_96`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_96`')

        self._data["Value for Run 96"] = value

    @property
    def value_for_run_97(self):
        """Get value_for_run_97

        Returns:
            str: the value of `value_for_run_97` or None if not set
        """
        return self._data["Value for Run 97"]

    @value_for_run_97.setter
    def value_for_run_97(self, value=None):
        """  Corresponds to IDD Field `value_for_run_97`

        Args:
            value (str): value for IDD Field `value_for_run_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_97`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_97`')

        self._data["Value for Run 97"] = value

    @property
    def value_for_run_98(self):
        """Get value_for_run_98

        Returns:
            str: the value of `value_for_run_98` or None if not set
        """
        return self._data["Value for Run 98"]

    @value_for_run_98.setter
    def value_for_run_98(self, value=None):
        """  Corresponds to IDD Field `value_for_run_98`

        Args:
            value (str): value for IDD Field `value_for_run_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_98`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_98`')

        self._data["Value for Run 98"] = value

    @property
    def value_for_run_99(self):
        """Get value_for_run_99

        Returns:
            str: the value of `value_for_run_99` or None if not set
        """
        return self._data["Value for Run 99"]

    @value_for_run_99.setter
    def value_for_run_99(self, value=None):
        """  Corresponds to IDD Field `value_for_run_99`

        Args:
            value (str): value for IDD Field `value_for_run_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_99`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_99`')

        self._data["Value for Run 99"] = value

    @property
    def value_for_run_100(self):
        """Get value_for_run_100

        Returns:
            str: the value of `value_for_run_100` or None if not set
        """
        return self._data["Value for Run 100"]

    @value_for_run_100.setter
    def value_for_run_100(self, value=None):
        """  Corresponds to IDD Field `value_for_run_100`

        Args:
            value (str): value for IDD Field `value_for_run_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `value_for_run_100`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `value_for_run_100`')

        self._data["Value for Run 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.value_for_run_1))
        out.append(self._to_str(self.value_for_run_2))
        out.append(self._to_str(self.value_for_run_3))
        out.append(self._to_str(self.value_for_run_4))
        out.append(self._to_str(self.value_for_run_5))
        out.append(self._to_str(self.value_for_run_6))
        out.append(self._to_str(self.value_for_run_7))
        out.append(self._to_str(self.value_for_run_8))
        out.append(self._to_str(self.value_for_run_9))
        out.append(self._to_str(self.value_for_run_10))
        out.append(self._to_str(self.value_for_run_11))
        out.append(self._to_str(self.value_for_run_12))
        out.append(self._to_str(self.value_for_run_13))
        out.append(self._to_str(self.value_for_run_14))
        out.append(self._to_str(self.value_for_run_15))
        out.append(self._to_str(self.value_for_run_16))
        out.append(self._to_str(self.value_for_run_17))
        out.append(self._to_str(self.value_for_run_18))
        out.append(self._to_str(self.value_for_run_19))
        out.append(self._to_str(self.value_for_run_20))
        out.append(self._to_str(self.value_for_run_21))
        out.append(self._to_str(self.value_for_run_22))
        out.append(self._to_str(self.value_for_run_23))
        out.append(self._to_str(self.value_for_run_24))
        out.append(self._to_str(self.value_for_run_25))
        out.append(self._to_str(self.value_for_run_26))
        out.append(self._to_str(self.value_for_run_27))
        out.append(self._to_str(self.value_for_run_28))
        out.append(self._to_str(self.value_for_run_29))
        out.append(self._to_str(self.value_for_run_30))
        out.append(self._to_str(self.value_for_run_31))
        out.append(self._to_str(self.value_for_run_32))
        out.append(self._to_str(self.value_for_run_33))
        out.append(self._to_str(self.value_for_run_34))
        out.append(self._to_str(self.value_for_run_35))
        out.append(self._to_str(self.value_for_run_36))
        out.append(self._to_str(self.value_for_run_37))
        out.append(self._to_str(self.value_for_run_38))
        out.append(self._to_str(self.value_for_run_39))
        out.append(self._to_str(self.value_for_run_40))
        out.append(self._to_str(self.value_for_run_41))
        out.append(self._to_str(self.value_for_run_42))
        out.append(self._to_str(self.value_for_run_43))
        out.append(self._to_str(self.value_for_run_44))
        out.append(self._to_str(self.value_for_run_45))
        out.append(self._to_str(self.value_for_run_46))
        out.append(self._to_str(self.value_for_run_47))
        out.append(self._to_str(self.value_for_run_48))
        out.append(self._to_str(self.value_for_run_49))
        out.append(self._to_str(self.value_for_run_50))
        out.append(self._to_str(self.value_for_run_51))
        out.append(self._to_str(self.value_for_run_52))
        out.append(self._to_str(self.value_for_run_53))
        out.append(self._to_str(self.value_for_run_54))
        out.append(self._to_str(self.value_for_run_55))
        out.append(self._to_str(self.value_for_run_56))
        out.append(self._to_str(self.value_for_run_57))
        out.append(self._to_str(self.value_for_run_58))
        out.append(self._to_str(self.value_for_run_59))
        out.append(self._to_str(self.value_for_run_60))
        out.append(self._to_str(self.value_for_run_61))
        out.append(self._to_str(self.value_for_run_62))
        out.append(self._to_str(self.value_for_run_63))
        out.append(self._to_str(self.value_for_run_64))
        out.append(self._to_str(self.value_for_run_65))
        out.append(self._to_str(self.value_for_run_66))
        out.append(self._to_str(self.value_for_run_67))
        out.append(self._to_str(self.value_for_run_68))
        out.append(self._to_str(self.value_for_run_69))
        out.append(self._to_str(self.value_for_run_70))
        out.append(self._to_str(self.value_for_run_71))
        out.append(self._to_str(self.value_for_run_72))
        out.append(self._to_str(self.value_for_run_73))
        out.append(self._to_str(self.value_for_run_74))
        out.append(self._to_str(self.value_for_run_75))
        out.append(self._to_str(self.value_for_run_76))
        out.append(self._to_str(self.value_for_run_77))
        out.append(self._to_str(self.value_for_run_78))
        out.append(self._to_str(self.value_for_run_79))
        out.append(self._to_str(self.value_for_run_80))
        out.append(self._to_str(self.value_for_run_81))
        out.append(self._to_str(self.value_for_run_82))
        out.append(self._to_str(self.value_for_run_83))
        out.append(self._to_str(self.value_for_run_84))
        out.append(self._to_str(self.value_for_run_85))
        out.append(self._to_str(self.value_for_run_86))
        out.append(self._to_str(self.value_for_run_87))
        out.append(self._to_str(self.value_for_run_88))
        out.append(self._to_str(self.value_for_run_89))
        out.append(self._to_str(self.value_for_run_90))
        out.append(self._to_str(self.value_for_run_91))
        out.append(self._to_str(self.value_for_run_92))
        out.append(self._to_str(self.value_for_run_93))
        out.append(self._to_str(self.value_for_run_94))
        out.append(self._to_str(self.value_for_run_95))
        out.append(self._to_str(self.value_for_run_96))
        out.append(self._to_str(self.value_for_run_97))
        out.append(self._to_str(self.value_for_run_98))
        out.append(self._to_str(self.value_for_run_99))
        out.append(self._to_str(self.value_for_run_100))
        return ",".join(out)

class ParametricLogic(object):
    """ Corresponds to IDD object `Parametric:Logic`
        This object allows some types of objects to be included for some parametric cases and
        not for others. For example, you might want an overhang on a window in some
        parametric runs and not others. A single Parametric:Logic object is allowed per file.
        Consult the Input Output Reference for available commands and syntax.
    
    """
    internal_name = "Parametric:Logic"
    field_count = 101
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Parametric:Logic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Parametric Logic Line 1"] = None
        self._data["Parametric Logic Line 2"] = None
        self._data["Parametric Logic Line 3"] = None
        self._data["Parametric Logic Line 4"] = None
        self._data["Parametric Logic Line 5"] = None
        self._data["Parametric Logic Line 6"] = None
        self._data["Parametric Logic Line 7"] = None
        self._data["Parametric Logic Line 8"] = None
        self._data["Parametric Logic Line 9"] = None
        self._data["Parametric Logic Line 10"] = None
        self._data["Parametric Logic Line 11"] = None
        self._data["Parametric Logic Line 12"] = None
        self._data["Parametric Logic Line 13"] = None
        self._data["Parametric Logic Line 14"] = None
        self._data["Parametric Logic Line 15"] = None
        self._data["Parametric Logic Line 16"] = None
        self._data["Parametric Logic Line 17"] = None
        self._data["Parametric Logic Line 18"] = None
        self._data["Parametric Logic Line 19"] = None
        self._data["Parametric Logic Line 20"] = None
        self._data["Parametric Logic Line 21"] = None
        self._data["Parametric Logic Line 22"] = None
        self._data["Parametric Logic Line 23"] = None
        self._data["Parametric Logic Line 24"] = None
        self._data["Parametric Logic Line 25"] = None
        self._data["Parametric Logic Line 26"] = None
        self._data["Parametric Logic Line 27"] = None
        self._data["Parametric Logic Line 28"] = None
        self._data["Parametric Logic Line 29"] = None
        self._data["Parametric Logic Line 30"] = None
        self._data["Parametric Logic Line 31"] = None
        self._data["Parametric Logic Line 32"] = None
        self._data["Parametric Logic Line 33"] = None
        self._data["Parametric Logic Line 34"] = None
        self._data["Parametric Logic Line 35"] = None
        self._data["Parametric Logic Line 36"] = None
        self._data["Parametric Logic Line 37"] = None
        self._data["Parametric Logic Line 38"] = None
        self._data["Parametric Logic Line 39"] = None
        self._data["Parametric Logic Line 40"] = None
        self._data["Parametric Logic Line 41"] = None
        self._data["Parametric Logic Line 42"] = None
        self._data["Parametric Logic Line 43"] = None
        self._data["Parametric Logic Line 44"] = None
        self._data["Parametric Logic Line 45"] = None
        self._data["Parametric Logic Line 46"] = None
        self._data["Parametric Logic Line 47"] = None
        self._data["Parametric Logic Line 48"] = None
        self._data["Parametric Logic Line 49"] = None
        self._data["Parametric Logic Line 50"] = None
        self._data["Parametric Logic Line 51"] = None
        self._data["Parametric Logic Line 52"] = None
        self._data["Parametric Logic Line 53"] = None
        self._data["Parametric Logic Line 54"] = None
        self._data["Parametric Logic Line 55"] = None
        self._data["Parametric Logic Line 56"] = None
        self._data["Parametric Logic Line 57"] = None
        self._data["Parametric Logic Line 58"] = None
        self._data["Parametric Logic Line 59"] = None
        self._data["Parametric Logic Line 60"] = None
        self._data["Parametric Logic Line 61"] = None
        self._data["Parametric Logic Line 62"] = None
        self._data["Parametric Logic Line 63"] = None
        self._data["Parametric Logic Line 64"] = None
        self._data["Parametric Logic Line 65"] = None
        self._data["Parametric Logic Line 66"] = None
        self._data["Parametric Logic Line 67"] = None
        self._data["Parametric Logic Line 68"] = None
        self._data["Parametric Logic Line 69"] = None
        self._data["Parametric Logic Line 70"] = None
        self._data["Parametric Logic Line 71"] = None
        self._data["Parametric Logic Line 72"] = None
        self._data["Parametric Logic Line 73"] = None
        self._data["Parametric Logic Line 74"] = None
        self._data["Parametric Logic Line 75"] = None
        self._data["Parametric Logic Line 76"] = None
        self._data["Parametric Logic Line 77"] = None
        self._data["Parametric Logic Line 78"] = None
        self._data["Parametric Logic Line 79"] = None
        self._data["Parametric Logic Line 80"] = None
        self._data["Parametric Logic Line 81"] = None
        self._data["Parametric Logic Line 82"] = None
        self._data["Parametric Logic Line 83"] = None
        self._data["Parametric Logic Line 84"] = None
        self._data["Parametric Logic Line 85"] = None
        self._data["Parametric Logic Line 86"] = None
        self._data["Parametric Logic Line 87"] = None
        self._data["Parametric Logic Line 88"] = None
        self._data["Parametric Logic Line 89"] = None
        self._data["Parametric Logic Line 90"] = None
        self._data["Parametric Logic Line 91"] = None
        self._data["Parametric Logic Line 92"] = None
        self._data["Parametric Logic Line 93"] = None
        self._data["Parametric Logic Line 94"] = None
        self._data["Parametric Logic Line 95"] = None
        self._data["Parametric Logic Line 96"] = None
        self._data["Parametric Logic Line 97"] = None
        self._data["Parametric Logic Line 98"] = None
        self._data["Parametric Logic Line 99"] = None
        self._data["Parametric Logic Line 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_1 = None
        else:
            self.parametric_logic_line_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_2 = None
        else:
            self.parametric_logic_line_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_3 = None
        else:
            self.parametric_logic_line_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_4 = None
        else:
            self.parametric_logic_line_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_5 = None
        else:
            self.parametric_logic_line_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_6 = None
        else:
            self.parametric_logic_line_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_7 = None
        else:
            self.parametric_logic_line_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_8 = None
        else:
            self.parametric_logic_line_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_9 = None
        else:
            self.parametric_logic_line_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_10 = None
        else:
            self.parametric_logic_line_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_11 = None
        else:
            self.parametric_logic_line_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_12 = None
        else:
            self.parametric_logic_line_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_13 = None
        else:
            self.parametric_logic_line_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_14 = None
        else:
            self.parametric_logic_line_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_15 = None
        else:
            self.parametric_logic_line_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_16 = None
        else:
            self.parametric_logic_line_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_17 = None
        else:
            self.parametric_logic_line_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_18 = None
        else:
            self.parametric_logic_line_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_19 = None
        else:
            self.parametric_logic_line_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_20 = None
        else:
            self.parametric_logic_line_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_21 = None
        else:
            self.parametric_logic_line_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_22 = None
        else:
            self.parametric_logic_line_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_23 = None
        else:
            self.parametric_logic_line_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_24 = None
        else:
            self.parametric_logic_line_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_25 = None
        else:
            self.parametric_logic_line_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_26 = None
        else:
            self.parametric_logic_line_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_27 = None
        else:
            self.parametric_logic_line_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_28 = None
        else:
            self.parametric_logic_line_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_29 = None
        else:
            self.parametric_logic_line_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_30 = None
        else:
            self.parametric_logic_line_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_31 = None
        else:
            self.parametric_logic_line_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_32 = None
        else:
            self.parametric_logic_line_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_33 = None
        else:
            self.parametric_logic_line_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_34 = None
        else:
            self.parametric_logic_line_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_35 = None
        else:
            self.parametric_logic_line_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_36 = None
        else:
            self.parametric_logic_line_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_37 = None
        else:
            self.parametric_logic_line_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_38 = None
        else:
            self.parametric_logic_line_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_39 = None
        else:
            self.parametric_logic_line_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_40 = None
        else:
            self.parametric_logic_line_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_41 = None
        else:
            self.parametric_logic_line_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_42 = None
        else:
            self.parametric_logic_line_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_43 = None
        else:
            self.parametric_logic_line_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_44 = None
        else:
            self.parametric_logic_line_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_45 = None
        else:
            self.parametric_logic_line_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_46 = None
        else:
            self.parametric_logic_line_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_47 = None
        else:
            self.parametric_logic_line_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_48 = None
        else:
            self.parametric_logic_line_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_49 = None
        else:
            self.parametric_logic_line_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_50 = None
        else:
            self.parametric_logic_line_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_51 = None
        else:
            self.parametric_logic_line_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_52 = None
        else:
            self.parametric_logic_line_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_53 = None
        else:
            self.parametric_logic_line_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_54 = None
        else:
            self.parametric_logic_line_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_55 = None
        else:
            self.parametric_logic_line_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_56 = None
        else:
            self.parametric_logic_line_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_57 = None
        else:
            self.parametric_logic_line_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_58 = None
        else:
            self.parametric_logic_line_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_59 = None
        else:
            self.parametric_logic_line_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_60 = None
        else:
            self.parametric_logic_line_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_61 = None
        else:
            self.parametric_logic_line_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_62 = None
        else:
            self.parametric_logic_line_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_63 = None
        else:
            self.parametric_logic_line_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_64 = None
        else:
            self.parametric_logic_line_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_65 = None
        else:
            self.parametric_logic_line_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_66 = None
        else:
            self.parametric_logic_line_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_67 = None
        else:
            self.parametric_logic_line_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_68 = None
        else:
            self.parametric_logic_line_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_69 = None
        else:
            self.parametric_logic_line_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_70 = None
        else:
            self.parametric_logic_line_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_71 = None
        else:
            self.parametric_logic_line_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_72 = None
        else:
            self.parametric_logic_line_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_73 = None
        else:
            self.parametric_logic_line_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_74 = None
        else:
            self.parametric_logic_line_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_75 = None
        else:
            self.parametric_logic_line_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_76 = None
        else:
            self.parametric_logic_line_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_77 = None
        else:
            self.parametric_logic_line_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_78 = None
        else:
            self.parametric_logic_line_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_79 = None
        else:
            self.parametric_logic_line_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_80 = None
        else:
            self.parametric_logic_line_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_81 = None
        else:
            self.parametric_logic_line_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_82 = None
        else:
            self.parametric_logic_line_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_83 = None
        else:
            self.parametric_logic_line_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_84 = None
        else:
            self.parametric_logic_line_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_85 = None
        else:
            self.parametric_logic_line_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_86 = None
        else:
            self.parametric_logic_line_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_87 = None
        else:
            self.parametric_logic_line_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_88 = None
        else:
            self.parametric_logic_line_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_89 = None
        else:
            self.parametric_logic_line_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_90 = None
        else:
            self.parametric_logic_line_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_91 = None
        else:
            self.parametric_logic_line_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_92 = None
        else:
            self.parametric_logic_line_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_93 = None
        else:
            self.parametric_logic_line_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_94 = None
        else:
            self.parametric_logic_line_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_95 = None
        else:
            self.parametric_logic_line_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_96 = None
        else:
            self.parametric_logic_line_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_97 = None
        else:
            self.parametric_logic_line_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_98 = None
        else:
            self.parametric_logic_line_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_99 = None
        else:
            self.parametric_logic_line_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.parametric_logic_line_100 = None
        else:
            self.parametric_logic_line_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def parametric_logic_line_1(self):
        """Get parametric_logic_line_1

        Returns:
            str: the value of `parametric_logic_line_1` or None if not set
        """
        return self._data["Parametric Logic Line 1"]

    @parametric_logic_line_1.setter
    def parametric_logic_line_1(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_1`

        Args:
            value (str): value for IDD Field `parametric_logic_line_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_1`')

        self._data["Parametric Logic Line 1"] = value

    @property
    def parametric_logic_line_2(self):
        """Get parametric_logic_line_2

        Returns:
            str: the value of `parametric_logic_line_2` or None if not set
        """
        return self._data["Parametric Logic Line 2"]

    @parametric_logic_line_2.setter
    def parametric_logic_line_2(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_2`

        Args:
            value (str): value for IDD Field `parametric_logic_line_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_2`')

        self._data["Parametric Logic Line 2"] = value

    @property
    def parametric_logic_line_3(self):
        """Get parametric_logic_line_3

        Returns:
            str: the value of `parametric_logic_line_3` or None if not set
        """
        return self._data["Parametric Logic Line 3"]

    @parametric_logic_line_3.setter
    def parametric_logic_line_3(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_3`

        Args:
            value (str): value for IDD Field `parametric_logic_line_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_3`')

        self._data["Parametric Logic Line 3"] = value

    @property
    def parametric_logic_line_4(self):
        """Get parametric_logic_line_4

        Returns:
            str: the value of `parametric_logic_line_4` or None if not set
        """
        return self._data["Parametric Logic Line 4"]

    @parametric_logic_line_4.setter
    def parametric_logic_line_4(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_4`

        Args:
            value (str): value for IDD Field `parametric_logic_line_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_4`')

        self._data["Parametric Logic Line 4"] = value

    @property
    def parametric_logic_line_5(self):
        """Get parametric_logic_line_5

        Returns:
            str: the value of `parametric_logic_line_5` or None if not set
        """
        return self._data["Parametric Logic Line 5"]

    @parametric_logic_line_5.setter
    def parametric_logic_line_5(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_5`

        Args:
            value (str): value for IDD Field `parametric_logic_line_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_5`')

        self._data["Parametric Logic Line 5"] = value

    @property
    def parametric_logic_line_6(self):
        """Get parametric_logic_line_6

        Returns:
            str: the value of `parametric_logic_line_6` or None if not set
        """
        return self._data["Parametric Logic Line 6"]

    @parametric_logic_line_6.setter
    def parametric_logic_line_6(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_6`

        Args:
            value (str): value for IDD Field `parametric_logic_line_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_6`')

        self._data["Parametric Logic Line 6"] = value

    @property
    def parametric_logic_line_7(self):
        """Get parametric_logic_line_7

        Returns:
            str: the value of `parametric_logic_line_7` or None if not set
        """
        return self._data["Parametric Logic Line 7"]

    @parametric_logic_line_7.setter
    def parametric_logic_line_7(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_7`

        Args:
            value (str): value for IDD Field `parametric_logic_line_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_7`')

        self._data["Parametric Logic Line 7"] = value

    @property
    def parametric_logic_line_8(self):
        """Get parametric_logic_line_8

        Returns:
            str: the value of `parametric_logic_line_8` or None if not set
        """
        return self._data["Parametric Logic Line 8"]

    @parametric_logic_line_8.setter
    def parametric_logic_line_8(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_8`

        Args:
            value (str): value for IDD Field `parametric_logic_line_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_8`')

        self._data["Parametric Logic Line 8"] = value

    @property
    def parametric_logic_line_9(self):
        """Get parametric_logic_line_9

        Returns:
            str: the value of `parametric_logic_line_9` or None if not set
        """
        return self._data["Parametric Logic Line 9"]

    @parametric_logic_line_9.setter
    def parametric_logic_line_9(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_9`

        Args:
            value (str): value for IDD Field `parametric_logic_line_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_9`')

        self._data["Parametric Logic Line 9"] = value

    @property
    def parametric_logic_line_10(self):
        """Get parametric_logic_line_10

        Returns:
            str: the value of `parametric_logic_line_10` or None if not set
        """
        return self._data["Parametric Logic Line 10"]

    @parametric_logic_line_10.setter
    def parametric_logic_line_10(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_10`

        Args:
            value (str): value for IDD Field `parametric_logic_line_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_10`')

        self._data["Parametric Logic Line 10"] = value

    @property
    def parametric_logic_line_11(self):
        """Get parametric_logic_line_11

        Returns:
            str: the value of `parametric_logic_line_11` or None if not set
        """
        return self._data["Parametric Logic Line 11"]

    @parametric_logic_line_11.setter
    def parametric_logic_line_11(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_11`

        Args:
            value (str): value for IDD Field `parametric_logic_line_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_11`')

        self._data["Parametric Logic Line 11"] = value

    @property
    def parametric_logic_line_12(self):
        """Get parametric_logic_line_12

        Returns:
            str: the value of `parametric_logic_line_12` or None if not set
        """
        return self._data["Parametric Logic Line 12"]

    @parametric_logic_line_12.setter
    def parametric_logic_line_12(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_12`

        Args:
            value (str): value for IDD Field `parametric_logic_line_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_12`')

        self._data["Parametric Logic Line 12"] = value

    @property
    def parametric_logic_line_13(self):
        """Get parametric_logic_line_13

        Returns:
            str: the value of `parametric_logic_line_13` or None if not set
        """
        return self._data["Parametric Logic Line 13"]

    @parametric_logic_line_13.setter
    def parametric_logic_line_13(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_13`

        Args:
            value (str): value for IDD Field `parametric_logic_line_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_13`')

        self._data["Parametric Logic Line 13"] = value

    @property
    def parametric_logic_line_14(self):
        """Get parametric_logic_line_14

        Returns:
            str: the value of `parametric_logic_line_14` or None if not set
        """
        return self._data["Parametric Logic Line 14"]

    @parametric_logic_line_14.setter
    def parametric_logic_line_14(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_14`

        Args:
            value (str): value for IDD Field `parametric_logic_line_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_14`')

        self._data["Parametric Logic Line 14"] = value

    @property
    def parametric_logic_line_15(self):
        """Get parametric_logic_line_15

        Returns:
            str: the value of `parametric_logic_line_15` or None if not set
        """
        return self._data["Parametric Logic Line 15"]

    @parametric_logic_line_15.setter
    def parametric_logic_line_15(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_15`

        Args:
            value (str): value for IDD Field `parametric_logic_line_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_15`')

        self._data["Parametric Logic Line 15"] = value

    @property
    def parametric_logic_line_16(self):
        """Get parametric_logic_line_16

        Returns:
            str: the value of `parametric_logic_line_16` or None if not set
        """
        return self._data["Parametric Logic Line 16"]

    @parametric_logic_line_16.setter
    def parametric_logic_line_16(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_16`

        Args:
            value (str): value for IDD Field `parametric_logic_line_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_16`')

        self._data["Parametric Logic Line 16"] = value

    @property
    def parametric_logic_line_17(self):
        """Get parametric_logic_line_17

        Returns:
            str: the value of `parametric_logic_line_17` or None if not set
        """
        return self._data["Parametric Logic Line 17"]

    @parametric_logic_line_17.setter
    def parametric_logic_line_17(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_17`

        Args:
            value (str): value for IDD Field `parametric_logic_line_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_17`')

        self._data["Parametric Logic Line 17"] = value

    @property
    def parametric_logic_line_18(self):
        """Get parametric_logic_line_18

        Returns:
            str: the value of `parametric_logic_line_18` or None if not set
        """
        return self._data["Parametric Logic Line 18"]

    @parametric_logic_line_18.setter
    def parametric_logic_line_18(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_18`

        Args:
            value (str): value for IDD Field `parametric_logic_line_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_18`')

        self._data["Parametric Logic Line 18"] = value

    @property
    def parametric_logic_line_19(self):
        """Get parametric_logic_line_19

        Returns:
            str: the value of `parametric_logic_line_19` or None if not set
        """
        return self._data["Parametric Logic Line 19"]

    @parametric_logic_line_19.setter
    def parametric_logic_line_19(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_19`

        Args:
            value (str): value for IDD Field `parametric_logic_line_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_19`')

        self._data["Parametric Logic Line 19"] = value

    @property
    def parametric_logic_line_20(self):
        """Get parametric_logic_line_20

        Returns:
            str: the value of `parametric_logic_line_20` or None if not set
        """
        return self._data["Parametric Logic Line 20"]

    @parametric_logic_line_20.setter
    def parametric_logic_line_20(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_20`

        Args:
            value (str): value for IDD Field `parametric_logic_line_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_20`')

        self._data["Parametric Logic Line 20"] = value

    @property
    def parametric_logic_line_21(self):
        """Get parametric_logic_line_21

        Returns:
            str: the value of `parametric_logic_line_21` or None if not set
        """
        return self._data["Parametric Logic Line 21"]

    @parametric_logic_line_21.setter
    def parametric_logic_line_21(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_21`

        Args:
            value (str): value for IDD Field `parametric_logic_line_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_21`')

        self._data["Parametric Logic Line 21"] = value

    @property
    def parametric_logic_line_22(self):
        """Get parametric_logic_line_22

        Returns:
            str: the value of `parametric_logic_line_22` or None if not set
        """
        return self._data["Parametric Logic Line 22"]

    @parametric_logic_line_22.setter
    def parametric_logic_line_22(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_22`

        Args:
            value (str): value for IDD Field `parametric_logic_line_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_22`')

        self._data["Parametric Logic Line 22"] = value

    @property
    def parametric_logic_line_23(self):
        """Get parametric_logic_line_23

        Returns:
            str: the value of `parametric_logic_line_23` or None if not set
        """
        return self._data["Parametric Logic Line 23"]

    @parametric_logic_line_23.setter
    def parametric_logic_line_23(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_23`

        Args:
            value (str): value for IDD Field `parametric_logic_line_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_23`')

        self._data["Parametric Logic Line 23"] = value

    @property
    def parametric_logic_line_24(self):
        """Get parametric_logic_line_24

        Returns:
            str: the value of `parametric_logic_line_24` or None if not set
        """
        return self._data["Parametric Logic Line 24"]

    @parametric_logic_line_24.setter
    def parametric_logic_line_24(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_24`

        Args:
            value (str): value for IDD Field `parametric_logic_line_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_24`')

        self._data["Parametric Logic Line 24"] = value

    @property
    def parametric_logic_line_25(self):
        """Get parametric_logic_line_25

        Returns:
            str: the value of `parametric_logic_line_25` or None if not set
        """
        return self._data["Parametric Logic Line 25"]

    @parametric_logic_line_25.setter
    def parametric_logic_line_25(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_25`

        Args:
            value (str): value for IDD Field `parametric_logic_line_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_25`')

        self._data["Parametric Logic Line 25"] = value

    @property
    def parametric_logic_line_26(self):
        """Get parametric_logic_line_26

        Returns:
            str: the value of `parametric_logic_line_26` or None if not set
        """
        return self._data["Parametric Logic Line 26"]

    @parametric_logic_line_26.setter
    def parametric_logic_line_26(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_26`

        Args:
            value (str): value for IDD Field `parametric_logic_line_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_26`')

        self._data["Parametric Logic Line 26"] = value

    @property
    def parametric_logic_line_27(self):
        """Get parametric_logic_line_27

        Returns:
            str: the value of `parametric_logic_line_27` or None if not set
        """
        return self._data["Parametric Logic Line 27"]

    @parametric_logic_line_27.setter
    def parametric_logic_line_27(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_27`

        Args:
            value (str): value for IDD Field `parametric_logic_line_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_27`')

        self._data["Parametric Logic Line 27"] = value

    @property
    def parametric_logic_line_28(self):
        """Get parametric_logic_line_28

        Returns:
            str: the value of `parametric_logic_line_28` or None if not set
        """
        return self._data["Parametric Logic Line 28"]

    @parametric_logic_line_28.setter
    def parametric_logic_line_28(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_28`

        Args:
            value (str): value for IDD Field `parametric_logic_line_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_28`')

        self._data["Parametric Logic Line 28"] = value

    @property
    def parametric_logic_line_29(self):
        """Get parametric_logic_line_29

        Returns:
            str: the value of `parametric_logic_line_29` or None if not set
        """
        return self._data["Parametric Logic Line 29"]

    @parametric_logic_line_29.setter
    def parametric_logic_line_29(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_29`

        Args:
            value (str): value for IDD Field `parametric_logic_line_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_29`')

        self._data["Parametric Logic Line 29"] = value

    @property
    def parametric_logic_line_30(self):
        """Get parametric_logic_line_30

        Returns:
            str: the value of `parametric_logic_line_30` or None if not set
        """
        return self._data["Parametric Logic Line 30"]

    @parametric_logic_line_30.setter
    def parametric_logic_line_30(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_30`

        Args:
            value (str): value for IDD Field `parametric_logic_line_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_30`')

        self._data["Parametric Logic Line 30"] = value

    @property
    def parametric_logic_line_31(self):
        """Get parametric_logic_line_31

        Returns:
            str: the value of `parametric_logic_line_31` or None if not set
        """
        return self._data["Parametric Logic Line 31"]

    @parametric_logic_line_31.setter
    def parametric_logic_line_31(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_31`

        Args:
            value (str): value for IDD Field `parametric_logic_line_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_31`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_31`')

        self._data["Parametric Logic Line 31"] = value

    @property
    def parametric_logic_line_32(self):
        """Get parametric_logic_line_32

        Returns:
            str: the value of `parametric_logic_line_32` or None if not set
        """
        return self._data["Parametric Logic Line 32"]

    @parametric_logic_line_32.setter
    def parametric_logic_line_32(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_32`

        Args:
            value (str): value for IDD Field `parametric_logic_line_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_32`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_32`')

        self._data["Parametric Logic Line 32"] = value

    @property
    def parametric_logic_line_33(self):
        """Get parametric_logic_line_33

        Returns:
            str: the value of `parametric_logic_line_33` or None if not set
        """
        return self._data["Parametric Logic Line 33"]

    @parametric_logic_line_33.setter
    def parametric_logic_line_33(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_33`

        Args:
            value (str): value for IDD Field `parametric_logic_line_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_33`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_33`')

        self._data["Parametric Logic Line 33"] = value

    @property
    def parametric_logic_line_34(self):
        """Get parametric_logic_line_34

        Returns:
            str: the value of `parametric_logic_line_34` or None if not set
        """
        return self._data["Parametric Logic Line 34"]

    @parametric_logic_line_34.setter
    def parametric_logic_line_34(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_34`

        Args:
            value (str): value for IDD Field `parametric_logic_line_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_34`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_34`')

        self._data["Parametric Logic Line 34"] = value

    @property
    def parametric_logic_line_35(self):
        """Get parametric_logic_line_35

        Returns:
            str: the value of `parametric_logic_line_35` or None if not set
        """
        return self._data["Parametric Logic Line 35"]

    @parametric_logic_line_35.setter
    def parametric_logic_line_35(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_35`

        Args:
            value (str): value for IDD Field `parametric_logic_line_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_35`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_35`')

        self._data["Parametric Logic Line 35"] = value

    @property
    def parametric_logic_line_36(self):
        """Get parametric_logic_line_36

        Returns:
            str: the value of `parametric_logic_line_36` or None if not set
        """
        return self._data["Parametric Logic Line 36"]

    @parametric_logic_line_36.setter
    def parametric_logic_line_36(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_36`

        Args:
            value (str): value for IDD Field `parametric_logic_line_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_36`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_36`')

        self._data["Parametric Logic Line 36"] = value

    @property
    def parametric_logic_line_37(self):
        """Get parametric_logic_line_37

        Returns:
            str: the value of `parametric_logic_line_37` or None if not set
        """
        return self._data["Parametric Logic Line 37"]

    @parametric_logic_line_37.setter
    def parametric_logic_line_37(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_37`

        Args:
            value (str): value for IDD Field `parametric_logic_line_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_37`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_37`')

        self._data["Parametric Logic Line 37"] = value

    @property
    def parametric_logic_line_38(self):
        """Get parametric_logic_line_38

        Returns:
            str: the value of `parametric_logic_line_38` or None if not set
        """
        return self._data["Parametric Logic Line 38"]

    @parametric_logic_line_38.setter
    def parametric_logic_line_38(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_38`

        Args:
            value (str): value for IDD Field `parametric_logic_line_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_38`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_38`')

        self._data["Parametric Logic Line 38"] = value

    @property
    def parametric_logic_line_39(self):
        """Get parametric_logic_line_39

        Returns:
            str: the value of `parametric_logic_line_39` or None if not set
        """
        return self._data["Parametric Logic Line 39"]

    @parametric_logic_line_39.setter
    def parametric_logic_line_39(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_39`

        Args:
            value (str): value for IDD Field `parametric_logic_line_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_39`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_39`')

        self._data["Parametric Logic Line 39"] = value

    @property
    def parametric_logic_line_40(self):
        """Get parametric_logic_line_40

        Returns:
            str: the value of `parametric_logic_line_40` or None if not set
        """
        return self._data["Parametric Logic Line 40"]

    @parametric_logic_line_40.setter
    def parametric_logic_line_40(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_40`

        Args:
            value (str): value for IDD Field `parametric_logic_line_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_40`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_40`')

        self._data["Parametric Logic Line 40"] = value

    @property
    def parametric_logic_line_41(self):
        """Get parametric_logic_line_41

        Returns:
            str: the value of `parametric_logic_line_41` or None if not set
        """
        return self._data["Parametric Logic Line 41"]

    @parametric_logic_line_41.setter
    def parametric_logic_line_41(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_41`

        Args:
            value (str): value for IDD Field `parametric_logic_line_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_41`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_41`')

        self._data["Parametric Logic Line 41"] = value

    @property
    def parametric_logic_line_42(self):
        """Get parametric_logic_line_42

        Returns:
            str: the value of `parametric_logic_line_42` or None if not set
        """
        return self._data["Parametric Logic Line 42"]

    @parametric_logic_line_42.setter
    def parametric_logic_line_42(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_42`

        Args:
            value (str): value for IDD Field `parametric_logic_line_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_42`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_42`')

        self._data["Parametric Logic Line 42"] = value

    @property
    def parametric_logic_line_43(self):
        """Get parametric_logic_line_43

        Returns:
            str: the value of `parametric_logic_line_43` or None if not set
        """
        return self._data["Parametric Logic Line 43"]

    @parametric_logic_line_43.setter
    def parametric_logic_line_43(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_43`

        Args:
            value (str): value for IDD Field `parametric_logic_line_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_43`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_43`')

        self._data["Parametric Logic Line 43"] = value

    @property
    def parametric_logic_line_44(self):
        """Get parametric_logic_line_44

        Returns:
            str: the value of `parametric_logic_line_44` or None if not set
        """
        return self._data["Parametric Logic Line 44"]

    @parametric_logic_line_44.setter
    def parametric_logic_line_44(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_44`

        Args:
            value (str): value for IDD Field `parametric_logic_line_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_44`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_44`')

        self._data["Parametric Logic Line 44"] = value

    @property
    def parametric_logic_line_45(self):
        """Get parametric_logic_line_45

        Returns:
            str: the value of `parametric_logic_line_45` or None if not set
        """
        return self._data["Parametric Logic Line 45"]

    @parametric_logic_line_45.setter
    def parametric_logic_line_45(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_45`

        Args:
            value (str): value for IDD Field `parametric_logic_line_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_45`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_45`')

        self._data["Parametric Logic Line 45"] = value

    @property
    def parametric_logic_line_46(self):
        """Get parametric_logic_line_46

        Returns:
            str: the value of `parametric_logic_line_46` or None if not set
        """
        return self._data["Parametric Logic Line 46"]

    @parametric_logic_line_46.setter
    def parametric_logic_line_46(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_46`

        Args:
            value (str): value for IDD Field `parametric_logic_line_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_46`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_46`')

        self._data["Parametric Logic Line 46"] = value

    @property
    def parametric_logic_line_47(self):
        """Get parametric_logic_line_47

        Returns:
            str: the value of `parametric_logic_line_47` or None if not set
        """
        return self._data["Parametric Logic Line 47"]

    @parametric_logic_line_47.setter
    def parametric_logic_line_47(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_47`

        Args:
            value (str): value for IDD Field `parametric_logic_line_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_47`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_47`')

        self._data["Parametric Logic Line 47"] = value

    @property
    def parametric_logic_line_48(self):
        """Get parametric_logic_line_48

        Returns:
            str: the value of `parametric_logic_line_48` or None if not set
        """
        return self._data["Parametric Logic Line 48"]

    @parametric_logic_line_48.setter
    def parametric_logic_line_48(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_48`

        Args:
            value (str): value for IDD Field `parametric_logic_line_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_48`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_48`')

        self._data["Parametric Logic Line 48"] = value

    @property
    def parametric_logic_line_49(self):
        """Get parametric_logic_line_49

        Returns:
            str: the value of `parametric_logic_line_49` or None if not set
        """
        return self._data["Parametric Logic Line 49"]

    @parametric_logic_line_49.setter
    def parametric_logic_line_49(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_49`

        Args:
            value (str): value for IDD Field `parametric_logic_line_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_49`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_49`')

        self._data["Parametric Logic Line 49"] = value

    @property
    def parametric_logic_line_50(self):
        """Get parametric_logic_line_50

        Returns:
            str: the value of `parametric_logic_line_50` or None if not set
        """
        return self._data["Parametric Logic Line 50"]

    @parametric_logic_line_50.setter
    def parametric_logic_line_50(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_50`

        Args:
            value (str): value for IDD Field `parametric_logic_line_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_50`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_50`')

        self._data["Parametric Logic Line 50"] = value

    @property
    def parametric_logic_line_51(self):
        """Get parametric_logic_line_51

        Returns:
            str: the value of `parametric_logic_line_51` or None if not set
        """
        return self._data["Parametric Logic Line 51"]

    @parametric_logic_line_51.setter
    def parametric_logic_line_51(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_51`

        Args:
            value (str): value for IDD Field `parametric_logic_line_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_51`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_51`')

        self._data["Parametric Logic Line 51"] = value

    @property
    def parametric_logic_line_52(self):
        """Get parametric_logic_line_52

        Returns:
            str: the value of `parametric_logic_line_52` or None if not set
        """
        return self._data["Parametric Logic Line 52"]

    @parametric_logic_line_52.setter
    def parametric_logic_line_52(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_52`

        Args:
            value (str): value for IDD Field `parametric_logic_line_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_52`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_52`')

        self._data["Parametric Logic Line 52"] = value

    @property
    def parametric_logic_line_53(self):
        """Get parametric_logic_line_53

        Returns:
            str: the value of `parametric_logic_line_53` or None if not set
        """
        return self._data["Parametric Logic Line 53"]

    @parametric_logic_line_53.setter
    def parametric_logic_line_53(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_53`

        Args:
            value (str): value for IDD Field `parametric_logic_line_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_53`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_53`')

        self._data["Parametric Logic Line 53"] = value

    @property
    def parametric_logic_line_54(self):
        """Get parametric_logic_line_54

        Returns:
            str: the value of `parametric_logic_line_54` or None if not set
        """
        return self._data["Parametric Logic Line 54"]

    @parametric_logic_line_54.setter
    def parametric_logic_line_54(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_54`

        Args:
            value (str): value for IDD Field `parametric_logic_line_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_54`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_54`')

        self._data["Parametric Logic Line 54"] = value

    @property
    def parametric_logic_line_55(self):
        """Get parametric_logic_line_55

        Returns:
            str: the value of `parametric_logic_line_55` or None if not set
        """
        return self._data["Parametric Logic Line 55"]

    @parametric_logic_line_55.setter
    def parametric_logic_line_55(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_55`

        Args:
            value (str): value for IDD Field `parametric_logic_line_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_55`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_55`')

        self._data["Parametric Logic Line 55"] = value

    @property
    def parametric_logic_line_56(self):
        """Get parametric_logic_line_56

        Returns:
            str: the value of `parametric_logic_line_56` or None if not set
        """
        return self._data["Parametric Logic Line 56"]

    @parametric_logic_line_56.setter
    def parametric_logic_line_56(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_56`

        Args:
            value (str): value for IDD Field `parametric_logic_line_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_56`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_56`')

        self._data["Parametric Logic Line 56"] = value

    @property
    def parametric_logic_line_57(self):
        """Get parametric_logic_line_57

        Returns:
            str: the value of `parametric_logic_line_57` or None if not set
        """
        return self._data["Parametric Logic Line 57"]

    @parametric_logic_line_57.setter
    def parametric_logic_line_57(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_57`

        Args:
            value (str): value for IDD Field `parametric_logic_line_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_57`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_57`')

        self._data["Parametric Logic Line 57"] = value

    @property
    def parametric_logic_line_58(self):
        """Get parametric_logic_line_58

        Returns:
            str: the value of `parametric_logic_line_58` or None if not set
        """
        return self._data["Parametric Logic Line 58"]

    @parametric_logic_line_58.setter
    def parametric_logic_line_58(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_58`

        Args:
            value (str): value for IDD Field `parametric_logic_line_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_58`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_58`')

        self._data["Parametric Logic Line 58"] = value

    @property
    def parametric_logic_line_59(self):
        """Get parametric_logic_line_59

        Returns:
            str: the value of `parametric_logic_line_59` or None if not set
        """
        return self._data["Parametric Logic Line 59"]

    @parametric_logic_line_59.setter
    def parametric_logic_line_59(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_59`

        Args:
            value (str): value for IDD Field `parametric_logic_line_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_59`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_59`')

        self._data["Parametric Logic Line 59"] = value

    @property
    def parametric_logic_line_60(self):
        """Get parametric_logic_line_60

        Returns:
            str: the value of `parametric_logic_line_60` or None if not set
        """
        return self._data["Parametric Logic Line 60"]

    @parametric_logic_line_60.setter
    def parametric_logic_line_60(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_60`

        Args:
            value (str): value for IDD Field `parametric_logic_line_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_60`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_60`')

        self._data["Parametric Logic Line 60"] = value

    @property
    def parametric_logic_line_61(self):
        """Get parametric_logic_line_61

        Returns:
            str: the value of `parametric_logic_line_61` or None if not set
        """
        return self._data["Parametric Logic Line 61"]

    @parametric_logic_line_61.setter
    def parametric_logic_line_61(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_61`

        Args:
            value (str): value for IDD Field `parametric_logic_line_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_61`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_61`')

        self._data["Parametric Logic Line 61"] = value

    @property
    def parametric_logic_line_62(self):
        """Get parametric_logic_line_62

        Returns:
            str: the value of `parametric_logic_line_62` or None if not set
        """
        return self._data["Parametric Logic Line 62"]

    @parametric_logic_line_62.setter
    def parametric_logic_line_62(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_62`

        Args:
            value (str): value for IDD Field `parametric_logic_line_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_62`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_62`')

        self._data["Parametric Logic Line 62"] = value

    @property
    def parametric_logic_line_63(self):
        """Get parametric_logic_line_63

        Returns:
            str: the value of `parametric_logic_line_63` or None if not set
        """
        return self._data["Parametric Logic Line 63"]

    @parametric_logic_line_63.setter
    def parametric_logic_line_63(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_63`

        Args:
            value (str): value for IDD Field `parametric_logic_line_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_63`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_63`')

        self._data["Parametric Logic Line 63"] = value

    @property
    def parametric_logic_line_64(self):
        """Get parametric_logic_line_64

        Returns:
            str: the value of `parametric_logic_line_64` or None if not set
        """
        return self._data["Parametric Logic Line 64"]

    @parametric_logic_line_64.setter
    def parametric_logic_line_64(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_64`

        Args:
            value (str): value for IDD Field `parametric_logic_line_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_64`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_64`')

        self._data["Parametric Logic Line 64"] = value

    @property
    def parametric_logic_line_65(self):
        """Get parametric_logic_line_65

        Returns:
            str: the value of `parametric_logic_line_65` or None if not set
        """
        return self._data["Parametric Logic Line 65"]

    @parametric_logic_line_65.setter
    def parametric_logic_line_65(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_65`

        Args:
            value (str): value for IDD Field `parametric_logic_line_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_65`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_65`')

        self._data["Parametric Logic Line 65"] = value

    @property
    def parametric_logic_line_66(self):
        """Get parametric_logic_line_66

        Returns:
            str: the value of `parametric_logic_line_66` or None if not set
        """
        return self._data["Parametric Logic Line 66"]

    @parametric_logic_line_66.setter
    def parametric_logic_line_66(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_66`

        Args:
            value (str): value for IDD Field `parametric_logic_line_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_66`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_66`')

        self._data["Parametric Logic Line 66"] = value

    @property
    def parametric_logic_line_67(self):
        """Get parametric_logic_line_67

        Returns:
            str: the value of `parametric_logic_line_67` or None if not set
        """
        return self._data["Parametric Logic Line 67"]

    @parametric_logic_line_67.setter
    def parametric_logic_line_67(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_67`

        Args:
            value (str): value for IDD Field `parametric_logic_line_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_67`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_67`')

        self._data["Parametric Logic Line 67"] = value

    @property
    def parametric_logic_line_68(self):
        """Get parametric_logic_line_68

        Returns:
            str: the value of `parametric_logic_line_68` or None if not set
        """
        return self._data["Parametric Logic Line 68"]

    @parametric_logic_line_68.setter
    def parametric_logic_line_68(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_68`

        Args:
            value (str): value for IDD Field `parametric_logic_line_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_68`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_68`')

        self._data["Parametric Logic Line 68"] = value

    @property
    def parametric_logic_line_69(self):
        """Get parametric_logic_line_69

        Returns:
            str: the value of `parametric_logic_line_69` or None if not set
        """
        return self._data["Parametric Logic Line 69"]

    @parametric_logic_line_69.setter
    def parametric_logic_line_69(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_69`

        Args:
            value (str): value for IDD Field `parametric_logic_line_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_69`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_69`')

        self._data["Parametric Logic Line 69"] = value

    @property
    def parametric_logic_line_70(self):
        """Get parametric_logic_line_70

        Returns:
            str: the value of `parametric_logic_line_70` or None if not set
        """
        return self._data["Parametric Logic Line 70"]

    @parametric_logic_line_70.setter
    def parametric_logic_line_70(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_70`

        Args:
            value (str): value for IDD Field `parametric_logic_line_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_70`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_70`')

        self._data["Parametric Logic Line 70"] = value

    @property
    def parametric_logic_line_71(self):
        """Get parametric_logic_line_71

        Returns:
            str: the value of `parametric_logic_line_71` or None if not set
        """
        return self._data["Parametric Logic Line 71"]

    @parametric_logic_line_71.setter
    def parametric_logic_line_71(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_71`

        Args:
            value (str): value for IDD Field `parametric_logic_line_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_71`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_71`')

        self._data["Parametric Logic Line 71"] = value

    @property
    def parametric_logic_line_72(self):
        """Get parametric_logic_line_72

        Returns:
            str: the value of `parametric_logic_line_72` or None if not set
        """
        return self._data["Parametric Logic Line 72"]

    @parametric_logic_line_72.setter
    def parametric_logic_line_72(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_72`

        Args:
            value (str): value for IDD Field `parametric_logic_line_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_72`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_72`')

        self._data["Parametric Logic Line 72"] = value

    @property
    def parametric_logic_line_73(self):
        """Get parametric_logic_line_73

        Returns:
            str: the value of `parametric_logic_line_73` or None if not set
        """
        return self._data["Parametric Logic Line 73"]

    @parametric_logic_line_73.setter
    def parametric_logic_line_73(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_73`

        Args:
            value (str): value for IDD Field `parametric_logic_line_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_73`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_73`')

        self._data["Parametric Logic Line 73"] = value

    @property
    def parametric_logic_line_74(self):
        """Get parametric_logic_line_74

        Returns:
            str: the value of `parametric_logic_line_74` or None if not set
        """
        return self._data["Parametric Logic Line 74"]

    @parametric_logic_line_74.setter
    def parametric_logic_line_74(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_74`

        Args:
            value (str): value for IDD Field `parametric_logic_line_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_74`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_74`')

        self._data["Parametric Logic Line 74"] = value

    @property
    def parametric_logic_line_75(self):
        """Get parametric_logic_line_75

        Returns:
            str: the value of `parametric_logic_line_75` or None if not set
        """
        return self._data["Parametric Logic Line 75"]

    @parametric_logic_line_75.setter
    def parametric_logic_line_75(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_75`

        Args:
            value (str): value for IDD Field `parametric_logic_line_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_75`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_75`')

        self._data["Parametric Logic Line 75"] = value

    @property
    def parametric_logic_line_76(self):
        """Get parametric_logic_line_76

        Returns:
            str: the value of `parametric_logic_line_76` or None if not set
        """
        return self._data["Parametric Logic Line 76"]

    @parametric_logic_line_76.setter
    def parametric_logic_line_76(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_76`

        Args:
            value (str): value for IDD Field `parametric_logic_line_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_76`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_76`')

        self._data["Parametric Logic Line 76"] = value

    @property
    def parametric_logic_line_77(self):
        """Get parametric_logic_line_77

        Returns:
            str: the value of `parametric_logic_line_77` or None if not set
        """
        return self._data["Parametric Logic Line 77"]

    @parametric_logic_line_77.setter
    def parametric_logic_line_77(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_77`

        Args:
            value (str): value for IDD Field `parametric_logic_line_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_77`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_77`')

        self._data["Parametric Logic Line 77"] = value

    @property
    def parametric_logic_line_78(self):
        """Get parametric_logic_line_78

        Returns:
            str: the value of `parametric_logic_line_78` or None if not set
        """
        return self._data["Parametric Logic Line 78"]

    @parametric_logic_line_78.setter
    def parametric_logic_line_78(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_78`

        Args:
            value (str): value for IDD Field `parametric_logic_line_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_78`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_78`')

        self._data["Parametric Logic Line 78"] = value

    @property
    def parametric_logic_line_79(self):
        """Get parametric_logic_line_79

        Returns:
            str: the value of `parametric_logic_line_79` or None if not set
        """
        return self._data["Parametric Logic Line 79"]

    @parametric_logic_line_79.setter
    def parametric_logic_line_79(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_79`

        Args:
            value (str): value for IDD Field `parametric_logic_line_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_79`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_79`')

        self._data["Parametric Logic Line 79"] = value

    @property
    def parametric_logic_line_80(self):
        """Get parametric_logic_line_80

        Returns:
            str: the value of `parametric_logic_line_80` or None if not set
        """
        return self._data["Parametric Logic Line 80"]

    @parametric_logic_line_80.setter
    def parametric_logic_line_80(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_80`

        Args:
            value (str): value for IDD Field `parametric_logic_line_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_80`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_80`')

        self._data["Parametric Logic Line 80"] = value

    @property
    def parametric_logic_line_81(self):
        """Get parametric_logic_line_81

        Returns:
            str: the value of `parametric_logic_line_81` or None if not set
        """
        return self._data["Parametric Logic Line 81"]

    @parametric_logic_line_81.setter
    def parametric_logic_line_81(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_81`

        Args:
            value (str): value for IDD Field `parametric_logic_line_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_81`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_81`')

        self._data["Parametric Logic Line 81"] = value

    @property
    def parametric_logic_line_82(self):
        """Get parametric_logic_line_82

        Returns:
            str: the value of `parametric_logic_line_82` or None if not set
        """
        return self._data["Parametric Logic Line 82"]

    @parametric_logic_line_82.setter
    def parametric_logic_line_82(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_82`

        Args:
            value (str): value for IDD Field `parametric_logic_line_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_82`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_82`')

        self._data["Parametric Logic Line 82"] = value

    @property
    def parametric_logic_line_83(self):
        """Get parametric_logic_line_83

        Returns:
            str: the value of `parametric_logic_line_83` or None if not set
        """
        return self._data["Parametric Logic Line 83"]

    @parametric_logic_line_83.setter
    def parametric_logic_line_83(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_83`

        Args:
            value (str): value for IDD Field `parametric_logic_line_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_83`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_83`')

        self._data["Parametric Logic Line 83"] = value

    @property
    def parametric_logic_line_84(self):
        """Get parametric_logic_line_84

        Returns:
            str: the value of `parametric_logic_line_84` or None if not set
        """
        return self._data["Parametric Logic Line 84"]

    @parametric_logic_line_84.setter
    def parametric_logic_line_84(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_84`

        Args:
            value (str): value for IDD Field `parametric_logic_line_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_84`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_84`')

        self._data["Parametric Logic Line 84"] = value

    @property
    def parametric_logic_line_85(self):
        """Get parametric_logic_line_85

        Returns:
            str: the value of `parametric_logic_line_85` or None if not set
        """
        return self._data["Parametric Logic Line 85"]

    @parametric_logic_line_85.setter
    def parametric_logic_line_85(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_85`

        Args:
            value (str): value for IDD Field `parametric_logic_line_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_85`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_85`')

        self._data["Parametric Logic Line 85"] = value

    @property
    def parametric_logic_line_86(self):
        """Get parametric_logic_line_86

        Returns:
            str: the value of `parametric_logic_line_86` or None if not set
        """
        return self._data["Parametric Logic Line 86"]

    @parametric_logic_line_86.setter
    def parametric_logic_line_86(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_86`

        Args:
            value (str): value for IDD Field `parametric_logic_line_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_86`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_86`')

        self._data["Parametric Logic Line 86"] = value

    @property
    def parametric_logic_line_87(self):
        """Get parametric_logic_line_87

        Returns:
            str: the value of `parametric_logic_line_87` or None if not set
        """
        return self._data["Parametric Logic Line 87"]

    @parametric_logic_line_87.setter
    def parametric_logic_line_87(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_87`

        Args:
            value (str): value for IDD Field `parametric_logic_line_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_87`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_87`')

        self._data["Parametric Logic Line 87"] = value

    @property
    def parametric_logic_line_88(self):
        """Get parametric_logic_line_88

        Returns:
            str: the value of `parametric_logic_line_88` or None if not set
        """
        return self._data["Parametric Logic Line 88"]

    @parametric_logic_line_88.setter
    def parametric_logic_line_88(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_88`

        Args:
            value (str): value for IDD Field `parametric_logic_line_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_88`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_88`')

        self._data["Parametric Logic Line 88"] = value

    @property
    def parametric_logic_line_89(self):
        """Get parametric_logic_line_89

        Returns:
            str: the value of `parametric_logic_line_89` or None if not set
        """
        return self._data["Parametric Logic Line 89"]

    @parametric_logic_line_89.setter
    def parametric_logic_line_89(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_89`

        Args:
            value (str): value for IDD Field `parametric_logic_line_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_89`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_89`')

        self._data["Parametric Logic Line 89"] = value

    @property
    def parametric_logic_line_90(self):
        """Get parametric_logic_line_90

        Returns:
            str: the value of `parametric_logic_line_90` or None if not set
        """
        return self._data["Parametric Logic Line 90"]

    @parametric_logic_line_90.setter
    def parametric_logic_line_90(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_90`

        Args:
            value (str): value for IDD Field `parametric_logic_line_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_90`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_90`')

        self._data["Parametric Logic Line 90"] = value

    @property
    def parametric_logic_line_91(self):
        """Get parametric_logic_line_91

        Returns:
            str: the value of `parametric_logic_line_91` or None if not set
        """
        return self._data["Parametric Logic Line 91"]

    @parametric_logic_line_91.setter
    def parametric_logic_line_91(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_91`

        Args:
            value (str): value for IDD Field `parametric_logic_line_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_91`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_91`')

        self._data["Parametric Logic Line 91"] = value

    @property
    def parametric_logic_line_92(self):
        """Get parametric_logic_line_92

        Returns:
            str: the value of `parametric_logic_line_92` or None if not set
        """
        return self._data["Parametric Logic Line 92"]

    @parametric_logic_line_92.setter
    def parametric_logic_line_92(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_92`

        Args:
            value (str): value for IDD Field `parametric_logic_line_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_92`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_92`')

        self._data["Parametric Logic Line 92"] = value

    @property
    def parametric_logic_line_93(self):
        """Get parametric_logic_line_93

        Returns:
            str: the value of `parametric_logic_line_93` or None if not set
        """
        return self._data["Parametric Logic Line 93"]

    @parametric_logic_line_93.setter
    def parametric_logic_line_93(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_93`

        Args:
            value (str): value for IDD Field `parametric_logic_line_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_93`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_93`')

        self._data["Parametric Logic Line 93"] = value

    @property
    def parametric_logic_line_94(self):
        """Get parametric_logic_line_94

        Returns:
            str: the value of `parametric_logic_line_94` or None if not set
        """
        return self._data["Parametric Logic Line 94"]

    @parametric_logic_line_94.setter
    def parametric_logic_line_94(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_94`

        Args:
            value (str): value for IDD Field `parametric_logic_line_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_94`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_94`')

        self._data["Parametric Logic Line 94"] = value

    @property
    def parametric_logic_line_95(self):
        """Get parametric_logic_line_95

        Returns:
            str: the value of `parametric_logic_line_95` or None if not set
        """
        return self._data["Parametric Logic Line 95"]

    @parametric_logic_line_95.setter
    def parametric_logic_line_95(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_95`

        Args:
            value (str): value for IDD Field `parametric_logic_line_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_95`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_95`')

        self._data["Parametric Logic Line 95"] = value

    @property
    def parametric_logic_line_96(self):
        """Get parametric_logic_line_96

        Returns:
            str: the value of `parametric_logic_line_96` or None if not set
        """
        return self._data["Parametric Logic Line 96"]

    @parametric_logic_line_96.setter
    def parametric_logic_line_96(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_96`

        Args:
            value (str): value for IDD Field `parametric_logic_line_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_96`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_96`')

        self._data["Parametric Logic Line 96"] = value

    @property
    def parametric_logic_line_97(self):
        """Get parametric_logic_line_97

        Returns:
            str: the value of `parametric_logic_line_97` or None if not set
        """
        return self._data["Parametric Logic Line 97"]

    @parametric_logic_line_97.setter
    def parametric_logic_line_97(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_97`

        Args:
            value (str): value for IDD Field `parametric_logic_line_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_97`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_97`')

        self._data["Parametric Logic Line 97"] = value

    @property
    def parametric_logic_line_98(self):
        """Get parametric_logic_line_98

        Returns:
            str: the value of `parametric_logic_line_98` or None if not set
        """
        return self._data["Parametric Logic Line 98"]

    @parametric_logic_line_98.setter
    def parametric_logic_line_98(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_98`

        Args:
            value (str): value for IDD Field `parametric_logic_line_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_98`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_98`')

        self._data["Parametric Logic Line 98"] = value

    @property
    def parametric_logic_line_99(self):
        """Get parametric_logic_line_99

        Returns:
            str: the value of `parametric_logic_line_99` or None if not set
        """
        return self._data["Parametric Logic Line 99"]

    @parametric_logic_line_99.setter
    def parametric_logic_line_99(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_99`

        Args:
            value (str): value for IDD Field `parametric_logic_line_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_99`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_99`')

        self._data["Parametric Logic Line 99"] = value

    @property
    def parametric_logic_line_100(self):
        """Get parametric_logic_line_100

        Returns:
            str: the value of `parametric_logic_line_100` or None if not set
        """
        return self._data["Parametric Logic Line 100"]

    @parametric_logic_line_100.setter
    def parametric_logic_line_100(self, value=None):
        """  Corresponds to IDD Field `parametric_logic_line_100`

        Args:
            value (str): value for IDD Field `parametric_logic_line_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `parametric_logic_line_100`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `parametric_logic_line_100`')

        self._data["Parametric Logic Line 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.parametric_logic_line_1))
        out.append(self._to_str(self.parametric_logic_line_2))
        out.append(self._to_str(self.parametric_logic_line_3))
        out.append(self._to_str(self.parametric_logic_line_4))
        out.append(self._to_str(self.parametric_logic_line_5))
        out.append(self._to_str(self.parametric_logic_line_6))
        out.append(self._to_str(self.parametric_logic_line_7))
        out.append(self._to_str(self.parametric_logic_line_8))
        out.append(self._to_str(self.parametric_logic_line_9))
        out.append(self._to_str(self.parametric_logic_line_10))
        out.append(self._to_str(self.parametric_logic_line_11))
        out.append(self._to_str(self.parametric_logic_line_12))
        out.append(self._to_str(self.parametric_logic_line_13))
        out.append(self._to_str(self.parametric_logic_line_14))
        out.append(self._to_str(self.parametric_logic_line_15))
        out.append(self._to_str(self.parametric_logic_line_16))
        out.append(self._to_str(self.parametric_logic_line_17))
        out.append(self._to_str(self.parametric_logic_line_18))
        out.append(self._to_str(self.parametric_logic_line_19))
        out.append(self._to_str(self.parametric_logic_line_20))
        out.append(self._to_str(self.parametric_logic_line_21))
        out.append(self._to_str(self.parametric_logic_line_22))
        out.append(self._to_str(self.parametric_logic_line_23))
        out.append(self._to_str(self.parametric_logic_line_24))
        out.append(self._to_str(self.parametric_logic_line_25))
        out.append(self._to_str(self.parametric_logic_line_26))
        out.append(self._to_str(self.parametric_logic_line_27))
        out.append(self._to_str(self.parametric_logic_line_28))
        out.append(self._to_str(self.parametric_logic_line_29))
        out.append(self._to_str(self.parametric_logic_line_30))
        out.append(self._to_str(self.parametric_logic_line_31))
        out.append(self._to_str(self.parametric_logic_line_32))
        out.append(self._to_str(self.parametric_logic_line_33))
        out.append(self._to_str(self.parametric_logic_line_34))
        out.append(self._to_str(self.parametric_logic_line_35))
        out.append(self._to_str(self.parametric_logic_line_36))
        out.append(self._to_str(self.parametric_logic_line_37))
        out.append(self._to_str(self.parametric_logic_line_38))
        out.append(self._to_str(self.parametric_logic_line_39))
        out.append(self._to_str(self.parametric_logic_line_40))
        out.append(self._to_str(self.parametric_logic_line_41))
        out.append(self._to_str(self.parametric_logic_line_42))
        out.append(self._to_str(self.parametric_logic_line_43))
        out.append(self._to_str(self.parametric_logic_line_44))
        out.append(self._to_str(self.parametric_logic_line_45))
        out.append(self._to_str(self.parametric_logic_line_46))
        out.append(self._to_str(self.parametric_logic_line_47))
        out.append(self._to_str(self.parametric_logic_line_48))
        out.append(self._to_str(self.parametric_logic_line_49))
        out.append(self._to_str(self.parametric_logic_line_50))
        out.append(self._to_str(self.parametric_logic_line_51))
        out.append(self._to_str(self.parametric_logic_line_52))
        out.append(self._to_str(self.parametric_logic_line_53))
        out.append(self._to_str(self.parametric_logic_line_54))
        out.append(self._to_str(self.parametric_logic_line_55))
        out.append(self._to_str(self.parametric_logic_line_56))
        out.append(self._to_str(self.parametric_logic_line_57))
        out.append(self._to_str(self.parametric_logic_line_58))
        out.append(self._to_str(self.parametric_logic_line_59))
        out.append(self._to_str(self.parametric_logic_line_60))
        out.append(self._to_str(self.parametric_logic_line_61))
        out.append(self._to_str(self.parametric_logic_line_62))
        out.append(self._to_str(self.parametric_logic_line_63))
        out.append(self._to_str(self.parametric_logic_line_64))
        out.append(self._to_str(self.parametric_logic_line_65))
        out.append(self._to_str(self.parametric_logic_line_66))
        out.append(self._to_str(self.parametric_logic_line_67))
        out.append(self._to_str(self.parametric_logic_line_68))
        out.append(self._to_str(self.parametric_logic_line_69))
        out.append(self._to_str(self.parametric_logic_line_70))
        out.append(self._to_str(self.parametric_logic_line_71))
        out.append(self._to_str(self.parametric_logic_line_72))
        out.append(self._to_str(self.parametric_logic_line_73))
        out.append(self._to_str(self.parametric_logic_line_74))
        out.append(self._to_str(self.parametric_logic_line_75))
        out.append(self._to_str(self.parametric_logic_line_76))
        out.append(self._to_str(self.parametric_logic_line_77))
        out.append(self._to_str(self.parametric_logic_line_78))
        out.append(self._to_str(self.parametric_logic_line_79))
        out.append(self._to_str(self.parametric_logic_line_80))
        out.append(self._to_str(self.parametric_logic_line_81))
        out.append(self._to_str(self.parametric_logic_line_82))
        out.append(self._to_str(self.parametric_logic_line_83))
        out.append(self._to_str(self.parametric_logic_line_84))
        out.append(self._to_str(self.parametric_logic_line_85))
        out.append(self._to_str(self.parametric_logic_line_86))
        out.append(self._to_str(self.parametric_logic_line_87))
        out.append(self._to_str(self.parametric_logic_line_88))
        out.append(self._to_str(self.parametric_logic_line_89))
        out.append(self._to_str(self.parametric_logic_line_90))
        out.append(self._to_str(self.parametric_logic_line_91))
        out.append(self._to_str(self.parametric_logic_line_92))
        out.append(self._to_str(self.parametric_logic_line_93))
        out.append(self._to_str(self.parametric_logic_line_94))
        out.append(self._to_str(self.parametric_logic_line_95))
        out.append(self._to_str(self.parametric_logic_line_96))
        out.append(self._to_str(self.parametric_logic_line_97))
        out.append(self._to_str(self.parametric_logic_line_98))
        out.append(self._to_str(self.parametric_logic_line_99))
        out.append(self._to_str(self.parametric_logic_line_100))
        return ",".join(out)

class ParametricRunControl(object):
    """ Corresponds to IDD object `Parametric:RunControl`
        Controls which parametric runs are simulated. This object is optional. If it is not
        included, then all parametric runs are performed.
    
    """
    internal_name = "Parametric:RunControl"
    field_count = 101
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Parametric:RunControl`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Perform Run 1"] = None
        self._data["Perform Run 2"] = None
        self._data["Perform Run 3"] = None
        self._data["Perform Run 4"] = None
        self._data["Perform Run 5"] = None
        self._data["Perform Run 6"] = None
        self._data["Perform Run 7"] = None
        self._data["Perform Run 8"] = None
        self._data["Perform Run 9"] = None
        self._data["Perform Run 10"] = None
        self._data["Perform Run 11"] = None
        self._data["Perform Run 12"] = None
        self._data["Perform Run 13"] = None
        self._data["Perform Run 14"] = None
        self._data["Perform Run 15"] = None
        self._data["Perform Run 16"] = None
        self._data["Perform Run 17"] = None
        self._data["Perform Run 18"] = None
        self._data["Perform Run 19"] = None
        self._data["Perform Run 20"] = None
        self._data["Perform Run 21"] = None
        self._data["Perform Run 22"] = None
        self._data["Perform Run 23"] = None
        self._data["Perform Run 24"] = None
        self._data["Perform Run 25"] = None
        self._data["Perform Run 26"] = None
        self._data["Perform Run 27"] = None
        self._data["Perform Run 28"] = None
        self._data["Perform Run 29"] = None
        self._data["Perform Run 30"] = None
        self._data["Perform Run 31"] = None
        self._data["Perform Run 32"] = None
        self._data["Perform Run 33"] = None
        self._data["Perform Run 34"] = None
        self._data["Perform Run 35"] = None
        self._data["Perform Run 36"] = None
        self._data["Perform Run 37"] = None
        self._data["Perform Run 38"] = None
        self._data["Perform Run 39"] = None
        self._data["Perform Run 40"] = None
        self._data["Perform Run 41"] = None
        self._data["Perform Run 42"] = None
        self._data["Perform Run 43"] = None
        self._data["Perform Run 44"] = None
        self._data["Perform Run 45"] = None
        self._data["Perform Run 46"] = None
        self._data["Perform Run 47"] = None
        self._data["Perform Run 48"] = None
        self._data["Perform Run 49"] = None
        self._data["Perform Run 50"] = None
        self._data["Perform Run 51"] = None
        self._data["Perform Run 52"] = None
        self._data["Perform Run 53"] = None
        self._data["Perform Run 54"] = None
        self._data["Perform Run 55"] = None
        self._data["Perform Run 56"] = None
        self._data["Perform Run 57"] = None
        self._data["Perform Run 58"] = None
        self._data["Perform Run 59"] = None
        self._data["Perform Run 60"] = None
        self._data["Perform Run 61"] = None
        self._data["Perform Run 62"] = None
        self._data["Perform Run 63"] = None
        self._data["Perform Run 64"] = None
        self._data["Perform Run 65"] = None
        self._data["Perform Run 66"] = None
        self._data["Perform Run 67"] = None
        self._data["Perform Run 68"] = None
        self._data["Perform Run 69"] = None
        self._data["Perform Run 70"] = None
        self._data["Perform Run 71"] = None
        self._data["Perform Run 72"] = None
        self._data["Perform Run 73"] = None
        self._data["Perform Run 74"] = None
        self._data["Perform Run 75"] = None
        self._data["Perform Run 76"] = None
        self._data["Perform Run 77"] = None
        self._data["Perform Run 78"] = None
        self._data["Perform Run 79"] = None
        self._data["Perform Run 80"] = None
        self._data["Perform Run 81"] = None
        self._data["Perform Run 82"] = None
        self._data["Perform Run 83"] = None
        self._data["Perform Run 84"] = None
        self._data["Perform Run 85"] = None
        self._data["Perform Run 86"] = None
        self._data["Perform Run 87"] = None
        self._data["Perform Run 88"] = None
        self._data["Perform Run 89"] = None
        self._data["Perform Run 90"] = None
        self._data["Perform Run 91"] = None
        self._data["Perform Run 92"] = None
        self._data["Perform Run 93"] = None
        self._data["Perform Run 94"] = None
        self._data["Perform Run 95"] = None
        self._data["Perform Run 96"] = None
        self._data["Perform Run 97"] = None
        self._data["Perform Run 98"] = None
        self._data["Perform Run 99"] = None
        self._data["Perform Run 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_1 = None
        else:
            self.perform_run_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_2 = None
        else:
            self.perform_run_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_3 = None
        else:
            self.perform_run_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_4 = None
        else:
            self.perform_run_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_5 = None
        else:
            self.perform_run_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_6 = None
        else:
            self.perform_run_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_7 = None
        else:
            self.perform_run_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_8 = None
        else:
            self.perform_run_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_9 = None
        else:
            self.perform_run_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_10 = None
        else:
            self.perform_run_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_11 = None
        else:
            self.perform_run_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_12 = None
        else:
            self.perform_run_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_13 = None
        else:
            self.perform_run_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_14 = None
        else:
            self.perform_run_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_15 = None
        else:
            self.perform_run_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_16 = None
        else:
            self.perform_run_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_17 = None
        else:
            self.perform_run_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_18 = None
        else:
            self.perform_run_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_19 = None
        else:
            self.perform_run_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_20 = None
        else:
            self.perform_run_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_21 = None
        else:
            self.perform_run_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_22 = None
        else:
            self.perform_run_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_23 = None
        else:
            self.perform_run_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_24 = None
        else:
            self.perform_run_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_25 = None
        else:
            self.perform_run_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_26 = None
        else:
            self.perform_run_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_27 = None
        else:
            self.perform_run_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_28 = None
        else:
            self.perform_run_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_29 = None
        else:
            self.perform_run_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_30 = None
        else:
            self.perform_run_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_31 = None
        else:
            self.perform_run_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_32 = None
        else:
            self.perform_run_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_33 = None
        else:
            self.perform_run_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_34 = None
        else:
            self.perform_run_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_35 = None
        else:
            self.perform_run_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_36 = None
        else:
            self.perform_run_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_37 = None
        else:
            self.perform_run_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_38 = None
        else:
            self.perform_run_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_39 = None
        else:
            self.perform_run_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_40 = None
        else:
            self.perform_run_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_41 = None
        else:
            self.perform_run_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_42 = None
        else:
            self.perform_run_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_43 = None
        else:
            self.perform_run_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_44 = None
        else:
            self.perform_run_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_45 = None
        else:
            self.perform_run_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_46 = None
        else:
            self.perform_run_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_47 = None
        else:
            self.perform_run_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_48 = None
        else:
            self.perform_run_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_49 = None
        else:
            self.perform_run_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_50 = None
        else:
            self.perform_run_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_51 = None
        else:
            self.perform_run_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_52 = None
        else:
            self.perform_run_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_53 = None
        else:
            self.perform_run_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_54 = None
        else:
            self.perform_run_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_55 = None
        else:
            self.perform_run_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_56 = None
        else:
            self.perform_run_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_57 = None
        else:
            self.perform_run_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_58 = None
        else:
            self.perform_run_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_59 = None
        else:
            self.perform_run_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_60 = None
        else:
            self.perform_run_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_61 = None
        else:
            self.perform_run_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_62 = None
        else:
            self.perform_run_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_63 = None
        else:
            self.perform_run_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_64 = None
        else:
            self.perform_run_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_65 = None
        else:
            self.perform_run_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_66 = None
        else:
            self.perform_run_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_67 = None
        else:
            self.perform_run_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_68 = None
        else:
            self.perform_run_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_69 = None
        else:
            self.perform_run_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_70 = None
        else:
            self.perform_run_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_71 = None
        else:
            self.perform_run_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_72 = None
        else:
            self.perform_run_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_73 = None
        else:
            self.perform_run_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_74 = None
        else:
            self.perform_run_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_75 = None
        else:
            self.perform_run_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_76 = None
        else:
            self.perform_run_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_77 = None
        else:
            self.perform_run_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_78 = None
        else:
            self.perform_run_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_79 = None
        else:
            self.perform_run_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_80 = None
        else:
            self.perform_run_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_81 = None
        else:
            self.perform_run_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_82 = None
        else:
            self.perform_run_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_83 = None
        else:
            self.perform_run_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_84 = None
        else:
            self.perform_run_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_85 = None
        else:
            self.perform_run_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_86 = None
        else:
            self.perform_run_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_87 = None
        else:
            self.perform_run_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_88 = None
        else:
            self.perform_run_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_89 = None
        else:
            self.perform_run_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_90 = None
        else:
            self.perform_run_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_91 = None
        else:
            self.perform_run_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_92 = None
        else:
            self.perform_run_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_93 = None
        else:
            self.perform_run_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_94 = None
        else:
            self.perform_run_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_95 = None
        else:
            self.perform_run_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_96 = None
        else:
            self.perform_run_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_97 = None
        else:
            self.perform_run_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_98 = None
        else:
            self.perform_run_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_99 = None
        else:
            self.perform_run_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.perform_run_100 = None
        else:
            self.perform_run_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def perform_run_1(self):
        """Get perform_run_1

        Returns:
            str: the value of `perform_run_1` or None if not set
        """
        return self._data["Perform Run 1"]

    @perform_run_1.setter
    def perform_run_1(self, value="Yes"):
        """  Corresponds to IDD Field `perform_run_1`

        Args:
            value (str): value for IDD Field `perform_run_1`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_1`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_1`'.format(value))

        self._data["Perform Run 1"] = value

    @property
    def perform_run_2(self):
        """Get perform_run_2

        Returns:
            str: the value of `perform_run_2` or None if not set
        """
        return self._data["Perform Run 2"]

    @perform_run_2.setter
    def perform_run_2(self, value=None):
        """  Corresponds to IDD Field `perform_run_2`

        Args:
            value (str): value for IDD Field `perform_run_2`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_2`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_2`'.format(value))

        self._data["Perform Run 2"] = value

    @property
    def perform_run_3(self):
        """Get perform_run_3

        Returns:
            str: the value of `perform_run_3` or None if not set
        """
        return self._data["Perform Run 3"]

    @perform_run_3.setter
    def perform_run_3(self, value=None):
        """  Corresponds to IDD Field `perform_run_3`

        Args:
            value (str): value for IDD Field `perform_run_3`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_3`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_3`'.format(value))

        self._data["Perform Run 3"] = value

    @property
    def perform_run_4(self):
        """Get perform_run_4

        Returns:
            str: the value of `perform_run_4` or None if not set
        """
        return self._data["Perform Run 4"]

    @perform_run_4.setter
    def perform_run_4(self, value=None):
        """  Corresponds to IDD Field `perform_run_4`

        Args:
            value (str): value for IDD Field `perform_run_4`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_4`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_4`'.format(value))

        self._data["Perform Run 4"] = value

    @property
    def perform_run_5(self):
        """Get perform_run_5

        Returns:
            str: the value of `perform_run_5` or None if not set
        """
        return self._data["Perform Run 5"]

    @perform_run_5.setter
    def perform_run_5(self, value=None):
        """  Corresponds to IDD Field `perform_run_5`

        Args:
            value (str): value for IDD Field `perform_run_5`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_5`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_5`'.format(value))

        self._data["Perform Run 5"] = value

    @property
    def perform_run_6(self):
        """Get perform_run_6

        Returns:
            str: the value of `perform_run_6` or None if not set
        """
        return self._data["Perform Run 6"]

    @perform_run_6.setter
    def perform_run_6(self, value=None):
        """  Corresponds to IDD Field `perform_run_6`

        Args:
            value (str): value for IDD Field `perform_run_6`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_6`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_6`'.format(value))

        self._data["Perform Run 6"] = value

    @property
    def perform_run_7(self):
        """Get perform_run_7

        Returns:
            str: the value of `perform_run_7` or None if not set
        """
        return self._data["Perform Run 7"]

    @perform_run_7.setter
    def perform_run_7(self, value=None):
        """  Corresponds to IDD Field `perform_run_7`

        Args:
            value (str): value for IDD Field `perform_run_7`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_7`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_7`'.format(value))

        self._data["Perform Run 7"] = value

    @property
    def perform_run_8(self):
        """Get perform_run_8

        Returns:
            str: the value of `perform_run_8` or None if not set
        """
        return self._data["Perform Run 8"]

    @perform_run_8.setter
    def perform_run_8(self, value=None):
        """  Corresponds to IDD Field `perform_run_8`

        Args:
            value (str): value for IDD Field `perform_run_8`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_8`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_8`'.format(value))

        self._data["Perform Run 8"] = value

    @property
    def perform_run_9(self):
        """Get perform_run_9

        Returns:
            str: the value of `perform_run_9` or None if not set
        """
        return self._data["Perform Run 9"]

    @perform_run_9.setter
    def perform_run_9(self, value=None):
        """  Corresponds to IDD Field `perform_run_9`

        Args:
            value (str): value for IDD Field `perform_run_9`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_9`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_9`'.format(value))

        self._data["Perform Run 9"] = value

    @property
    def perform_run_10(self):
        """Get perform_run_10

        Returns:
            str: the value of `perform_run_10` or None if not set
        """
        return self._data["Perform Run 10"]

    @perform_run_10.setter
    def perform_run_10(self, value=None):
        """  Corresponds to IDD Field `perform_run_10`

        Args:
            value (str): value for IDD Field `perform_run_10`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_10`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_10`'.format(value))

        self._data["Perform Run 10"] = value

    @property
    def perform_run_11(self):
        """Get perform_run_11

        Returns:
            str: the value of `perform_run_11` or None if not set
        """
        return self._data["Perform Run 11"]

    @perform_run_11.setter
    def perform_run_11(self, value=None):
        """  Corresponds to IDD Field `perform_run_11`

        Args:
            value (str): value for IDD Field `perform_run_11`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_11`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_11`'.format(value))

        self._data["Perform Run 11"] = value

    @property
    def perform_run_12(self):
        """Get perform_run_12

        Returns:
            str: the value of `perform_run_12` or None if not set
        """
        return self._data["Perform Run 12"]

    @perform_run_12.setter
    def perform_run_12(self, value=None):
        """  Corresponds to IDD Field `perform_run_12`

        Args:
            value (str): value for IDD Field `perform_run_12`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_12`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_12`'.format(value))

        self._data["Perform Run 12"] = value

    @property
    def perform_run_13(self):
        """Get perform_run_13

        Returns:
            str: the value of `perform_run_13` or None if not set
        """
        return self._data["Perform Run 13"]

    @perform_run_13.setter
    def perform_run_13(self, value=None):
        """  Corresponds to IDD Field `perform_run_13`

        Args:
            value (str): value for IDD Field `perform_run_13`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_13`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_13`'.format(value))

        self._data["Perform Run 13"] = value

    @property
    def perform_run_14(self):
        """Get perform_run_14

        Returns:
            str: the value of `perform_run_14` or None if not set
        """
        return self._data["Perform Run 14"]

    @perform_run_14.setter
    def perform_run_14(self, value=None):
        """  Corresponds to IDD Field `perform_run_14`

        Args:
            value (str): value for IDD Field `perform_run_14`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_14`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_14`'.format(value))

        self._data["Perform Run 14"] = value

    @property
    def perform_run_15(self):
        """Get perform_run_15

        Returns:
            str: the value of `perform_run_15` or None if not set
        """
        return self._data["Perform Run 15"]

    @perform_run_15.setter
    def perform_run_15(self, value=None):
        """  Corresponds to IDD Field `perform_run_15`

        Args:
            value (str): value for IDD Field `perform_run_15`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_15`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_15`'.format(value))

        self._data["Perform Run 15"] = value

    @property
    def perform_run_16(self):
        """Get perform_run_16

        Returns:
            str: the value of `perform_run_16` or None if not set
        """
        return self._data["Perform Run 16"]

    @perform_run_16.setter
    def perform_run_16(self, value=None):
        """  Corresponds to IDD Field `perform_run_16`

        Args:
            value (str): value for IDD Field `perform_run_16`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_16`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_16`'.format(value))

        self._data["Perform Run 16"] = value

    @property
    def perform_run_17(self):
        """Get perform_run_17

        Returns:
            str: the value of `perform_run_17` or None if not set
        """
        return self._data["Perform Run 17"]

    @perform_run_17.setter
    def perform_run_17(self, value=None):
        """  Corresponds to IDD Field `perform_run_17`

        Args:
            value (str): value for IDD Field `perform_run_17`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_17`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_17`'.format(value))

        self._data["Perform Run 17"] = value

    @property
    def perform_run_18(self):
        """Get perform_run_18

        Returns:
            str: the value of `perform_run_18` or None if not set
        """
        return self._data["Perform Run 18"]

    @perform_run_18.setter
    def perform_run_18(self, value=None):
        """  Corresponds to IDD Field `perform_run_18`

        Args:
            value (str): value for IDD Field `perform_run_18`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_18`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_18`'.format(value))

        self._data["Perform Run 18"] = value

    @property
    def perform_run_19(self):
        """Get perform_run_19

        Returns:
            str: the value of `perform_run_19` or None if not set
        """
        return self._data["Perform Run 19"]

    @perform_run_19.setter
    def perform_run_19(self, value=None):
        """  Corresponds to IDD Field `perform_run_19`

        Args:
            value (str): value for IDD Field `perform_run_19`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_19`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_19`'.format(value))

        self._data["Perform Run 19"] = value

    @property
    def perform_run_20(self):
        """Get perform_run_20

        Returns:
            str: the value of `perform_run_20` or None if not set
        """
        return self._data["Perform Run 20"]

    @perform_run_20.setter
    def perform_run_20(self, value=None):
        """  Corresponds to IDD Field `perform_run_20`

        Args:
            value (str): value for IDD Field `perform_run_20`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_20`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_20`'.format(value))

        self._data["Perform Run 20"] = value

    @property
    def perform_run_21(self):
        """Get perform_run_21

        Returns:
            str: the value of `perform_run_21` or None if not set
        """
        return self._data["Perform Run 21"]

    @perform_run_21.setter
    def perform_run_21(self, value=None):
        """  Corresponds to IDD Field `perform_run_21`

        Args:
            value (str): value for IDD Field `perform_run_21`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_21`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_21`'.format(value))

        self._data["Perform Run 21"] = value

    @property
    def perform_run_22(self):
        """Get perform_run_22

        Returns:
            str: the value of `perform_run_22` or None if not set
        """
        return self._data["Perform Run 22"]

    @perform_run_22.setter
    def perform_run_22(self, value=None):
        """  Corresponds to IDD Field `perform_run_22`

        Args:
            value (str): value for IDD Field `perform_run_22`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_22`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_22`'.format(value))

        self._data["Perform Run 22"] = value

    @property
    def perform_run_23(self):
        """Get perform_run_23

        Returns:
            str: the value of `perform_run_23` or None if not set
        """
        return self._data["Perform Run 23"]

    @perform_run_23.setter
    def perform_run_23(self, value=None):
        """  Corresponds to IDD Field `perform_run_23`

        Args:
            value (str): value for IDD Field `perform_run_23`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_23`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_23`'.format(value))

        self._data["Perform Run 23"] = value

    @property
    def perform_run_24(self):
        """Get perform_run_24

        Returns:
            str: the value of `perform_run_24` or None if not set
        """
        return self._data["Perform Run 24"]

    @perform_run_24.setter
    def perform_run_24(self, value=None):
        """  Corresponds to IDD Field `perform_run_24`

        Args:
            value (str): value for IDD Field `perform_run_24`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_24`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_24`'.format(value))

        self._data["Perform Run 24"] = value

    @property
    def perform_run_25(self):
        """Get perform_run_25

        Returns:
            str: the value of `perform_run_25` or None if not set
        """
        return self._data["Perform Run 25"]

    @perform_run_25.setter
    def perform_run_25(self, value=None):
        """  Corresponds to IDD Field `perform_run_25`

        Args:
            value (str): value for IDD Field `perform_run_25`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_25`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_25`'.format(value))

        self._data["Perform Run 25"] = value

    @property
    def perform_run_26(self):
        """Get perform_run_26

        Returns:
            str: the value of `perform_run_26` or None if not set
        """
        return self._data["Perform Run 26"]

    @perform_run_26.setter
    def perform_run_26(self, value=None):
        """  Corresponds to IDD Field `perform_run_26`

        Args:
            value (str): value for IDD Field `perform_run_26`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_26`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_26`'.format(value))

        self._data["Perform Run 26"] = value

    @property
    def perform_run_27(self):
        """Get perform_run_27

        Returns:
            str: the value of `perform_run_27` or None if not set
        """
        return self._data["Perform Run 27"]

    @perform_run_27.setter
    def perform_run_27(self, value=None):
        """  Corresponds to IDD Field `perform_run_27`

        Args:
            value (str): value for IDD Field `perform_run_27`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_27`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_27`'.format(value))

        self._data["Perform Run 27"] = value

    @property
    def perform_run_28(self):
        """Get perform_run_28

        Returns:
            str: the value of `perform_run_28` or None if not set
        """
        return self._data["Perform Run 28"]

    @perform_run_28.setter
    def perform_run_28(self, value=None):
        """  Corresponds to IDD Field `perform_run_28`

        Args:
            value (str): value for IDD Field `perform_run_28`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_28`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_28`'.format(value))

        self._data["Perform Run 28"] = value

    @property
    def perform_run_29(self):
        """Get perform_run_29

        Returns:
            str: the value of `perform_run_29` or None if not set
        """
        return self._data["Perform Run 29"]

    @perform_run_29.setter
    def perform_run_29(self, value=None):
        """  Corresponds to IDD Field `perform_run_29`

        Args:
            value (str): value for IDD Field `perform_run_29`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_29`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_29`'.format(value))

        self._data["Perform Run 29"] = value

    @property
    def perform_run_30(self):
        """Get perform_run_30

        Returns:
            str: the value of `perform_run_30` or None if not set
        """
        return self._data["Perform Run 30"]

    @perform_run_30.setter
    def perform_run_30(self, value=None):
        """  Corresponds to IDD Field `perform_run_30`

        Args:
            value (str): value for IDD Field `perform_run_30`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_30`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_30`'.format(value))

        self._data["Perform Run 30"] = value

    @property
    def perform_run_31(self):
        """Get perform_run_31

        Returns:
            str: the value of `perform_run_31` or None if not set
        """
        return self._data["Perform Run 31"]

    @perform_run_31.setter
    def perform_run_31(self, value=None):
        """  Corresponds to IDD Field `perform_run_31`

        Args:
            value (str): value for IDD Field `perform_run_31`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_31`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_31`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_31`'.format(value))

        self._data["Perform Run 31"] = value

    @property
    def perform_run_32(self):
        """Get perform_run_32

        Returns:
            str: the value of `perform_run_32` or None if not set
        """
        return self._data["Perform Run 32"]

    @perform_run_32.setter
    def perform_run_32(self, value=None):
        """  Corresponds to IDD Field `perform_run_32`

        Args:
            value (str): value for IDD Field `perform_run_32`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_32`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_32`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_32`'.format(value))

        self._data["Perform Run 32"] = value

    @property
    def perform_run_33(self):
        """Get perform_run_33

        Returns:
            str: the value of `perform_run_33` or None if not set
        """
        return self._data["Perform Run 33"]

    @perform_run_33.setter
    def perform_run_33(self, value=None):
        """  Corresponds to IDD Field `perform_run_33`

        Args:
            value (str): value for IDD Field `perform_run_33`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_33`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_33`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_33`'.format(value))

        self._data["Perform Run 33"] = value

    @property
    def perform_run_34(self):
        """Get perform_run_34

        Returns:
            str: the value of `perform_run_34` or None if not set
        """
        return self._data["Perform Run 34"]

    @perform_run_34.setter
    def perform_run_34(self, value=None):
        """  Corresponds to IDD Field `perform_run_34`

        Args:
            value (str): value for IDD Field `perform_run_34`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_34`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_34`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_34`'.format(value))

        self._data["Perform Run 34"] = value

    @property
    def perform_run_35(self):
        """Get perform_run_35

        Returns:
            str: the value of `perform_run_35` or None if not set
        """
        return self._data["Perform Run 35"]

    @perform_run_35.setter
    def perform_run_35(self, value=None):
        """  Corresponds to IDD Field `perform_run_35`

        Args:
            value (str): value for IDD Field `perform_run_35`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_35`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_35`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_35`'.format(value))

        self._data["Perform Run 35"] = value

    @property
    def perform_run_36(self):
        """Get perform_run_36

        Returns:
            str: the value of `perform_run_36` or None if not set
        """
        return self._data["Perform Run 36"]

    @perform_run_36.setter
    def perform_run_36(self, value=None):
        """  Corresponds to IDD Field `perform_run_36`

        Args:
            value (str): value for IDD Field `perform_run_36`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_36`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_36`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_36`'.format(value))

        self._data["Perform Run 36"] = value

    @property
    def perform_run_37(self):
        """Get perform_run_37

        Returns:
            str: the value of `perform_run_37` or None if not set
        """
        return self._data["Perform Run 37"]

    @perform_run_37.setter
    def perform_run_37(self, value=None):
        """  Corresponds to IDD Field `perform_run_37`

        Args:
            value (str): value for IDD Field `perform_run_37`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_37`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_37`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_37`'.format(value))

        self._data["Perform Run 37"] = value

    @property
    def perform_run_38(self):
        """Get perform_run_38

        Returns:
            str: the value of `perform_run_38` or None if not set
        """
        return self._data["Perform Run 38"]

    @perform_run_38.setter
    def perform_run_38(self, value=None):
        """  Corresponds to IDD Field `perform_run_38`

        Args:
            value (str): value for IDD Field `perform_run_38`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_38`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_38`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_38`'.format(value))

        self._data["Perform Run 38"] = value

    @property
    def perform_run_39(self):
        """Get perform_run_39

        Returns:
            str: the value of `perform_run_39` or None if not set
        """
        return self._data["Perform Run 39"]

    @perform_run_39.setter
    def perform_run_39(self, value=None):
        """  Corresponds to IDD Field `perform_run_39`

        Args:
            value (str): value for IDD Field `perform_run_39`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_39`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_39`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_39`'.format(value))

        self._data["Perform Run 39"] = value

    @property
    def perform_run_40(self):
        """Get perform_run_40

        Returns:
            str: the value of `perform_run_40` or None if not set
        """
        return self._data["Perform Run 40"]

    @perform_run_40.setter
    def perform_run_40(self, value=None):
        """  Corresponds to IDD Field `perform_run_40`

        Args:
            value (str): value for IDD Field `perform_run_40`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_40`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_40`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_40`'.format(value))

        self._data["Perform Run 40"] = value

    @property
    def perform_run_41(self):
        """Get perform_run_41

        Returns:
            str: the value of `perform_run_41` or None if not set
        """
        return self._data["Perform Run 41"]

    @perform_run_41.setter
    def perform_run_41(self, value=None):
        """  Corresponds to IDD Field `perform_run_41`

        Args:
            value (str): value for IDD Field `perform_run_41`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_41`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_41`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_41`'.format(value))

        self._data["Perform Run 41"] = value

    @property
    def perform_run_42(self):
        """Get perform_run_42

        Returns:
            str: the value of `perform_run_42` or None if not set
        """
        return self._data["Perform Run 42"]

    @perform_run_42.setter
    def perform_run_42(self, value=None):
        """  Corresponds to IDD Field `perform_run_42`

        Args:
            value (str): value for IDD Field `perform_run_42`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_42`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_42`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_42`'.format(value))

        self._data["Perform Run 42"] = value

    @property
    def perform_run_43(self):
        """Get perform_run_43

        Returns:
            str: the value of `perform_run_43` or None if not set
        """
        return self._data["Perform Run 43"]

    @perform_run_43.setter
    def perform_run_43(self, value=None):
        """  Corresponds to IDD Field `perform_run_43`

        Args:
            value (str): value for IDD Field `perform_run_43`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_43`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_43`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_43`'.format(value))

        self._data["Perform Run 43"] = value

    @property
    def perform_run_44(self):
        """Get perform_run_44

        Returns:
            str: the value of `perform_run_44` or None if not set
        """
        return self._data["Perform Run 44"]

    @perform_run_44.setter
    def perform_run_44(self, value=None):
        """  Corresponds to IDD Field `perform_run_44`

        Args:
            value (str): value for IDD Field `perform_run_44`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_44`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_44`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_44`'.format(value))

        self._data["Perform Run 44"] = value

    @property
    def perform_run_45(self):
        """Get perform_run_45

        Returns:
            str: the value of `perform_run_45` or None if not set
        """
        return self._data["Perform Run 45"]

    @perform_run_45.setter
    def perform_run_45(self, value=None):
        """  Corresponds to IDD Field `perform_run_45`

        Args:
            value (str): value for IDD Field `perform_run_45`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_45`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_45`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_45`'.format(value))

        self._data["Perform Run 45"] = value

    @property
    def perform_run_46(self):
        """Get perform_run_46

        Returns:
            str: the value of `perform_run_46` or None if not set
        """
        return self._data["Perform Run 46"]

    @perform_run_46.setter
    def perform_run_46(self, value=None):
        """  Corresponds to IDD Field `perform_run_46`

        Args:
            value (str): value for IDD Field `perform_run_46`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_46`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_46`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_46`'.format(value))

        self._data["Perform Run 46"] = value

    @property
    def perform_run_47(self):
        """Get perform_run_47

        Returns:
            str: the value of `perform_run_47` or None if not set
        """
        return self._data["Perform Run 47"]

    @perform_run_47.setter
    def perform_run_47(self, value=None):
        """  Corresponds to IDD Field `perform_run_47`

        Args:
            value (str): value for IDD Field `perform_run_47`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_47`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_47`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_47`'.format(value))

        self._data["Perform Run 47"] = value

    @property
    def perform_run_48(self):
        """Get perform_run_48

        Returns:
            str: the value of `perform_run_48` or None if not set
        """
        return self._data["Perform Run 48"]

    @perform_run_48.setter
    def perform_run_48(self, value=None):
        """  Corresponds to IDD Field `perform_run_48`

        Args:
            value (str): value for IDD Field `perform_run_48`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_48`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_48`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_48`'.format(value))

        self._data["Perform Run 48"] = value

    @property
    def perform_run_49(self):
        """Get perform_run_49

        Returns:
            str: the value of `perform_run_49` or None if not set
        """
        return self._data["Perform Run 49"]

    @perform_run_49.setter
    def perform_run_49(self, value=None):
        """  Corresponds to IDD Field `perform_run_49`

        Args:
            value (str): value for IDD Field `perform_run_49`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_49`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_49`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_49`'.format(value))

        self._data["Perform Run 49"] = value

    @property
    def perform_run_50(self):
        """Get perform_run_50

        Returns:
            str: the value of `perform_run_50` or None if not set
        """
        return self._data["Perform Run 50"]

    @perform_run_50.setter
    def perform_run_50(self, value=None):
        """  Corresponds to IDD Field `perform_run_50`

        Args:
            value (str): value for IDD Field `perform_run_50`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_50`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_50`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_50`'.format(value))

        self._data["Perform Run 50"] = value

    @property
    def perform_run_51(self):
        """Get perform_run_51

        Returns:
            str: the value of `perform_run_51` or None if not set
        """
        return self._data["Perform Run 51"]

    @perform_run_51.setter
    def perform_run_51(self, value=None):
        """  Corresponds to IDD Field `perform_run_51`

        Args:
            value (str): value for IDD Field `perform_run_51`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_51`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_51`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_51`'.format(value))

        self._data["Perform Run 51"] = value

    @property
    def perform_run_52(self):
        """Get perform_run_52

        Returns:
            str: the value of `perform_run_52` or None if not set
        """
        return self._data["Perform Run 52"]

    @perform_run_52.setter
    def perform_run_52(self, value=None):
        """  Corresponds to IDD Field `perform_run_52`

        Args:
            value (str): value for IDD Field `perform_run_52`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_52`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_52`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_52`'.format(value))

        self._data["Perform Run 52"] = value

    @property
    def perform_run_53(self):
        """Get perform_run_53

        Returns:
            str: the value of `perform_run_53` or None if not set
        """
        return self._data["Perform Run 53"]

    @perform_run_53.setter
    def perform_run_53(self, value=None):
        """  Corresponds to IDD Field `perform_run_53`

        Args:
            value (str): value for IDD Field `perform_run_53`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_53`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_53`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_53`'.format(value))

        self._data["Perform Run 53"] = value

    @property
    def perform_run_54(self):
        """Get perform_run_54

        Returns:
            str: the value of `perform_run_54` or None if not set
        """
        return self._data["Perform Run 54"]

    @perform_run_54.setter
    def perform_run_54(self, value=None):
        """  Corresponds to IDD Field `perform_run_54`

        Args:
            value (str): value for IDD Field `perform_run_54`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_54`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_54`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_54`'.format(value))

        self._data["Perform Run 54"] = value

    @property
    def perform_run_55(self):
        """Get perform_run_55

        Returns:
            str: the value of `perform_run_55` or None if not set
        """
        return self._data["Perform Run 55"]

    @perform_run_55.setter
    def perform_run_55(self, value=None):
        """  Corresponds to IDD Field `perform_run_55`

        Args:
            value (str): value for IDD Field `perform_run_55`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_55`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_55`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_55`'.format(value))

        self._data["Perform Run 55"] = value

    @property
    def perform_run_56(self):
        """Get perform_run_56

        Returns:
            str: the value of `perform_run_56` or None if not set
        """
        return self._data["Perform Run 56"]

    @perform_run_56.setter
    def perform_run_56(self, value=None):
        """  Corresponds to IDD Field `perform_run_56`

        Args:
            value (str): value for IDD Field `perform_run_56`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_56`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_56`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_56`'.format(value))

        self._data["Perform Run 56"] = value

    @property
    def perform_run_57(self):
        """Get perform_run_57

        Returns:
            str: the value of `perform_run_57` or None if not set
        """
        return self._data["Perform Run 57"]

    @perform_run_57.setter
    def perform_run_57(self, value=None):
        """  Corresponds to IDD Field `perform_run_57`

        Args:
            value (str): value for IDD Field `perform_run_57`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_57`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_57`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_57`'.format(value))

        self._data["Perform Run 57"] = value

    @property
    def perform_run_58(self):
        """Get perform_run_58

        Returns:
            str: the value of `perform_run_58` or None if not set
        """
        return self._data["Perform Run 58"]

    @perform_run_58.setter
    def perform_run_58(self, value=None):
        """  Corresponds to IDD Field `perform_run_58`

        Args:
            value (str): value for IDD Field `perform_run_58`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_58`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_58`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_58`'.format(value))

        self._data["Perform Run 58"] = value

    @property
    def perform_run_59(self):
        """Get perform_run_59

        Returns:
            str: the value of `perform_run_59` or None if not set
        """
        return self._data["Perform Run 59"]

    @perform_run_59.setter
    def perform_run_59(self, value=None):
        """  Corresponds to IDD Field `perform_run_59`

        Args:
            value (str): value for IDD Field `perform_run_59`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_59`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_59`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_59`'.format(value))

        self._data["Perform Run 59"] = value

    @property
    def perform_run_60(self):
        """Get perform_run_60

        Returns:
            str: the value of `perform_run_60` or None if not set
        """
        return self._data["Perform Run 60"]

    @perform_run_60.setter
    def perform_run_60(self, value=None):
        """  Corresponds to IDD Field `perform_run_60`

        Args:
            value (str): value for IDD Field `perform_run_60`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_60`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_60`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_60`'.format(value))

        self._data["Perform Run 60"] = value

    @property
    def perform_run_61(self):
        """Get perform_run_61

        Returns:
            str: the value of `perform_run_61` or None if not set
        """
        return self._data["Perform Run 61"]

    @perform_run_61.setter
    def perform_run_61(self, value=None):
        """  Corresponds to IDD Field `perform_run_61`

        Args:
            value (str): value for IDD Field `perform_run_61`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_61`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_61`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_61`'.format(value))

        self._data["Perform Run 61"] = value

    @property
    def perform_run_62(self):
        """Get perform_run_62

        Returns:
            str: the value of `perform_run_62` or None if not set
        """
        return self._data["Perform Run 62"]

    @perform_run_62.setter
    def perform_run_62(self, value=None):
        """  Corresponds to IDD Field `perform_run_62`

        Args:
            value (str): value for IDD Field `perform_run_62`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_62`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_62`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_62`'.format(value))

        self._data["Perform Run 62"] = value

    @property
    def perform_run_63(self):
        """Get perform_run_63

        Returns:
            str: the value of `perform_run_63` or None if not set
        """
        return self._data["Perform Run 63"]

    @perform_run_63.setter
    def perform_run_63(self, value=None):
        """  Corresponds to IDD Field `perform_run_63`

        Args:
            value (str): value for IDD Field `perform_run_63`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_63`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_63`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_63`'.format(value))

        self._data["Perform Run 63"] = value

    @property
    def perform_run_64(self):
        """Get perform_run_64

        Returns:
            str: the value of `perform_run_64` or None if not set
        """
        return self._data["Perform Run 64"]

    @perform_run_64.setter
    def perform_run_64(self, value=None):
        """  Corresponds to IDD Field `perform_run_64`

        Args:
            value (str): value for IDD Field `perform_run_64`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_64`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_64`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_64`'.format(value))

        self._data["Perform Run 64"] = value

    @property
    def perform_run_65(self):
        """Get perform_run_65

        Returns:
            str: the value of `perform_run_65` or None if not set
        """
        return self._data["Perform Run 65"]

    @perform_run_65.setter
    def perform_run_65(self, value=None):
        """  Corresponds to IDD Field `perform_run_65`

        Args:
            value (str): value for IDD Field `perform_run_65`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_65`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_65`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_65`'.format(value))

        self._data["Perform Run 65"] = value

    @property
    def perform_run_66(self):
        """Get perform_run_66

        Returns:
            str: the value of `perform_run_66` or None if not set
        """
        return self._data["Perform Run 66"]

    @perform_run_66.setter
    def perform_run_66(self, value=None):
        """  Corresponds to IDD Field `perform_run_66`

        Args:
            value (str): value for IDD Field `perform_run_66`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_66`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_66`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_66`'.format(value))

        self._data["Perform Run 66"] = value

    @property
    def perform_run_67(self):
        """Get perform_run_67

        Returns:
            str: the value of `perform_run_67` or None if not set
        """
        return self._data["Perform Run 67"]

    @perform_run_67.setter
    def perform_run_67(self, value=None):
        """  Corresponds to IDD Field `perform_run_67`

        Args:
            value (str): value for IDD Field `perform_run_67`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_67`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_67`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_67`'.format(value))

        self._data["Perform Run 67"] = value

    @property
    def perform_run_68(self):
        """Get perform_run_68

        Returns:
            str: the value of `perform_run_68` or None if not set
        """
        return self._data["Perform Run 68"]

    @perform_run_68.setter
    def perform_run_68(self, value=None):
        """  Corresponds to IDD Field `perform_run_68`

        Args:
            value (str): value for IDD Field `perform_run_68`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_68`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_68`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_68`'.format(value))

        self._data["Perform Run 68"] = value

    @property
    def perform_run_69(self):
        """Get perform_run_69

        Returns:
            str: the value of `perform_run_69` or None if not set
        """
        return self._data["Perform Run 69"]

    @perform_run_69.setter
    def perform_run_69(self, value=None):
        """  Corresponds to IDD Field `perform_run_69`

        Args:
            value (str): value for IDD Field `perform_run_69`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_69`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_69`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_69`'.format(value))

        self._data["Perform Run 69"] = value

    @property
    def perform_run_70(self):
        """Get perform_run_70

        Returns:
            str: the value of `perform_run_70` or None if not set
        """
        return self._data["Perform Run 70"]

    @perform_run_70.setter
    def perform_run_70(self, value=None):
        """  Corresponds to IDD Field `perform_run_70`

        Args:
            value (str): value for IDD Field `perform_run_70`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_70`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_70`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_70`'.format(value))

        self._data["Perform Run 70"] = value

    @property
    def perform_run_71(self):
        """Get perform_run_71

        Returns:
            str: the value of `perform_run_71` or None if not set
        """
        return self._data["Perform Run 71"]

    @perform_run_71.setter
    def perform_run_71(self, value=None):
        """  Corresponds to IDD Field `perform_run_71`

        Args:
            value (str): value for IDD Field `perform_run_71`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_71`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_71`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_71`'.format(value))

        self._data["Perform Run 71"] = value

    @property
    def perform_run_72(self):
        """Get perform_run_72

        Returns:
            str: the value of `perform_run_72` or None if not set
        """
        return self._data["Perform Run 72"]

    @perform_run_72.setter
    def perform_run_72(self, value=None):
        """  Corresponds to IDD Field `perform_run_72`

        Args:
            value (str): value for IDD Field `perform_run_72`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_72`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_72`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_72`'.format(value))

        self._data["Perform Run 72"] = value

    @property
    def perform_run_73(self):
        """Get perform_run_73

        Returns:
            str: the value of `perform_run_73` or None if not set
        """
        return self._data["Perform Run 73"]

    @perform_run_73.setter
    def perform_run_73(self, value=None):
        """  Corresponds to IDD Field `perform_run_73`

        Args:
            value (str): value for IDD Field `perform_run_73`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_73`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_73`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_73`'.format(value))

        self._data["Perform Run 73"] = value

    @property
    def perform_run_74(self):
        """Get perform_run_74

        Returns:
            str: the value of `perform_run_74` or None if not set
        """
        return self._data["Perform Run 74"]

    @perform_run_74.setter
    def perform_run_74(self, value=None):
        """  Corresponds to IDD Field `perform_run_74`

        Args:
            value (str): value for IDD Field `perform_run_74`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_74`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_74`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_74`'.format(value))

        self._data["Perform Run 74"] = value

    @property
    def perform_run_75(self):
        """Get perform_run_75

        Returns:
            str: the value of `perform_run_75` or None if not set
        """
        return self._data["Perform Run 75"]

    @perform_run_75.setter
    def perform_run_75(self, value=None):
        """  Corresponds to IDD Field `perform_run_75`

        Args:
            value (str): value for IDD Field `perform_run_75`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_75`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_75`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_75`'.format(value))

        self._data["Perform Run 75"] = value

    @property
    def perform_run_76(self):
        """Get perform_run_76

        Returns:
            str: the value of `perform_run_76` or None if not set
        """
        return self._data["Perform Run 76"]

    @perform_run_76.setter
    def perform_run_76(self, value=None):
        """  Corresponds to IDD Field `perform_run_76`

        Args:
            value (str): value for IDD Field `perform_run_76`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_76`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_76`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_76`'.format(value))

        self._data["Perform Run 76"] = value

    @property
    def perform_run_77(self):
        """Get perform_run_77

        Returns:
            str: the value of `perform_run_77` or None if not set
        """
        return self._data["Perform Run 77"]

    @perform_run_77.setter
    def perform_run_77(self, value=None):
        """  Corresponds to IDD Field `perform_run_77`

        Args:
            value (str): value for IDD Field `perform_run_77`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_77`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_77`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_77`'.format(value))

        self._data["Perform Run 77"] = value

    @property
    def perform_run_78(self):
        """Get perform_run_78

        Returns:
            str: the value of `perform_run_78` or None if not set
        """
        return self._data["Perform Run 78"]

    @perform_run_78.setter
    def perform_run_78(self, value=None):
        """  Corresponds to IDD Field `perform_run_78`

        Args:
            value (str): value for IDD Field `perform_run_78`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_78`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_78`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_78`'.format(value))

        self._data["Perform Run 78"] = value

    @property
    def perform_run_79(self):
        """Get perform_run_79

        Returns:
            str: the value of `perform_run_79` or None if not set
        """
        return self._data["Perform Run 79"]

    @perform_run_79.setter
    def perform_run_79(self, value=None):
        """  Corresponds to IDD Field `perform_run_79`

        Args:
            value (str): value for IDD Field `perform_run_79`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_79`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_79`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_79`'.format(value))

        self._data["Perform Run 79"] = value

    @property
    def perform_run_80(self):
        """Get perform_run_80

        Returns:
            str: the value of `perform_run_80` or None if not set
        """
        return self._data["Perform Run 80"]

    @perform_run_80.setter
    def perform_run_80(self, value=None):
        """  Corresponds to IDD Field `perform_run_80`

        Args:
            value (str): value for IDD Field `perform_run_80`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_80`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_80`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_80`'.format(value))

        self._data["Perform Run 80"] = value

    @property
    def perform_run_81(self):
        """Get perform_run_81

        Returns:
            str: the value of `perform_run_81` or None if not set
        """
        return self._data["Perform Run 81"]

    @perform_run_81.setter
    def perform_run_81(self, value=None):
        """  Corresponds to IDD Field `perform_run_81`

        Args:
            value (str): value for IDD Field `perform_run_81`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_81`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_81`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_81`'.format(value))

        self._data["Perform Run 81"] = value

    @property
    def perform_run_82(self):
        """Get perform_run_82

        Returns:
            str: the value of `perform_run_82` or None if not set
        """
        return self._data["Perform Run 82"]

    @perform_run_82.setter
    def perform_run_82(self, value=None):
        """  Corresponds to IDD Field `perform_run_82`

        Args:
            value (str): value for IDD Field `perform_run_82`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_82`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_82`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_82`'.format(value))

        self._data["Perform Run 82"] = value

    @property
    def perform_run_83(self):
        """Get perform_run_83

        Returns:
            str: the value of `perform_run_83` or None if not set
        """
        return self._data["Perform Run 83"]

    @perform_run_83.setter
    def perform_run_83(self, value=None):
        """  Corresponds to IDD Field `perform_run_83`

        Args:
            value (str): value for IDD Field `perform_run_83`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_83`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_83`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_83`'.format(value))

        self._data["Perform Run 83"] = value

    @property
    def perform_run_84(self):
        """Get perform_run_84

        Returns:
            str: the value of `perform_run_84` or None if not set
        """
        return self._data["Perform Run 84"]

    @perform_run_84.setter
    def perform_run_84(self, value=None):
        """  Corresponds to IDD Field `perform_run_84`

        Args:
            value (str): value for IDD Field `perform_run_84`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_84`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_84`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_84`'.format(value))

        self._data["Perform Run 84"] = value

    @property
    def perform_run_85(self):
        """Get perform_run_85

        Returns:
            str: the value of `perform_run_85` or None if not set
        """
        return self._data["Perform Run 85"]

    @perform_run_85.setter
    def perform_run_85(self, value=None):
        """  Corresponds to IDD Field `perform_run_85`

        Args:
            value (str): value for IDD Field `perform_run_85`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_85`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_85`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_85`'.format(value))

        self._data["Perform Run 85"] = value

    @property
    def perform_run_86(self):
        """Get perform_run_86

        Returns:
            str: the value of `perform_run_86` or None if not set
        """
        return self._data["Perform Run 86"]

    @perform_run_86.setter
    def perform_run_86(self, value=None):
        """  Corresponds to IDD Field `perform_run_86`

        Args:
            value (str): value for IDD Field `perform_run_86`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_86`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_86`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_86`'.format(value))

        self._data["Perform Run 86"] = value

    @property
    def perform_run_87(self):
        """Get perform_run_87

        Returns:
            str: the value of `perform_run_87` or None if not set
        """
        return self._data["Perform Run 87"]

    @perform_run_87.setter
    def perform_run_87(self, value=None):
        """  Corresponds to IDD Field `perform_run_87`

        Args:
            value (str): value for IDD Field `perform_run_87`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_87`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_87`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_87`'.format(value))

        self._data["Perform Run 87"] = value

    @property
    def perform_run_88(self):
        """Get perform_run_88

        Returns:
            str: the value of `perform_run_88` or None if not set
        """
        return self._data["Perform Run 88"]

    @perform_run_88.setter
    def perform_run_88(self, value=None):
        """  Corresponds to IDD Field `perform_run_88`

        Args:
            value (str): value for IDD Field `perform_run_88`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_88`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_88`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_88`'.format(value))

        self._data["Perform Run 88"] = value

    @property
    def perform_run_89(self):
        """Get perform_run_89

        Returns:
            str: the value of `perform_run_89` or None if not set
        """
        return self._data["Perform Run 89"]

    @perform_run_89.setter
    def perform_run_89(self, value=None):
        """  Corresponds to IDD Field `perform_run_89`

        Args:
            value (str): value for IDD Field `perform_run_89`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_89`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_89`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_89`'.format(value))

        self._data["Perform Run 89"] = value

    @property
    def perform_run_90(self):
        """Get perform_run_90

        Returns:
            str: the value of `perform_run_90` or None if not set
        """
        return self._data["Perform Run 90"]

    @perform_run_90.setter
    def perform_run_90(self, value=None):
        """  Corresponds to IDD Field `perform_run_90`

        Args:
            value (str): value for IDD Field `perform_run_90`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_90`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_90`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_90`'.format(value))

        self._data["Perform Run 90"] = value

    @property
    def perform_run_91(self):
        """Get perform_run_91

        Returns:
            str: the value of `perform_run_91` or None if not set
        """
        return self._data["Perform Run 91"]

    @perform_run_91.setter
    def perform_run_91(self, value=None):
        """  Corresponds to IDD Field `perform_run_91`

        Args:
            value (str): value for IDD Field `perform_run_91`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_91`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_91`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_91`'.format(value))

        self._data["Perform Run 91"] = value

    @property
    def perform_run_92(self):
        """Get perform_run_92

        Returns:
            str: the value of `perform_run_92` or None if not set
        """
        return self._data["Perform Run 92"]

    @perform_run_92.setter
    def perform_run_92(self, value=None):
        """  Corresponds to IDD Field `perform_run_92`

        Args:
            value (str): value for IDD Field `perform_run_92`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_92`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_92`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_92`'.format(value))

        self._data["Perform Run 92"] = value

    @property
    def perform_run_93(self):
        """Get perform_run_93

        Returns:
            str: the value of `perform_run_93` or None if not set
        """
        return self._data["Perform Run 93"]

    @perform_run_93.setter
    def perform_run_93(self, value=None):
        """  Corresponds to IDD Field `perform_run_93`

        Args:
            value (str): value for IDD Field `perform_run_93`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_93`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_93`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_93`'.format(value))

        self._data["Perform Run 93"] = value

    @property
    def perform_run_94(self):
        """Get perform_run_94

        Returns:
            str: the value of `perform_run_94` or None if not set
        """
        return self._data["Perform Run 94"]

    @perform_run_94.setter
    def perform_run_94(self, value=None):
        """  Corresponds to IDD Field `perform_run_94`

        Args:
            value (str): value for IDD Field `perform_run_94`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_94`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_94`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_94`'.format(value))

        self._data["Perform Run 94"] = value

    @property
    def perform_run_95(self):
        """Get perform_run_95

        Returns:
            str: the value of `perform_run_95` or None if not set
        """
        return self._data["Perform Run 95"]

    @perform_run_95.setter
    def perform_run_95(self, value=None):
        """  Corresponds to IDD Field `perform_run_95`

        Args:
            value (str): value for IDD Field `perform_run_95`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_95`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_95`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_95`'.format(value))

        self._data["Perform Run 95"] = value

    @property
    def perform_run_96(self):
        """Get perform_run_96

        Returns:
            str: the value of `perform_run_96` or None if not set
        """
        return self._data["Perform Run 96"]

    @perform_run_96.setter
    def perform_run_96(self, value=None):
        """  Corresponds to IDD Field `perform_run_96`

        Args:
            value (str): value for IDD Field `perform_run_96`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_96`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_96`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_96`'.format(value))

        self._data["Perform Run 96"] = value

    @property
    def perform_run_97(self):
        """Get perform_run_97

        Returns:
            str: the value of `perform_run_97` or None if not set
        """
        return self._data["Perform Run 97"]

    @perform_run_97.setter
    def perform_run_97(self, value=None):
        """  Corresponds to IDD Field `perform_run_97`

        Args:
            value (str): value for IDD Field `perform_run_97`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_97`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_97`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_97`'.format(value))

        self._data["Perform Run 97"] = value

    @property
    def perform_run_98(self):
        """Get perform_run_98

        Returns:
            str: the value of `perform_run_98` or None if not set
        """
        return self._data["Perform Run 98"]

    @perform_run_98.setter
    def perform_run_98(self, value=None):
        """  Corresponds to IDD Field `perform_run_98`

        Args:
            value (str): value for IDD Field `perform_run_98`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_98`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_98`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_98`'.format(value))

        self._data["Perform Run 98"] = value

    @property
    def perform_run_99(self):
        """Get perform_run_99

        Returns:
            str: the value of `perform_run_99` or None if not set
        """
        return self._data["Perform Run 99"]

    @perform_run_99.setter
    def perform_run_99(self, value=None):
        """  Corresponds to IDD Field `perform_run_99`

        Args:
            value (str): value for IDD Field `perform_run_99`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_99`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_99`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_99`'.format(value))

        self._data["Perform Run 99"] = value

    @property
    def perform_run_100(self):
        """Get perform_run_100

        Returns:
            str: the value of `perform_run_100` or None if not set
        """
        return self._data["Perform Run 100"]

    @perform_run_100.setter
    def perform_run_100(self, value=None):
        """  Corresponds to IDD Field `perform_run_100`

        Args:
            value (str): value for IDD Field `perform_run_100`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `perform_run_100`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `perform_run_100`')
            vals = set()
            vals.add("Yes")
            vals.add("No")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `perform_run_100`'.format(value))

        self._data["Perform Run 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.perform_run_1))
        out.append(self._to_str(self.perform_run_2))
        out.append(self._to_str(self.perform_run_3))
        out.append(self._to_str(self.perform_run_4))
        out.append(self._to_str(self.perform_run_5))
        out.append(self._to_str(self.perform_run_6))
        out.append(self._to_str(self.perform_run_7))
        out.append(self._to_str(self.perform_run_8))
        out.append(self._to_str(self.perform_run_9))
        out.append(self._to_str(self.perform_run_10))
        out.append(self._to_str(self.perform_run_11))
        out.append(self._to_str(self.perform_run_12))
        out.append(self._to_str(self.perform_run_13))
        out.append(self._to_str(self.perform_run_14))
        out.append(self._to_str(self.perform_run_15))
        out.append(self._to_str(self.perform_run_16))
        out.append(self._to_str(self.perform_run_17))
        out.append(self._to_str(self.perform_run_18))
        out.append(self._to_str(self.perform_run_19))
        out.append(self._to_str(self.perform_run_20))
        out.append(self._to_str(self.perform_run_21))
        out.append(self._to_str(self.perform_run_22))
        out.append(self._to_str(self.perform_run_23))
        out.append(self._to_str(self.perform_run_24))
        out.append(self._to_str(self.perform_run_25))
        out.append(self._to_str(self.perform_run_26))
        out.append(self._to_str(self.perform_run_27))
        out.append(self._to_str(self.perform_run_28))
        out.append(self._to_str(self.perform_run_29))
        out.append(self._to_str(self.perform_run_30))
        out.append(self._to_str(self.perform_run_31))
        out.append(self._to_str(self.perform_run_32))
        out.append(self._to_str(self.perform_run_33))
        out.append(self._to_str(self.perform_run_34))
        out.append(self._to_str(self.perform_run_35))
        out.append(self._to_str(self.perform_run_36))
        out.append(self._to_str(self.perform_run_37))
        out.append(self._to_str(self.perform_run_38))
        out.append(self._to_str(self.perform_run_39))
        out.append(self._to_str(self.perform_run_40))
        out.append(self._to_str(self.perform_run_41))
        out.append(self._to_str(self.perform_run_42))
        out.append(self._to_str(self.perform_run_43))
        out.append(self._to_str(self.perform_run_44))
        out.append(self._to_str(self.perform_run_45))
        out.append(self._to_str(self.perform_run_46))
        out.append(self._to_str(self.perform_run_47))
        out.append(self._to_str(self.perform_run_48))
        out.append(self._to_str(self.perform_run_49))
        out.append(self._to_str(self.perform_run_50))
        out.append(self._to_str(self.perform_run_51))
        out.append(self._to_str(self.perform_run_52))
        out.append(self._to_str(self.perform_run_53))
        out.append(self._to_str(self.perform_run_54))
        out.append(self._to_str(self.perform_run_55))
        out.append(self._to_str(self.perform_run_56))
        out.append(self._to_str(self.perform_run_57))
        out.append(self._to_str(self.perform_run_58))
        out.append(self._to_str(self.perform_run_59))
        out.append(self._to_str(self.perform_run_60))
        out.append(self._to_str(self.perform_run_61))
        out.append(self._to_str(self.perform_run_62))
        out.append(self._to_str(self.perform_run_63))
        out.append(self._to_str(self.perform_run_64))
        out.append(self._to_str(self.perform_run_65))
        out.append(self._to_str(self.perform_run_66))
        out.append(self._to_str(self.perform_run_67))
        out.append(self._to_str(self.perform_run_68))
        out.append(self._to_str(self.perform_run_69))
        out.append(self._to_str(self.perform_run_70))
        out.append(self._to_str(self.perform_run_71))
        out.append(self._to_str(self.perform_run_72))
        out.append(self._to_str(self.perform_run_73))
        out.append(self._to_str(self.perform_run_74))
        out.append(self._to_str(self.perform_run_75))
        out.append(self._to_str(self.perform_run_76))
        out.append(self._to_str(self.perform_run_77))
        out.append(self._to_str(self.perform_run_78))
        out.append(self._to_str(self.perform_run_79))
        out.append(self._to_str(self.perform_run_80))
        out.append(self._to_str(self.perform_run_81))
        out.append(self._to_str(self.perform_run_82))
        out.append(self._to_str(self.perform_run_83))
        out.append(self._to_str(self.perform_run_84))
        out.append(self._to_str(self.perform_run_85))
        out.append(self._to_str(self.perform_run_86))
        out.append(self._to_str(self.perform_run_87))
        out.append(self._to_str(self.perform_run_88))
        out.append(self._to_str(self.perform_run_89))
        out.append(self._to_str(self.perform_run_90))
        out.append(self._to_str(self.perform_run_91))
        out.append(self._to_str(self.perform_run_92))
        out.append(self._to_str(self.perform_run_93))
        out.append(self._to_str(self.perform_run_94))
        out.append(self._to_str(self.perform_run_95))
        out.append(self._to_str(self.perform_run_96))
        out.append(self._to_str(self.perform_run_97))
        out.append(self._to_str(self.perform_run_98))
        out.append(self._to_str(self.perform_run_99))
        out.append(self._to_str(self.perform_run_100))
        return ",".join(out)

class ParametricFileNameSuffix(object):
    """ Corresponds to IDD object `Parametric:FileNameSuffix`
        Defines the suffixes to be appended to the idf and output file names for each
        parametric run. If this object is omitted, the suffix will default to the run number.
    
    """
    internal_name = "Parametric:FileNameSuffix"
    field_count = 101
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Parametric:FileNameSuffix`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Suffix for File Name in Run 1"] = None
        self._data["Suffix for File Name in Run 2"] = None
        self._data["Suffix for File Name in Run 3"] = None
        self._data["Suffix for File Name in Run 4"] = None
        self._data["Suffix for File Name in Run 5"] = None
        self._data["Suffix for File Name in Run 6"] = None
        self._data["Suffix for File Name in Run 7"] = None
        self._data["Suffix for File Name in Run 8"] = None
        self._data["Suffix for File Name in Run 9"] = None
        self._data["Suffix for File Name in Run 10"] = None
        self._data["Suffix for File Name in Run 11"] = None
        self._data["Suffix for File Name in Run 12"] = None
        self._data["Suffix for File Name in Run 13"] = None
        self._data["Suffix for File Name in Run 14"] = None
        self._data["Suffix for File Name in Run 15"] = None
        self._data["Suffix for File Name in Run 16"] = None
        self._data["Suffix for File Name in Run 17"] = None
        self._data["Suffix for File Name in Run 18"] = None
        self._data["Suffix for File Name in Run 19"] = None
        self._data["Suffix for File Name in Run 20"] = None
        self._data["Suffix for File Name in Run 21"] = None
        self._data["Suffix for File Name in Run 22"] = None
        self._data["Suffix for File Name in Run 23"] = None
        self._data["Suffix for File Name in Run 24"] = None
        self._data["Suffix for File Name in Run 25"] = None
        self._data["Suffix for File Name in Run 26"] = None
        self._data["Suffix for File Name in Run 27"] = None
        self._data["Suffix for File Name in Run 28"] = None
        self._data["Suffix for File Name in Run 29"] = None
        self._data["Suffix for File Name in Run 30"] = None
        self._data["Suffix for File Name in Run 31"] = None
        self._data["Suffix for File Name in Run 32"] = None
        self._data["Suffix for File Name in Run 33"] = None
        self._data["Suffix for File Name in Run 34"] = None
        self._data["Suffix for File Name in Run 35"] = None
        self._data["Suffix for File Name in Run 36"] = None
        self._data["Suffix for File Name in Run 37"] = None
        self._data["Suffix for File Name in Run 38"] = None
        self._data["Suffix for File Name in Run 39"] = None
        self._data["Suffix for File Name in Run 40"] = None
        self._data["Suffix for File Name in Run 41"] = None
        self._data["Suffix for File Name in Run 42"] = None
        self._data["Suffix for File Name in Run 43"] = None
        self._data["Suffix for File Name in Run 44"] = None
        self._data["Suffix for File Name in Run 45"] = None
        self._data["Suffix for File Name in Run 46"] = None
        self._data["Suffix for File Name in Run 47"] = None
        self._data["Suffix for File Name in Run 48"] = None
        self._data["Suffix for File Name in Run 49"] = None
        self._data["Suffix for File Name in Run 50"] = None
        self._data["Suffix for File Name in Run 51"] = None
        self._data["Suffix for File Name in Run 52"] = None
        self._data["Suffix for File Name in Run 53"] = None
        self._data["Suffix for File Name in Run 54"] = None
        self._data["Suffix for File Name in Run 55"] = None
        self._data["Suffix for File Name in Run 56"] = None
        self._data["Suffix for File Name in Run 57"] = None
        self._data["Suffix for File Name in Run 58"] = None
        self._data["Suffix for File Name in Run 59"] = None
        self._data["Suffix for File Name in Run 60"] = None
        self._data["Suffix for File Name in Run 61"] = None
        self._data["Suffix for File Name in Run 62"] = None
        self._data["Suffix for File Name in Run 63"] = None
        self._data["Suffix for File Name in Run 64"] = None
        self._data["Suffix for File Name in Run 65"] = None
        self._data["Suffix for File Name in Run 66"] = None
        self._data["Suffix for File Name in Run 67"] = None
        self._data["Suffix for File Name in Run 68"] = None
        self._data["Suffix for File Name in Run 69"] = None
        self._data["Suffix for File Name in Run 70"] = None
        self._data["Suffix for File Name in Run 71"] = None
        self._data["Suffix for File Name in Run 72"] = None
        self._data["Suffix for File Name in Run 73"] = None
        self._data["Suffix for File Name in Run 74"] = None
        self._data["Suffix for File Name in Run 75"] = None
        self._data["Suffix for File Name in Run 76"] = None
        self._data["Suffix for File Name in Run 77"] = None
        self._data["Suffix for File Name in Run 78"] = None
        self._data["Suffix for File Name in Run 79"] = None
        self._data["Suffix for File Name in Run 80"] = None
        self._data["Suffix for File Name in Run 81"] = None
        self._data["Suffix for File Name in Run 82"] = None
        self._data["Suffix for File Name in Run 83"] = None
        self._data["Suffix for File Name in Run 84"] = None
        self._data["Suffix for File Name in Run 85"] = None
        self._data["Suffix for File Name in Run 86"] = None
        self._data["Suffix for File Name in Run 87"] = None
        self._data["Suffix for File Name in Run 88"] = None
        self._data["Suffix for File Name in Run 89"] = None
        self._data["Suffix for File Name in Run 90"] = None
        self._data["Suffix for File Name in Run 91"] = None
        self._data["Suffix for File Name in Run 92"] = None
        self._data["Suffix for File Name in Run 93"] = None
        self._data["Suffix for File Name in Run 94"] = None
        self._data["Suffix for File Name in Run 95"] = None
        self._data["Suffix for File Name in Run 96"] = None
        self._data["Suffix for File Name in Run 97"] = None
        self._data["Suffix for File Name in Run 98"] = None
        self._data["Suffix for File Name in Run 99"] = None
        self._data["Suffix for File Name in Run 100"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_1 = None
        else:
            self.suffix_for_file_name_in_run_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_2 = None
        else:
            self.suffix_for_file_name_in_run_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_3 = None
        else:
            self.suffix_for_file_name_in_run_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_4 = None
        else:
            self.suffix_for_file_name_in_run_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_5 = None
        else:
            self.suffix_for_file_name_in_run_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_6 = None
        else:
            self.suffix_for_file_name_in_run_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_7 = None
        else:
            self.suffix_for_file_name_in_run_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_8 = None
        else:
            self.suffix_for_file_name_in_run_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_9 = None
        else:
            self.suffix_for_file_name_in_run_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_10 = None
        else:
            self.suffix_for_file_name_in_run_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_11 = None
        else:
            self.suffix_for_file_name_in_run_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_12 = None
        else:
            self.suffix_for_file_name_in_run_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_13 = None
        else:
            self.suffix_for_file_name_in_run_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_14 = None
        else:
            self.suffix_for_file_name_in_run_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_15 = None
        else:
            self.suffix_for_file_name_in_run_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_16 = None
        else:
            self.suffix_for_file_name_in_run_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_17 = None
        else:
            self.suffix_for_file_name_in_run_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_18 = None
        else:
            self.suffix_for_file_name_in_run_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_19 = None
        else:
            self.suffix_for_file_name_in_run_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_20 = None
        else:
            self.suffix_for_file_name_in_run_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_21 = None
        else:
            self.suffix_for_file_name_in_run_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_22 = None
        else:
            self.suffix_for_file_name_in_run_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_23 = None
        else:
            self.suffix_for_file_name_in_run_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_24 = None
        else:
            self.suffix_for_file_name_in_run_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_25 = None
        else:
            self.suffix_for_file_name_in_run_25 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_26 = None
        else:
            self.suffix_for_file_name_in_run_26 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_27 = None
        else:
            self.suffix_for_file_name_in_run_27 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_28 = None
        else:
            self.suffix_for_file_name_in_run_28 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_29 = None
        else:
            self.suffix_for_file_name_in_run_29 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_30 = None
        else:
            self.suffix_for_file_name_in_run_30 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_31 = None
        else:
            self.suffix_for_file_name_in_run_31 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_32 = None
        else:
            self.suffix_for_file_name_in_run_32 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_33 = None
        else:
            self.suffix_for_file_name_in_run_33 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_34 = None
        else:
            self.suffix_for_file_name_in_run_34 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_35 = None
        else:
            self.suffix_for_file_name_in_run_35 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_36 = None
        else:
            self.suffix_for_file_name_in_run_36 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_37 = None
        else:
            self.suffix_for_file_name_in_run_37 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_38 = None
        else:
            self.suffix_for_file_name_in_run_38 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_39 = None
        else:
            self.suffix_for_file_name_in_run_39 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_40 = None
        else:
            self.suffix_for_file_name_in_run_40 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_41 = None
        else:
            self.suffix_for_file_name_in_run_41 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_42 = None
        else:
            self.suffix_for_file_name_in_run_42 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_43 = None
        else:
            self.suffix_for_file_name_in_run_43 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_44 = None
        else:
            self.suffix_for_file_name_in_run_44 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_45 = None
        else:
            self.suffix_for_file_name_in_run_45 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_46 = None
        else:
            self.suffix_for_file_name_in_run_46 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_47 = None
        else:
            self.suffix_for_file_name_in_run_47 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_48 = None
        else:
            self.suffix_for_file_name_in_run_48 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_49 = None
        else:
            self.suffix_for_file_name_in_run_49 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_50 = None
        else:
            self.suffix_for_file_name_in_run_50 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_51 = None
        else:
            self.suffix_for_file_name_in_run_51 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_52 = None
        else:
            self.suffix_for_file_name_in_run_52 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_53 = None
        else:
            self.suffix_for_file_name_in_run_53 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_54 = None
        else:
            self.suffix_for_file_name_in_run_54 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_55 = None
        else:
            self.suffix_for_file_name_in_run_55 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_56 = None
        else:
            self.suffix_for_file_name_in_run_56 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_57 = None
        else:
            self.suffix_for_file_name_in_run_57 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_58 = None
        else:
            self.suffix_for_file_name_in_run_58 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_59 = None
        else:
            self.suffix_for_file_name_in_run_59 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_60 = None
        else:
            self.suffix_for_file_name_in_run_60 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_61 = None
        else:
            self.suffix_for_file_name_in_run_61 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_62 = None
        else:
            self.suffix_for_file_name_in_run_62 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_63 = None
        else:
            self.suffix_for_file_name_in_run_63 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_64 = None
        else:
            self.suffix_for_file_name_in_run_64 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_65 = None
        else:
            self.suffix_for_file_name_in_run_65 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_66 = None
        else:
            self.suffix_for_file_name_in_run_66 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_67 = None
        else:
            self.suffix_for_file_name_in_run_67 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_68 = None
        else:
            self.suffix_for_file_name_in_run_68 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_69 = None
        else:
            self.suffix_for_file_name_in_run_69 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_70 = None
        else:
            self.suffix_for_file_name_in_run_70 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_71 = None
        else:
            self.suffix_for_file_name_in_run_71 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_72 = None
        else:
            self.suffix_for_file_name_in_run_72 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_73 = None
        else:
            self.suffix_for_file_name_in_run_73 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_74 = None
        else:
            self.suffix_for_file_name_in_run_74 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_75 = None
        else:
            self.suffix_for_file_name_in_run_75 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_76 = None
        else:
            self.suffix_for_file_name_in_run_76 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_77 = None
        else:
            self.suffix_for_file_name_in_run_77 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_78 = None
        else:
            self.suffix_for_file_name_in_run_78 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_79 = None
        else:
            self.suffix_for_file_name_in_run_79 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_80 = None
        else:
            self.suffix_for_file_name_in_run_80 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_81 = None
        else:
            self.suffix_for_file_name_in_run_81 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_82 = None
        else:
            self.suffix_for_file_name_in_run_82 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_83 = None
        else:
            self.suffix_for_file_name_in_run_83 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_84 = None
        else:
            self.suffix_for_file_name_in_run_84 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_85 = None
        else:
            self.suffix_for_file_name_in_run_85 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_86 = None
        else:
            self.suffix_for_file_name_in_run_86 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_87 = None
        else:
            self.suffix_for_file_name_in_run_87 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_88 = None
        else:
            self.suffix_for_file_name_in_run_88 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_89 = None
        else:
            self.suffix_for_file_name_in_run_89 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_90 = None
        else:
            self.suffix_for_file_name_in_run_90 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_91 = None
        else:
            self.suffix_for_file_name_in_run_91 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_92 = None
        else:
            self.suffix_for_file_name_in_run_92 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_93 = None
        else:
            self.suffix_for_file_name_in_run_93 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_94 = None
        else:
            self.suffix_for_file_name_in_run_94 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_95 = None
        else:
            self.suffix_for_file_name_in_run_95 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_96 = None
        else:
            self.suffix_for_file_name_in_run_96 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_97 = None
        else:
            self.suffix_for_file_name_in_run_97 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_98 = None
        else:
            self.suffix_for_file_name_in_run_98 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_99 = None
        else:
            self.suffix_for_file_name_in_run_99 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.suffix_for_file_name_in_run_100 = None
        else:
            self.suffix_for_file_name_in_run_100 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def suffix_for_file_name_in_run_1(self):
        """Get suffix_for_file_name_in_run_1

        Returns:
            str: the value of `suffix_for_file_name_in_run_1` or None if not set
        """
        return self._data["Suffix for File Name in Run 1"]

    @suffix_for_file_name_in_run_1.setter
    def suffix_for_file_name_in_run_1(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_1`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_1`')

        self._data["Suffix for File Name in Run 1"] = value

    @property
    def suffix_for_file_name_in_run_2(self):
        """Get suffix_for_file_name_in_run_2

        Returns:
            str: the value of `suffix_for_file_name_in_run_2` or None if not set
        """
        return self._data["Suffix for File Name in Run 2"]

    @suffix_for_file_name_in_run_2.setter
    def suffix_for_file_name_in_run_2(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_2`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_2`')

        self._data["Suffix for File Name in Run 2"] = value

    @property
    def suffix_for_file_name_in_run_3(self):
        """Get suffix_for_file_name_in_run_3

        Returns:
            str: the value of `suffix_for_file_name_in_run_3` or None if not set
        """
        return self._data["Suffix for File Name in Run 3"]

    @suffix_for_file_name_in_run_3.setter
    def suffix_for_file_name_in_run_3(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_3`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_3`')

        self._data["Suffix for File Name in Run 3"] = value

    @property
    def suffix_for_file_name_in_run_4(self):
        """Get suffix_for_file_name_in_run_4

        Returns:
            str: the value of `suffix_for_file_name_in_run_4` or None if not set
        """
        return self._data["Suffix for File Name in Run 4"]

    @suffix_for_file_name_in_run_4.setter
    def suffix_for_file_name_in_run_4(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_4`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_4`')

        self._data["Suffix for File Name in Run 4"] = value

    @property
    def suffix_for_file_name_in_run_5(self):
        """Get suffix_for_file_name_in_run_5

        Returns:
            str: the value of `suffix_for_file_name_in_run_5` or None if not set
        """
        return self._data["Suffix for File Name in Run 5"]

    @suffix_for_file_name_in_run_5.setter
    def suffix_for_file_name_in_run_5(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_5`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_5`')

        self._data["Suffix for File Name in Run 5"] = value

    @property
    def suffix_for_file_name_in_run_6(self):
        """Get suffix_for_file_name_in_run_6

        Returns:
            str: the value of `suffix_for_file_name_in_run_6` or None if not set
        """
        return self._data["Suffix for File Name in Run 6"]

    @suffix_for_file_name_in_run_6.setter
    def suffix_for_file_name_in_run_6(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_6`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_6`')

        self._data["Suffix for File Name in Run 6"] = value

    @property
    def suffix_for_file_name_in_run_7(self):
        """Get suffix_for_file_name_in_run_7

        Returns:
            str: the value of `suffix_for_file_name_in_run_7` or None if not set
        """
        return self._data["Suffix for File Name in Run 7"]

    @suffix_for_file_name_in_run_7.setter
    def suffix_for_file_name_in_run_7(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_7`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_7`')

        self._data["Suffix for File Name in Run 7"] = value

    @property
    def suffix_for_file_name_in_run_8(self):
        """Get suffix_for_file_name_in_run_8

        Returns:
            str: the value of `suffix_for_file_name_in_run_8` or None if not set
        """
        return self._data["Suffix for File Name in Run 8"]

    @suffix_for_file_name_in_run_8.setter
    def suffix_for_file_name_in_run_8(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_8`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_8`')

        self._data["Suffix for File Name in Run 8"] = value

    @property
    def suffix_for_file_name_in_run_9(self):
        """Get suffix_for_file_name_in_run_9

        Returns:
            str: the value of `suffix_for_file_name_in_run_9` or None if not set
        """
        return self._data["Suffix for File Name in Run 9"]

    @suffix_for_file_name_in_run_9.setter
    def suffix_for_file_name_in_run_9(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_9`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_9`')

        self._data["Suffix for File Name in Run 9"] = value

    @property
    def suffix_for_file_name_in_run_10(self):
        """Get suffix_for_file_name_in_run_10

        Returns:
            str: the value of `suffix_for_file_name_in_run_10` or None if not set
        """
        return self._data["Suffix for File Name in Run 10"]

    @suffix_for_file_name_in_run_10.setter
    def suffix_for_file_name_in_run_10(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_10`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_10`')

        self._data["Suffix for File Name in Run 10"] = value

    @property
    def suffix_for_file_name_in_run_11(self):
        """Get suffix_for_file_name_in_run_11

        Returns:
            str: the value of `suffix_for_file_name_in_run_11` or None if not set
        """
        return self._data["Suffix for File Name in Run 11"]

    @suffix_for_file_name_in_run_11.setter
    def suffix_for_file_name_in_run_11(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_11`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_11`')

        self._data["Suffix for File Name in Run 11"] = value

    @property
    def suffix_for_file_name_in_run_12(self):
        """Get suffix_for_file_name_in_run_12

        Returns:
            str: the value of `suffix_for_file_name_in_run_12` or None if not set
        """
        return self._data["Suffix for File Name in Run 12"]

    @suffix_for_file_name_in_run_12.setter
    def suffix_for_file_name_in_run_12(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_12`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_12`')

        self._data["Suffix for File Name in Run 12"] = value

    @property
    def suffix_for_file_name_in_run_13(self):
        """Get suffix_for_file_name_in_run_13

        Returns:
            str: the value of `suffix_for_file_name_in_run_13` or None if not set
        """
        return self._data["Suffix for File Name in Run 13"]

    @suffix_for_file_name_in_run_13.setter
    def suffix_for_file_name_in_run_13(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_13`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_13`')

        self._data["Suffix for File Name in Run 13"] = value

    @property
    def suffix_for_file_name_in_run_14(self):
        """Get suffix_for_file_name_in_run_14

        Returns:
            str: the value of `suffix_for_file_name_in_run_14` or None if not set
        """
        return self._data["Suffix for File Name in Run 14"]

    @suffix_for_file_name_in_run_14.setter
    def suffix_for_file_name_in_run_14(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_14`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_14`')

        self._data["Suffix for File Name in Run 14"] = value

    @property
    def suffix_for_file_name_in_run_15(self):
        """Get suffix_for_file_name_in_run_15

        Returns:
            str: the value of `suffix_for_file_name_in_run_15` or None if not set
        """
        return self._data["Suffix for File Name in Run 15"]

    @suffix_for_file_name_in_run_15.setter
    def suffix_for_file_name_in_run_15(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_15`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_15`')

        self._data["Suffix for File Name in Run 15"] = value

    @property
    def suffix_for_file_name_in_run_16(self):
        """Get suffix_for_file_name_in_run_16

        Returns:
            str: the value of `suffix_for_file_name_in_run_16` or None if not set
        """
        return self._data["Suffix for File Name in Run 16"]

    @suffix_for_file_name_in_run_16.setter
    def suffix_for_file_name_in_run_16(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_16`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_16`')

        self._data["Suffix for File Name in Run 16"] = value

    @property
    def suffix_for_file_name_in_run_17(self):
        """Get suffix_for_file_name_in_run_17

        Returns:
            str: the value of `suffix_for_file_name_in_run_17` or None if not set
        """
        return self._data["Suffix for File Name in Run 17"]

    @suffix_for_file_name_in_run_17.setter
    def suffix_for_file_name_in_run_17(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_17`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_17`')

        self._data["Suffix for File Name in Run 17"] = value

    @property
    def suffix_for_file_name_in_run_18(self):
        """Get suffix_for_file_name_in_run_18

        Returns:
            str: the value of `suffix_for_file_name_in_run_18` or None if not set
        """
        return self._data["Suffix for File Name in Run 18"]

    @suffix_for_file_name_in_run_18.setter
    def suffix_for_file_name_in_run_18(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_18`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_18`')

        self._data["Suffix for File Name in Run 18"] = value

    @property
    def suffix_for_file_name_in_run_19(self):
        """Get suffix_for_file_name_in_run_19

        Returns:
            str: the value of `suffix_for_file_name_in_run_19` or None if not set
        """
        return self._data["Suffix for File Name in Run 19"]

    @suffix_for_file_name_in_run_19.setter
    def suffix_for_file_name_in_run_19(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_19`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_19`')

        self._data["Suffix for File Name in Run 19"] = value

    @property
    def suffix_for_file_name_in_run_20(self):
        """Get suffix_for_file_name_in_run_20

        Returns:
            str: the value of `suffix_for_file_name_in_run_20` or None if not set
        """
        return self._data["Suffix for File Name in Run 20"]

    @suffix_for_file_name_in_run_20.setter
    def suffix_for_file_name_in_run_20(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_20`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_20`')

        self._data["Suffix for File Name in Run 20"] = value

    @property
    def suffix_for_file_name_in_run_21(self):
        """Get suffix_for_file_name_in_run_21

        Returns:
            str: the value of `suffix_for_file_name_in_run_21` or None if not set
        """
        return self._data["Suffix for File Name in Run 21"]

    @suffix_for_file_name_in_run_21.setter
    def suffix_for_file_name_in_run_21(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_21`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_21`')

        self._data["Suffix for File Name in Run 21"] = value

    @property
    def suffix_for_file_name_in_run_22(self):
        """Get suffix_for_file_name_in_run_22

        Returns:
            str: the value of `suffix_for_file_name_in_run_22` or None if not set
        """
        return self._data["Suffix for File Name in Run 22"]

    @suffix_for_file_name_in_run_22.setter
    def suffix_for_file_name_in_run_22(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_22`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_22`')

        self._data["Suffix for File Name in Run 22"] = value

    @property
    def suffix_for_file_name_in_run_23(self):
        """Get suffix_for_file_name_in_run_23

        Returns:
            str: the value of `suffix_for_file_name_in_run_23` or None if not set
        """
        return self._data["Suffix for File Name in Run 23"]

    @suffix_for_file_name_in_run_23.setter
    def suffix_for_file_name_in_run_23(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_23`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_23`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_23`')

        self._data["Suffix for File Name in Run 23"] = value

    @property
    def suffix_for_file_name_in_run_24(self):
        """Get suffix_for_file_name_in_run_24

        Returns:
            str: the value of `suffix_for_file_name_in_run_24` or None if not set
        """
        return self._data["Suffix for File Name in Run 24"]

    @suffix_for_file_name_in_run_24.setter
    def suffix_for_file_name_in_run_24(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_24`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_24`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_24`')

        self._data["Suffix for File Name in Run 24"] = value

    @property
    def suffix_for_file_name_in_run_25(self):
        """Get suffix_for_file_name_in_run_25

        Returns:
            str: the value of `suffix_for_file_name_in_run_25` or None if not set
        """
        return self._data["Suffix for File Name in Run 25"]

    @suffix_for_file_name_in_run_25.setter
    def suffix_for_file_name_in_run_25(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_25`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_25`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_25`')

        self._data["Suffix for File Name in Run 25"] = value

    @property
    def suffix_for_file_name_in_run_26(self):
        """Get suffix_for_file_name_in_run_26

        Returns:
            str: the value of `suffix_for_file_name_in_run_26` or None if not set
        """
        return self._data["Suffix for File Name in Run 26"]

    @suffix_for_file_name_in_run_26.setter
    def suffix_for_file_name_in_run_26(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_26`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_26`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_26`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_26`')

        self._data["Suffix for File Name in Run 26"] = value

    @property
    def suffix_for_file_name_in_run_27(self):
        """Get suffix_for_file_name_in_run_27

        Returns:
            str: the value of `suffix_for_file_name_in_run_27` or None if not set
        """
        return self._data["Suffix for File Name in Run 27"]

    @suffix_for_file_name_in_run_27.setter
    def suffix_for_file_name_in_run_27(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_27`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_27`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_27`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_27`')

        self._data["Suffix for File Name in Run 27"] = value

    @property
    def suffix_for_file_name_in_run_28(self):
        """Get suffix_for_file_name_in_run_28

        Returns:
            str: the value of `suffix_for_file_name_in_run_28` or None if not set
        """
        return self._data["Suffix for File Name in Run 28"]

    @suffix_for_file_name_in_run_28.setter
    def suffix_for_file_name_in_run_28(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_28`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_28`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_28`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_28`')

        self._data["Suffix for File Name in Run 28"] = value

    @property
    def suffix_for_file_name_in_run_29(self):
        """Get suffix_for_file_name_in_run_29

        Returns:
            str: the value of `suffix_for_file_name_in_run_29` or None if not set
        """
        return self._data["Suffix for File Name in Run 29"]

    @suffix_for_file_name_in_run_29.setter
    def suffix_for_file_name_in_run_29(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_29`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_29`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_29`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_29`')

        self._data["Suffix for File Name in Run 29"] = value

    @property
    def suffix_for_file_name_in_run_30(self):
        """Get suffix_for_file_name_in_run_30

        Returns:
            str: the value of `suffix_for_file_name_in_run_30` or None if not set
        """
        return self._data["Suffix for File Name in Run 30"]

    @suffix_for_file_name_in_run_30.setter
    def suffix_for_file_name_in_run_30(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_30`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_30`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_30`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_30`')

        self._data["Suffix for File Name in Run 30"] = value

    @property
    def suffix_for_file_name_in_run_31(self):
        """Get suffix_for_file_name_in_run_31

        Returns:
            str: the value of `suffix_for_file_name_in_run_31` or None if not set
        """
        return self._data["Suffix for File Name in Run 31"]

    @suffix_for_file_name_in_run_31.setter
    def suffix_for_file_name_in_run_31(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_31`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_31`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_31`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_31`')

        self._data["Suffix for File Name in Run 31"] = value

    @property
    def suffix_for_file_name_in_run_32(self):
        """Get suffix_for_file_name_in_run_32

        Returns:
            str: the value of `suffix_for_file_name_in_run_32` or None if not set
        """
        return self._data["Suffix for File Name in Run 32"]

    @suffix_for_file_name_in_run_32.setter
    def suffix_for_file_name_in_run_32(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_32`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_32`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_32`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_32`')

        self._data["Suffix for File Name in Run 32"] = value

    @property
    def suffix_for_file_name_in_run_33(self):
        """Get suffix_for_file_name_in_run_33

        Returns:
            str: the value of `suffix_for_file_name_in_run_33` or None if not set
        """
        return self._data["Suffix for File Name in Run 33"]

    @suffix_for_file_name_in_run_33.setter
    def suffix_for_file_name_in_run_33(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_33`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_33`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_33`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_33`')

        self._data["Suffix for File Name in Run 33"] = value

    @property
    def suffix_for_file_name_in_run_34(self):
        """Get suffix_for_file_name_in_run_34

        Returns:
            str: the value of `suffix_for_file_name_in_run_34` or None if not set
        """
        return self._data["Suffix for File Name in Run 34"]

    @suffix_for_file_name_in_run_34.setter
    def suffix_for_file_name_in_run_34(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_34`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_34`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_34`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_34`')

        self._data["Suffix for File Name in Run 34"] = value

    @property
    def suffix_for_file_name_in_run_35(self):
        """Get suffix_for_file_name_in_run_35

        Returns:
            str: the value of `suffix_for_file_name_in_run_35` or None if not set
        """
        return self._data["Suffix for File Name in Run 35"]

    @suffix_for_file_name_in_run_35.setter
    def suffix_for_file_name_in_run_35(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_35`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_35`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_35`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_35`')

        self._data["Suffix for File Name in Run 35"] = value

    @property
    def suffix_for_file_name_in_run_36(self):
        """Get suffix_for_file_name_in_run_36

        Returns:
            str: the value of `suffix_for_file_name_in_run_36` or None if not set
        """
        return self._data["Suffix for File Name in Run 36"]

    @suffix_for_file_name_in_run_36.setter
    def suffix_for_file_name_in_run_36(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_36`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_36`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_36`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_36`')

        self._data["Suffix for File Name in Run 36"] = value

    @property
    def suffix_for_file_name_in_run_37(self):
        """Get suffix_for_file_name_in_run_37

        Returns:
            str: the value of `suffix_for_file_name_in_run_37` or None if not set
        """
        return self._data["Suffix for File Name in Run 37"]

    @suffix_for_file_name_in_run_37.setter
    def suffix_for_file_name_in_run_37(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_37`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_37`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_37`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_37`')

        self._data["Suffix for File Name in Run 37"] = value

    @property
    def suffix_for_file_name_in_run_38(self):
        """Get suffix_for_file_name_in_run_38

        Returns:
            str: the value of `suffix_for_file_name_in_run_38` or None if not set
        """
        return self._data["Suffix for File Name in Run 38"]

    @suffix_for_file_name_in_run_38.setter
    def suffix_for_file_name_in_run_38(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_38`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_38`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_38`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_38`')

        self._data["Suffix for File Name in Run 38"] = value

    @property
    def suffix_for_file_name_in_run_39(self):
        """Get suffix_for_file_name_in_run_39

        Returns:
            str: the value of `suffix_for_file_name_in_run_39` or None if not set
        """
        return self._data["Suffix for File Name in Run 39"]

    @suffix_for_file_name_in_run_39.setter
    def suffix_for_file_name_in_run_39(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_39`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_39`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_39`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_39`')

        self._data["Suffix for File Name in Run 39"] = value

    @property
    def suffix_for_file_name_in_run_40(self):
        """Get suffix_for_file_name_in_run_40

        Returns:
            str: the value of `suffix_for_file_name_in_run_40` or None if not set
        """
        return self._data["Suffix for File Name in Run 40"]

    @suffix_for_file_name_in_run_40.setter
    def suffix_for_file_name_in_run_40(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_40`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_40`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_40`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_40`')

        self._data["Suffix for File Name in Run 40"] = value

    @property
    def suffix_for_file_name_in_run_41(self):
        """Get suffix_for_file_name_in_run_41

        Returns:
            str: the value of `suffix_for_file_name_in_run_41` or None if not set
        """
        return self._data["Suffix for File Name in Run 41"]

    @suffix_for_file_name_in_run_41.setter
    def suffix_for_file_name_in_run_41(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_41`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_41`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_41`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_41`')

        self._data["Suffix for File Name in Run 41"] = value

    @property
    def suffix_for_file_name_in_run_42(self):
        """Get suffix_for_file_name_in_run_42

        Returns:
            str: the value of `suffix_for_file_name_in_run_42` or None if not set
        """
        return self._data["Suffix for File Name in Run 42"]

    @suffix_for_file_name_in_run_42.setter
    def suffix_for_file_name_in_run_42(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_42`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_42`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_42`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_42`')

        self._data["Suffix for File Name in Run 42"] = value

    @property
    def suffix_for_file_name_in_run_43(self):
        """Get suffix_for_file_name_in_run_43

        Returns:
            str: the value of `suffix_for_file_name_in_run_43` or None if not set
        """
        return self._data["Suffix for File Name in Run 43"]

    @suffix_for_file_name_in_run_43.setter
    def suffix_for_file_name_in_run_43(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_43`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_43`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_43`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_43`')

        self._data["Suffix for File Name in Run 43"] = value

    @property
    def suffix_for_file_name_in_run_44(self):
        """Get suffix_for_file_name_in_run_44

        Returns:
            str: the value of `suffix_for_file_name_in_run_44` or None if not set
        """
        return self._data["Suffix for File Name in Run 44"]

    @suffix_for_file_name_in_run_44.setter
    def suffix_for_file_name_in_run_44(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_44`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_44`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_44`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_44`')

        self._data["Suffix for File Name in Run 44"] = value

    @property
    def suffix_for_file_name_in_run_45(self):
        """Get suffix_for_file_name_in_run_45

        Returns:
            str: the value of `suffix_for_file_name_in_run_45` or None if not set
        """
        return self._data["Suffix for File Name in Run 45"]

    @suffix_for_file_name_in_run_45.setter
    def suffix_for_file_name_in_run_45(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_45`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_45`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_45`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_45`')

        self._data["Suffix for File Name in Run 45"] = value

    @property
    def suffix_for_file_name_in_run_46(self):
        """Get suffix_for_file_name_in_run_46

        Returns:
            str: the value of `suffix_for_file_name_in_run_46` or None if not set
        """
        return self._data["Suffix for File Name in Run 46"]

    @suffix_for_file_name_in_run_46.setter
    def suffix_for_file_name_in_run_46(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_46`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_46`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_46`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_46`')

        self._data["Suffix for File Name in Run 46"] = value

    @property
    def suffix_for_file_name_in_run_47(self):
        """Get suffix_for_file_name_in_run_47

        Returns:
            str: the value of `suffix_for_file_name_in_run_47` or None if not set
        """
        return self._data["Suffix for File Name in Run 47"]

    @suffix_for_file_name_in_run_47.setter
    def suffix_for_file_name_in_run_47(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_47`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_47`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_47`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_47`')

        self._data["Suffix for File Name in Run 47"] = value

    @property
    def suffix_for_file_name_in_run_48(self):
        """Get suffix_for_file_name_in_run_48

        Returns:
            str: the value of `suffix_for_file_name_in_run_48` or None if not set
        """
        return self._data["Suffix for File Name in Run 48"]

    @suffix_for_file_name_in_run_48.setter
    def suffix_for_file_name_in_run_48(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_48`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_48`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_48`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_48`')

        self._data["Suffix for File Name in Run 48"] = value

    @property
    def suffix_for_file_name_in_run_49(self):
        """Get suffix_for_file_name_in_run_49

        Returns:
            str: the value of `suffix_for_file_name_in_run_49` or None if not set
        """
        return self._data["Suffix for File Name in Run 49"]

    @suffix_for_file_name_in_run_49.setter
    def suffix_for_file_name_in_run_49(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_49`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_49`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_49`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_49`')

        self._data["Suffix for File Name in Run 49"] = value

    @property
    def suffix_for_file_name_in_run_50(self):
        """Get suffix_for_file_name_in_run_50

        Returns:
            str: the value of `suffix_for_file_name_in_run_50` or None if not set
        """
        return self._data["Suffix for File Name in Run 50"]

    @suffix_for_file_name_in_run_50.setter
    def suffix_for_file_name_in_run_50(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_50`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_50`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_50`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_50`')

        self._data["Suffix for File Name in Run 50"] = value

    @property
    def suffix_for_file_name_in_run_51(self):
        """Get suffix_for_file_name_in_run_51

        Returns:
            str: the value of `suffix_for_file_name_in_run_51` or None if not set
        """
        return self._data["Suffix for File Name in Run 51"]

    @suffix_for_file_name_in_run_51.setter
    def suffix_for_file_name_in_run_51(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_51`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_51`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_51`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_51`')

        self._data["Suffix for File Name in Run 51"] = value

    @property
    def suffix_for_file_name_in_run_52(self):
        """Get suffix_for_file_name_in_run_52

        Returns:
            str: the value of `suffix_for_file_name_in_run_52` or None if not set
        """
        return self._data["Suffix for File Name in Run 52"]

    @suffix_for_file_name_in_run_52.setter
    def suffix_for_file_name_in_run_52(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_52`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_52`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_52`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_52`')

        self._data["Suffix for File Name in Run 52"] = value

    @property
    def suffix_for_file_name_in_run_53(self):
        """Get suffix_for_file_name_in_run_53

        Returns:
            str: the value of `suffix_for_file_name_in_run_53` or None if not set
        """
        return self._data["Suffix for File Name in Run 53"]

    @suffix_for_file_name_in_run_53.setter
    def suffix_for_file_name_in_run_53(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_53`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_53`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_53`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_53`')

        self._data["Suffix for File Name in Run 53"] = value

    @property
    def suffix_for_file_name_in_run_54(self):
        """Get suffix_for_file_name_in_run_54

        Returns:
            str: the value of `suffix_for_file_name_in_run_54` or None if not set
        """
        return self._data["Suffix for File Name in Run 54"]

    @suffix_for_file_name_in_run_54.setter
    def suffix_for_file_name_in_run_54(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_54`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_54`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_54`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_54`')

        self._data["Suffix for File Name in Run 54"] = value

    @property
    def suffix_for_file_name_in_run_55(self):
        """Get suffix_for_file_name_in_run_55

        Returns:
            str: the value of `suffix_for_file_name_in_run_55` or None if not set
        """
        return self._data["Suffix for File Name in Run 55"]

    @suffix_for_file_name_in_run_55.setter
    def suffix_for_file_name_in_run_55(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_55`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_55`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_55`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_55`')

        self._data["Suffix for File Name in Run 55"] = value

    @property
    def suffix_for_file_name_in_run_56(self):
        """Get suffix_for_file_name_in_run_56

        Returns:
            str: the value of `suffix_for_file_name_in_run_56` or None if not set
        """
        return self._data["Suffix for File Name in Run 56"]

    @suffix_for_file_name_in_run_56.setter
    def suffix_for_file_name_in_run_56(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_56`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_56`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_56`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_56`')

        self._data["Suffix for File Name in Run 56"] = value

    @property
    def suffix_for_file_name_in_run_57(self):
        """Get suffix_for_file_name_in_run_57

        Returns:
            str: the value of `suffix_for_file_name_in_run_57` or None if not set
        """
        return self._data["Suffix for File Name in Run 57"]

    @suffix_for_file_name_in_run_57.setter
    def suffix_for_file_name_in_run_57(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_57`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_57`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_57`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_57`')

        self._data["Suffix for File Name in Run 57"] = value

    @property
    def suffix_for_file_name_in_run_58(self):
        """Get suffix_for_file_name_in_run_58

        Returns:
            str: the value of `suffix_for_file_name_in_run_58` or None if not set
        """
        return self._data["Suffix for File Name in Run 58"]

    @suffix_for_file_name_in_run_58.setter
    def suffix_for_file_name_in_run_58(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_58`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_58`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_58`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_58`')

        self._data["Suffix for File Name in Run 58"] = value

    @property
    def suffix_for_file_name_in_run_59(self):
        """Get suffix_for_file_name_in_run_59

        Returns:
            str: the value of `suffix_for_file_name_in_run_59` or None if not set
        """
        return self._data["Suffix for File Name in Run 59"]

    @suffix_for_file_name_in_run_59.setter
    def suffix_for_file_name_in_run_59(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_59`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_59`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_59`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_59`')

        self._data["Suffix for File Name in Run 59"] = value

    @property
    def suffix_for_file_name_in_run_60(self):
        """Get suffix_for_file_name_in_run_60

        Returns:
            str: the value of `suffix_for_file_name_in_run_60` or None if not set
        """
        return self._data["Suffix for File Name in Run 60"]

    @suffix_for_file_name_in_run_60.setter
    def suffix_for_file_name_in_run_60(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_60`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_60`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_60`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_60`')

        self._data["Suffix for File Name in Run 60"] = value

    @property
    def suffix_for_file_name_in_run_61(self):
        """Get suffix_for_file_name_in_run_61

        Returns:
            str: the value of `suffix_for_file_name_in_run_61` or None if not set
        """
        return self._data["Suffix for File Name in Run 61"]

    @suffix_for_file_name_in_run_61.setter
    def suffix_for_file_name_in_run_61(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_61`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_61`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_61`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_61`')

        self._data["Suffix for File Name in Run 61"] = value

    @property
    def suffix_for_file_name_in_run_62(self):
        """Get suffix_for_file_name_in_run_62

        Returns:
            str: the value of `suffix_for_file_name_in_run_62` or None if not set
        """
        return self._data["Suffix for File Name in Run 62"]

    @suffix_for_file_name_in_run_62.setter
    def suffix_for_file_name_in_run_62(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_62`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_62`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_62`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_62`')

        self._data["Suffix for File Name in Run 62"] = value

    @property
    def suffix_for_file_name_in_run_63(self):
        """Get suffix_for_file_name_in_run_63

        Returns:
            str: the value of `suffix_for_file_name_in_run_63` or None if not set
        """
        return self._data["Suffix for File Name in Run 63"]

    @suffix_for_file_name_in_run_63.setter
    def suffix_for_file_name_in_run_63(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_63`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_63`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_63`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_63`')

        self._data["Suffix for File Name in Run 63"] = value

    @property
    def suffix_for_file_name_in_run_64(self):
        """Get suffix_for_file_name_in_run_64

        Returns:
            str: the value of `suffix_for_file_name_in_run_64` or None if not set
        """
        return self._data["Suffix for File Name in Run 64"]

    @suffix_for_file_name_in_run_64.setter
    def suffix_for_file_name_in_run_64(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_64`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_64`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_64`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_64`')

        self._data["Suffix for File Name in Run 64"] = value

    @property
    def suffix_for_file_name_in_run_65(self):
        """Get suffix_for_file_name_in_run_65

        Returns:
            str: the value of `suffix_for_file_name_in_run_65` or None if not set
        """
        return self._data["Suffix for File Name in Run 65"]

    @suffix_for_file_name_in_run_65.setter
    def suffix_for_file_name_in_run_65(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_65`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_65`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_65`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_65`')

        self._data["Suffix for File Name in Run 65"] = value

    @property
    def suffix_for_file_name_in_run_66(self):
        """Get suffix_for_file_name_in_run_66

        Returns:
            str: the value of `suffix_for_file_name_in_run_66` or None if not set
        """
        return self._data["Suffix for File Name in Run 66"]

    @suffix_for_file_name_in_run_66.setter
    def suffix_for_file_name_in_run_66(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_66`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_66`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_66`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_66`')

        self._data["Suffix for File Name in Run 66"] = value

    @property
    def suffix_for_file_name_in_run_67(self):
        """Get suffix_for_file_name_in_run_67

        Returns:
            str: the value of `suffix_for_file_name_in_run_67` or None if not set
        """
        return self._data["Suffix for File Name in Run 67"]

    @suffix_for_file_name_in_run_67.setter
    def suffix_for_file_name_in_run_67(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_67`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_67`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_67`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_67`')

        self._data["Suffix for File Name in Run 67"] = value

    @property
    def suffix_for_file_name_in_run_68(self):
        """Get suffix_for_file_name_in_run_68

        Returns:
            str: the value of `suffix_for_file_name_in_run_68` or None if not set
        """
        return self._data["Suffix for File Name in Run 68"]

    @suffix_for_file_name_in_run_68.setter
    def suffix_for_file_name_in_run_68(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_68`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_68`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_68`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_68`')

        self._data["Suffix for File Name in Run 68"] = value

    @property
    def suffix_for_file_name_in_run_69(self):
        """Get suffix_for_file_name_in_run_69

        Returns:
            str: the value of `suffix_for_file_name_in_run_69` or None if not set
        """
        return self._data["Suffix for File Name in Run 69"]

    @suffix_for_file_name_in_run_69.setter
    def suffix_for_file_name_in_run_69(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_69`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_69`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_69`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_69`')

        self._data["Suffix for File Name in Run 69"] = value

    @property
    def suffix_for_file_name_in_run_70(self):
        """Get suffix_for_file_name_in_run_70

        Returns:
            str: the value of `suffix_for_file_name_in_run_70` or None if not set
        """
        return self._data["Suffix for File Name in Run 70"]

    @suffix_for_file_name_in_run_70.setter
    def suffix_for_file_name_in_run_70(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_70`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_70`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_70`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_70`')

        self._data["Suffix for File Name in Run 70"] = value

    @property
    def suffix_for_file_name_in_run_71(self):
        """Get suffix_for_file_name_in_run_71

        Returns:
            str: the value of `suffix_for_file_name_in_run_71` or None if not set
        """
        return self._data["Suffix for File Name in Run 71"]

    @suffix_for_file_name_in_run_71.setter
    def suffix_for_file_name_in_run_71(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_71`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_71`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_71`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_71`')

        self._data["Suffix for File Name in Run 71"] = value

    @property
    def suffix_for_file_name_in_run_72(self):
        """Get suffix_for_file_name_in_run_72

        Returns:
            str: the value of `suffix_for_file_name_in_run_72` or None if not set
        """
        return self._data["Suffix for File Name in Run 72"]

    @suffix_for_file_name_in_run_72.setter
    def suffix_for_file_name_in_run_72(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_72`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_72`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_72`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_72`')

        self._data["Suffix for File Name in Run 72"] = value

    @property
    def suffix_for_file_name_in_run_73(self):
        """Get suffix_for_file_name_in_run_73

        Returns:
            str: the value of `suffix_for_file_name_in_run_73` or None if not set
        """
        return self._data["Suffix for File Name in Run 73"]

    @suffix_for_file_name_in_run_73.setter
    def suffix_for_file_name_in_run_73(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_73`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_73`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_73`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_73`')

        self._data["Suffix for File Name in Run 73"] = value

    @property
    def suffix_for_file_name_in_run_74(self):
        """Get suffix_for_file_name_in_run_74

        Returns:
            str: the value of `suffix_for_file_name_in_run_74` or None if not set
        """
        return self._data["Suffix for File Name in Run 74"]

    @suffix_for_file_name_in_run_74.setter
    def suffix_for_file_name_in_run_74(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_74`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_74`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_74`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_74`')

        self._data["Suffix for File Name in Run 74"] = value

    @property
    def suffix_for_file_name_in_run_75(self):
        """Get suffix_for_file_name_in_run_75

        Returns:
            str: the value of `suffix_for_file_name_in_run_75` or None if not set
        """
        return self._data["Suffix for File Name in Run 75"]

    @suffix_for_file_name_in_run_75.setter
    def suffix_for_file_name_in_run_75(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_75`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_75`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_75`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_75`')

        self._data["Suffix for File Name in Run 75"] = value

    @property
    def suffix_for_file_name_in_run_76(self):
        """Get suffix_for_file_name_in_run_76

        Returns:
            str: the value of `suffix_for_file_name_in_run_76` or None if not set
        """
        return self._data["Suffix for File Name in Run 76"]

    @suffix_for_file_name_in_run_76.setter
    def suffix_for_file_name_in_run_76(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_76`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_76`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_76`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_76`')

        self._data["Suffix for File Name in Run 76"] = value

    @property
    def suffix_for_file_name_in_run_77(self):
        """Get suffix_for_file_name_in_run_77

        Returns:
            str: the value of `suffix_for_file_name_in_run_77` or None if not set
        """
        return self._data["Suffix for File Name in Run 77"]

    @suffix_for_file_name_in_run_77.setter
    def suffix_for_file_name_in_run_77(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_77`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_77`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_77`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_77`')

        self._data["Suffix for File Name in Run 77"] = value

    @property
    def suffix_for_file_name_in_run_78(self):
        """Get suffix_for_file_name_in_run_78

        Returns:
            str: the value of `suffix_for_file_name_in_run_78` or None if not set
        """
        return self._data["Suffix for File Name in Run 78"]

    @suffix_for_file_name_in_run_78.setter
    def suffix_for_file_name_in_run_78(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_78`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_78`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_78`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_78`')

        self._data["Suffix for File Name in Run 78"] = value

    @property
    def suffix_for_file_name_in_run_79(self):
        """Get suffix_for_file_name_in_run_79

        Returns:
            str: the value of `suffix_for_file_name_in_run_79` or None if not set
        """
        return self._data["Suffix for File Name in Run 79"]

    @suffix_for_file_name_in_run_79.setter
    def suffix_for_file_name_in_run_79(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_79`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_79`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_79`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_79`')

        self._data["Suffix for File Name in Run 79"] = value

    @property
    def suffix_for_file_name_in_run_80(self):
        """Get suffix_for_file_name_in_run_80

        Returns:
            str: the value of `suffix_for_file_name_in_run_80` or None if not set
        """
        return self._data["Suffix for File Name in Run 80"]

    @suffix_for_file_name_in_run_80.setter
    def suffix_for_file_name_in_run_80(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_80`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_80`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_80`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_80`')

        self._data["Suffix for File Name in Run 80"] = value

    @property
    def suffix_for_file_name_in_run_81(self):
        """Get suffix_for_file_name_in_run_81

        Returns:
            str: the value of `suffix_for_file_name_in_run_81` or None if not set
        """
        return self._data["Suffix for File Name in Run 81"]

    @suffix_for_file_name_in_run_81.setter
    def suffix_for_file_name_in_run_81(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_81`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_81`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_81`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_81`')

        self._data["Suffix for File Name in Run 81"] = value

    @property
    def suffix_for_file_name_in_run_82(self):
        """Get suffix_for_file_name_in_run_82

        Returns:
            str: the value of `suffix_for_file_name_in_run_82` or None if not set
        """
        return self._data["Suffix for File Name in Run 82"]

    @suffix_for_file_name_in_run_82.setter
    def suffix_for_file_name_in_run_82(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_82`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_82`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_82`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_82`')

        self._data["Suffix for File Name in Run 82"] = value

    @property
    def suffix_for_file_name_in_run_83(self):
        """Get suffix_for_file_name_in_run_83

        Returns:
            str: the value of `suffix_for_file_name_in_run_83` or None if not set
        """
        return self._data["Suffix for File Name in Run 83"]

    @suffix_for_file_name_in_run_83.setter
    def suffix_for_file_name_in_run_83(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_83`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_83`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_83`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_83`')

        self._data["Suffix for File Name in Run 83"] = value

    @property
    def suffix_for_file_name_in_run_84(self):
        """Get suffix_for_file_name_in_run_84

        Returns:
            str: the value of `suffix_for_file_name_in_run_84` or None if not set
        """
        return self._data["Suffix for File Name in Run 84"]

    @suffix_for_file_name_in_run_84.setter
    def suffix_for_file_name_in_run_84(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_84`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_84`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_84`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_84`')

        self._data["Suffix for File Name in Run 84"] = value

    @property
    def suffix_for_file_name_in_run_85(self):
        """Get suffix_for_file_name_in_run_85

        Returns:
            str: the value of `suffix_for_file_name_in_run_85` or None if not set
        """
        return self._data["Suffix for File Name in Run 85"]

    @suffix_for_file_name_in_run_85.setter
    def suffix_for_file_name_in_run_85(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_85`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_85`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_85`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_85`')

        self._data["Suffix for File Name in Run 85"] = value

    @property
    def suffix_for_file_name_in_run_86(self):
        """Get suffix_for_file_name_in_run_86

        Returns:
            str: the value of `suffix_for_file_name_in_run_86` or None if not set
        """
        return self._data["Suffix for File Name in Run 86"]

    @suffix_for_file_name_in_run_86.setter
    def suffix_for_file_name_in_run_86(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_86`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_86`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_86`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_86`')

        self._data["Suffix for File Name in Run 86"] = value

    @property
    def suffix_for_file_name_in_run_87(self):
        """Get suffix_for_file_name_in_run_87

        Returns:
            str: the value of `suffix_for_file_name_in_run_87` or None if not set
        """
        return self._data["Suffix for File Name in Run 87"]

    @suffix_for_file_name_in_run_87.setter
    def suffix_for_file_name_in_run_87(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_87`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_87`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_87`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_87`')

        self._data["Suffix for File Name in Run 87"] = value

    @property
    def suffix_for_file_name_in_run_88(self):
        """Get suffix_for_file_name_in_run_88

        Returns:
            str: the value of `suffix_for_file_name_in_run_88` or None if not set
        """
        return self._data["Suffix for File Name in Run 88"]

    @suffix_for_file_name_in_run_88.setter
    def suffix_for_file_name_in_run_88(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_88`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_88`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_88`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_88`')

        self._data["Suffix for File Name in Run 88"] = value

    @property
    def suffix_for_file_name_in_run_89(self):
        """Get suffix_for_file_name_in_run_89

        Returns:
            str: the value of `suffix_for_file_name_in_run_89` or None if not set
        """
        return self._data["Suffix for File Name in Run 89"]

    @suffix_for_file_name_in_run_89.setter
    def suffix_for_file_name_in_run_89(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_89`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_89`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_89`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_89`')

        self._data["Suffix for File Name in Run 89"] = value

    @property
    def suffix_for_file_name_in_run_90(self):
        """Get suffix_for_file_name_in_run_90

        Returns:
            str: the value of `suffix_for_file_name_in_run_90` or None if not set
        """
        return self._data["Suffix for File Name in Run 90"]

    @suffix_for_file_name_in_run_90.setter
    def suffix_for_file_name_in_run_90(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_90`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_90`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_90`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_90`')

        self._data["Suffix for File Name in Run 90"] = value

    @property
    def suffix_for_file_name_in_run_91(self):
        """Get suffix_for_file_name_in_run_91

        Returns:
            str: the value of `suffix_for_file_name_in_run_91` or None if not set
        """
        return self._data["Suffix for File Name in Run 91"]

    @suffix_for_file_name_in_run_91.setter
    def suffix_for_file_name_in_run_91(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_91`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_91`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_91`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_91`')

        self._data["Suffix for File Name in Run 91"] = value

    @property
    def suffix_for_file_name_in_run_92(self):
        """Get suffix_for_file_name_in_run_92

        Returns:
            str: the value of `suffix_for_file_name_in_run_92` or None if not set
        """
        return self._data["Suffix for File Name in Run 92"]

    @suffix_for_file_name_in_run_92.setter
    def suffix_for_file_name_in_run_92(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_92`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_92`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_92`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_92`')

        self._data["Suffix for File Name in Run 92"] = value

    @property
    def suffix_for_file_name_in_run_93(self):
        """Get suffix_for_file_name_in_run_93

        Returns:
            str: the value of `suffix_for_file_name_in_run_93` or None if not set
        """
        return self._data["Suffix for File Name in Run 93"]

    @suffix_for_file_name_in_run_93.setter
    def suffix_for_file_name_in_run_93(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_93`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_93`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_93`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_93`')

        self._data["Suffix for File Name in Run 93"] = value

    @property
    def suffix_for_file_name_in_run_94(self):
        """Get suffix_for_file_name_in_run_94

        Returns:
            str: the value of `suffix_for_file_name_in_run_94` or None if not set
        """
        return self._data["Suffix for File Name in Run 94"]

    @suffix_for_file_name_in_run_94.setter
    def suffix_for_file_name_in_run_94(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_94`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_94`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_94`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_94`')

        self._data["Suffix for File Name in Run 94"] = value

    @property
    def suffix_for_file_name_in_run_95(self):
        """Get suffix_for_file_name_in_run_95

        Returns:
            str: the value of `suffix_for_file_name_in_run_95` or None if not set
        """
        return self._data["Suffix for File Name in Run 95"]

    @suffix_for_file_name_in_run_95.setter
    def suffix_for_file_name_in_run_95(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_95`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_95`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_95`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_95`')

        self._data["Suffix for File Name in Run 95"] = value

    @property
    def suffix_for_file_name_in_run_96(self):
        """Get suffix_for_file_name_in_run_96

        Returns:
            str: the value of `suffix_for_file_name_in_run_96` or None if not set
        """
        return self._data["Suffix for File Name in Run 96"]

    @suffix_for_file_name_in_run_96.setter
    def suffix_for_file_name_in_run_96(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_96`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_96`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_96`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_96`')

        self._data["Suffix for File Name in Run 96"] = value

    @property
    def suffix_for_file_name_in_run_97(self):
        """Get suffix_for_file_name_in_run_97

        Returns:
            str: the value of `suffix_for_file_name_in_run_97` or None if not set
        """
        return self._data["Suffix for File Name in Run 97"]

    @suffix_for_file_name_in_run_97.setter
    def suffix_for_file_name_in_run_97(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_97`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_97`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_97`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_97`')

        self._data["Suffix for File Name in Run 97"] = value

    @property
    def suffix_for_file_name_in_run_98(self):
        """Get suffix_for_file_name_in_run_98

        Returns:
            str: the value of `suffix_for_file_name_in_run_98` or None if not set
        """
        return self._data["Suffix for File Name in Run 98"]

    @suffix_for_file_name_in_run_98.setter
    def suffix_for_file_name_in_run_98(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_98`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_98`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_98`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_98`')

        self._data["Suffix for File Name in Run 98"] = value

    @property
    def suffix_for_file_name_in_run_99(self):
        """Get suffix_for_file_name_in_run_99

        Returns:
            str: the value of `suffix_for_file_name_in_run_99` or None if not set
        """
        return self._data["Suffix for File Name in Run 99"]

    @suffix_for_file_name_in_run_99.setter
    def suffix_for_file_name_in_run_99(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_99`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_99`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_99`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_99`')

        self._data["Suffix for File Name in Run 99"] = value

    @property
    def suffix_for_file_name_in_run_100(self):
        """Get suffix_for_file_name_in_run_100

        Returns:
            str: the value of `suffix_for_file_name_in_run_100` or None if not set
        """
        return self._data["Suffix for File Name in Run 100"]

    @suffix_for_file_name_in_run_100.setter
    def suffix_for_file_name_in_run_100(self, value=None):
        """  Corresponds to IDD Field `suffix_for_file_name_in_run_100`

        Args:
            value (str): value for IDD Field `suffix_for_file_name_in_run_100`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `suffix_for_file_name_in_run_100`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `suffix_for_file_name_in_run_100`')

        self._data["Suffix for File Name in Run 100"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.suffix_for_file_name_in_run_1))
        out.append(self._to_str(self.suffix_for_file_name_in_run_2))
        out.append(self._to_str(self.suffix_for_file_name_in_run_3))
        out.append(self._to_str(self.suffix_for_file_name_in_run_4))
        out.append(self._to_str(self.suffix_for_file_name_in_run_5))
        out.append(self._to_str(self.suffix_for_file_name_in_run_6))
        out.append(self._to_str(self.suffix_for_file_name_in_run_7))
        out.append(self._to_str(self.suffix_for_file_name_in_run_8))
        out.append(self._to_str(self.suffix_for_file_name_in_run_9))
        out.append(self._to_str(self.suffix_for_file_name_in_run_10))
        out.append(self._to_str(self.suffix_for_file_name_in_run_11))
        out.append(self._to_str(self.suffix_for_file_name_in_run_12))
        out.append(self._to_str(self.suffix_for_file_name_in_run_13))
        out.append(self._to_str(self.suffix_for_file_name_in_run_14))
        out.append(self._to_str(self.suffix_for_file_name_in_run_15))
        out.append(self._to_str(self.suffix_for_file_name_in_run_16))
        out.append(self._to_str(self.suffix_for_file_name_in_run_17))
        out.append(self._to_str(self.suffix_for_file_name_in_run_18))
        out.append(self._to_str(self.suffix_for_file_name_in_run_19))
        out.append(self._to_str(self.suffix_for_file_name_in_run_20))
        out.append(self._to_str(self.suffix_for_file_name_in_run_21))
        out.append(self._to_str(self.suffix_for_file_name_in_run_22))
        out.append(self._to_str(self.suffix_for_file_name_in_run_23))
        out.append(self._to_str(self.suffix_for_file_name_in_run_24))
        out.append(self._to_str(self.suffix_for_file_name_in_run_25))
        out.append(self._to_str(self.suffix_for_file_name_in_run_26))
        out.append(self._to_str(self.suffix_for_file_name_in_run_27))
        out.append(self._to_str(self.suffix_for_file_name_in_run_28))
        out.append(self._to_str(self.suffix_for_file_name_in_run_29))
        out.append(self._to_str(self.suffix_for_file_name_in_run_30))
        out.append(self._to_str(self.suffix_for_file_name_in_run_31))
        out.append(self._to_str(self.suffix_for_file_name_in_run_32))
        out.append(self._to_str(self.suffix_for_file_name_in_run_33))
        out.append(self._to_str(self.suffix_for_file_name_in_run_34))
        out.append(self._to_str(self.suffix_for_file_name_in_run_35))
        out.append(self._to_str(self.suffix_for_file_name_in_run_36))
        out.append(self._to_str(self.suffix_for_file_name_in_run_37))
        out.append(self._to_str(self.suffix_for_file_name_in_run_38))
        out.append(self._to_str(self.suffix_for_file_name_in_run_39))
        out.append(self._to_str(self.suffix_for_file_name_in_run_40))
        out.append(self._to_str(self.suffix_for_file_name_in_run_41))
        out.append(self._to_str(self.suffix_for_file_name_in_run_42))
        out.append(self._to_str(self.suffix_for_file_name_in_run_43))
        out.append(self._to_str(self.suffix_for_file_name_in_run_44))
        out.append(self._to_str(self.suffix_for_file_name_in_run_45))
        out.append(self._to_str(self.suffix_for_file_name_in_run_46))
        out.append(self._to_str(self.suffix_for_file_name_in_run_47))
        out.append(self._to_str(self.suffix_for_file_name_in_run_48))
        out.append(self._to_str(self.suffix_for_file_name_in_run_49))
        out.append(self._to_str(self.suffix_for_file_name_in_run_50))
        out.append(self._to_str(self.suffix_for_file_name_in_run_51))
        out.append(self._to_str(self.suffix_for_file_name_in_run_52))
        out.append(self._to_str(self.suffix_for_file_name_in_run_53))
        out.append(self._to_str(self.suffix_for_file_name_in_run_54))
        out.append(self._to_str(self.suffix_for_file_name_in_run_55))
        out.append(self._to_str(self.suffix_for_file_name_in_run_56))
        out.append(self._to_str(self.suffix_for_file_name_in_run_57))
        out.append(self._to_str(self.suffix_for_file_name_in_run_58))
        out.append(self._to_str(self.suffix_for_file_name_in_run_59))
        out.append(self._to_str(self.suffix_for_file_name_in_run_60))
        out.append(self._to_str(self.suffix_for_file_name_in_run_61))
        out.append(self._to_str(self.suffix_for_file_name_in_run_62))
        out.append(self._to_str(self.suffix_for_file_name_in_run_63))
        out.append(self._to_str(self.suffix_for_file_name_in_run_64))
        out.append(self._to_str(self.suffix_for_file_name_in_run_65))
        out.append(self._to_str(self.suffix_for_file_name_in_run_66))
        out.append(self._to_str(self.suffix_for_file_name_in_run_67))
        out.append(self._to_str(self.suffix_for_file_name_in_run_68))
        out.append(self._to_str(self.suffix_for_file_name_in_run_69))
        out.append(self._to_str(self.suffix_for_file_name_in_run_70))
        out.append(self._to_str(self.suffix_for_file_name_in_run_71))
        out.append(self._to_str(self.suffix_for_file_name_in_run_72))
        out.append(self._to_str(self.suffix_for_file_name_in_run_73))
        out.append(self._to_str(self.suffix_for_file_name_in_run_74))
        out.append(self._to_str(self.suffix_for_file_name_in_run_75))
        out.append(self._to_str(self.suffix_for_file_name_in_run_76))
        out.append(self._to_str(self.suffix_for_file_name_in_run_77))
        out.append(self._to_str(self.suffix_for_file_name_in_run_78))
        out.append(self._to_str(self.suffix_for_file_name_in_run_79))
        out.append(self._to_str(self.suffix_for_file_name_in_run_80))
        out.append(self._to_str(self.suffix_for_file_name_in_run_81))
        out.append(self._to_str(self.suffix_for_file_name_in_run_82))
        out.append(self._to_str(self.suffix_for_file_name_in_run_83))
        out.append(self._to_str(self.suffix_for_file_name_in_run_84))
        out.append(self._to_str(self.suffix_for_file_name_in_run_85))
        out.append(self._to_str(self.suffix_for_file_name_in_run_86))
        out.append(self._to_str(self.suffix_for_file_name_in_run_87))
        out.append(self._to_str(self.suffix_for_file_name_in_run_88))
        out.append(self._to_str(self.suffix_for_file_name_in_run_89))
        out.append(self._to_str(self.suffix_for_file_name_in_run_90))
        out.append(self._to_str(self.suffix_for_file_name_in_run_91))
        out.append(self._to_str(self.suffix_for_file_name_in_run_92))
        out.append(self._to_str(self.suffix_for_file_name_in_run_93))
        out.append(self._to_str(self.suffix_for_file_name_in_run_94))
        out.append(self._to_str(self.suffix_for_file_name_in_run_95))
        out.append(self._to_str(self.suffix_for_file_name_in_run_96))
        out.append(self._to_str(self.suffix_for_file_name_in_run_97))
        out.append(self._to_str(self.suffix_for_file_name_in_run_98))
        out.append(self._to_str(self.suffix_for_file_name_in_run_99))
        out.append(self._to_str(self.suffix_for_file_name_in_run_100))
        return ",".join(out)

class OutputVariableDictionary(object):
    """ Corresponds to IDD object `Output:VariableDictionary`
        Produces a list summarizing the output variables and meters that are available for
        reporting for the model being simulated (rdd output file). The list varies depending
        on the types of objects present in the idf file.  For example, variables related to
        lights will only appear if a Lights object is present. The IDF option generates
        complete Output:Variable objects to simplify adding the desired output to the idf file.
    
    """
    internal_name = "Output:VariableDictionary"
    field_count = 2
    required_fields = ["Key Field"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:VariableDictionary`
        """
        self._data = OrderedDict()
        self._data["Key Field"] = None
        self._data["Sort Option"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_field = None
        else:
            self.key_field = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.sort_option = None
        else:
            self.sort_option = vals[i]
        i += 1

    @property
    def key_field(self):
        """Get key_field

        Returns:
            str: the value of `key_field` or None if not set
        """
        return self._data["Key Field"]

    @key_field.setter
    def key_field(self, value="regular"):
        """  Corresponds to IDD Field `key_field`

        Args:
            value (str): value for IDD Field `key_field`
                Accepted values are:
                      - IDF
                      - regular
                Default value: regular
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_field`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_field`')
            vals = set()
            vals.add("IDF")
            vals.add("regular")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_field`'.format(value))

        self._data["Key Field"] = value

    @property
    def sort_option(self):
        """Get sort_option

        Returns:
            str: the value of `sort_option` or None if not set
        """
        return self._data["Sort Option"]

    @sort_option.setter
    def sort_option(self, value=None):
        """  Corresponds to IDD Field `sort_option`

        Args:
            value (str): value for IDD Field `sort_option`
                Accepted values are:
                      - Name
                      - Unsorted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `sort_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sort_option`')
            vals = set()
            vals.add("Name")
            vals.add("Unsorted")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `sort_option`'.format(value))

        self._data["Sort Option"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_field))
        out.append(self._to_str(self.sort_option))
        return ",".join(out)

class OutputSurfacesList(object):
    """ Corresponds to IDD object `Output:Surfaces:List`
        Produces a report summarizing the details of surfaces in the eio output file.
    
    """
    internal_name = "Output:Surfaces:List"
    field_count = 2
    required_fields = ["Report Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Surfaces:List`
        """
        self._data = OrderedDict()
        self._data["Report Type"] = None
        self._data["Report Specifications"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_type = None
        else:
            self.report_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_specifications = None
        else:
            self.report_specifications = vals[i]
        i += 1

    @property
    def report_type(self):
        """Get report_type

        Returns:
            str: the value of `report_type` or None if not set
        """
        return self._data["Report Type"]

    @report_type.setter
    def report_type(self, value=None):
        """  Corresponds to IDD Field `report_type`

        Args:
            value (str): value for IDD Field `report_type`
                Accepted values are:
                      - Details
                      - Vertices
                      - DetailsWithVertices
                      - ViewFactorInfo
                      - Lines
                      - CostInfo
                      - DecayCurvesfromZoneComponentLoads
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_type`')
            vals = set()
            vals.add("Details")
            vals.add("Vertices")
            vals.add("DetailsWithVertices")
            vals.add("ViewFactorInfo")
            vals.add("Lines")
            vals.add("CostInfo")
            vals.add("DecayCurvesfromZoneComponentLoads")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_type`'.format(value))

        self._data["Report Type"] = value

    @property
    def report_specifications(self):
        """Get report_specifications

        Returns:
            str: the value of `report_specifications` or None if not set
        """
        return self._data["Report Specifications"]

    @report_specifications.setter
    def report_specifications(self, value=None):
        """  Corresponds to IDD Field `report_specifications`
        (IDF, only for Output:Surfaces:List, Lines report --
        will print transformed coordinates in IDF style)

        Args:
            value (str): value for IDD Field `report_specifications`
                Accepted values are:
                      - IDF
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications`')
            vals = set()
            vals.add("IDF")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_specifications`'.format(value))

        self._data["Report Specifications"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_type))
        out.append(self._to_str(self.report_specifications))
        return ",".join(out)

class OutputSurfacesDrawing(object):
    """ Corresponds to IDD object `Output:Surfaces:Drawing`
        Produces reports/files that are capable of rendering graphically or
        being imported into other programs. Rendering does not alter the
        actual inputs/surfaces.
    
    """
    internal_name = "Output:Surfaces:Drawing"
    field_count = 3
    required_fields = ["Report Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Surfaces:Drawing`
        """
        self._data = OrderedDict()
        self._data["Report Type"] = None
        self._data["Report Specifications 1"] = None
        self._data["Report Specifications 2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_type = None
        else:
            self.report_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_specifications_1 = None
        else:
            self.report_specifications_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_specifications_2 = None
        else:
            self.report_specifications_2 = vals[i]
        i += 1

    @property
    def report_type(self):
        """Get report_type

        Returns:
            str: the value of `report_type` or None if not set
        """
        return self._data["Report Type"]

    @report_type.setter
    def report_type(self, value=None):
        """  Corresponds to IDD Field `report_type`

        Args:
            value (str): value for IDD Field `report_type`
                Accepted values are:
                      - DXF
                      - DXF:WireFrame
                      - VRML
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_type`')
            vals = set()
            vals.add("DXF")
            vals.add("DXF:WireFrame")
            vals.add("VRML")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_type`'.format(value))

        self._data["Report Type"] = value

    @property
    def report_specifications_1(self):
        """Get report_specifications_1

        Returns:
            str: the value of `report_specifications_1` or None if not set
        """
        return self._data["Report Specifications 1"]

    @report_specifications_1.setter
    def report_specifications_1(self, value="Triangulate3DFace"):
        """  Corresponds to IDD Field `report_specifications_1`
        Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF
        This field is ignored for DXF:WireFrame and VRML

        Args:
            value (str): value for IDD Field `report_specifications_1`
                Accepted values are:
                      - Triangulate3DFace
                      - ThickPolyline
                      - RegularPolyline
                Default value: Triangulate3DFace
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications_1`')
            vals = set()
            vals.add("Triangulate3DFace")
            vals.add("ThickPolyline")
            vals.add("RegularPolyline")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_specifications_1`'.format(value))

        self._data["Report Specifications 1"] = value

    @property
    def report_specifications_2(self):
        """Get report_specifications_2

        Returns:
            str: the value of `report_specifications_2` or None if not set
        """
        return self._data["Report Specifications 2"]

    @report_specifications_2.setter
    def report_specifications_2(self, value=None):
        """  Corresponds to IDD Field `report_specifications_2`
        Use ColorScheme Name for DXF reports

        Args:
            value (str): value for IDD Field `report_specifications_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications_2`')

        self._data["Report Specifications 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_type))
        out.append(self._to_str(self.report_specifications_1))
        out.append(self._to_str(self.report_specifications_2))
        return ",".join(out)

class OutputSchedules(object):
    """ Corresponds to IDD object `Output:Schedules`
        Produces a condensed reporting that illustrates the full range of schedule values in
        the eio output file. In the style of input: DaySchedule,  WeekSchedule, and
        Annual Schedule.
    
    """
    internal_name = "Output:Schedules"
    field_count = 1
    required_fields = ["Key Field"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Schedules`
        """
        self._data = OrderedDict()
        self._data["Key Field"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_field = None
        else:
            self.key_field = vals[i]
        i += 1

    @property
    def key_field(self):
        """Get key_field

        Returns:
            str: the value of `key_field` or None if not set
        """
        return self._data["Key Field"]

    @key_field.setter
    def key_field(self, value=None):
        """  Corresponds to IDD Field `key_field`

        Args:
            value (str): value for IDD Field `key_field`
                Accepted values are:
                      - Hourly
                      - Timestep
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_field`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_field`')
            vals = set()
            vals.add("Hourly")
            vals.add("Timestep")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_field`'.format(value))

        self._data["Key Field"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_field))
        return ",".join(out)

class OutputConstructions(object):
    """ Corresponds to IDD object `Output:Constructions`
        Adds a report to the eio output file which shows details for each construction,
        including overall properties, a list of material layers, and calculated results
        related to conduction transfer functions.
    
    """
    internal_name = "Output:Constructions"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Constructions`
        """
        self._data = OrderedDict()
        self._data["Details Type 1"] = None
        self._data["Details Type 2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.details_type_1 = None
        else:
            self.details_type_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.details_type_2 = None
        else:
            self.details_type_2 = vals[i]
        i += 1

    @property
    def details_type_1(self):
        """Get details_type_1

        Returns:
            str: the value of `details_type_1` or None if not set
        """
        return self._data["Details Type 1"]

    @details_type_1.setter
    def details_type_1(self, value=None):
        """  Corresponds to IDD Field `details_type_1`

        Args:
            value (str): value for IDD Field `details_type_1`
                Accepted values are:
                      - Constructions
                      - Materials
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `details_type_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `details_type_1`')
            vals = set()
            vals.add("Constructions")
            vals.add("Materials")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `details_type_1`'.format(value))

        self._data["Details Type 1"] = value

    @property
    def details_type_2(self):
        """Get details_type_2

        Returns:
            str: the value of `details_type_2` or None if not set
        """
        return self._data["Details Type 2"]

    @details_type_2.setter
    def details_type_2(self, value=None):
        """  Corresponds to IDD Field `details_type_2`

        Args:
            value (str): value for IDD Field `details_type_2`
                Accepted values are:
                      - Constructions
                      - Materials
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `details_type_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `details_type_2`')
            vals = set()
            vals.add("Constructions")
            vals.add("Materials")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `details_type_2`'.format(value))

        self._data["Details Type 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.details_type_1))
        out.append(self._to_str(self.details_type_2))
        return ",".join(out)

class OutputEnergyManagementSystem(object):
    """ Corresponds to IDD object `Output:EnergyManagementSystem`
        This object is used to control the output produced by the Energy Management System
    
    """
    internal_name = "Output:EnergyManagementSystem"
    field_count = 3
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:EnergyManagementSystem`
        """
        self._data = OrderedDict()
        self._data["Actuator Availability Dictionary Reporting"] = None
        self._data["Internal Variable Availability Dictionary Reporting"] = None
        self._data["EMS Runtime Language Debug Output Level"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.actuator_availability_dictionary_reporting = None
        else:
            self.actuator_availability_dictionary_reporting = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.internal_variable_availability_dictionary_reporting = None
        else:
            self.internal_variable_availability_dictionary_reporting = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ems_runtime_language_debug_output_level = None
        else:
            self.ems_runtime_language_debug_output_level = vals[i]
        i += 1

    @property
    def actuator_availability_dictionary_reporting(self):
        """Get actuator_availability_dictionary_reporting

        Returns:
            str: the value of `actuator_availability_dictionary_reporting` or None if not set
        """
        return self._data["Actuator Availability Dictionary Reporting"]

    @actuator_availability_dictionary_reporting.setter
    def actuator_availability_dictionary_reporting(self, value="None"):
        """  Corresponds to IDD Field `actuator_availability_dictionary_reporting`

        Args:
            value (str): value for IDD Field `actuator_availability_dictionary_reporting`
                Accepted values are:
                      - None
                      - NotByUniqueKeyNames
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `actuator_availability_dictionary_reporting`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `actuator_availability_dictionary_reporting`')
            vals = set()
            vals.add("None")
            vals.add("NotByUniqueKeyNames")
            vals.add("Verbose")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `actuator_availability_dictionary_reporting`'.format(value))

        self._data["Actuator Availability Dictionary Reporting"] = value

    @property
    def internal_variable_availability_dictionary_reporting(self):
        """Get internal_variable_availability_dictionary_reporting

        Returns:
            str: the value of `internal_variable_availability_dictionary_reporting` or None if not set
        """
        return self._data["Internal Variable Availability Dictionary Reporting"]

    @internal_variable_availability_dictionary_reporting.setter
    def internal_variable_availability_dictionary_reporting(self, value="None"):
        """  Corresponds to IDD Field `internal_variable_availability_dictionary_reporting`

        Args:
            value (str): value for IDD Field `internal_variable_availability_dictionary_reporting`
                Accepted values are:
                      - None
                      - NotByUniqueKeyNames
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `internal_variable_availability_dictionary_reporting`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `internal_variable_availability_dictionary_reporting`')
            vals = set()
            vals.add("None")
            vals.add("NotByUniqueKeyNames")
            vals.add("Verbose")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `internal_variable_availability_dictionary_reporting`'.format(value))

        self._data["Internal Variable Availability Dictionary Reporting"] = value

    @property
    def ems_runtime_language_debug_output_level(self):
        """Get ems_runtime_language_debug_output_level

        Returns:
            str: the value of `ems_runtime_language_debug_output_level` or None if not set
        """
        return self._data["EMS Runtime Language Debug Output Level"]

    @ems_runtime_language_debug_output_level.setter
    def ems_runtime_language_debug_output_level(self, value="None"):
        """  Corresponds to IDD Field `ems_runtime_language_debug_output_level`

        Args:
            value (str): value for IDD Field `ems_runtime_language_debug_output_level`
                Accepted values are:
                      - None
                      - ErrorsOnly
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ems_runtime_language_debug_output_level`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ems_runtime_language_debug_output_level`')
            vals = set()
            vals.add("None")
            vals.add("ErrorsOnly")
            vals.add("Verbose")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `ems_runtime_language_debug_output_level`'.format(value))

        self._data["EMS Runtime Language Debug Output Level"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.actuator_availability_dictionary_reporting))
        out.append(self._to_str(self.internal_variable_availability_dictionary_reporting))
        out.append(self._to_str(self.ems_runtime_language_debug_output_level))
        return ",".join(out)

class OutputControlSurfaceColorScheme(object):
    """ Corresponds to IDD object `OutputControl:SurfaceColorScheme`
        This object is used to set colors for reporting on various building elements particularly for the
        DXF reports.  We know the user can enter 0 to 255 and the color map is available in DXF output.
        Therefore, we are limiting the colors in that range.  You can
        extend by editing the IDD but you do so on your own.  Colors not changed in any scheme will
        remain as the default scheme uses.
    
    """
    internal_name = "OutputControl:SurfaceColorScheme"
    field_count = 31
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `OutputControl:SurfaceColorScheme`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Drawing Element 1 Type"] = None
        self._data["Color for Drawing Element 1"] = None
        self._data["Drawing Element 2 Type"] = None
        self._data["Color for Drawing Element 2"] = None
        self._data["Drawing Element 3 Type"] = None
        self._data["Color for Drawing Element 3"] = None
        self._data["Drawing Element 4 Type"] = None
        self._data["Color for Drawing Element 4"] = None
        self._data["Drawing Element 5 Type"] = None
        self._data["Color for Drawing Element 5"] = None
        self._data["Drawing Element 6 Type"] = None
        self._data["Color for Drawing Element 6"] = None
        self._data["Drawing Element 7 Type"] = None
        self._data["Color for Drawing Element 7"] = None
        self._data["Drawing Element 8 Type"] = None
        self._data["Color for Drawing Element 8"] = None
        self._data["Drawing Element 9 Type"] = None
        self._data["Color for Drawing Element 9"] = None
        self._data["Drawing Element 10 Type"] = None
        self._data["Color for Drawing Element 10"] = None
        self._data["Drawing Element 11 Type"] = None
        self._data["Color for Drawing Element 11"] = None
        self._data["Drawing Element 12 Type"] = None
        self._data["Color for Drawing Element 12"] = None
        self._data["Drawing Element 13 Type"] = None
        self._data["Color for Drawing Element 13"] = None
        self._data["Drawing Element 14 Type"] = None
        self._data["Color for Drawing Element 14"] = None
        self._data["Drawing Element 15 Type"] = None
        self._data["Color for Drawing Element 15"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_1_type = None
        else:
            self.drawing_element_1_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_1 = None
        else:
            self.color_for_drawing_element_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_2_type = None
        else:
            self.drawing_element_2_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_2 = None
        else:
            self.color_for_drawing_element_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_3_type = None
        else:
            self.drawing_element_3_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_3 = None
        else:
            self.color_for_drawing_element_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_4_type = None
        else:
            self.drawing_element_4_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_4 = None
        else:
            self.color_for_drawing_element_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_5_type = None
        else:
            self.drawing_element_5_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_5 = None
        else:
            self.color_for_drawing_element_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_6_type = None
        else:
            self.drawing_element_6_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_6 = None
        else:
            self.color_for_drawing_element_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_7_type = None
        else:
            self.drawing_element_7_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_7 = None
        else:
            self.color_for_drawing_element_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_8_type = None
        else:
            self.drawing_element_8_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_8 = None
        else:
            self.color_for_drawing_element_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_9_type = None
        else:
            self.drawing_element_9_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_9 = None
        else:
            self.color_for_drawing_element_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_10_type = None
        else:
            self.drawing_element_10_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_10 = None
        else:
            self.color_for_drawing_element_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_11_type = None
        else:
            self.drawing_element_11_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_11 = None
        else:
            self.color_for_drawing_element_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_12_type = None
        else:
            self.drawing_element_12_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_12 = None
        else:
            self.color_for_drawing_element_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_13_type = None
        else:
            self.drawing_element_13_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_13 = None
        else:
            self.color_for_drawing_element_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_14_type = None
        else:
            self.drawing_element_14_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_14 = None
        else:
            self.color_for_drawing_element_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.drawing_element_15_type = None
        else:
            self.drawing_element_15_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.color_for_drawing_element_15 = None
        else:
            self.color_for_drawing_element_15 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        choose a name or use one of the DataSets

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def drawing_element_1_type(self):
        """Get drawing_element_1_type

        Returns:
            str: the value of `drawing_element_1_type` or None if not set
        """
        return self._data["Drawing Element 1 Type"]

    @drawing_element_1_type.setter
    def drawing_element_1_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_1_type`

        Args:
            value (str): value for IDD Field `drawing_element_1_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_1_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_1_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_1_type`'.format(value))

        self._data["Drawing Element 1 Type"] = value

    @property
    def color_for_drawing_element_1(self):
        """Get color_for_drawing_element_1

        Returns:
            int: the value of `color_for_drawing_element_1` or None if not set
        """
        return self._data["Color for Drawing Element 1"]

    @color_for_drawing_element_1.setter
    def color_for_drawing_element_1(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_1`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_1`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_1`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_1`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_1`')

        self._data["Color for Drawing Element 1"] = value

    @property
    def drawing_element_2_type(self):
        """Get drawing_element_2_type

        Returns:
            str: the value of `drawing_element_2_type` or None if not set
        """
        return self._data["Drawing Element 2 Type"]

    @drawing_element_2_type.setter
    def drawing_element_2_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_2_type`

        Args:
            value (str): value for IDD Field `drawing_element_2_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_2_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_2_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_2_type`'.format(value))

        self._data["Drawing Element 2 Type"] = value

    @property
    def color_for_drawing_element_2(self):
        """Get color_for_drawing_element_2

        Returns:
            int: the value of `color_for_drawing_element_2` or None if not set
        """
        return self._data["Color for Drawing Element 2"]

    @color_for_drawing_element_2.setter
    def color_for_drawing_element_2(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_2`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_2`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_2`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_2`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_2`')

        self._data["Color for Drawing Element 2"] = value

    @property
    def drawing_element_3_type(self):
        """Get drawing_element_3_type

        Returns:
            str: the value of `drawing_element_3_type` or None if not set
        """
        return self._data["Drawing Element 3 Type"]

    @drawing_element_3_type.setter
    def drawing_element_3_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_3_type`

        Args:
            value (str): value for IDD Field `drawing_element_3_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_3_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_3_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_3_type`'.format(value))

        self._data["Drawing Element 3 Type"] = value

    @property
    def color_for_drawing_element_3(self):
        """Get color_for_drawing_element_3

        Returns:
            int: the value of `color_for_drawing_element_3` or None if not set
        """
        return self._data["Color for Drawing Element 3"]

    @color_for_drawing_element_3.setter
    def color_for_drawing_element_3(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_3`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_3`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_3`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_3`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_3`')

        self._data["Color for Drawing Element 3"] = value

    @property
    def drawing_element_4_type(self):
        """Get drawing_element_4_type

        Returns:
            str: the value of `drawing_element_4_type` or None if not set
        """
        return self._data["Drawing Element 4 Type"]

    @drawing_element_4_type.setter
    def drawing_element_4_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_4_type`

        Args:
            value (str): value for IDD Field `drawing_element_4_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_4_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_4_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_4_type`'.format(value))

        self._data["Drawing Element 4 Type"] = value

    @property
    def color_for_drawing_element_4(self):
        """Get color_for_drawing_element_4

        Returns:
            int: the value of `color_for_drawing_element_4` or None if not set
        """
        return self._data["Color for Drawing Element 4"]

    @color_for_drawing_element_4.setter
    def color_for_drawing_element_4(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_4`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_4`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_4`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_4`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_4`')

        self._data["Color for Drawing Element 4"] = value

    @property
    def drawing_element_5_type(self):
        """Get drawing_element_5_type

        Returns:
            str: the value of `drawing_element_5_type` or None if not set
        """
        return self._data["Drawing Element 5 Type"]

    @drawing_element_5_type.setter
    def drawing_element_5_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_5_type`

        Args:
            value (str): value for IDD Field `drawing_element_5_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_5_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_5_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_5_type`'.format(value))

        self._data["Drawing Element 5 Type"] = value

    @property
    def color_for_drawing_element_5(self):
        """Get color_for_drawing_element_5

        Returns:
            int: the value of `color_for_drawing_element_5` or None if not set
        """
        return self._data["Color for Drawing Element 5"]

    @color_for_drawing_element_5.setter
    def color_for_drawing_element_5(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_5`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_5`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_5`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_5`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_5`')

        self._data["Color for Drawing Element 5"] = value

    @property
    def drawing_element_6_type(self):
        """Get drawing_element_6_type

        Returns:
            str: the value of `drawing_element_6_type` or None if not set
        """
        return self._data["Drawing Element 6 Type"]

    @drawing_element_6_type.setter
    def drawing_element_6_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_6_type`

        Args:
            value (str): value for IDD Field `drawing_element_6_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_6_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_6_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_6_type`'.format(value))

        self._data["Drawing Element 6 Type"] = value

    @property
    def color_for_drawing_element_6(self):
        """Get color_for_drawing_element_6

        Returns:
            int: the value of `color_for_drawing_element_6` or None if not set
        """
        return self._data["Color for Drawing Element 6"]

    @color_for_drawing_element_6.setter
    def color_for_drawing_element_6(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_6`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_6`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_6`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_6`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_6`')

        self._data["Color for Drawing Element 6"] = value

    @property
    def drawing_element_7_type(self):
        """Get drawing_element_7_type

        Returns:
            str: the value of `drawing_element_7_type` or None if not set
        """
        return self._data["Drawing Element 7 Type"]

    @drawing_element_7_type.setter
    def drawing_element_7_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_7_type`

        Args:
            value (str): value for IDD Field `drawing_element_7_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_7_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_7_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_7_type`'.format(value))

        self._data["Drawing Element 7 Type"] = value

    @property
    def color_for_drawing_element_7(self):
        """Get color_for_drawing_element_7

        Returns:
            int: the value of `color_for_drawing_element_7` or None if not set
        """
        return self._data["Color for Drawing Element 7"]

    @color_for_drawing_element_7.setter
    def color_for_drawing_element_7(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_7`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_7`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_7`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_7`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_7`')

        self._data["Color for Drawing Element 7"] = value

    @property
    def drawing_element_8_type(self):
        """Get drawing_element_8_type

        Returns:
            str: the value of `drawing_element_8_type` or None if not set
        """
        return self._data["Drawing Element 8 Type"]

    @drawing_element_8_type.setter
    def drawing_element_8_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_8_type`

        Args:
            value (str): value for IDD Field `drawing_element_8_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_8_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_8_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_8_type`'.format(value))

        self._data["Drawing Element 8 Type"] = value

    @property
    def color_for_drawing_element_8(self):
        """Get color_for_drawing_element_8

        Returns:
            int: the value of `color_for_drawing_element_8` or None if not set
        """
        return self._data["Color for Drawing Element 8"]

    @color_for_drawing_element_8.setter
    def color_for_drawing_element_8(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_8`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_8`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_8`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_8`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_8`')

        self._data["Color for Drawing Element 8"] = value

    @property
    def drawing_element_9_type(self):
        """Get drawing_element_9_type

        Returns:
            str: the value of `drawing_element_9_type` or None if not set
        """
        return self._data["Drawing Element 9 Type"]

    @drawing_element_9_type.setter
    def drawing_element_9_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_9_type`

        Args:
            value (str): value for IDD Field `drawing_element_9_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_9_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_9_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_9_type`'.format(value))

        self._data["Drawing Element 9 Type"] = value

    @property
    def color_for_drawing_element_9(self):
        """Get color_for_drawing_element_9

        Returns:
            int: the value of `color_for_drawing_element_9` or None if not set
        """
        return self._data["Color for Drawing Element 9"]

    @color_for_drawing_element_9.setter
    def color_for_drawing_element_9(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_9`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_9`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_9`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_9`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_9`')

        self._data["Color for Drawing Element 9"] = value

    @property
    def drawing_element_10_type(self):
        """Get drawing_element_10_type

        Returns:
            str: the value of `drawing_element_10_type` or None if not set
        """
        return self._data["Drawing Element 10 Type"]

    @drawing_element_10_type.setter
    def drawing_element_10_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_10_type`

        Args:
            value (str): value for IDD Field `drawing_element_10_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_10_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_10_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_10_type`'.format(value))

        self._data["Drawing Element 10 Type"] = value

    @property
    def color_for_drawing_element_10(self):
        """Get color_for_drawing_element_10

        Returns:
            int: the value of `color_for_drawing_element_10` or None if not set
        """
        return self._data["Color for Drawing Element 10"]

    @color_for_drawing_element_10.setter
    def color_for_drawing_element_10(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_10`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_10`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_10`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_10`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_10`')

        self._data["Color for Drawing Element 10"] = value

    @property
    def drawing_element_11_type(self):
        """Get drawing_element_11_type

        Returns:
            str: the value of `drawing_element_11_type` or None if not set
        """
        return self._data["Drawing Element 11 Type"]

    @drawing_element_11_type.setter
    def drawing_element_11_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_11_type`

        Args:
            value (str): value for IDD Field `drawing_element_11_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_11_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_11_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_11_type`'.format(value))

        self._data["Drawing Element 11 Type"] = value

    @property
    def color_for_drawing_element_11(self):
        """Get color_for_drawing_element_11

        Returns:
            int: the value of `color_for_drawing_element_11` or None if not set
        """
        return self._data["Color for Drawing Element 11"]

    @color_for_drawing_element_11.setter
    def color_for_drawing_element_11(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_11`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_11`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_11`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_11`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_11`')

        self._data["Color for Drawing Element 11"] = value

    @property
    def drawing_element_12_type(self):
        """Get drawing_element_12_type

        Returns:
            str: the value of `drawing_element_12_type` or None if not set
        """
        return self._data["Drawing Element 12 Type"]

    @drawing_element_12_type.setter
    def drawing_element_12_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_12_type`

        Args:
            value (str): value for IDD Field `drawing_element_12_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_12_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_12_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_12_type`'.format(value))

        self._data["Drawing Element 12 Type"] = value

    @property
    def color_for_drawing_element_12(self):
        """Get color_for_drawing_element_12

        Returns:
            int: the value of `color_for_drawing_element_12` or None if not set
        """
        return self._data["Color for Drawing Element 12"]

    @color_for_drawing_element_12.setter
    def color_for_drawing_element_12(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_12`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_12`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_12`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_12`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_12`')

        self._data["Color for Drawing Element 12"] = value

    @property
    def drawing_element_13_type(self):
        """Get drawing_element_13_type

        Returns:
            str: the value of `drawing_element_13_type` or None if not set
        """
        return self._data["Drawing Element 13 Type"]

    @drawing_element_13_type.setter
    def drawing_element_13_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_13_type`

        Args:
            value (str): value for IDD Field `drawing_element_13_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_13_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_13_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_13_type`'.format(value))

        self._data["Drawing Element 13 Type"] = value

    @property
    def color_for_drawing_element_13(self):
        """Get color_for_drawing_element_13

        Returns:
            int: the value of `color_for_drawing_element_13` or None if not set
        """
        return self._data["Color for Drawing Element 13"]

    @color_for_drawing_element_13.setter
    def color_for_drawing_element_13(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_13`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_13`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_13`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_13`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_13`')

        self._data["Color for Drawing Element 13"] = value

    @property
    def drawing_element_14_type(self):
        """Get drawing_element_14_type

        Returns:
            str: the value of `drawing_element_14_type` or None if not set
        """
        return self._data["Drawing Element 14 Type"]

    @drawing_element_14_type.setter
    def drawing_element_14_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_14_type`

        Args:
            value (str): value for IDD Field `drawing_element_14_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_14_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_14_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_14_type`'.format(value))

        self._data["Drawing Element 14 Type"] = value

    @property
    def color_for_drawing_element_14(self):
        """Get color_for_drawing_element_14

        Returns:
            int: the value of `color_for_drawing_element_14` or None if not set
        """
        return self._data["Color for Drawing Element 14"]

    @color_for_drawing_element_14.setter
    def color_for_drawing_element_14(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_14`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_14`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_14`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_14`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_14`')

        self._data["Color for Drawing Element 14"] = value

    @property
    def drawing_element_15_type(self):
        """Get drawing_element_15_type

        Returns:
            str: the value of `drawing_element_15_type` or None if not set
        """
        return self._data["Drawing Element 15 Type"]

    @drawing_element_15_type.setter
    def drawing_element_15_type(self, value=None):
        """  Corresponds to IDD Field `drawing_element_15_type`

        Args:
            value (str): value for IDD Field `drawing_element_15_type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_15_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_15_type`')
            vals = set()
            vals.add("Text")
            vals.add("Walls")
            vals.add("Windows")
            vals.add("GlassDoors")
            vals.add("Doors")
            vals.add("Roofs")
            vals.add("Floors")
            vals.add("DetachedBuildingShades")
            vals.add("DetachedFixedShades")
            vals.add("AttachedBuildingShades")
            vals.add("Photovoltaics")
            vals.add("TubularDaylightDomes")
            vals.add("TubularDaylightDiffusers")
            vals.add("DaylightReferencePoint1")
            vals.add("DaylightReferencePoint2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `drawing_element_15_type`'.format(value))

        self._data["Drawing Element 15 Type"] = value

    @property
    def color_for_drawing_element_15(self):
        """Get color_for_drawing_element_15

        Returns:
            int: the value of `color_for_drawing_element_15` or None if not set
        """
        return self._data["Color for Drawing Element 15"]

    @color_for_drawing_element_15.setter
    def color_for_drawing_element_15(self, value=None):
        """  Corresponds to IDD Field `color_for_drawing_element_15`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `color_for_drawing_element_15`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_15`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_15`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_15`')

        self._data["Color for Drawing Element 15"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.drawing_element_1_type))
        out.append(self._to_str(self.color_for_drawing_element_1))
        out.append(self._to_str(self.drawing_element_2_type))
        out.append(self._to_str(self.color_for_drawing_element_2))
        out.append(self._to_str(self.drawing_element_3_type))
        out.append(self._to_str(self.color_for_drawing_element_3))
        out.append(self._to_str(self.drawing_element_4_type))
        out.append(self._to_str(self.color_for_drawing_element_4))
        out.append(self._to_str(self.drawing_element_5_type))
        out.append(self._to_str(self.color_for_drawing_element_5))
        out.append(self._to_str(self.drawing_element_6_type))
        out.append(self._to_str(self.color_for_drawing_element_6))
        out.append(self._to_str(self.drawing_element_7_type))
        out.append(self._to_str(self.color_for_drawing_element_7))
        out.append(self._to_str(self.drawing_element_8_type))
        out.append(self._to_str(self.color_for_drawing_element_8))
        out.append(self._to_str(self.drawing_element_9_type))
        out.append(self._to_str(self.color_for_drawing_element_9))
        out.append(self._to_str(self.drawing_element_10_type))
        out.append(self._to_str(self.color_for_drawing_element_10))
        out.append(self._to_str(self.drawing_element_11_type))
        out.append(self._to_str(self.color_for_drawing_element_11))
        out.append(self._to_str(self.drawing_element_12_type))
        out.append(self._to_str(self.color_for_drawing_element_12))
        out.append(self._to_str(self.drawing_element_13_type))
        out.append(self._to_str(self.color_for_drawing_element_13))
        out.append(self._to_str(self.drawing_element_14_type))
        out.append(self._to_str(self.color_for_drawing_element_14))
        out.append(self._to_str(self.drawing_element_15_type))
        out.append(self._to_str(self.color_for_drawing_element_15))
        return ",".join(out)

class OutputTableSummaryReports(object):
    """ Corresponds to IDD object `Output:Table:SummaryReports`
        This object allows the user to call report types that are predefined and will appear with the
        other tabular reports.  These predefined reports are sensitive to the OutputControl:Table:Style object
        and appear in the same files as the tabular reports.  The entries for this object is a list
        of the predefined reports that should appear in the tabular report output file.
        There should be as many fields (A) in this object as there are keys in the following (minus
        AllSummary+AllMonthly+AllSummaryAndMonthly)
    
    """
    internal_name = "Output:Table:SummaryReports"
    field_count = 83
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Table:SummaryReports`
        """
        self._data = OrderedDict()
        self._data["Report 1 Name"] = None
        self._data["Report 2 Name"] = None
        self._data["Report 3 Name"] = None
        self._data["Report 4 Name"] = None
        self._data["Report 5 Name"] = None
        self._data["Report 6 Name"] = None
        self._data["Report 7 Name"] = None
        self._data["Report 8 Name"] = None
        self._data["Report 9 Name"] = None
        self._data["Report 10 Name"] = None
        self._data["Report 11 Name"] = None
        self._data["Report 12 Name"] = None
        self._data["Report 13 Name"] = None
        self._data["Report 14 Name"] = None
        self._data["Report 15 Name"] = None
        self._data["Report 16 Name"] = None
        self._data["Report 17 Name"] = None
        self._data["Report 18 Name"] = None
        self._data["Report 19 Name"] = None
        self._data["Report 20 Name"] = None
        self._data["Report 21 Name"] = None
        self._data["Report 22 Name"] = None
        self._data["Report 23 Name"] = None
        self._data["Report 24 Name"] = None
        self._data["Report 25 Name"] = None
        self._data["Report 26 Name"] = None
        self._data["Report 27 Name"] = None
        self._data["Report 28 Name"] = None
        self._data["Report 29 Name"] = None
        self._data["Report 30 Name"] = None
        self._data["Report 31 Name"] = None
        self._data["Report 32 Name"] = None
        self._data["Report 33 Name"] = None
        self._data["Report 34 Name"] = None
        self._data["Report 35 Name"] = None
        self._data["Report 36 Name"] = None
        self._data["Report 37 Name"] = None
        self._data["Report 38 Name"] = None
        self._data["Report 39 Name"] = None
        self._data["Report 40 Name"] = None
        self._data["Report 41 Name"] = None
        self._data["Report 42 Name"] = None
        self._data["Report 43 Name"] = None
        self._data["Report 44 Name"] = None
        self._data["Report 45 Name"] = None
        self._data["Report 46 Name"] = None
        self._data["Report 47 Name"] = None
        self._data["Report 48 Name"] = None
        self._data["Report 49 Name"] = None
        self._data["Report 50 Name"] = None
        self._data["Report 51 Name"] = None
        self._data["Report 52 Name"] = None
        self._data["Report 53 Name"] = None
        self._data["Report 54 Name"] = None
        self._data["Report 55 Name"] = None
        self._data["Report 56 Name"] = None
        self._data["Report 57 Name"] = None
        self._data["Report 58 Name"] = None
        self._data["Report 59 Name"] = None
        self._data["Report 60 Name"] = None
        self._data["Report 61 Name"] = None
        self._data["Report 62 Name"] = None
        self._data["Report 63 Name"] = None
        self._data["Report 64 Name"] = None
        self._data["Report 65 Name"] = None
        self._data["Report 66 Name"] = None
        self._data["Report 67 Name"] = None
        self._data["Report 68 Name"] = None
        self._data["Report 69 Name"] = None
        self._data["Report 70 Name"] = None
        self._data["Report 71 Name"] = None
        self._data["Report 72 Name"] = None
        self._data["Report 73 Name"] = None
        self._data["Report 74 Name"] = None
        self._data["Report 75 Name"] = None
        self._data["Report 76 Name"] = None
        self._data["Report 77 Name"] = None
        self._data["Report 78 Name"] = None
        self._data["Report 79 Name"] = None
        self._data["Report 80 Name"] = None
        self._data["Report 81 Name"] = None
        self._data["Report 82 Name"] = None
        self._data["Report 83 Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_1_name = None
        else:
            self.report_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_2_name = None
        else:
            self.report_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_3_name = None
        else:
            self.report_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_4_name = None
        else:
            self.report_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_5_name = None
        else:
            self.report_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_6_name = None
        else:
            self.report_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_7_name = None
        else:
            self.report_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_8_name = None
        else:
            self.report_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_9_name = None
        else:
            self.report_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_10_name = None
        else:
            self.report_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_11_name = None
        else:
            self.report_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_12_name = None
        else:
            self.report_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_13_name = None
        else:
            self.report_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_14_name = None
        else:
            self.report_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_15_name = None
        else:
            self.report_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_16_name = None
        else:
            self.report_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_17_name = None
        else:
            self.report_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_18_name = None
        else:
            self.report_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_19_name = None
        else:
            self.report_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_20_name = None
        else:
            self.report_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_21_name = None
        else:
            self.report_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_22_name = None
        else:
            self.report_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_23_name = None
        else:
            self.report_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_24_name = None
        else:
            self.report_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_25_name = None
        else:
            self.report_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_26_name = None
        else:
            self.report_26_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_27_name = None
        else:
            self.report_27_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_28_name = None
        else:
            self.report_28_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_29_name = None
        else:
            self.report_29_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_30_name = None
        else:
            self.report_30_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_31_name = None
        else:
            self.report_31_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_32_name = None
        else:
            self.report_32_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_33_name = None
        else:
            self.report_33_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_34_name = None
        else:
            self.report_34_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_35_name = None
        else:
            self.report_35_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_36_name = None
        else:
            self.report_36_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_37_name = None
        else:
            self.report_37_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_38_name = None
        else:
            self.report_38_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_39_name = None
        else:
            self.report_39_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_40_name = None
        else:
            self.report_40_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_41_name = None
        else:
            self.report_41_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_42_name = None
        else:
            self.report_42_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_43_name = None
        else:
            self.report_43_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_44_name = None
        else:
            self.report_44_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_45_name = None
        else:
            self.report_45_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_46_name = None
        else:
            self.report_46_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_47_name = None
        else:
            self.report_47_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_48_name = None
        else:
            self.report_48_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_49_name = None
        else:
            self.report_49_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_50_name = None
        else:
            self.report_50_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_51_name = None
        else:
            self.report_51_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_52_name = None
        else:
            self.report_52_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_53_name = None
        else:
            self.report_53_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_54_name = None
        else:
            self.report_54_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_55_name = None
        else:
            self.report_55_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_56_name = None
        else:
            self.report_56_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_57_name = None
        else:
            self.report_57_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_58_name = None
        else:
            self.report_58_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_59_name = None
        else:
            self.report_59_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_60_name = None
        else:
            self.report_60_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_61_name = None
        else:
            self.report_61_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_62_name = None
        else:
            self.report_62_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_63_name = None
        else:
            self.report_63_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_64_name = None
        else:
            self.report_64_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_65_name = None
        else:
            self.report_65_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_66_name = None
        else:
            self.report_66_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_67_name = None
        else:
            self.report_67_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_68_name = None
        else:
            self.report_68_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_69_name = None
        else:
            self.report_69_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_70_name = None
        else:
            self.report_70_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_71_name = None
        else:
            self.report_71_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_72_name = None
        else:
            self.report_72_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_73_name = None
        else:
            self.report_73_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_74_name = None
        else:
            self.report_74_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_75_name = None
        else:
            self.report_75_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_76_name = None
        else:
            self.report_76_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_77_name = None
        else:
            self.report_77_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_78_name = None
        else:
            self.report_78_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_79_name = None
        else:
            self.report_79_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_80_name = None
        else:
            self.report_80_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_81_name = None
        else:
            self.report_81_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_82_name = None
        else:
            self.report_82_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_83_name = None
        else:
            self.report_83_name = vals[i]
        i += 1

    @property
    def report_1_name(self):
        """Get report_1_name

        Returns:
            str: the value of `report_1_name` or None if not set
        """
        return self._data["Report 1 Name"]

    @report_1_name.setter
    def report_1_name(self, value=None):
        """  Corresponds to IDD Field `report_1_name`

        Args:
            value (str): value for IDD Field `report_1_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_1_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_1_name`'.format(value))

        self._data["Report 1 Name"] = value

    @property
    def report_2_name(self):
        """Get report_2_name

        Returns:
            str: the value of `report_2_name` or None if not set
        """
        return self._data["Report 2 Name"]

    @report_2_name.setter
    def report_2_name(self, value=None):
        """  Corresponds to IDD Field `report_2_name`

        Args:
            value (str): value for IDD Field `report_2_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_2_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_2_name`'.format(value))

        self._data["Report 2 Name"] = value

    @property
    def report_3_name(self):
        """Get report_3_name

        Returns:
            str: the value of `report_3_name` or None if not set
        """
        return self._data["Report 3 Name"]

    @report_3_name.setter
    def report_3_name(self, value=None):
        """  Corresponds to IDD Field `report_3_name`

        Args:
            value (str): value for IDD Field `report_3_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_3_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_3_name`'.format(value))

        self._data["Report 3 Name"] = value

    @property
    def report_4_name(self):
        """Get report_4_name

        Returns:
            str: the value of `report_4_name` or None if not set
        """
        return self._data["Report 4 Name"]

    @report_4_name.setter
    def report_4_name(self, value=None):
        """  Corresponds to IDD Field `report_4_name`

        Args:
            value (str): value for IDD Field `report_4_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_4_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_4_name`'.format(value))

        self._data["Report 4 Name"] = value

    @property
    def report_5_name(self):
        """Get report_5_name

        Returns:
            str: the value of `report_5_name` or None if not set
        """
        return self._data["Report 5 Name"]

    @report_5_name.setter
    def report_5_name(self, value=None):
        """  Corresponds to IDD Field `report_5_name`

        Args:
            value (str): value for IDD Field `report_5_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_5_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_5_name`'.format(value))

        self._data["Report 5 Name"] = value

    @property
    def report_6_name(self):
        """Get report_6_name

        Returns:
            str: the value of `report_6_name` or None if not set
        """
        return self._data["Report 6 Name"]

    @report_6_name.setter
    def report_6_name(self, value=None):
        """  Corresponds to IDD Field `report_6_name`

        Args:
            value (str): value for IDD Field `report_6_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_6_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_6_name`'.format(value))

        self._data["Report 6 Name"] = value

    @property
    def report_7_name(self):
        """Get report_7_name

        Returns:
            str: the value of `report_7_name` or None if not set
        """
        return self._data["Report 7 Name"]

    @report_7_name.setter
    def report_7_name(self, value=None):
        """  Corresponds to IDD Field `report_7_name`

        Args:
            value (str): value for IDD Field `report_7_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_7_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_7_name`'.format(value))

        self._data["Report 7 Name"] = value

    @property
    def report_8_name(self):
        """Get report_8_name

        Returns:
            str: the value of `report_8_name` or None if not set
        """
        return self._data["Report 8 Name"]

    @report_8_name.setter
    def report_8_name(self, value=None):
        """  Corresponds to IDD Field `report_8_name`

        Args:
            value (str): value for IDD Field `report_8_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_8_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_8_name`'.format(value))

        self._data["Report 8 Name"] = value

    @property
    def report_9_name(self):
        """Get report_9_name

        Returns:
            str: the value of `report_9_name` or None if not set
        """
        return self._data["Report 9 Name"]

    @report_9_name.setter
    def report_9_name(self, value=None):
        """  Corresponds to IDD Field `report_9_name`

        Args:
            value (str): value for IDD Field `report_9_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_9_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_9_name`'.format(value))

        self._data["Report 9 Name"] = value

    @property
    def report_10_name(self):
        """Get report_10_name

        Returns:
            str: the value of `report_10_name` or None if not set
        """
        return self._data["Report 10 Name"]

    @report_10_name.setter
    def report_10_name(self, value=None):
        """  Corresponds to IDD Field `report_10_name`

        Args:
            value (str): value for IDD Field `report_10_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_10_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_10_name`'.format(value))

        self._data["Report 10 Name"] = value

    @property
    def report_11_name(self):
        """Get report_11_name

        Returns:
            str: the value of `report_11_name` or None if not set
        """
        return self._data["Report 11 Name"]

    @report_11_name.setter
    def report_11_name(self, value=None):
        """  Corresponds to IDD Field `report_11_name`

        Args:
            value (str): value for IDD Field `report_11_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_11_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_11_name`'.format(value))

        self._data["Report 11 Name"] = value

    @property
    def report_12_name(self):
        """Get report_12_name

        Returns:
            str: the value of `report_12_name` or None if not set
        """
        return self._data["Report 12 Name"]

    @report_12_name.setter
    def report_12_name(self, value=None):
        """  Corresponds to IDD Field `report_12_name`

        Args:
            value (str): value for IDD Field `report_12_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_12_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_12_name`'.format(value))

        self._data["Report 12 Name"] = value

    @property
    def report_13_name(self):
        """Get report_13_name

        Returns:
            str: the value of `report_13_name` or None if not set
        """
        return self._data["Report 13 Name"]

    @report_13_name.setter
    def report_13_name(self, value=None):
        """  Corresponds to IDD Field `report_13_name`

        Args:
            value (str): value for IDD Field `report_13_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_13_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_13_name`'.format(value))

        self._data["Report 13 Name"] = value

    @property
    def report_14_name(self):
        """Get report_14_name

        Returns:
            str: the value of `report_14_name` or None if not set
        """
        return self._data["Report 14 Name"]

    @report_14_name.setter
    def report_14_name(self, value=None):
        """  Corresponds to IDD Field `report_14_name`

        Args:
            value (str): value for IDD Field `report_14_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_14_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_14_name`'.format(value))

        self._data["Report 14 Name"] = value

    @property
    def report_15_name(self):
        """Get report_15_name

        Returns:
            str: the value of `report_15_name` or None if not set
        """
        return self._data["Report 15 Name"]

    @report_15_name.setter
    def report_15_name(self, value=None):
        """  Corresponds to IDD Field `report_15_name`

        Args:
            value (str): value for IDD Field `report_15_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_15_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_15_name`'.format(value))

        self._data["Report 15 Name"] = value

    @property
    def report_16_name(self):
        """Get report_16_name

        Returns:
            str: the value of `report_16_name` or None if not set
        """
        return self._data["Report 16 Name"]

    @report_16_name.setter
    def report_16_name(self, value=None):
        """  Corresponds to IDD Field `report_16_name`

        Args:
            value (str): value for IDD Field `report_16_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_16_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_16_name`'.format(value))

        self._data["Report 16 Name"] = value

    @property
    def report_17_name(self):
        """Get report_17_name

        Returns:
            str: the value of `report_17_name` or None if not set
        """
        return self._data["Report 17 Name"]

    @report_17_name.setter
    def report_17_name(self, value=None):
        """  Corresponds to IDD Field `report_17_name`

        Args:
            value (str): value for IDD Field `report_17_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_17_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_17_name`'.format(value))

        self._data["Report 17 Name"] = value

    @property
    def report_18_name(self):
        """Get report_18_name

        Returns:
            str: the value of `report_18_name` or None if not set
        """
        return self._data["Report 18 Name"]

    @report_18_name.setter
    def report_18_name(self, value=None):
        """  Corresponds to IDD Field `report_18_name`

        Args:
            value (str): value for IDD Field `report_18_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_18_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_18_name`'.format(value))

        self._data["Report 18 Name"] = value

    @property
    def report_19_name(self):
        """Get report_19_name

        Returns:
            str: the value of `report_19_name` or None if not set
        """
        return self._data["Report 19 Name"]

    @report_19_name.setter
    def report_19_name(self, value=None):
        """  Corresponds to IDD Field `report_19_name`

        Args:
            value (str): value for IDD Field `report_19_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_19_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_19_name`'.format(value))

        self._data["Report 19 Name"] = value

    @property
    def report_20_name(self):
        """Get report_20_name

        Returns:
            str: the value of `report_20_name` or None if not set
        """
        return self._data["Report 20 Name"]

    @report_20_name.setter
    def report_20_name(self, value=None):
        """  Corresponds to IDD Field `report_20_name`

        Args:
            value (str): value for IDD Field `report_20_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_20_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_20_name`'.format(value))

        self._data["Report 20 Name"] = value

    @property
    def report_21_name(self):
        """Get report_21_name

        Returns:
            str: the value of `report_21_name` or None if not set
        """
        return self._data["Report 21 Name"]

    @report_21_name.setter
    def report_21_name(self, value=None):
        """  Corresponds to IDD Field `report_21_name`

        Args:
            value (str): value for IDD Field `report_21_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_21_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_21_name`'.format(value))

        self._data["Report 21 Name"] = value

    @property
    def report_22_name(self):
        """Get report_22_name

        Returns:
            str: the value of `report_22_name` or None if not set
        """
        return self._data["Report 22 Name"]

    @report_22_name.setter
    def report_22_name(self, value=None):
        """  Corresponds to IDD Field `report_22_name`

        Args:
            value (str): value for IDD Field `report_22_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_22_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_22_name`'.format(value))

        self._data["Report 22 Name"] = value

    @property
    def report_23_name(self):
        """Get report_23_name

        Returns:
            str: the value of `report_23_name` or None if not set
        """
        return self._data["Report 23 Name"]

    @report_23_name.setter
    def report_23_name(self, value=None):
        """  Corresponds to IDD Field `report_23_name`

        Args:
            value (str): value for IDD Field `report_23_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_23_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_23_name`'.format(value))

        self._data["Report 23 Name"] = value

    @property
    def report_24_name(self):
        """Get report_24_name

        Returns:
            str: the value of `report_24_name` or None if not set
        """
        return self._data["Report 24 Name"]

    @report_24_name.setter
    def report_24_name(self, value=None):
        """  Corresponds to IDD Field `report_24_name`

        Args:
            value (str): value for IDD Field `report_24_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_24_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_24_name`'.format(value))

        self._data["Report 24 Name"] = value

    @property
    def report_25_name(self):
        """Get report_25_name

        Returns:
            str: the value of `report_25_name` or None if not set
        """
        return self._data["Report 25 Name"]

    @report_25_name.setter
    def report_25_name(self, value=None):
        """  Corresponds to IDD Field `report_25_name`

        Args:
            value (str): value for IDD Field `report_25_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_25_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_25_name`'.format(value))

        self._data["Report 25 Name"] = value

    @property
    def report_26_name(self):
        """Get report_26_name

        Returns:
            str: the value of `report_26_name` or None if not set
        """
        return self._data["Report 26 Name"]

    @report_26_name.setter
    def report_26_name(self, value=None):
        """  Corresponds to IDD Field `report_26_name`

        Args:
            value (str): value for IDD Field `report_26_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_26_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_26_name`'.format(value))

        self._data["Report 26 Name"] = value

    @property
    def report_27_name(self):
        """Get report_27_name

        Returns:
            str: the value of `report_27_name` or None if not set
        """
        return self._data["Report 27 Name"]

    @report_27_name.setter
    def report_27_name(self, value=None):
        """  Corresponds to IDD Field `report_27_name`

        Args:
            value (str): value for IDD Field `report_27_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_27_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_27_name`'.format(value))

        self._data["Report 27 Name"] = value

    @property
    def report_28_name(self):
        """Get report_28_name

        Returns:
            str: the value of `report_28_name` or None if not set
        """
        return self._data["Report 28 Name"]

    @report_28_name.setter
    def report_28_name(self, value=None):
        """  Corresponds to IDD Field `report_28_name`

        Args:
            value (str): value for IDD Field `report_28_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_28_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_28_name`'.format(value))

        self._data["Report 28 Name"] = value

    @property
    def report_29_name(self):
        """Get report_29_name

        Returns:
            str: the value of `report_29_name` or None if not set
        """
        return self._data["Report 29 Name"]

    @report_29_name.setter
    def report_29_name(self, value=None):
        """  Corresponds to IDD Field `report_29_name`

        Args:
            value (str): value for IDD Field `report_29_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_29_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_29_name`'.format(value))

        self._data["Report 29 Name"] = value

    @property
    def report_30_name(self):
        """Get report_30_name

        Returns:
            str: the value of `report_30_name` or None if not set
        """
        return self._data["Report 30 Name"]

    @report_30_name.setter
    def report_30_name(self, value=None):
        """  Corresponds to IDD Field `report_30_name`

        Args:
            value (str): value for IDD Field `report_30_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_30_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_30_name`'.format(value))

        self._data["Report 30 Name"] = value

    @property
    def report_31_name(self):
        """Get report_31_name

        Returns:
            str: the value of `report_31_name` or None if not set
        """
        return self._data["Report 31 Name"]

    @report_31_name.setter
    def report_31_name(self, value=None):
        """  Corresponds to IDD Field `report_31_name`

        Args:
            value (str): value for IDD Field `report_31_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_31_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_31_name`'.format(value))

        self._data["Report 31 Name"] = value

    @property
    def report_32_name(self):
        """Get report_32_name

        Returns:
            str: the value of `report_32_name` or None if not set
        """
        return self._data["Report 32 Name"]

    @report_32_name.setter
    def report_32_name(self, value=None):
        """  Corresponds to IDD Field `report_32_name`

        Args:
            value (str): value for IDD Field `report_32_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_32_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_32_name`'.format(value))

        self._data["Report 32 Name"] = value

    @property
    def report_33_name(self):
        """Get report_33_name

        Returns:
            str: the value of `report_33_name` or None if not set
        """
        return self._data["Report 33 Name"]

    @report_33_name.setter
    def report_33_name(self, value=None):
        """  Corresponds to IDD Field `report_33_name`

        Args:
            value (str): value for IDD Field `report_33_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_33_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_33_name`'.format(value))

        self._data["Report 33 Name"] = value

    @property
    def report_34_name(self):
        """Get report_34_name

        Returns:
            str: the value of `report_34_name` or None if not set
        """
        return self._data["Report 34 Name"]

    @report_34_name.setter
    def report_34_name(self, value=None):
        """  Corresponds to IDD Field `report_34_name`

        Args:
            value (str): value for IDD Field `report_34_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_34_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_34_name`'.format(value))

        self._data["Report 34 Name"] = value

    @property
    def report_35_name(self):
        """Get report_35_name

        Returns:
            str: the value of `report_35_name` or None if not set
        """
        return self._data["Report 35 Name"]

    @report_35_name.setter
    def report_35_name(self, value=None):
        """  Corresponds to IDD Field `report_35_name`

        Args:
            value (str): value for IDD Field `report_35_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_35_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_35_name`'.format(value))

        self._data["Report 35 Name"] = value

    @property
    def report_36_name(self):
        """Get report_36_name

        Returns:
            str: the value of `report_36_name` or None if not set
        """
        return self._data["Report 36 Name"]

    @report_36_name.setter
    def report_36_name(self, value=None):
        """  Corresponds to IDD Field `report_36_name`

        Args:
            value (str): value for IDD Field `report_36_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_36_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_36_name`'.format(value))

        self._data["Report 36 Name"] = value

    @property
    def report_37_name(self):
        """Get report_37_name

        Returns:
            str: the value of `report_37_name` or None if not set
        """
        return self._data["Report 37 Name"]

    @report_37_name.setter
    def report_37_name(self, value=None):
        """  Corresponds to IDD Field `report_37_name`

        Args:
            value (str): value for IDD Field `report_37_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_37_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_37_name`'.format(value))

        self._data["Report 37 Name"] = value

    @property
    def report_38_name(self):
        """Get report_38_name

        Returns:
            str: the value of `report_38_name` or None if not set
        """
        return self._data["Report 38 Name"]

    @report_38_name.setter
    def report_38_name(self, value=None):
        """  Corresponds to IDD Field `report_38_name`

        Args:
            value (str): value for IDD Field `report_38_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_38_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_38_name`'.format(value))

        self._data["Report 38 Name"] = value

    @property
    def report_39_name(self):
        """Get report_39_name

        Returns:
            str: the value of `report_39_name` or None if not set
        """
        return self._data["Report 39 Name"]

    @report_39_name.setter
    def report_39_name(self, value=None):
        """  Corresponds to IDD Field `report_39_name`

        Args:
            value (str): value for IDD Field `report_39_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_39_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_39_name`'.format(value))

        self._data["Report 39 Name"] = value

    @property
    def report_40_name(self):
        """Get report_40_name

        Returns:
            str: the value of `report_40_name` or None if not set
        """
        return self._data["Report 40 Name"]

    @report_40_name.setter
    def report_40_name(self, value=None):
        """  Corresponds to IDD Field `report_40_name`

        Args:
            value (str): value for IDD Field `report_40_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_40_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_40_name`'.format(value))

        self._data["Report 40 Name"] = value

    @property
    def report_41_name(self):
        """Get report_41_name

        Returns:
            str: the value of `report_41_name` or None if not set
        """
        return self._data["Report 41 Name"]

    @report_41_name.setter
    def report_41_name(self, value=None):
        """  Corresponds to IDD Field `report_41_name`

        Args:
            value (str): value for IDD Field `report_41_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_41_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_41_name`'.format(value))

        self._data["Report 41 Name"] = value

    @property
    def report_42_name(self):
        """Get report_42_name

        Returns:
            str: the value of `report_42_name` or None if not set
        """
        return self._data["Report 42 Name"]

    @report_42_name.setter
    def report_42_name(self, value=None):
        """  Corresponds to IDD Field `report_42_name`

        Args:
            value (str): value for IDD Field `report_42_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_42_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_42_name`'.format(value))

        self._data["Report 42 Name"] = value

    @property
    def report_43_name(self):
        """Get report_43_name

        Returns:
            str: the value of `report_43_name` or None if not set
        """
        return self._data["Report 43 Name"]

    @report_43_name.setter
    def report_43_name(self, value=None):
        """  Corresponds to IDD Field `report_43_name`

        Args:
            value (str): value for IDD Field `report_43_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_43_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_43_name`'.format(value))

        self._data["Report 43 Name"] = value

    @property
    def report_44_name(self):
        """Get report_44_name

        Returns:
            str: the value of `report_44_name` or None if not set
        """
        return self._data["Report 44 Name"]

    @report_44_name.setter
    def report_44_name(self, value=None):
        """  Corresponds to IDD Field `report_44_name`

        Args:
            value (str): value for IDD Field `report_44_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_44_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_44_name`'.format(value))

        self._data["Report 44 Name"] = value

    @property
    def report_45_name(self):
        """Get report_45_name

        Returns:
            str: the value of `report_45_name` or None if not set
        """
        return self._data["Report 45 Name"]

    @report_45_name.setter
    def report_45_name(self, value=None):
        """  Corresponds to IDD Field `report_45_name`

        Args:
            value (str): value for IDD Field `report_45_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_45_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_45_name`'.format(value))

        self._data["Report 45 Name"] = value

    @property
    def report_46_name(self):
        """Get report_46_name

        Returns:
            str: the value of `report_46_name` or None if not set
        """
        return self._data["Report 46 Name"]

    @report_46_name.setter
    def report_46_name(self, value=None):
        """  Corresponds to IDD Field `report_46_name`

        Args:
            value (str): value for IDD Field `report_46_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_46_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_46_name`'.format(value))

        self._data["Report 46 Name"] = value

    @property
    def report_47_name(self):
        """Get report_47_name

        Returns:
            str: the value of `report_47_name` or None if not set
        """
        return self._data["Report 47 Name"]

    @report_47_name.setter
    def report_47_name(self, value=None):
        """  Corresponds to IDD Field `report_47_name`

        Args:
            value (str): value for IDD Field `report_47_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_47_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_47_name`'.format(value))

        self._data["Report 47 Name"] = value

    @property
    def report_48_name(self):
        """Get report_48_name

        Returns:
            str: the value of `report_48_name` or None if not set
        """
        return self._data["Report 48 Name"]

    @report_48_name.setter
    def report_48_name(self, value=None):
        """  Corresponds to IDD Field `report_48_name`

        Args:
            value (str): value for IDD Field `report_48_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_48_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_48_name`'.format(value))

        self._data["Report 48 Name"] = value

    @property
    def report_49_name(self):
        """Get report_49_name

        Returns:
            str: the value of `report_49_name` or None if not set
        """
        return self._data["Report 49 Name"]

    @report_49_name.setter
    def report_49_name(self, value=None):
        """  Corresponds to IDD Field `report_49_name`

        Args:
            value (str): value for IDD Field `report_49_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_49_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_49_name`'.format(value))

        self._data["Report 49 Name"] = value

    @property
    def report_50_name(self):
        """Get report_50_name

        Returns:
            str: the value of `report_50_name` or None if not set
        """
        return self._data["Report 50 Name"]

    @report_50_name.setter
    def report_50_name(self, value=None):
        """  Corresponds to IDD Field `report_50_name`

        Args:
            value (str): value for IDD Field `report_50_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_50_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_50_name`'.format(value))

        self._data["Report 50 Name"] = value

    @property
    def report_51_name(self):
        """Get report_51_name

        Returns:
            str: the value of `report_51_name` or None if not set
        """
        return self._data["Report 51 Name"]

    @report_51_name.setter
    def report_51_name(self, value=None):
        """  Corresponds to IDD Field `report_51_name`

        Args:
            value (str): value for IDD Field `report_51_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_51_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_51_name`'.format(value))

        self._data["Report 51 Name"] = value

    @property
    def report_52_name(self):
        """Get report_52_name

        Returns:
            str: the value of `report_52_name` or None if not set
        """
        return self._data["Report 52 Name"]

    @report_52_name.setter
    def report_52_name(self, value=None):
        """  Corresponds to IDD Field `report_52_name`

        Args:
            value (str): value for IDD Field `report_52_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_52_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_52_name`'.format(value))

        self._data["Report 52 Name"] = value

    @property
    def report_53_name(self):
        """Get report_53_name

        Returns:
            str: the value of `report_53_name` or None if not set
        """
        return self._data["Report 53 Name"]

    @report_53_name.setter
    def report_53_name(self, value=None):
        """  Corresponds to IDD Field `report_53_name`

        Args:
            value (str): value for IDD Field `report_53_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_53_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_53_name`'.format(value))

        self._data["Report 53 Name"] = value

    @property
    def report_54_name(self):
        """Get report_54_name

        Returns:
            str: the value of `report_54_name` or None if not set
        """
        return self._data["Report 54 Name"]

    @report_54_name.setter
    def report_54_name(self, value=None):
        """  Corresponds to IDD Field `report_54_name`

        Args:
            value (str): value for IDD Field `report_54_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_54_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_54_name`'.format(value))

        self._data["Report 54 Name"] = value

    @property
    def report_55_name(self):
        """Get report_55_name

        Returns:
            str: the value of `report_55_name` or None if not set
        """
        return self._data["Report 55 Name"]

    @report_55_name.setter
    def report_55_name(self, value=None):
        """  Corresponds to IDD Field `report_55_name`

        Args:
            value (str): value for IDD Field `report_55_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_55_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_55_name`'.format(value))

        self._data["Report 55 Name"] = value

    @property
    def report_56_name(self):
        """Get report_56_name

        Returns:
            str: the value of `report_56_name` or None if not set
        """
        return self._data["Report 56 Name"]

    @report_56_name.setter
    def report_56_name(self, value=None):
        """  Corresponds to IDD Field `report_56_name`

        Args:
            value (str): value for IDD Field `report_56_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_56_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_56_name`'.format(value))

        self._data["Report 56 Name"] = value

    @property
    def report_57_name(self):
        """Get report_57_name

        Returns:
            str: the value of `report_57_name` or None if not set
        """
        return self._data["Report 57 Name"]

    @report_57_name.setter
    def report_57_name(self, value=None):
        """  Corresponds to IDD Field `report_57_name`

        Args:
            value (str): value for IDD Field `report_57_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_57_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_57_name`'.format(value))

        self._data["Report 57 Name"] = value

    @property
    def report_58_name(self):
        """Get report_58_name

        Returns:
            str: the value of `report_58_name` or None if not set
        """
        return self._data["Report 58 Name"]

    @report_58_name.setter
    def report_58_name(self, value=None):
        """  Corresponds to IDD Field `report_58_name`

        Args:
            value (str): value for IDD Field `report_58_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_58_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_58_name`'.format(value))

        self._data["Report 58 Name"] = value

    @property
    def report_59_name(self):
        """Get report_59_name

        Returns:
            str: the value of `report_59_name` or None if not set
        """
        return self._data["Report 59 Name"]

    @report_59_name.setter
    def report_59_name(self, value=None):
        """  Corresponds to IDD Field `report_59_name`

        Args:
            value (str): value for IDD Field `report_59_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_59_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_59_name`'.format(value))

        self._data["Report 59 Name"] = value

    @property
    def report_60_name(self):
        """Get report_60_name

        Returns:
            str: the value of `report_60_name` or None if not set
        """
        return self._data["Report 60 Name"]

    @report_60_name.setter
    def report_60_name(self, value=None):
        """  Corresponds to IDD Field `report_60_name`

        Args:
            value (str): value for IDD Field `report_60_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_60_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_60_name`'.format(value))

        self._data["Report 60 Name"] = value

    @property
    def report_61_name(self):
        """Get report_61_name

        Returns:
            str: the value of `report_61_name` or None if not set
        """
        return self._data["Report 61 Name"]

    @report_61_name.setter
    def report_61_name(self, value=None):
        """  Corresponds to IDD Field `report_61_name`

        Args:
            value (str): value for IDD Field `report_61_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_61_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_61_name`'.format(value))

        self._data["Report 61 Name"] = value

    @property
    def report_62_name(self):
        """Get report_62_name

        Returns:
            str: the value of `report_62_name` or None if not set
        """
        return self._data["Report 62 Name"]

    @report_62_name.setter
    def report_62_name(self, value=None):
        """  Corresponds to IDD Field `report_62_name`

        Args:
            value (str): value for IDD Field `report_62_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_62_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_62_name`'.format(value))

        self._data["Report 62 Name"] = value

    @property
    def report_63_name(self):
        """Get report_63_name

        Returns:
            str: the value of `report_63_name` or None if not set
        """
        return self._data["Report 63 Name"]

    @report_63_name.setter
    def report_63_name(self, value=None):
        """  Corresponds to IDD Field `report_63_name`

        Args:
            value (str): value for IDD Field `report_63_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_63_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_63_name`'.format(value))

        self._data["Report 63 Name"] = value

    @property
    def report_64_name(self):
        """Get report_64_name

        Returns:
            str: the value of `report_64_name` or None if not set
        """
        return self._data["Report 64 Name"]

    @report_64_name.setter
    def report_64_name(self, value=None):
        """  Corresponds to IDD Field `report_64_name`

        Args:
            value (str): value for IDD Field `report_64_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_64_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_64_name`'.format(value))

        self._data["Report 64 Name"] = value

    @property
    def report_65_name(self):
        """Get report_65_name

        Returns:
            str: the value of `report_65_name` or None if not set
        """
        return self._data["Report 65 Name"]

    @report_65_name.setter
    def report_65_name(self, value=None):
        """  Corresponds to IDD Field `report_65_name`

        Args:
            value (str): value for IDD Field `report_65_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_65_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_65_name`'.format(value))

        self._data["Report 65 Name"] = value

    @property
    def report_66_name(self):
        """Get report_66_name

        Returns:
            str: the value of `report_66_name` or None if not set
        """
        return self._data["Report 66 Name"]

    @report_66_name.setter
    def report_66_name(self, value=None):
        """  Corresponds to IDD Field `report_66_name`

        Args:
            value (str): value for IDD Field `report_66_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_66_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_66_name`'.format(value))

        self._data["Report 66 Name"] = value

    @property
    def report_67_name(self):
        """Get report_67_name

        Returns:
            str: the value of `report_67_name` or None if not set
        """
        return self._data["Report 67 Name"]

    @report_67_name.setter
    def report_67_name(self, value=None):
        """  Corresponds to IDD Field `report_67_name`

        Args:
            value (str): value for IDD Field `report_67_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_67_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_67_name`'.format(value))

        self._data["Report 67 Name"] = value

    @property
    def report_68_name(self):
        """Get report_68_name

        Returns:
            str: the value of `report_68_name` or None if not set
        """
        return self._data["Report 68 Name"]

    @report_68_name.setter
    def report_68_name(self, value=None):
        """  Corresponds to IDD Field `report_68_name`

        Args:
            value (str): value for IDD Field `report_68_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_68_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_68_name`'.format(value))

        self._data["Report 68 Name"] = value

    @property
    def report_69_name(self):
        """Get report_69_name

        Returns:
            str: the value of `report_69_name` or None if not set
        """
        return self._data["Report 69 Name"]

    @report_69_name.setter
    def report_69_name(self, value=None):
        """  Corresponds to IDD Field `report_69_name`

        Args:
            value (str): value for IDD Field `report_69_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_69_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_69_name`'.format(value))

        self._data["Report 69 Name"] = value

    @property
    def report_70_name(self):
        """Get report_70_name

        Returns:
            str: the value of `report_70_name` or None if not set
        """
        return self._data["Report 70 Name"]

    @report_70_name.setter
    def report_70_name(self, value=None):
        """  Corresponds to IDD Field `report_70_name`

        Args:
            value (str): value for IDD Field `report_70_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_70_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_70_name`'.format(value))

        self._data["Report 70 Name"] = value

    @property
    def report_71_name(self):
        """Get report_71_name

        Returns:
            str: the value of `report_71_name` or None if not set
        """
        return self._data["Report 71 Name"]

    @report_71_name.setter
    def report_71_name(self, value=None):
        """  Corresponds to IDD Field `report_71_name`

        Args:
            value (str): value for IDD Field `report_71_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_71_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_71_name`'.format(value))

        self._data["Report 71 Name"] = value

    @property
    def report_72_name(self):
        """Get report_72_name

        Returns:
            str: the value of `report_72_name` or None if not set
        """
        return self._data["Report 72 Name"]

    @report_72_name.setter
    def report_72_name(self, value=None):
        """  Corresponds to IDD Field `report_72_name`

        Args:
            value (str): value for IDD Field `report_72_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_72_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_72_name`'.format(value))

        self._data["Report 72 Name"] = value

    @property
    def report_73_name(self):
        """Get report_73_name

        Returns:
            str: the value of `report_73_name` or None if not set
        """
        return self._data["Report 73 Name"]

    @report_73_name.setter
    def report_73_name(self, value=None):
        """  Corresponds to IDD Field `report_73_name`

        Args:
            value (str): value for IDD Field `report_73_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_73_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_73_name`'.format(value))

        self._data["Report 73 Name"] = value

    @property
    def report_74_name(self):
        """Get report_74_name

        Returns:
            str: the value of `report_74_name` or None if not set
        """
        return self._data["Report 74 Name"]

    @report_74_name.setter
    def report_74_name(self, value=None):
        """  Corresponds to IDD Field `report_74_name`

        Args:
            value (str): value for IDD Field `report_74_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_74_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_74_name`'.format(value))

        self._data["Report 74 Name"] = value

    @property
    def report_75_name(self):
        """Get report_75_name

        Returns:
            str: the value of `report_75_name` or None if not set
        """
        return self._data["Report 75 Name"]

    @report_75_name.setter
    def report_75_name(self, value=None):
        """  Corresponds to IDD Field `report_75_name`

        Args:
            value (str): value for IDD Field `report_75_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_75_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_75_name`'.format(value))

        self._data["Report 75 Name"] = value

    @property
    def report_76_name(self):
        """Get report_76_name

        Returns:
            str: the value of `report_76_name` or None if not set
        """
        return self._data["Report 76 Name"]

    @report_76_name.setter
    def report_76_name(self, value=None):
        """  Corresponds to IDD Field `report_76_name`

        Args:
            value (str): value for IDD Field `report_76_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_76_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_76_name`'.format(value))

        self._data["Report 76 Name"] = value

    @property
    def report_77_name(self):
        """Get report_77_name

        Returns:
            str: the value of `report_77_name` or None if not set
        """
        return self._data["Report 77 Name"]

    @report_77_name.setter
    def report_77_name(self, value=None):
        """  Corresponds to IDD Field `report_77_name`

        Args:
            value (str): value for IDD Field `report_77_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_77_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_77_name`'.format(value))

        self._data["Report 77 Name"] = value

    @property
    def report_78_name(self):
        """Get report_78_name

        Returns:
            str: the value of `report_78_name` or None if not set
        """
        return self._data["Report 78 Name"]

    @report_78_name.setter
    def report_78_name(self, value=None):
        """  Corresponds to IDD Field `report_78_name`

        Args:
            value (str): value for IDD Field `report_78_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_78_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_78_name`'.format(value))

        self._data["Report 78 Name"] = value

    @property
    def report_79_name(self):
        """Get report_79_name

        Returns:
            str: the value of `report_79_name` or None if not set
        """
        return self._data["Report 79 Name"]

    @report_79_name.setter
    def report_79_name(self, value=None):
        """  Corresponds to IDD Field `report_79_name`

        Args:
            value (str): value for IDD Field `report_79_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_79_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_79_name`'.format(value))

        self._data["Report 79 Name"] = value

    @property
    def report_80_name(self):
        """Get report_80_name

        Returns:
            str: the value of `report_80_name` or None if not set
        """
        return self._data["Report 80 Name"]

    @report_80_name.setter
    def report_80_name(self, value=None):
        """  Corresponds to IDD Field `report_80_name`

        Args:
            value (str): value for IDD Field `report_80_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_80_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_80_name`'.format(value))

        self._data["Report 80 Name"] = value

    @property
    def report_81_name(self):
        """Get report_81_name

        Returns:
            str: the value of `report_81_name` or None if not set
        """
        return self._data["Report 81 Name"]

    @report_81_name.setter
    def report_81_name(self, value=None):
        """  Corresponds to IDD Field `report_81_name`

        Args:
            value (str): value for IDD Field `report_81_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_81_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_81_name`'.format(value))

        self._data["Report 81 Name"] = value

    @property
    def report_82_name(self):
        """Get report_82_name

        Returns:
            str: the value of `report_82_name` or None if not set
        """
        return self._data["Report 82 Name"]

    @report_82_name.setter
    def report_82_name(self, value=None):
        """  Corresponds to IDD Field `report_82_name`

        Args:
            value (str): value for IDD Field `report_82_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_82_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_82_name`'.format(value))

        self._data["Report 82 Name"] = value

    @property
    def report_83_name(self):
        """Get report_83_name

        Returns:
            str: the value of `report_83_name` or None if not set
        """
        return self._data["Report 83 Name"]

    @report_83_name.setter
    def report_83_name(self, value=None):
        """  Corresponds to IDD Field `report_83_name`

        Args:
            value (str): value for IDD Field `report_83_name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_83_name`')
            vals = set()
            vals.add("AllSummary")
            vals.add("AllSummaryAndSizingPeriod")
            vals.add("AllMonthly")
            vals.add("AllSummaryAndMonthly")
            vals.add("AllSummaryMonthlyAndSizingPeriod")
            vals.add("AnnualBuildingUtilityPerformanceSummary")
            vals.add("InputVerificationandResultsSummary")
            vals.add("DemandEndUseComponentsSummary")
            vals.add("SourceEnergyEndUseComponentsSummary")
            vals.add("ClimaticDataSummary")
            vals.add("EquipmentSummary")
            vals.add("EnvelopeSummary")
            vals.add("SurfaceShadowingSummary")
            vals.add("ShadingSummary")
            vals.add("LightingSummary")
            vals.add("HVACSizingSummary")
            vals.add("SystemSummary")
            vals.add("ComponentSizingSummary")
            vals.add("OutdoorAirSummary")
            vals.add("ObjectCountSummary")
            vals.add("ComponentCostEconomicsSummary")
            vals.add("AdaptiveComfortSummary")
            vals.add("SensibleHeatGainSummary")
            vals.add("ZoneComponentLoadSummary")
            vals.add("Standard62.1Summary")
            vals.add("EnergyMeters")
            vals.add("LEEDSummary")
            vals.add("ZoneCoolingSummaryMonthly")
            vals.add("ZoneHeatingSummaryMonthly")
            vals.add("ZoneElectricSummaryMonthly")
            vals.add("SpaceGainsMonthly")
            vals.add("PeakSpaceGainsMonthly")
            vals.add("SpaceGainComponentsAtCoolingPeakMonthly")
            vals.add("EnergyConsumptionElectricityNaturalGasMonthly")
            vals.add("EnergyConsumptionElectricityGeneratedPropaneMonthly")
            vals.add("EnergyConsumptionDieselFuelOilMonthly")
            vals.add("EnergyConsumptionDistrictHeatingCoolingMonthly")
            vals.add("EnergyConsumptionCoalGasolineMonthly")
            vals.add("EnergyConsumptionOtherFuelsMonthly")
            vals.add("EndUseEnergyConsumptionElectricityMonthly")
            vals.add("EndUseEnergyConsumptionNaturalGasMonthly")
            vals.add("EndUseEnergyConsumptionDieselMonthly")
            vals.add("EndUseEnergyConsumptionFuelOilMonthly")
            vals.add("EndUseEnergyConsumptionCoalMonthly")
            vals.add("EndUseEnergyConsumptionPropaneMonthly")
            vals.add("EndUseEnergyConsumptionGasolineMonthly")
            vals.add("EndUseEnergyConsumptionOtherFuelsMonthly")
            vals.add("PeakEnergyEndUseElectricityPart1Monthly")
            vals.add("PeakEnergyEndUseElectricityPart2Monthly")
            vals.add("ElectricComponentsOfPeakDemandMonthly")
            vals.add("PeakEnergyEndUseNaturalGasMonthly")
            vals.add("PeakEnergyEndUseDieselMonthly")
            vals.add("PeakEnergyEndUseFuelOilMonthly")
            vals.add("PeakEnergyEndUseCoalMonthly")
            vals.add("PeakEnergyEndUsePropaneMonthly")
            vals.add("PeakEnergyEndUseGasolineMonthly")
            vals.add("PeakEnergyEndUseOtherFuelsMonthly")
            vals.add("SetpointsNotMetWithTemperaturesMonthly")
            vals.add("ComfortReportSimple55Monthly")
            vals.add("UnglazedTranspiredSolarCollectorSummaryMonthly")
            vals.add("OccupantComfortDataSummaryMonthly")
            vals.add("ChillerReportMonthly")
            vals.add("TowerReportMonthly")
            vals.add("BoilerReportMonthly")
            vals.add("DXReportMonthly")
            vals.add("WindowReportMonthly")
            vals.add("WindowEnergyReportMonthly")
            vals.add("WindowZoneSummaryMonthly")
            vals.add("WindowEnergyZoneSummaryMonthly")
            vals.add("AverageOutdoorConditionsMonthly")
            vals.add("OutdoorConditionsMaximumDryBulbMonthly")
            vals.add("OutdoorConditionsMinimumDryBulbMonthly")
            vals.add("OutdoorConditionsMaximumWetBulbMonthly")
            vals.add("OutdoorConditionsMaximumDewPointMonthly")
            vals.add("OutdoorGroundConditionsMonthly")
            vals.add("WindowACReportMonthly")
            vals.add("WaterHeaterReportMonthly")
            vals.add("GeneratorReportMonthly")
            vals.add("DaylightingReportMonthly")
            vals.add("CoilReportMonthly")
            vals.add("PlantLoopDemandReportMonthly")
            vals.add("FanReportMonthly")
            vals.add("PumpReportMonthly")
            vals.add("CondLoopDemandReportMonthly")
            vals.add("ZoneTemperatureOscillationReportMonthly")
            vals.add("AirLoopSystemEnergyAndWaterUseMonthly")
            vals.add("AirLoopSystemComponentLoadsMonthly")
            vals.add("AirLoopSystemComponentEnergyUseMonthly")
            vals.add("MechanicalVentilationLoadsMonthly")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `report_83_name`'.format(value))

        self._data["Report 83 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_1_name))
        out.append(self._to_str(self.report_2_name))
        out.append(self._to_str(self.report_3_name))
        out.append(self._to_str(self.report_4_name))
        out.append(self._to_str(self.report_5_name))
        out.append(self._to_str(self.report_6_name))
        out.append(self._to_str(self.report_7_name))
        out.append(self._to_str(self.report_8_name))
        out.append(self._to_str(self.report_9_name))
        out.append(self._to_str(self.report_10_name))
        out.append(self._to_str(self.report_11_name))
        out.append(self._to_str(self.report_12_name))
        out.append(self._to_str(self.report_13_name))
        out.append(self._to_str(self.report_14_name))
        out.append(self._to_str(self.report_15_name))
        out.append(self._to_str(self.report_16_name))
        out.append(self._to_str(self.report_17_name))
        out.append(self._to_str(self.report_18_name))
        out.append(self._to_str(self.report_19_name))
        out.append(self._to_str(self.report_20_name))
        out.append(self._to_str(self.report_21_name))
        out.append(self._to_str(self.report_22_name))
        out.append(self._to_str(self.report_23_name))
        out.append(self._to_str(self.report_24_name))
        out.append(self._to_str(self.report_25_name))
        out.append(self._to_str(self.report_26_name))
        out.append(self._to_str(self.report_27_name))
        out.append(self._to_str(self.report_28_name))
        out.append(self._to_str(self.report_29_name))
        out.append(self._to_str(self.report_30_name))
        out.append(self._to_str(self.report_31_name))
        out.append(self._to_str(self.report_32_name))
        out.append(self._to_str(self.report_33_name))
        out.append(self._to_str(self.report_34_name))
        out.append(self._to_str(self.report_35_name))
        out.append(self._to_str(self.report_36_name))
        out.append(self._to_str(self.report_37_name))
        out.append(self._to_str(self.report_38_name))
        out.append(self._to_str(self.report_39_name))
        out.append(self._to_str(self.report_40_name))
        out.append(self._to_str(self.report_41_name))
        out.append(self._to_str(self.report_42_name))
        out.append(self._to_str(self.report_43_name))
        out.append(self._to_str(self.report_44_name))
        out.append(self._to_str(self.report_45_name))
        out.append(self._to_str(self.report_46_name))
        out.append(self._to_str(self.report_47_name))
        out.append(self._to_str(self.report_48_name))
        out.append(self._to_str(self.report_49_name))
        out.append(self._to_str(self.report_50_name))
        out.append(self._to_str(self.report_51_name))
        out.append(self._to_str(self.report_52_name))
        out.append(self._to_str(self.report_53_name))
        out.append(self._to_str(self.report_54_name))
        out.append(self._to_str(self.report_55_name))
        out.append(self._to_str(self.report_56_name))
        out.append(self._to_str(self.report_57_name))
        out.append(self._to_str(self.report_58_name))
        out.append(self._to_str(self.report_59_name))
        out.append(self._to_str(self.report_60_name))
        out.append(self._to_str(self.report_61_name))
        out.append(self._to_str(self.report_62_name))
        out.append(self._to_str(self.report_63_name))
        out.append(self._to_str(self.report_64_name))
        out.append(self._to_str(self.report_65_name))
        out.append(self._to_str(self.report_66_name))
        out.append(self._to_str(self.report_67_name))
        out.append(self._to_str(self.report_68_name))
        out.append(self._to_str(self.report_69_name))
        out.append(self._to_str(self.report_70_name))
        out.append(self._to_str(self.report_71_name))
        out.append(self._to_str(self.report_72_name))
        out.append(self._to_str(self.report_73_name))
        out.append(self._to_str(self.report_74_name))
        out.append(self._to_str(self.report_75_name))
        out.append(self._to_str(self.report_76_name))
        out.append(self._to_str(self.report_77_name))
        out.append(self._to_str(self.report_78_name))
        out.append(self._to_str(self.report_79_name))
        out.append(self._to_str(self.report_80_name))
        out.append(self._to_str(self.report_81_name))
        out.append(self._to_str(self.report_82_name))
        out.append(self._to_str(self.report_83_name))
        return ",".join(out)

class OutputTableTimeBins(object):
    """ Corresponds to IDD object `Output:Table:TimeBins`
        Produces a bin report in the table output file which shows the amount of time in hours
        that occurs in different bins for a single specific output variable or meter.
        Two different types of binning are reported: by month and by hour of the day.
    
    """
    internal_name = "Output:Table:TimeBins"
    field_count = 7
    required_fields = ["Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Table:TimeBins`
        """
        self._data = OrderedDict()
        self._data["Key Value"] = None
        self._data["Variable Name"] = None
        self._data["Interval Start"] = None
        self._data["Interval Size"] = None
        self._data["Interval Count"] = None
        self._data["Schedule Name"] = None
        self._data["Variable Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_value = None
        else:
            self.key_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interval_start = None
        else:
            self.interval_start = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interval_size = None
        else:
            self.interval_size = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.interval_count = None
        else:
            self.interval_count = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_type = None
        else:
            self.variable_type = vals[i]
        i += 1

    @property
    def key_value(self):
        """Get key_value

        Returns:
            str: the value of `key_value` or None if not set
        """
        return self._data["Key Value"]

    @key_value.setter
    def key_value(self, value="*"):
        """  Corresponds to IDD Field `key_value`
        use '*' (without quotes) to apply this variable to all keys

        Args:
            value (str): value for IDD Field `key_value`
                Default value: *
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_value`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_value`')

        self._data["Key Value"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `variable_name`

        Args:
            value (str): value for IDD Field `variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')

        self._data["Variable Name"] = value

    @property
    def interval_start(self):
        """Get interval_start

        Returns:
            float: the value of `interval_start` or None if not set
        """
        return self._data["Interval Start"]

    @interval_start.setter
    def interval_start(self, value=None):
        """  Corresponds to IDD Field `interval_start`
        The lowest value for the intervals being binned into.

        Args:
            value (float): value for IDD Field `interval_start`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `interval_start`'.format(value))

        self._data["Interval Start"] = value

    @property
    def interval_size(self):
        """Get interval_size

        Returns:
            float: the value of `interval_size` or None if not set
        """
        return self._data["Interval Size"]

    @interval_size.setter
    def interval_size(self, value=None):
        """  Corresponds to IDD Field `interval_size`
        The size of the bins starting with Interval start.

        Args:
            value (float): value for IDD Field `interval_size`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `interval_size`'.format(value))

        self._data["Interval Size"] = value

    @property
    def interval_count(self):
        """Get interval_count

        Returns:
            int: the value of `interval_count` or None if not set
        """
        return self._data["Interval Count"]

    @interval_count.setter
    def interval_count(self, value=None):
        """  Corresponds to IDD Field `interval_count`
        The number of bins used. The number of hours below the start of the
        Lowest bin and above the value of the last bin are also shown.

        Args:
            value (int): value for IDD Field `interval_count`
                value >= 1
                value <= 20
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `interval_count`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `interval_count`')
            if value > 20:
                raise ValueError('value need to be smaller 20 '
                                 'for field `interval_count`')

        self._data["Interval Count"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`
        Optional schedule name. Binning is performed for non-zero hours.
        Binning always performed if left blank.

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    @property
    def variable_type(self):
        """Get variable_type

        Returns:
            str: the value of `variable_type` or None if not set
        """
        return self._data["Variable Type"]

    @variable_type.setter
    def variable_type(self, value=None):
        """  Corresponds to IDD Field `variable_type`
        Optional input on the type of units for the variable used by other fields in the object.

        Args:
            value (str): value for IDD Field `variable_type`
                Accepted values are:
                      - Energy
                      - Temperature
                      - VolumetricFlow
                      - Power
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_type`')
            vals = set()
            vals.add("Energy")
            vals.add("Temperature")
            vals.add("VolumetricFlow")
            vals.add("Power")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `variable_type`'.format(value))

        self._data["Variable Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_value))
        out.append(self._to_str(self.variable_name))
        out.append(self._to_str(self.interval_start))
        out.append(self._to_str(self.interval_size))
        out.append(self._to_str(self.interval_count))
        out.append(self._to_str(self.schedule_name))
        out.append(self._to_str(self.variable_type))
        return ",".join(out)

class OutputTableMonthly(object):
    """ Corresponds to IDD object `Output:Table:Monthly`
        has multiple columns that are each defined using a repeated group of fields for any
        number of columns. A single Output:Table:Monthly object often produces multiple
        tables in the output. A table is produced for every instance of a particular output
        variable. For example, a table defined with zone variables will be produced once for
        every zone.
    
    """
    internal_name = "Output:Table:Monthly"
    field_count = 52
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Table:Monthly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Digits After Decimal"] = None
        self._data["Variable or Meter 1 Name"] = None
        self._data["Aggregation Type for Variable or Meter 1"] = None
        self._data["Variable or Meter 2 Name"] = None
        self._data["Aggregation Type for Variable or Meter 2"] = None
        self._data["Variable or Meter 3 Name"] = None
        self._data["Aggregation Type for Variable or Meter 3"] = None
        self._data["Variable or Meter 4 Name"] = None
        self._data["Aggregation Type for Variable or Meter 4"] = None
        self._data["Variable or Meter 5 Name"] = None
        self._data["Aggregation Type for Variable or Meter 5"] = None
        self._data["Variable or Meter 6 Name"] = None
        self._data["Aggregation Type for Variable or Meter 6"] = None
        self._data["Variable or Meter 7 Name"] = None
        self._data["Aggregation Type for Variable or Meter 7"] = None
        self._data["Variable or Meter 8 Name"] = None
        self._data["Aggregation Type for Variable or Meter 8"] = None
        self._data["Variable or Meter 9 Name"] = None
        self._data["Aggregation Type for Variable or Meter 9"] = None
        self._data["Variable or Meter 10 Name"] = None
        self._data["Aggregation Type for Variable or Meter 10"] = None
        self._data["Variable or Meter 11 Name"] = None
        self._data["Aggregation Type for Variable or Meter 11"] = None
        self._data["Variable or Meter 12 Name"] = None
        self._data["Aggregation Type for Variable or Meter 12"] = None
        self._data["Variable or Meter 13 Name"] = None
        self._data["Aggregation Type for Variable or Meter 13"] = None
        self._data["Variable or Meter 14 Name"] = None
        self._data["Aggregation Type for Variable or Meter 14"] = None
        self._data["Variable or Meter 15 Name"] = None
        self._data["Aggregation Type for Variable or Meter 15"] = None
        self._data["Variable or Meter 16 Name"] = None
        self._data["Aggregation Type for Variable or Meter 16"] = None
        self._data["Variable or Meter 17 Name"] = None
        self._data["Aggregation Type for Variable or Meter 17"] = None
        self._data["Variable or Meter 18 Name"] = None
        self._data["Aggregation Type for Variable or Meter 18"] = None
        self._data["Variable or Meter 19 Name"] = None
        self._data["Aggregation Type for Variable or Meter 19"] = None
        self._data["Variable or Meter 20 Name"] = None
        self._data["Aggregation Type for Variable or Meter 20"] = None
        self._data["Variable or Meter 21 Name"] = None
        self._data["Aggregation Type for Variable or Meter 21"] = None
        self._data["Variable or Meter 22 Name"] = None
        self._data["Aggregation Type for Variable or Meter 22"] = None
        self._data["Variable or Meter 23 Name"] = None
        self._data["Aggregation Type for Variable or Meter 23"] = None
        self._data["Variable or Meter 24 Name"] = None
        self._data["Aggregation Type for Variable or Meter 24"] = None
        self._data["Variable or Meter 25 Name"] = None
        self._data["Aggregation Type for Variable or Meter 25"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.digits_after_decimal = None
        else:
            self.digits_after_decimal = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_1_name = None
        else:
            self.variable_or_meter_1_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_1 = None
        else:
            self.aggregation_type_for_variable_or_meter_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_2_name = None
        else:
            self.variable_or_meter_2_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_2 = None
        else:
            self.aggregation_type_for_variable_or_meter_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_3_name = None
        else:
            self.variable_or_meter_3_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_3 = None
        else:
            self.aggregation_type_for_variable_or_meter_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_4_name = None
        else:
            self.variable_or_meter_4_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_4 = None
        else:
            self.aggregation_type_for_variable_or_meter_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_5_name = None
        else:
            self.variable_or_meter_5_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_5 = None
        else:
            self.aggregation_type_for_variable_or_meter_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_6_name = None
        else:
            self.variable_or_meter_6_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_6 = None
        else:
            self.aggregation_type_for_variable_or_meter_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_7_name = None
        else:
            self.variable_or_meter_7_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_7 = None
        else:
            self.aggregation_type_for_variable_or_meter_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_8_name = None
        else:
            self.variable_or_meter_8_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_8 = None
        else:
            self.aggregation_type_for_variable_or_meter_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_9_name = None
        else:
            self.variable_or_meter_9_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_9 = None
        else:
            self.aggregation_type_for_variable_or_meter_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_10_name = None
        else:
            self.variable_or_meter_10_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_10 = None
        else:
            self.aggregation_type_for_variable_or_meter_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_11_name = None
        else:
            self.variable_or_meter_11_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_11 = None
        else:
            self.aggregation_type_for_variable_or_meter_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_12_name = None
        else:
            self.variable_or_meter_12_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_12 = None
        else:
            self.aggregation_type_for_variable_or_meter_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_13_name = None
        else:
            self.variable_or_meter_13_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_13 = None
        else:
            self.aggregation_type_for_variable_or_meter_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_14_name = None
        else:
            self.variable_or_meter_14_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_14 = None
        else:
            self.aggregation_type_for_variable_or_meter_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_15_name = None
        else:
            self.variable_or_meter_15_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_15 = None
        else:
            self.aggregation_type_for_variable_or_meter_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_16_name = None
        else:
            self.variable_or_meter_16_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_16 = None
        else:
            self.aggregation_type_for_variable_or_meter_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_17_name = None
        else:
            self.variable_or_meter_17_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_17 = None
        else:
            self.aggregation_type_for_variable_or_meter_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_18_name = None
        else:
            self.variable_or_meter_18_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_18 = None
        else:
            self.aggregation_type_for_variable_or_meter_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_19_name = None
        else:
            self.variable_or_meter_19_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_19 = None
        else:
            self.aggregation_type_for_variable_or_meter_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_20_name = None
        else:
            self.variable_or_meter_20_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_20 = None
        else:
            self.aggregation_type_for_variable_or_meter_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_21_name = None
        else:
            self.variable_or_meter_21_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_21 = None
        else:
            self.aggregation_type_for_variable_or_meter_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_22_name = None
        else:
            self.variable_or_meter_22_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_22 = None
        else:
            self.aggregation_type_for_variable_or_meter_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_23_name = None
        else:
            self.variable_or_meter_23_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_23 = None
        else:
            self.aggregation_type_for_variable_or_meter_23 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_24_name = None
        else:
            self.variable_or_meter_24_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_24 = None
        else:
            self.aggregation_type_for_variable_or_meter_24 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_or_meter_25_name = None
        else:
            self.variable_or_meter_25_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_25 = None
        else:
            self.aggregation_type_for_variable_or_meter_25 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def digits_after_decimal(self):
        """Get digits_after_decimal

        Returns:
            int: the value of `digits_after_decimal` or None if not set
        """
        return self._data["Digits After Decimal"]

    @digits_after_decimal.setter
    def digits_after_decimal(self, value=2 ):
        """  Corresponds to IDD Field `digits_after_decimal`

        Args:
            value (int): value for IDD Field `digits_after_decimal`
                Default value: 2
                value >= 0
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `digits_after_decimal`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `digits_after_decimal`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `digits_after_decimal`')

        self._data["Digits After Decimal"] = value

    @property
    def variable_or_meter_1_name(self):
        """Get variable_or_meter_1_name

        Returns:
            str: the value of `variable_or_meter_1_name` or None if not set
        """
        return self._data["Variable or Meter 1 Name"]

    @variable_or_meter_1_name.setter
    def variable_or_meter_1_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_1_name`
        The name of an output variable or  meter that is available in the RDD file.

        Args:
            value (str): value for IDD Field `variable_or_meter_1_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_1_name`')

        self._data["Variable or Meter 1 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_1(self):
        """Get aggregation_type_for_variable_or_meter_1

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_1` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 1"]

    @aggregation_type_for_variable_or_meter_1.setter
    def aggregation_type_for_variable_or_meter_1(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_1`
        The method of aggregation for the selected variable or meter.
        SumOrAverage adds up the values for every timestep in the month if the variable
        is a sum variable. If the variable is an average variable it reports the average value.
        This is probably the most common Aggregation Type option to choose.
        Maximum and Minimum find the maximum and minimum value for the month and report it
        along with the time that it first occurred.  When Maximum or Minimum are selected a
        column is automatically shown in the output report for the time that it occurred.
        When Maximum or Minimum are used with an average variable the value is divided
        by the length of the timestep.
        ValueWhenMaxMin looks at the previous variable in the report that sets a maximum or minimum
        and displays the value of the current variable at that same timestep.
        Order of the variables in the report is important when using ValueWhenMaxMin.
        This can be used when an outdoor temperature should be reported for the time of the
        maximum cooling load.
        HoursNonZero adds up the elapsed time during the month that this variable is non-zero
        and would be appropriate to determine the number of hour that a fan operates.
        HoursZero - The HoursZero option adds up the elapsed time during the month that this
        variable has a zero value and would be appropriate to determine the number of hour
        that a fan does not operate.
        HoursPositive - The HoursPositive option adds up the elapsed time during the month that
        this variable has a positive value.  Hours with a zero value are not included.
        HoursNonPositive - The HoursNonPositive option adds up the elaspsed time during the month
        that this variable has non-positive value. Hours with a negative value and hours with a
        zero value are all included.
        HoursNegative - The HoursNegative option adds up the elapsed time during the month that
        this variable has a negative value.  Hours with a zero value are not included.
        HoursNonNegative - The HoursNonNegative option adds up the elaspsed time during the month
        that this variable has non-negative value. Hours with a positive value and
        hours with a zero value are all included.
        SumOrAverageDuringHoursShown - Provides the sum or average of the named variable when
        during the hours that the previous variable displayed with any of the Aggregation Types
        starting with "Hours". For "sum" type variables adds up the values for each timestep
        and reports the sum of the value monthly during the hours reported on the previous
        variable. For "average" type variables, the value shown will be the average for the month
        during the hours reported on the previous variable.  Order of the variables in
        the report is important when using this Aggregation Type.
        MaximumDuringHoursShown - Reports the maximum value and the time that the maximum value
        occurred but only during the hours reported with the previous "hours-" Aggregation Type.
        When the Maximum option is used with an average variable the value is divided
        by the length of the timestep.  Order of the variables in the report is important
        when using this Aggregation Type.
        MinimumDuringHoursShown - Reports the minimum value and the time that the minimum value
        occurred but only during the hours reported with the previous "hours-" Aggregation Type.
        When the Minimum option is used with an average variable the value is divided
        by the length of the timestep.  Order of the variables in the report is important
        when using this Aggregation Type.

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_1`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_1`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_1`'.format(value))

        self._data["Aggregation Type for Variable or Meter 1"] = value

    @property
    def variable_or_meter_2_name(self):
        """Get variable_or_meter_2_name

        Returns:
            str: the value of `variable_or_meter_2_name` or None if not set
        """
        return self._data["Variable or Meter 2 Name"]

    @variable_or_meter_2_name.setter
    def variable_or_meter_2_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_2_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_2_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_2_name`')

        self._data["Variable or Meter 2 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_2(self):
        """Get aggregation_type_for_variable_or_meter_2

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_2` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 2"]

    @aggregation_type_for_variable_or_meter_2.setter
    def aggregation_type_for_variable_or_meter_2(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_2`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_2`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_2`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_2`'.format(value))

        self._data["Aggregation Type for Variable or Meter 2"] = value

    @property
    def variable_or_meter_3_name(self):
        """Get variable_or_meter_3_name

        Returns:
            str: the value of `variable_or_meter_3_name` or None if not set
        """
        return self._data["Variable or Meter 3 Name"]

    @variable_or_meter_3_name.setter
    def variable_or_meter_3_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_3_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_3_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_3_name`')

        self._data["Variable or Meter 3 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_3(self):
        """Get aggregation_type_for_variable_or_meter_3

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_3` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 3"]

    @aggregation_type_for_variable_or_meter_3.setter
    def aggregation_type_for_variable_or_meter_3(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_3`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_3`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_3`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_3`'.format(value))

        self._data["Aggregation Type for Variable or Meter 3"] = value

    @property
    def variable_or_meter_4_name(self):
        """Get variable_or_meter_4_name

        Returns:
            str: the value of `variable_or_meter_4_name` or None if not set
        """
        return self._data["Variable or Meter 4 Name"]

    @variable_or_meter_4_name.setter
    def variable_or_meter_4_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_4_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_4_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_4_name`')

        self._data["Variable or Meter 4 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_4(self):
        """Get aggregation_type_for_variable_or_meter_4

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_4` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 4"]

    @aggregation_type_for_variable_or_meter_4.setter
    def aggregation_type_for_variable_or_meter_4(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_4`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_4`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_4`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_4`'.format(value))

        self._data["Aggregation Type for Variable or Meter 4"] = value

    @property
    def variable_or_meter_5_name(self):
        """Get variable_or_meter_5_name

        Returns:
            str: the value of `variable_or_meter_5_name` or None if not set
        """
        return self._data["Variable or Meter 5 Name"]

    @variable_or_meter_5_name.setter
    def variable_or_meter_5_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_5_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_5_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_5_name`')

        self._data["Variable or Meter 5 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_5(self):
        """Get aggregation_type_for_variable_or_meter_5

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_5` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 5"]

    @aggregation_type_for_variable_or_meter_5.setter
    def aggregation_type_for_variable_or_meter_5(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_5`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_5`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_5`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_5`'.format(value))

        self._data["Aggregation Type for Variable or Meter 5"] = value

    @property
    def variable_or_meter_6_name(self):
        """Get variable_or_meter_6_name

        Returns:
            str: the value of `variable_or_meter_6_name` or None if not set
        """
        return self._data["Variable or Meter 6 Name"]

    @variable_or_meter_6_name.setter
    def variable_or_meter_6_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_6_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_6_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_6_name`')

        self._data["Variable or Meter 6 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_6(self):
        """Get aggregation_type_for_variable_or_meter_6

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_6` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 6"]

    @aggregation_type_for_variable_or_meter_6.setter
    def aggregation_type_for_variable_or_meter_6(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_6`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_6`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_6`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_6`'.format(value))

        self._data["Aggregation Type for Variable or Meter 6"] = value

    @property
    def variable_or_meter_7_name(self):
        """Get variable_or_meter_7_name

        Returns:
            str: the value of `variable_or_meter_7_name` or None if not set
        """
        return self._data["Variable or Meter 7 Name"]

    @variable_or_meter_7_name.setter
    def variable_or_meter_7_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_7_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_7_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_7_name`')

        self._data["Variable or Meter 7 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_7(self):
        """Get aggregation_type_for_variable_or_meter_7

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_7` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 7"]

    @aggregation_type_for_variable_or_meter_7.setter
    def aggregation_type_for_variable_or_meter_7(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_7`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_7`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_7`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_7`'.format(value))

        self._data["Aggregation Type for Variable or Meter 7"] = value

    @property
    def variable_or_meter_8_name(self):
        """Get variable_or_meter_8_name

        Returns:
            str: the value of `variable_or_meter_8_name` or None if not set
        """
        return self._data["Variable or Meter 8 Name"]

    @variable_or_meter_8_name.setter
    def variable_or_meter_8_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_8_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_8_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_8_name`')

        self._data["Variable or Meter 8 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_8(self):
        """Get aggregation_type_for_variable_or_meter_8

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_8` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 8"]

    @aggregation_type_for_variable_or_meter_8.setter
    def aggregation_type_for_variable_or_meter_8(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_8`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_8`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_8`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_8`'.format(value))

        self._data["Aggregation Type for Variable or Meter 8"] = value

    @property
    def variable_or_meter_9_name(self):
        """Get variable_or_meter_9_name

        Returns:
            str: the value of `variable_or_meter_9_name` or None if not set
        """
        return self._data["Variable or Meter 9 Name"]

    @variable_or_meter_9_name.setter
    def variable_or_meter_9_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_9_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_9_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_9_name`')

        self._data["Variable or Meter 9 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_9(self):
        """Get aggregation_type_for_variable_or_meter_9

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_9` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 9"]

    @aggregation_type_for_variable_or_meter_9.setter
    def aggregation_type_for_variable_or_meter_9(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_9`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_9`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_9`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_9`'.format(value))

        self._data["Aggregation Type for Variable or Meter 9"] = value

    @property
    def variable_or_meter_10_name(self):
        """Get variable_or_meter_10_name

        Returns:
            str: the value of `variable_or_meter_10_name` or None if not set
        """
        return self._data["Variable or Meter 10 Name"]

    @variable_or_meter_10_name.setter
    def variable_or_meter_10_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_10_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_10_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_10_name`')

        self._data["Variable or Meter 10 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_10(self):
        """Get aggregation_type_for_variable_or_meter_10

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_10` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 10"]

    @aggregation_type_for_variable_or_meter_10.setter
    def aggregation_type_for_variable_or_meter_10(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_10`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_10`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_10`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_10`'.format(value))

        self._data["Aggregation Type for Variable or Meter 10"] = value

    @property
    def variable_or_meter_11_name(self):
        """Get variable_or_meter_11_name

        Returns:
            str: the value of `variable_or_meter_11_name` or None if not set
        """
        return self._data["Variable or Meter 11 Name"]

    @variable_or_meter_11_name.setter
    def variable_or_meter_11_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_11_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_11_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_11_name`')

        self._data["Variable or Meter 11 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_11(self):
        """Get aggregation_type_for_variable_or_meter_11

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_11` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 11"]

    @aggregation_type_for_variable_or_meter_11.setter
    def aggregation_type_for_variable_or_meter_11(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_11`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_11`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_11`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_11`'.format(value))

        self._data["Aggregation Type for Variable or Meter 11"] = value

    @property
    def variable_or_meter_12_name(self):
        """Get variable_or_meter_12_name

        Returns:
            str: the value of `variable_or_meter_12_name` or None if not set
        """
        return self._data["Variable or Meter 12 Name"]

    @variable_or_meter_12_name.setter
    def variable_or_meter_12_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_12_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_12_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_12_name`')

        self._data["Variable or Meter 12 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_12(self):
        """Get aggregation_type_for_variable_or_meter_12

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_12` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 12"]

    @aggregation_type_for_variable_or_meter_12.setter
    def aggregation_type_for_variable_or_meter_12(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_12`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_12`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_12`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_12`'.format(value))

        self._data["Aggregation Type for Variable or Meter 12"] = value

    @property
    def variable_or_meter_13_name(self):
        """Get variable_or_meter_13_name

        Returns:
            str: the value of `variable_or_meter_13_name` or None if not set
        """
        return self._data["Variable or Meter 13 Name"]

    @variable_or_meter_13_name.setter
    def variable_or_meter_13_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_13_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_13_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_13_name`')

        self._data["Variable or Meter 13 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_13(self):
        """Get aggregation_type_for_variable_or_meter_13

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_13` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 13"]

    @aggregation_type_for_variable_or_meter_13.setter
    def aggregation_type_for_variable_or_meter_13(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_13`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_13`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_13`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_13`'.format(value))

        self._data["Aggregation Type for Variable or Meter 13"] = value

    @property
    def variable_or_meter_14_name(self):
        """Get variable_or_meter_14_name

        Returns:
            str: the value of `variable_or_meter_14_name` or None if not set
        """
        return self._data["Variable or Meter 14 Name"]

    @variable_or_meter_14_name.setter
    def variable_or_meter_14_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_14_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_14_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_14_name`')

        self._data["Variable or Meter 14 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_14(self):
        """Get aggregation_type_for_variable_or_meter_14

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_14` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 14"]

    @aggregation_type_for_variable_or_meter_14.setter
    def aggregation_type_for_variable_or_meter_14(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_14`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_14`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_14`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_14`'.format(value))

        self._data["Aggregation Type for Variable or Meter 14"] = value

    @property
    def variable_or_meter_15_name(self):
        """Get variable_or_meter_15_name

        Returns:
            str: the value of `variable_or_meter_15_name` or None if not set
        """
        return self._data["Variable or Meter 15 Name"]

    @variable_or_meter_15_name.setter
    def variable_or_meter_15_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_15_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_15_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_15_name`')

        self._data["Variable or Meter 15 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_15(self):
        """Get aggregation_type_for_variable_or_meter_15

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_15` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 15"]

    @aggregation_type_for_variable_or_meter_15.setter
    def aggregation_type_for_variable_or_meter_15(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_15`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_15`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_15`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_15`'.format(value))

        self._data["Aggregation Type for Variable or Meter 15"] = value

    @property
    def variable_or_meter_16_name(self):
        """Get variable_or_meter_16_name

        Returns:
            str: the value of `variable_or_meter_16_name` or None if not set
        """
        return self._data["Variable or Meter 16 Name"]

    @variable_or_meter_16_name.setter
    def variable_or_meter_16_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_16_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_16_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_16_name`')

        self._data["Variable or Meter 16 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_16(self):
        """Get aggregation_type_for_variable_or_meter_16

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_16` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 16"]

    @aggregation_type_for_variable_or_meter_16.setter
    def aggregation_type_for_variable_or_meter_16(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_16`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_16`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_16`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_16`'.format(value))

        self._data["Aggregation Type for Variable or Meter 16"] = value

    @property
    def variable_or_meter_17_name(self):
        """Get variable_or_meter_17_name

        Returns:
            str: the value of `variable_or_meter_17_name` or None if not set
        """
        return self._data["Variable or Meter 17 Name"]

    @variable_or_meter_17_name.setter
    def variable_or_meter_17_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_17_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_17_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_17_name`')

        self._data["Variable or Meter 17 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_17(self):
        """Get aggregation_type_for_variable_or_meter_17

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_17` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 17"]

    @aggregation_type_for_variable_or_meter_17.setter
    def aggregation_type_for_variable_or_meter_17(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_17`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_17`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_17`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_17`'.format(value))

        self._data["Aggregation Type for Variable or Meter 17"] = value

    @property
    def variable_or_meter_18_name(self):
        """Get variable_or_meter_18_name

        Returns:
            str: the value of `variable_or_meter_18_name` or None if not set
        """
        return self._data["Variable or Meter 18 Name"]

    @variable_or_meter_18_name.setter
    def variable_or_meter_18_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_18_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_18_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_18_name`')

        self._data["Variable or Meter 18 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_18(self):
        """Get aggregation_type_for_variable_or_meter_18

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_18` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 18"]

    @aggregation_type_for_variable_or_meter_18.setter
    def aggregation_type_for_variable_or_meter_18(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_18`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_18`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_18`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_18`'.format(value))

        self._data["Aggregation Type for Variable or Meter 18"] = value

    @property
    def variable_or_meter_19_name(self):
        """Get variable_or_meter_19_name

        Returns:
            str: the value of `variable_or_meter_19_name` or None if not set
        """
        return self._data["Variable or Meter 19 Name"]

    @variable_or_meter_19_name.setter
    def variable_or_meter_19_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_19_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_19_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_19_name`')

        self._data["Variable or Meter 19 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_19(self):
        """Get aggregation_type_for_variable_or_meter_19

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_19` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 19"]

    @aggregation_type_for_variable_or_meter_19.setter
    def aggregation_type_for_variable_or_meter_19(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_19`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_19`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_19`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_19`'.format(value))

        self._data["Aggregation Type for Variable or Meter 19"] = value

    @property
    def variable_or_meter_20_name(self):
        """Get variable_or_meter_20_name

        Returns:
            str: the value of `variable_or_meter_20_name` or None if not set
        """
        return self._data["Variable or Meter 20 Name"]

    @variable_or_meter_20_name.setter
    def variable_or_meter_20_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_20_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_20_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_20_name`')

        self._data["Variable or Meter 20 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_20(self):
        """Get aggregation_type_for_variable_or_meter_20

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_20` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 20"]

    @aggregation_type_for_variable_or_meter_20.setter
    def aggregation_type_for_variable_or_meter_20(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_20`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_20`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_20`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_20`'.format(value))

        self._data["Aggregation Type for Variable or Meter 20"] = value

    @property
    def variable_or_meter_21_name(self):
        """Get variable_or_meter_21_name

        Returns:
            str: the value of `variable_or_meter_21_name` or None if not set
        """
        return self._data["Variable or Meter 21 Name"]

    @variable_or_meter_21_name.setter
    def variable_or_meter_21_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_21_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_21_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_21_name`')

        self._data["Variable or Meter 21 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_21(self):
        """Get aggregation_type_for_variable_or_meter_21

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_21` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 21"]

    @aggregation_type_for_variable_or_meter_21.setter
    def aggregation_type_for_variable_or_meter_21(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_21`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_21`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_21`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_21`'.format(value))

        self._data["Aggregation Type for Variable or Meter 21"] = value

    @property
    def variable_or_meter_22_name(self):
        """Get variable_or_meter_22_name

        Returns:
            str: the value of `variable_or_meter_22_name` or None if not set
        """
        return self._data["Variable or Meter 22 Name"]

    @variable_or_meter_22_name.setter
    def variable_or_meter_22_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_22_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_22_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_22_name`')

        self._data["Variable or Meter 22 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_22(self):
        """Get aggregation_type_for_variable_or_meter_22

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_22` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 22"]

    @aggregation_type_for_variable_or_meter_22.setter
    def aggregation_type_for_variable_or_meter_22(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_22`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_22`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_22`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_22`'.format(value))

        self._data["Aggregation Type for Variable or Meter 22"] = value

    @property
    def variable_or_meter_23_name(self):
        """Get variable_or_meter_23_name

        Returns:
            str: the value of `variable_or_meter_23_name` or None if not set
        """
        return self._data["Variable or Meter 23 Name"]

    @variable_or_meter_23_name.setter
    def variable_or_meter_23_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_23_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_23_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_23_name`')

        self._data["Variable or Meter 23 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_23(self):
        """Get aggregation_type_for_variable_or_meter_23

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_23` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 23"]

    @aggregation_type_for_variable_or_meter_23.setter
    def aggregation_type_for_variable_or_meter_23(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_23`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_23`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_23`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_23`'.format(value))

        self._data["Aggregation Type for Variable or Meter 23"] = value

    @property
    def variable_or_meter_24_name(self):
        """Get variable_or_meter_24_name

        Returns:
            str: the value of `variable_or_meter_24_name` or None if not set
        """
        return self._data["Variable or Meter 24 Name"]

    @variable_or_meter_24_name.setter
    def variable_or_meter_24_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_24_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_24_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_24_name`')

        self._data["Variable or Meter 24 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_24(self):
        """Get aggregation_type_for_variable_or_meter_24

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_24` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 24"]

    @aggregation_type_for_variable_or_meter_24.setter
    def aggregation_type_for_variable_or_meter_24(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_24`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_24`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_24`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_24`'.format(value))

        self._data["Aggregation Type for Variable or Meter 24"] = value

    @property
    def variable_or_meter_25_name(self):
        """Get variable_or_meter_25_name

        Returns:
            str: the value of `variable_or_meter_25_name` or None if not set
        """
        return self._data["Variable or Meter 25 Name"]

    @variable_or_meter_25_name.setter
    def variable_or_meter_25_name(self, value=None):
        """  Corresponds to IDD Field `variable_or_meter_25_name`

        Args:
            value (str): value for IDD Field `variable_or_meter_25_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_25_name`')

        self._data["Variable or Meter 25 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_25(self):
        """Get aggregation_type_for_variable_or_meter_25

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_25` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 25"]

    @aggregation_type_for_variable_or_meter_25.setter
    def aggregation_type_for_variable_or_meter_25(self, value=None):
        """  Corresponds to IDD Field `aggregation_type_for_variable_or_meter_25`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `aggregation_type_for_variable_or_meter_25`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_25`')
            vals = set()
            vals.add("SumOrAverage")
            vals.add("Maximum")
            vals.add("Minimum")
            vals.add("ValueWhenMaximumOrMinimum")
            vals.add("HoursNonZero")
            vals.add("HoursZero")
            vals.add("HoursPositive")
            vals.add("HoursNonPositive")
            vals.add("HoursNegative")
            vals.add("HoursNonNegative")
            vals.add("SumOrAverageDuringHoursShown")
            vals.add("MaximumDuringHoursShown")
            vals.add("MinimumDuringHoursShown")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `aggregation_type_for_variable_or_meter_25`'.format(value))

        self._data["Aggregation Type for Variable or Meter 25"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.digits_after_decimal))
        out.append(self._to_str(self.variable_or_meter_1_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_1))
        out.append(self._to_str(self.variable_or_meter_2_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_2))
        out.append(self._to_str(self.variable_or_meter_3_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_3))
        out.append(self._to_str(self.variable_or_meter_4_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_4))
        out.append(self._to_str(self.variable_or_meter_5_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_5))
        out.append(self._to_str(self.variable_or_meter_6_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_6))
        out.append(self._to_str(self.variable_or_meter_7_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_7))
        out.append(self._to_str(self.variable_or_meter_8_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_8))
        out.append(self._to_str(self.variable_or_meter_9_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_9))
        out.append(self._to_str(self.variable_or_meter_10_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_10))
        out.append(self._to_str(self.variable_or_meter_11_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_11))
        out.append(self._to_str(self.variable_or_meter_12_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_12))
        out.append(self._to_str(self.variable_or_meter_13_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_13))
        out.append(self._to_str(self.variable_or_meter_14_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_14))
        out.append(self._to_str(self.variable_or_meter_15_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_15))
        out.append(self._to_str(self.variable_or_meter_16_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_16))
        out.append(self._to_str(self.variable_or_meter_17_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_17))
        out.append(self._to_str(self.variable_or_meter_18_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_18))
        out.append(self._to_str(self.variable_or_meter_19_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_19))
        out.append(self._to_str(self.variable_or_meter_20_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_20))
        out.append(self._to_str(self.variable_or_meter_21_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_21))
        out.append(self._to_str(self.variable_or_meter_22_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_22))
        out.append(self._to_str(self.variable_or_meter_23_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_23))
        out.append(self._to_str(self.variable_or_meter_24_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_24))
        out.append(self._to_str(self.variable_or_meter_25_name))
        out.append(self._to_str(self.aggregation_type_for_variable_or_meter_25))
        return ",".join(out)

class OutputControlTableStyle(object):
    """ Corresponds to IDD object `OutputControl:Table:Style`
        default style for the OutputControl:Table:Style is comma -- this works well for
        importing into spreadsheet programs such as Excel(tm) but not so well for word
        processing progams -- there tab may be a better choice.  fixed puts spaces between
        the "columns".  HTML produces tables in HTML. XML produces an XML file.
        note - if no OutputControl:Table:Style is included, the defaults are comma and None.
    
    """
    internal_name = "OutputControl:Table:Style"
    field_count = 2
    required_fields = ["Column Separator"]

    def __init__(self):
        """ Init data dictionary object for IDD  `OutputControl:Table:Style`
        """
        self._data = OrderedDict()
        self._data["Column Separator"] = None
        self._data["Unit Conversion"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.column_separator = None
        else:
            self.column_separator = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.unit_conversion = None
        else:
            self.unit_conversion = vals[i]
        i += 1

    @property
    def column_separator(self):
        """Get column_separator

        Returns:
            str: the value of `column_separator` or None if not set
        """
        return self._data["Column Separator"]

    @column_separator.setter
    def column_separator(self, value="Comma"):
        """  Corresponds to IDD Field `column_separator`

        Args:
            value (str): value for IDD Field `column_separator`
                Accepted values are:
                      - Comma
                      - Tab
                      - Fixed
                      - HTML
                      - XML
                      - CommaAndHTML
                      - CommaAndXML
                      - TabAndHTML
                      - XMLandHTML
                      - All
                Default value: Comma
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `column_separator`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `column_separator`')
            vals = set()
            vals.add("Comma")
            vals.add("Tab")
            vals.add("Fixed")
            vals.add("HTML")
            vals.add("XML")
            vals.add("CommaAndHTML")
            vals.add("CommaAndXML")
            vals.add("TabAndHTML")
            vals.add("XMLandHTML")
            vals.add("All")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `column_separator`'.format(value))

        self._data["Column Separator"] = value

    @property
    def unit_conversion(self):
        """Get unit_conversion

        Returns:
            str: the value of `unit_conversion` or None if not set
        """
        return self._data["Unit Conversion"]

    @unit_conversion.setter
    def unit_conversion(self, value="None"):
        """  Corresponds to IDD Field `unit_conversion`

        Args:
            value (str): value for IDD Field `unit_conversion`
                Accepted values are:
                      - None
                      - JtoKWH
                      - JtoMJ
                      - JtoGJ
                      - InchPound
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `unit_conversion`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unit_conversion`')
            vals = set()
            vals.add("None")
            vals.add("JtoKWH")
            vals.add("JtoMJ")
            vals.add("JtoGJ")
            vals.add("InchPound")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `unit_conversion`'.format(value))

        self._data["Unit Conversion"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.column_separator))
        out.append(self._to_str(self.unit_conversion))
        return ",".join(out)

class OutputControlReportingTolerances(object):
    """ Corresponds to IDD object `OutputControl:ReportingTolerances`
        Calculations of the time that setpoints are not met use a tolerance of 0.2C.
        This object allows changing the tolerance used to determine when setpoints are being met.
    
    """
    internal_name = "OutputControl:ReportingTolerances"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `OutputControl:ReportingTolerances`
        """
        self._data = OrderedDict()
        self._data["Tolerance for Time Heating Setpoint Not Met"] = None
        self._data["Tolerance for Time Cooling Setpoint Not Met"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.tolerance_for_time_heating_setpoint_not_met = None
        else:
            self.tolerance_for_time_heating_setpoint_not_met = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.tolerance_for_time_cooling_setpoint_not_met = None
        else:
            self.tolerance_for_time_cooling_setpoint_not_met = vals[i]
        i += 1

    @property
    def tolerance_for_time_heating_setpoint_not_met(self):
        """Get tolerance_for_time_heating_setpoint_not_met

        Returns:
            float: the value of `tolerance_for_time_heating_setpoint_not_met` or None if not set
        """
        return self._data["Tolerance for Time Heating Setpoint Not Met"]

    @tolerance_for_time_heating_setpoint_not_met.setter
    def tolerance_for_time_heating_setpoint_not_met(self, value=0.2 ):
        """  Corresponds to IDD Field `tolerance_for_time_heating_setpoint_not_met`
        If the zone temperature is below the heating setpoint by more than
        this value, the following output variables will increment as appropriate
        Zone Heating Setpoint Not Met Time
        Zone Heating Setpoint Not Met While Occupied Time
        This also impacts table report "Annual Building Utility Performance Summary"
        subtable "Comfort and Setpoint Not Met Summary"

        Args:
            value (float): value for IDD Field `tolerance_for_time_heating_setpoint_not_met`
                Units: deltaC
                Default value: 0.2
                value >= 0.0
                value <= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `tolerance_for_time_heating_setpoint_not_met`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tolerance_for_time_heating_setpoint_not_met`')
            if value > 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `tolerance_for_time_heating_setpoint_not_met`')

        self._data["Tolerance for Time Heating Setpoint Not Met"] = value

    @property
    def tolerance_for_time_cooling_setpoint_not_met(self):
        """Get tolerance_for_time_cooling_setpoint_not_met

        Returns:
            float: the value of `tolerance_for_time_cooling_setpoint_not_met` or None if not set
        """
        return self._data["Tolerance for Time Cooling Setpoint Not Met"]

    @tolerance_for_time_cooling_setpoint_not_met.setter
    def tolerance_for_time_cooling_setpoint_not_met(self, value=0.2 ):
        """  Corresponds to IDD Field `tolerance_for_time_cooling_setpoint_not_met`
        If the zone temperature is above the cooling setpoint by more than
        this value, the following output variables will increment as appropriate
        Zone Cooling Setpoint Not Met Time
        Zone Cooling Setpoint Not Met While Occupied Time
        This also impacts table report "Annual Building Utility Performance Summary"
        subtable "Comfort and Setpoint Not Met Summary"

        Args:
            value (float): value for IDD Field `tolerance_for_time_cooling_setpoint_not_met`
                Units: deltaC
                Default value: 0.2
                value >= 0.0
                value <= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `tolerance_for_time_cooling_setpoint_not_met`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tolerance_for_time_cooling_setpoint_not_met`')
            if value > 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `tolerance_for_time_cooling_setpoint_not_met`')

        self._data["Tolerance for Time Cooling Setpoint Not Met"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.tolerance_for_time_heating_setpoint_not_met))
        out.append(self._to_str(self.tolerance_for_time_cooling_setpoint_not_met))
        return ",".join(out)

class OutputVariable(object):
    """ Corresponds to IDD object `Output:Variable`
        each Output:Variable command picks variables to be put onto the standard output file (.eso)
        some variables may not be reported for every simulation.
        a list of variables that can be reported are available after a run on
        the report dictionary file (.rdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Variable"
    field_count = 4
    required_fields = ["Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Variable`
        """
        self._data = OrderedDict()
        self._data["Key Value"] = None
        self._data["Variable Name"] = None
        self._data["Reporting Frequency"] = None
        self._data["Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_value = None
        else:
            self.key_value = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1

    @property
    def key_value(self):
        """Get key_value

        Returns:
            str: the value of `key_value` or None if not set
        """
        return self._data["Key Value"]

    @key_value.setter
    def key_value(self, value="*"):
        """  Corresponds to IDD Field `key_value`
        use '*' (without quotes) to apply this variable to all keys

        Args:
            value (str): value for IDD Field `key_value`
                Default value: *
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_value`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_value`')

        self._data["Key Value"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `variable_name`

        Args:
            value (str): value for IDD Field `variable_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')

        self._data["Variable Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Detailed lists every instance (i.e. HVAC variable timesteps)
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Detailed
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Detailed")
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `schedule_name`

        Args:
            value (str): value for IDD Field `schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')

        self._data["Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_value))
        out.append(self._to_str(self.variable_name))
        out.append(self._to_str(self.reporting_frequency))
        out.append(self._to_str(self.schedule_name))
        return ",".join(out)

class OutputMeter(object):
    """ Corresponds to IDD object `Output:Meter`
        Each Output:Meter command picks meters to be put onto the standard output file (.eso) and
        meter file (.mtr). Not all meters are reported in every simulation. A list of
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter puts results on both the eplusout.mtr and eplusout.eso files

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputMeterMeterFileOnly(object):
    """ Corresponds to IDD object `Output:Meter:MeterFileOnly`
        Each Output:Meter:MeterFileOnly command picks meters to be put only onto meter file (.mtr).
        Not all meters are reported in every simulation. A list of meters that can be reported
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter:MeterFileOnly"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter:MeterFileOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:MeterFileOnly puts results on the eplusout.mtr file only

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputMeterCumulative(object):
    """ Corresponds to IDD object `Output:Meter:Cumulative`
        Each Output:Meter:Cumulative command picks meters to be reported cumulatively onto the
        standard output file (.eso) and meter file (.mtr). Not all meters are reported in every
        simulation.
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter:Cumulative"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter:Cumulative`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:Cumulative puts results on both the eplusout.mtr and eplusout.eso files

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class OutputMeterCumulativeMeterFileOnly(object):
    """ Corresponds to IDD object `Output:Meter:Cumulative:MeterFileOnly`
        Each Output:Meter:Cumulative:MeterFileOnly command picks meters to be reported cumulatively
        onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in
        every simulation.
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter:Cumulative:MeterFileOnly"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter:Cumulative:MeterFileOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:Cumulative:MeterFileOnly puts results on the eplusout.mtr file only

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `reporting_frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            vals.add("Environment")
            vals.add("Annual")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class MeterCustom(object):
    """ Corresponds to IDD object `Meter:Custom`
        Used to allow users to combine specific variables and/or meters into
        "custom" meter configurations. To access these meters by name, one must
        first run a simulation to generate the RDD/MDD files and names.
    
    """
    internal_name = "Meter:Custom"
    field_count = 46
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Meter:Custom`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Key Name 1"] = None
        self._data["Output Variable or Meter Name 1"] = None
        self._data["Key Name 2"] = None
        self._data["Output Variable or Meter Name 2"] = None
        self._data["Key Name 3"] = None
        self._data["Output Variable or Meter Name 3"] = None
        self._data["Key Name 4"] = None
        self._data["Output Variable or Meter Name 4"] = None
        self._data["Key Name 5"] = None
        self._data["Output Variable or Meter Name 5"] = None
        self._data["Key Name 6"] = None
        self._data["Output Variable or Meter Name 6"] = None
        self._data["Key Name 7"] = None
        self._data["Output Variable or Meter Name 7"] = None
        self._data["Key Name 8"] = None
        self._data["Output Variable or Meter Name 8"] = None
        self._data["Key Name 9"] = None
        self._data["Output Variable or Meter Name 9"] = None
        self._data["Key Name 10"] = None
        self._data["Output Variable or Meter Name 10"] = None
        self._data["Key Name 11"] = None
        self._data["Output Variable or Meter Name 11"] = None
        self._data["Key Name 12"] = None
        self._data["Output Variable or Meter Name 12"] = None
        self._data["Key Name 13"] = None
        self._data["Output Variable or Meter Name 13"] = None
        self._data["Key Name 14"] = None
        self._data["Output Variable or Meter Name 14"] = None
        self._data["Key Name 15"] = None
        self._data["Output Variable or Meter Name 15"] = None
        self._data["Key Name 16"] = None
        self._data["Output Variable or Meter Name 16"] = None
        self._data["Key Name 17"] = None
        self._data["Output Variable or Meter Name 17"] = None
        self._data["Key Name 18"] = None
        self._data["Output Variable or Meter Name 18"] = None
        self._data["Key Name 19"] = None
        self._data["Output Variable or Meter Name 19"] = None
        self._data["Key Name 20"] = None
        self._data["Output Variable or Meter Name 20"] = None
        self._data["Key Name 21"] = None
        self._data["Output Variable or Meter Name 21"] = None
        self._data["Key Name 22"] = None
        self._data["Output Variable or Meter Name 22"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_1 = None
        else:
            self.key_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_1 = None
        else:
            self.output_variable_or_meter_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_2 = None
        else:
            self.key_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_2 = None
        else:
            self.output_variable_or_meter_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_3 = None
        else:
            self.key_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_3 = None
        else:
            self.output_variable_or_meter_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_4 = None
        else:
            self.key_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_4 = None
        else:
            self.output_variable_or_meter_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_5 = None
        else:
            self.key_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_5 = None
        else:
            self.output_variable_or_meter_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_6 = None
        else:
            self.key_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_6 = None
        else:
            self.output_variable_or_meter_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_7 = None
        else:
            self.key_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_7 = None
        else:
            self.output_variable_or_meter_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_8 = None
        else:
            self.key_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_8 = None
        else:
            self.output_variable_or_meter_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_9 = None
        else:
            self.key_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_9 = None
        else:
            self.output_variable_or_meter_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_10 = None
        else:
            self.key_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_10 = None
        else:
            self.output_variable_or_meter_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_11 = None
        else:
            self.key_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_11 = None
        else:
            self.output_variable_or_meter_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_12 = None
        else:
            self.key_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_12 = None
        else:
            self.output_variable_or_meter_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_13 = None
        else:
            self.key_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_13 = None
        else:
            self.output_variable_or_meter_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_14 = None
        else:
            self.key_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_14 = None
        else:
            self.output_variable_or_meter_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_15 = None
        else:
            self.key_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_15 = None
        else:
            self.output_variable_or_meter_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_16 = None
        else:
            self.key_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_16 = None
        else:
            self.output_variable_or_meter_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_17 = None
        else:
            self.key_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_17 = None
        else:
            self.output_variable_or_meter_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_18 = None
        else:
            self.key_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_18 = None
        else:
            self.output_variable_or_meter_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_19 = None
        else:
            self.key_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_19 = None
        else:
            self.output_variable_or_meter_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_20 = None
        else:
            self.key_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_20 = None
        else:
            self.output_variable_or_meter_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_21 = None
        else:
            self.key_name_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_21 = None
        else:
            self.output_variable_or_meter_name_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_22 = None
        else:
            self.key_name_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_22 = None
        else:
            self.output_variable_or_meter_name_22 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - Water
                      - Generic
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("Water")
            vals.add("Generic")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def key_name_1(self):
        """Get key_name_1

        Returns:
            str: the value of `key_name_1` or None if not set
        """
        return self._data["Key Name 1"]

    @key_name_1.setter
    def key_name_1(self, value=None):
        """  Corresponds to IDD Field `key_name_1`

        Args:
            value (str): value for IDD Field `key_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_1`')

        self._data["Key Name 1"] = value

    @property
    def output_variable_or_meter_name_1(self):
        """Get output_variable_or_meter_name_1

        Returns:
            str: the value of `output_variable_or_meter_name_1` or None if not set
        """
        return self._data["Output Variable or Meter Name 1"]

    @output_variable_or_meter_name_1.setter
    def output_variable_or_meter_name_1(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_1`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_1`')

        self._data["Output Variable or Meter Name 1"] = value

    @property
    def key_name_2(self):
        """Get key_name_2

        Returns:
            str: the value of `key_name_2` or None if not set
        """
        return self._data["Key Name 2"]

    @key_name_2.setter
    def key_name_2(self, value=None):
        """  Corresponds to IDD Field `key_name_2`

        Args:
            value (str): value for IDD Field `key_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_2`')

        self._data["Key Name 2"] = value

    @property
    def output_variable_or_meter_name_2(self):
        """Get output_variable_or_meter_name_2

        Returns:
            str: the value of `output_variable_or_meter_name_2` or None if not set
        """
        return self._data["Output Variable or Meter Name 2"]

    @output_variable_or_meter_name_2.setter
    def output_variable_or_meter_name_2(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_2`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_2`')

        self._data["Output Variable or Meter Name 2"] = value

    @property
    def key_name_3(self):
        """Get key_name_3

        Returns:
            str: the value of `key_name_3` or None if not set
        """
        return self._data["Key Name 3"]

    @key_name_3.setter
    def key_name_3(self, value=None):
        """  Corresponds to IDD Field `key_name_3`

        Args:
            value (str): value for IDD Field `key_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_3`')

        self._data["Key Name 3"] = value

    @property
    def output_variable_or_meter_name_3(self):
        """Get output_variable_or_meter_name_3

        Returns:
            str: the value of `output_variable_or_meter_name_3` or None if not set
        """
        return self._data["Output Variable or Meter Name 3"]

    @output_variable_or_meter_name_3.setter
    def output_variable_or_meter_name_3(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_3`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_3`')

        self._data["Output Variable or Meter Name 3"] = value

    @property
    def key_name_4(self):
        """Get key_name_4

        Returns:
            str: the value of `key_name_4` or None if not set
        """
        return self._data["Key Name 4"]

    @key_name_4.setter
    def key_name_4(self, value=None):
        """  Corresponds to IDD Field `key_name_4`

        Args:
            value (str): value for IDD Field `key_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_4`')

        self._data["Key Name 4"] = value

    @property
    def output_variable_or_meter_name_4(self):
        """Get output_variable_or_meter_name_4

        Returns:
            str: the value of `output_variable_or_meter_name_4` or None if not set
        """
        return self._data["Output Variable or Meter Name 4"]

    @output_variable_or_meter_name_4.setter
    def output_variable_or_meter_name_4(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_4`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_4`')

        self._data["Output Variable or Meter Name 4"] = value

    @property
    def key_name_5(self):
        """Get key_name_5

        Returns:
            str: the value of `key_name_5` or None if not set
        """
        return self._data["Key Name 5"]

    @key_name_5.setter
    def key_name_5(self, value=None):
        """  Corresponds to IDD Field `key_name_5`

        Args:
            value (str): value for IDD Field `key_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_5`')

        self._data["Key Name 5"] = value

    @property
    def output_variable_or_meter_name_5(self):
        """Get output_variable_or_meter_name_5

        Returns:
            str: the value of `output_variable_or_meter_name_5` or None if not set
        """
        return self._data["Output Variable or Meter Name 5"]

    @output_variable_or_meter_name_5.setter
    def output_variable_or_meter_name_5(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_5`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_5`')

        self._data["Output Variable or Meter Name 5"] = value

    @property
    def key_name_6(self):
        """Get key_name_6

        Returns:
            str: the value of `key_name_6` or None if not set
        """
        return self._data["Key Name 6"]

    @key_name_6.setter
    def key_name_6(self, value=None):
        """  Corresponds to IDD Field `key_name_6`

        Args:
            value (str): value for IDD Field `key_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_6`')

        self._data["Key Name 6"] = value

    @property
    def output_variable_or_meter_name_6(self):
        """Get output_variable_or_meter_name_6

        Returns:
            str: the value of `output_variable_or_meter_name_6` or None if not set
        """
        return self._data["Output Variable or Meter Name 6"]

    @output_variable_or_meter_name_6.setter
    def output_variable_or_meter_name_6(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_6`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_6`')

        self._data["Output Variable or Meter Name 6"] = value

    @property
    def key_name_7(self):
        """Get key_name_7

        Returns:
            str: the value of `key_name_7` or None if not set
        """
        return self._data["Key Name 7"]

    @key_name_7.setter
    def key_name_7(self, value=None):
        """  Corresponds to IDD Field `key_name_7`

        Args:
            value (str): value for IDD Field `key_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_7`')

        self._data["Key Name 7"] = value

    @property
    def output_variable_or_meter_name_7(self):
        """Get output_variable_or_meter_name_7

        Returns:
            str: the value of `output_variable_or_meter_name_7` or None if not set
        """
        return self._data["Output Variable or Meter Name 7"]

    @output_variable_or_meter_name_7.setter
    def output_variable_or_meter_name_7(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_7`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_7`')

        self._data["Output Variable or Meter Name 7"] = value

    @property
    def key_name_8(self):
        """Get key_name_8

        Returns:
            str: the value of `key_name_8` or None if not set
        """
        return self._data["Key Name 8"]

    @key_name_8.setter
    def key_name_8(self, value=None):
        """  Corresponds to IDD Field `key_name_8`

        Args:
            value (str): value for IDD Field `key_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_8`')

        self._data["Key Name 8"] = value

    @property
    def output_variable_or_meter_name_8(self):
        """Get output_variable_or_meter_name_8

        Returns:
            str: the value of `output_variable_or_meter_name_8` or None if not set
        """
        return self._data["Output Variable or Meter Name 8"]

    @output_variable_or_meter_name_8.setter
    def output_variable_or_meter_name_8(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_8`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_8`')

        self._data["Output Variable or Meter Name 8"] = value

    @property
    def key_name_9(self):
        """Get key_name_9

        Returns:
            str: the value of `key_name_9` or None if not set
        """
        return self._data["Key Name 9"]

    @key_name_9.setter
    def key_name_9(self, value=None):
        """  Corresponds to IDD Field `key_name_9`

        Args:
            value (str): value for IDD Field `key_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_9`')

        self._data["Key Name 9"] = value

    @property
    def output_variable_or_meter_name_9(self):
        """Get output_variable_or_meter_name_9

        Returns:
            str: the value of `output_variable_or_meter_name_9` or None if not set
        """
        return self._data["Output Variable or Meter Name 9"]

    @output_variable_or_meter_name_9.setter
    def output_variable_or_meter_name_9(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_9`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_9`')

        self._data["Output Variable or Meter Name 9"] = value

    @property
    def key_name_10(self):
        """Get key_name_10

        Returns:
            str: the value of `key_name_10` or None if not set
        """
        return self._data["Key Name 10"]

    @key_name_10.setter
    def key_name_10(self, value=None):
        """  Corresponds to IDD Field `key_name_10`

        Args:
            value (str): value for IDD Field `key_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_10`')

        self._data["Key Name 10"] = value

    @property
    def output_variable_or_meter_name_10(self):
        """Get output_variable_or_meter_name_10

        Returns:
            str: the value of `output_variable_or_meter_name_10` or None if not set
        """
        return self._data["Output Variable or Meter Name 10"]

    @output_variable_or_meter_name_10.setter
    def output_variable_or_meter_name_10(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_10`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_10`')

        self._data["Output Variable or Meter Name 10"] = value

    @property
    def key_name_11(self):
        """Get key_name_11

        Returns:
            str: the value of `key_name_11` or None if not set
        """
        return self._data["Key Name 11"]

    @key_name_11.setter
    def key_name_11(self, value=None):
        """  Corresponds to IDD Field `key_name_11`

        Args:
            value (str): value for IDD Field `key_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_11`')

        self._data["Key Name 11"] = value

    @property
    def output_variable_or_meter_name_11(self):
        """Get output_variable_or_meter_name_11

        Returns:
            str: the value of `output_variable_or_meter_name_11` or None if not set
        """
        return self._data["Output Variable or Meter Name 11"]

    @output_variable_or_meter_name_11.setter
    def output_variable_or_meter_name_11(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_11`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_11`')

        self._data["Output Variable or Meter Name 11"] = value

    @property
    def key_name_12(self):
        """Get key_name_12

        Returns:
            str: the value of `key_name_12` or None if not set
        """
        return self._data["Key Name 12"]

    @key_name_12.setter
    def key_name_12(self, value=None):
        """  Corresponds to IDD Field `key_name_12`

        Args:
            value (str): value for IDD Field `key_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_12`')

        self._data["Key Name 12"] = value

    @property
    def output_variable_or_meter_name_12(self):
        """Get output_variable_or_meter_name_12

        Returns:
            str: the value of `output_variable_or_meter_name_12` or None if not set
        """
        return self._data["Output Variable or Meter Name 12"]

    @output_variable_or_meter_name_12.setter
    def output_variable_or_meter_name_12(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_12`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_12`')

        self._data["Output Variable or Meter Name 12"] = value

    @property
    def key_name_13(self):
        """Get key_name_13

        Returns:
            str: the value of `key_name_13` or None if not set
        """
        return self._data["Key Name 13"]

    @key_name_13.setter
    def key_name_13(self, value=None):
        """  Corresponds to IDD Field `key_name_13`

        Args:
            value (str): value for IDD Field `key_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_13`')

        self._data["Key Name 13"] = value

    @property
    def output_variable_or_meter_name_13(self):
        """Get output_variable_or_meter_name_13

        Returns:
            str: the value of `output_variable_or_meter_name_13` or None if not set
        """
        return self._data["Output Variable or Meter Name 13"]

    @output_variable_or_meter_name_13.setter
    def output_variable_or_meter_name_13(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_13`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_13`')

        self._data["Output Variable or Meter Name 13"] = value

    @property
    def key_name_14(self):
        """Get key_name_14

        Returns:
            str: the value of `key_name_14` or None if not set
        """
        return self._data["Key Name 14"]

    @key_name_14.setter
    def key_name_14(self, value=None):
        """  Corresponds to IDD Field `key_name_14`

        Args:
            value (str): value for IDD Field `key_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_14`')

        self._data["Key Name 14"] = value

    @property
    def output_variable_or_meter_name_14(self):
        """Get output_variable_or_meter_name_14

        Returns:
            str: the value of `output_variable_or_meter_name_14` or None if not set
        """
        return self._data["Output Variable or Meter Name 14"]

    @output_variable_or_meter_name_14.setter
    def output_variable_or_meter_name_14(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_14`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_14`')

        self._data["Output Variable or Meter Name 14"] = value

    @property
    def key_name_15(self):
        """Get key_name_15

        Returns:
            str: the value of `key_name_15` or None if not set
        """
        return self._data["Key Name 15"]

    @key_name_15.setter
    def key_name_15(self, value=None):
        """  Corresponds to IDD Field `key_name_15`

        Args:
            value (str): value for IDD Field `key_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_15`')

        self._data["Key Name 15"] = value

    @property
    def output_variable_or_meter_name_15(self):
        """Get output_variable_or_meter_name_15

        Returns:
            str: the value of `output_variable_or_meter_name_15` or None if not set
        """
        return self._data["Output Variable or Meter Name 15"]

    @output_variable_or_meter_name_15.setter
    def output_variable_or_meter_name_15(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_15`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_15`')

        self._data["Output Variable or Meter Name 15"] = value

    @property
    def key_name_16(self):
        """Get key_name_16

        Returns:
            str: the value of `key_name_16` or None if not set
        """
        return self._data["Key Name 16"]

    @key_name_16.setter
    def key_name_16(self, value=None):
        """  Corresponds to IDD Field `key_name_16`

        Args:
            value (str): value for IDD Field `key_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_16`')

        self._data["Key Name 16"] = value

    @property
    def output_variable_or_meter_name_16(self):
        """Get output_variable_or_meter_name_16

        Returns:
            str: the value of `output_variable_or_meter_name_16` or None if not set
        """
        return self._data["Output Variable or Meter Name 16"]

    @output_variable_or_meter_name_16.setter
    def output_variable_or_meter_name_16(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_16`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_16`')

        self._data["Output Variable or Meter Name 16"] = value

    @property
    def key_name_17(self):
        """Get key_name_17

        Returns:
            str: the value of `key_name_17` or None if not set
        """
        return self._data["Key Name 17"]

    @key_name_17.setter
    def key_name_17(self, value=None):
        """  Corresponds to IDD Field `key_name_17`

        Args:
            value (str): value for IDD Field `key_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_17`')

        self._data["Key Name 17"] = value

    @property
    def output_variable_or_meter_name_17(self):
        """Get output_variable_or_meter_name_17

        Returns:
            str: the value of `output_variable_or_meter_name_17` or None if not set
        """
        return self._data["Output Variable or Meter Name 17"]

    @output_variable_or_meter_name_17.setter
    def output_variable_or_meter_name_17(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_17`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_17`')

        self._data["Output Variable or Meter Name 17"] = value

    @property
    def key_name_18(self):
        """Get key_name_18

        Returns:
            str: the value of `key_name_18` or None if not set
        """
        return self._data["Key Name 18"]

    @key_name_18.setter
    def key_name_18(self, value=None):
        """  Corresponds to IDD Field `key_name_18`

        Args:
            value (str): value for IDD Field `key_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_18`')

        self._data["Key Name 18"] = value

    @property
    def output_variable_or_meter_name_18(self):
        """Get output_variable_or_meter_name_18

        Returns:
            str: the value of `output_variable_or_meter_name_18` or None if not set
        """
        return self._data["Output Variable or Meter Name 18"]

    @output_variable_or_meter_name_18.setter
    def output_variable_or_meter_name_18(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_18`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_18`')

        self._data["Output Variable or Meter Name 18"] = value

    @property
    def key_name_19(self):
        """Get key_name_19

        Returns:
            str: the value of `key_name_19` or None if not set
        """
        return self._data["Key Name 19"]

    @key_name_19.setter
    def key_name_19(self, value=None):
        """  Corresponds to IDD Field `key_name_19`

        Args:
            value (str): value for IDD Field `key_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_19`')

        self._data["Key Name 19"] = value

    @property
    def output_variable_or_meter_name_19(self):
        """Get output_variable_or_meter_name_19

        Returns:
            str: the value of `output_variable_or_meter_name_19` or None if not set
        """
        return self._data["Output Variable or Meter Name 19"]

    @output_variable_or_meter_name_19.setter
    def output_variable_or_meter_name_19(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_19`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_19`')

        self._data["Output Variable or Meter Name 19"] = value

    @property
    def key_name_20(self):
        """Get key_name_20

        Returns:
            str: the value of `key_name_20` or None if not set
        """
        return self._data["Key Name 20"]

    @key_name_20.setter
    def key_name_20(self, value=None):
        """  Corresponds to IDD Field `key_name_20`

        Args:
            value (str): value for IDD Field `key_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_20`')

        self._data["Key Name 20"] = value

    @property
    def output_variable_or_meter_name_20(self):
        """Get output_variable_or_meter_name_20

        Returns:
            str: the value of `output_variable_or_meter_name_20` or None if not set
        """
        return self._data["Output Variable or Meter Name 20"]

    @output_variable_or_meter_name_20.setter
    def output_variable_or_meter_name_20(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_20`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_20`')

        self._data["Output Variable or Meter Name 20"] = value

    @property
    def key_name_21(self):
        """Get key_name_21

        Returns:
            str: the value of `key_name_21` or None if not set
        """
        return self._data["Key Name 21"]

    @key_name_21.setter
    def key_name_21(self, value=None):
        """  Corresponds to IDD Field `key_name_21`

        Args:
            value (str): value for IDD Field `key_name_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_21`')

        self._data["Key Name 21"] = value

    @property
    def output_variable_or_meter_name_21(self):
        """Get output_variable_or_meter_name_21

        Returns:
            str: the value of `output_variable_or_meter_name_21` or None if not set
        """
        return self._data["Output Variable or Meter Name 21"]

    @output_variable_or_meter_name_21.setter
    def output_variable_or_meter_name_21(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_21`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_21`')

        self._data["Output Variable or Meter Name 21"] = value

    @property
    def key_name_22(self):
        """Get key_name_22

        Returns:
            str: the value of `key_name_22` or None if not set
        """
        return self._data["Key Name 22"]

    @key_name_22.setter
    def key_name_22(self, value=None):
        """  Corresponds to IDD Field `key_name_22`

        Args:
            value (str): value for IDD Field `key_name_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_22`')

        self._data["Key Name 22"] = value

    @property
    def output_variable_or_meter_name_22(self):
        """Get output_variable_or_meter_name_22

        Returns:
            str: the value of `output_variable_or_meter_name_22` or None if not set
        """
        return self._data["Output Variable or Meter Name 22"]

    @output_variable_or_meter_name_22.setter
    def output_variable_or_meter_name_22(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_22`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_22`')

        self._data["Output Variable or Meter Name 22"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.key_name_1))
        out.append(self._to_str(self.output_variable_or_meter_name_1))
        out.append(self._to_str(self.key_name_2))
        out.append(self._to_str(self.output_variable_or_meter_name_2))
        out.append(self._to_str(self.key_name_3))
        out.append(self._to_str(self.output_variable_or_meter_name_3))
        out.append(self._to_str(self.key_name_4))
        out.append(self._to_str(self.output_variable_or_meter_name_4))
        out.append(self._to_str(self.key_name_5))
        out.append(self._to_str(self.output_variable_or_meter_name_5))
        out.append(self._to_str(self.key_name_6))
        out.append(self._to_str(self.output_variable_or_meter_name_6))
        out.append(self._to_str(self.key_name_7))
        out.append(self._to_str(self.output_variable_or_meter_name_7))
        out.append(self._to_str(self.key_name_8))
        out.append(self._to_str(self.output_variable_or_meter_name_8))
        out.append(self._to_str(self.key_name_9))
        out.append(self._to_str(self.output_variable_or_meter_name_9))
        out.append(self._to_str(self.key_name_10))
        out.append(self._to_str(self.output_variable_or_meter_name_10))
        out.append(self._to_str(self.key_name_11))
        out.append(self._to_str(self.output_variable_or_meter_name_11))
        out.append(self._to_str(self.key_name_12))
        out.append(self._to_str(self.output_variable_or_meter_name_12))
        out.append(self._to_str(self.key_name_13))
        out.append(self._to_str(self.output_variable_or_meter_name_13))
        out.append(self._to_str(self.key_name_14))
        out.append(self._to_str(self.output_variable_or_meter_name_14))
        out.append(self._to_str(self.key_name_15))
        out.append(self._to_str(self.output_variable_or_meter_name_15))
        out.append(self._to_str(self.key_name_16))
        out.append(self._to_str(self.output_variable_or_meter_name_16))
        out.append(self._to_str(self.key_name_17))
        out.append(self._to_str(self.output_variable_or_meter_name_17))
        out.append(self._to_str(self.key_name_18))
        out.append(self._to_str(self.output_variable_or_meter_name_18))
        out.append(self._to_str(self.key_name_19))
        out.append(self._to_str(self.output_variable_or_meter_name_19))
        out.append(self._to_str(self.key_name_20))
        out.append(self._to_str(self.output_variable_or_meter_name_20))
        out.append(self._to_str(self.key_name_21))
        out.append(self._to_str(self.output_variable_or_meter_name_21))
        out.append(self._to_str(self.key_name_22))
        out.append(self._to_str(self.output_variable_or_meter_name_22))
        return ",".join(out)

class MeterCustomDecrement(object):
    """ Corresponds to IDD object `Meter:CustomDecrement`
        Used to allow users to combine specific variables and/or meters into
        "custom" meter configurations. To access these meters by name, one must
        first run a simulation to generate the RDD/MDD files and names.
    
    """
    internal_name = "Meter:CustomDecrement"
    field_count = 47
    required_fields = ["Name", "Source Meter Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Meter:CustomDecrement`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Source Meter Name"] = None
        self._data["Key Name 1"] = None
        self._data["Output Variable or Meter Name 1"] = None
        self._data["Key Name 2"] = None
        self._data["Output Variable or Meter Name 2"] = None
        self._data["Key Name 3"] = None
        self._data["Output Variable or Meter Name 3"] = None
        self._data["Key Name 4"] = None
        self._data["Output Variable or Meter Name 4"] = None
        self._data["Key Name 5"] = None
        self._data["Output Variable or Meter Name 5"] = None
        self._data["Key Name 6"] = None
        self._data["Output Variable or Meter Name 6"] = None
        self._data["Key Name 7"] = None
        self._data["Output Variable or Meter Name 7"] = None
        self._data["Key Name 8"] = None
        self._data["Output Variable or Meter Name 8"] = None
        self._data["Key Name 9"] = None
        self._data["Output Variable or Meter Name 9"] = None
        self._data["Key Name 10"] = None
        self._data["Output Variable or Meter Name 10"] = None
        self._data["Key Name 11"] = None
        self._data["Output Variable or Meter Name 11"] = None
        self._data["Key Name 12"] = None
        self._data["Output Variable or Meter Name 12"] = None
        self._data["Key Name 13"] = None
        self._data["Output Variable or Meter Name 13"] = None
        self._data["Key Name 14"] = None
        self._data["Output Variable or Meter Name 14"] = None
        self._data["Key Name 15"] = None
        self._data["Output Variable or Meter Name 15"] = None
        self._data["Key Name 16"] = None
        self._data["Output Variable or Meter Name 16"] = None
        self._data["Key Name 17"] = None
        self._data["Output Variable or Meter Name 17"] = None
        self._data["Key Name 18"] = None
        self._data["Output Variable or Meter Name 18"] = None
        self._data["Key Name 19"] = None
        self._data["Output Variable or Meter Name 19"] = None
        self._data["Key Name 20"] = None
        self._data["Output Variable or Meter Name 20"] = None
        self._data["Key Name 21"] = None
        self._data["Output Variable or Meter Name 21"] = None
        self._data["Key Name 22"] = None
        self._data["Output Variable or Meter Name 22"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_meter_name = None
        else:
            self.source_meter_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_1 = None
        else:
            self.key_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_1 = None
        else:
            self.output_variable_or_meter_name_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_2 = None
        else:
            self.key_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_2 = None
        else:
            self.output_variable_or_meter_name_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_3 = None
        else:
            self.key_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_3 = None
        else:
            self.output_variable_or_meter_name_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_4 = None
        else:
            self.key_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_4 = None
        else:
            self.output_variable_or_meter_name_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_5 = None
        else:
            self.key_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_5 = None
        else:
            self.output_variable_or_meter_name_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_6 = None
        else:
            self.key_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_6 = None
        else:
            self.output_variable_or_meter_name_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_7 = None
        else:
            self.key_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_7 = None
        else:
            self.output_variable_or_meter_name_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_8 = None
        else:
            self.key_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_8 = None
        else:
            self.output_variable_or_meter_name_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_9 = None
        else:
            self.key_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_9 = None
        else:
            self.output_variable_or_meter_name_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_10 = None
        else:
            self.key_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_10 = None
        else:
            self.output_variable_or_meter_name_10 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_11 = None
        else:
            self.key_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_11 = None
        else:
            self.output_variable_or_meter_name_11 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_12 = None
        else:
            self.key_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_12 = None
        else:
            self.output_variable_or_meter_name_12 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_13 = None
        else:
            self.key_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_13 = None
        else:
            self.output_variable_or_meter_name_13 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_14 = None
        else:
            self.key_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_14 = None
        else:
            self.output_variable_or_meter_name_14 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_15 = None
        else:
            self.key_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_15 = None
        else:
            self.output_variable_or_meter_name_15 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_16 = None
        else:
            self.key_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_16 = None
        else:
            self.output_variable_or_meter_name_16 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_17 = None
        else:
            self.key_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_17 = None
        else:
            self.output_variable_or_meter_name_17 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_18 = None
        else:
            self.key_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_18 = None
        else:
            self.output_variable_or_meter_name_18 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_19 = None
        else:
            self.key_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_19 = None
        else:
            self.output_variable_or_meter_name_19 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_20 = None
        else:
            self.key_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_20 = None
        else:
            self.output_variable_or_meter_name_20 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_21 = None
        else:
            self.key_name_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_21 = None
        else:
            self.output_variable_or_meter_name_21 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_name_22 = None
        else:
            self.key_name_22 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_22 = None
        else:
            self.output_variable_or_meter_name_22 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `fuel_type`

        Args:
            value (str): value for IDD Field `fuel_type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - Water
                      - Generic
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("PropaneGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Diesel")
            vals.add("Gasoline")
            vals.add("Water")
            vals.add("Generic")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `fuel_type`'.format(value))

        self._data["Fuel Type"] = value

    @property
    def source_meter_name(self):
        """Get source_meter_name

        Returns:
            str: the value of `source_meter_name` or None if not set
        """
        return self._data["Source Meter Name"]

    @source_meter_name.setter
    def source_meter_name(self, value=None):
        """  Corresponds to IDD Field `source_meter_name`

        Args:
            value (str): value for IDD Field `source_meter_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_meter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_meter_name`')

        self._data["Source Meter Name"] = value

    @property
    def key_name_1(self):
        """Get key_name_1

        Returns:
            str: the value of `key_name_1` or None if not set
        """
        return self._data["Key Name 1"]

    @key_name_1.setter
    def key_name_1(self, value=None):
        """  Corresponds to IDD Field `key_name_1`

        Args:
            value (str): value for IDD Field `key_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_1`')

        self._data["Key Name 1"] = value

    @property
    def output_variable_or_meter_name_1(self):
        """Get output_variable_or_meter_name_1

        Returns:
            str: the value of `output_variable_or_meter_name_1` or None if not set
        """
        return self._data["Output Variable or Meter Name 1"]

    @output_variable_or_meter_name_1.setter
    def output_variable_or_meter_name_1(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_1`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_1`')

        self._data["Output Variable or Meter Name 1"] = value

    @property
    def key_name_2(self):
        """Get key_name_2

        Returns:
            str: the value of `key_name_2` or None if not set
        """
        return self._data["Key Name 2"]

    @key_name_2.setter
    def key_name_2(self, value=None):
        """  Corresponds to IDD Field `key_name_2`

        Args:
            value (str): value for IDD Field `key_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_2`')

        self._data["Key Name 2"] = value

    @property
    def output_variable_or_meter_name_2(self):
        """Get output_variable_or_meter_name_2

        Returns:
            str: the value of `output_variable_or_meter_name_2` or None if not set
        """
        return self._data["Output Variable or Meter Name 2"]

    @output_variable_or_meter_name_2.setter
    def output_variable_or_meter_name_2(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_2`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_2`')

        self._data["Output Variable or Meter Name 2"] = value

    @property
    def key_name_3(self):
        """Get key_name_3

        Returns:
            str: the value of `key_name_3` or None if not set
        """
        return self._data["Key Name 3"]

    @key_name_3.setter
    def key_name_3(self, value=None):
        """  Corresponds to IDD Field `key_name_3`

        Args:
            value (str): value for IDD Field `key_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_3`')

        self._data["Key Name 3"] = value

    @property
    def output_variable_or_meter_name_3(self):
        """Get output_variable_or_meter_name_3

        Returns:
            str: the value of `output_variable_or_meter_name_3` or None if not set
        """
        return self._data["Output Variable or Meter Name 3"]

    @output_variable_or_meter_name_3.setter
    def output_variable_or_meter_name_3(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_3`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_3`')

        self._data["Output Variable or Meter Name 3"] = value

    @property
    def key_name_4(self):
        """Get key_name_4

        Returns:
            str: the value of `key_name_4` or None if not set
        """
        return self._data["Key Name 4"]

    @key_name_4.setter
    def key_name_4(self, value=None):
        """  Corresponds to IDD Field `key_name_4`

        Args:
            value (str): value for IDD Field `key_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_4`')

        self._data["Key Name 4"] = value

    @property
    def output_variable_or_meter_name_4(self):
        """Get output_variable_or_meter_name_4

        Returns:
            str: the value of `output_variable_or_meter_name_4` or None if not set
        """
        return self._data["Output Variable or Meter Name 4"]

    @output_variable_or_meter_name_4.setter
    def output_variable_or_meter_name_4(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_4`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_4`')

        self._data["Output Variable or Meter Name 4"] = value

    @property
    def key_name_5(self):
        """Get key_name_5

        Returns:
            str: the value of `key_name_5` or None if not set
        """
        return self._data["Key Name 5"]

    @key_name_5.setter
    def key_name_5(self, value=None):
        """  Corresponds to IDD Field `key_name_5`

        Args:
            value (str): value for IDD Field `key_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_5`')

        self._data["Key Name 5"] = value

    @property
    def output_variable_or_meter_name_5(self):
        """Get output_variable_or_meter_name_5

        Returns:
            str: the value of `output_variable_or_meter_name_5` or None if not set
        """
        return self._data["Output Variable or Meter Name 5"]

    @output_variable_or_meter_name_5.setter
    def output_variable_or_meter_name_5(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_5`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_5`')

        self._data["Output Variable or Meter Name 5"] = value

    @property
    def key_name_6(self):
        """Get key_name_6

        Returns:
            str: the value of `key_name_6` or None if not set
        """
        return self._data["Key Name 6"]

    @key_name_6.setter
    def key_name_6(self, value=None):
        """  Corresponds to IDD Field `key_name_6`

        Args:
            value (str): value for IDD Field `key_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_6`')

        self._data["Key Name 6"] = value

    @property
    def output_variable_or_meter_name_6(self):
        """Get output_variable_or_meter_name_6

        Returns:
            str: the value of `output_variable_or_meter_name_6` or None if not set
        """
        return self._data["Output Variable or Meter Name 6"]

    @output_variable_or_meter_name_6.setter
    def output_variable_or_meter_name_6(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_6`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_6`')

        self._data["Output Variable or Meter Name 6"] = value

    @property
    def key_name_7(self):
        """Get key_name_7

        Returns:
            str: the value of `key_name_7` or None if not set
        """
        return self._data["Key Name 7"]

    @key_name_7.setter
    def key_name_7(self, value=None):
        """  Corresponds to IDD Field `key_name_7`

        Args:
            value (str): value for IDD Field `key_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_7`')

        self._data["Key Name 7"] = value

    @property
    def output_variable_or_meter_name_7(self):
        """Get output_variable_or_meter_name_7

        Returns:
            str: the value of `output_variable_or_meter_name_7` or None if not set
        """
        return self._data["Output Variable or Meter Name 7"]

    @output_variable_or_meter_name_7.setter
    def output_variable_or_meter_name_7(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_7`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_7`')

        self._data["Output Variable or Meter Name 7"] = value

    @property
    def key_name_8(self):
        """Get key_name_8

        Returns:
            str: the value of `key_name_8` or None if not set
        """
        return self._data["Key Name 8"]

    @key_name_8.setter
    def key_name_8(self, value=None):
        """  Corresponds to IDD Field `key_name_8`

        Args:
            value (str): value for IDD Field `key_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_8`')

        self._data["Key Name 8"] = value

    @property
    def output_variable_or_meter_name_8(self):
        """Get output_variable_or_meter_name_8

        Returns:
            str: the value of `output_variable_or_meter_name_8` or None if not set
        """
        return self._data["Output Variable or Meter Name 8"]

    @output_variable_or_meter_name_8.setter
    def output_variable_or_meter_name_8(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_8`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_8`')

        self._data["Output Variable or Meter Name 8"] = value

    @property
    def key_name_9(self):
        """Get key_name_9

        Returns:
            str: the value of `key_name_9` or None if not set
        """
        return self._data["Key Name 9"]

    @key_name_9.setter
    def key_name_9(self, value=None):
        """  Corresponds to IDD Field `key_name_9`

        Args:
            value (str): value for IDD Field `key_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_9`')

        self._data["Key Name 9"] = value

    @property
    def output_variable_or_meter_name_9(self):
        """Get output_variable_or_meter_name_9

        Returns:
            str: the value of `output_variable_or_meter_name_9` or None if not set
        """
        return self._data["Output Variable or Meter Name 9"]

    @output_variable_or_meter_name_9.setter
    def output_variable_or_meter_name_9(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_9`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_9`')

        self._data["Output Variable or Meter Name 9"] = value

    @property
    def key_name_10(self):
        """Get key_name_10

        Returns:
            str: the value of `key_name_10` or None if not set
        """
        return self._data["Key Name 10"]

    @key_name_10.setter
    def key_name_10(self, value=None):
        """  Corresponds to IDD Field `key_name_10`

        Args:
            value (str): value for IDD Field `key_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_10`')

        self._data["Key Name 10"] = value

    @property
    def output_variable_or_meter_name_10(self):
        """Get output_variable_or_meter_name_10

        Returns:
            str: the value of `output_variable_or_meter_name_10` or None if not set
        """
        return self._data["Output Variable or Meter Name 10"]

    @output_variable_or_meter_name_10.setter
    def output_variable_or_meter_name_10(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_10`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_10`')

        self._data["Output Variable or Meter Name 10"] = value

    @property
    def key_name_11(self):
        """Get key_name_11

        Returns:
            str: the value of `key_name_11` or None if not set
        """
        return self._data["Key Name 11"]

    @key_name_11.setter
    def key_name_11(self, value=None):
        """  Corresponds to IDD Field `key_name_11`

        Args:
            value (str): value for IDD Field `key_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_11`')

        self._data["Key Name 11"] = value

    @property
    def output_variable_or_meter_name_11(self):
        """Get output_variable_or_meter_name_11

        Returns:
            str: the value of `output_variable_or_meter_name_11` or None if not set
        """
        return self._data["Output Variable or Meter Name 11"]

    @output_variable_or_meter_name_11.setter
    def output_variable_or_meter_name_11(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_11`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_11`')

        self._data["Output Variable or Meter Name 11"] = value

    @property
    def key_name_12(self):
        """Get key_name_12

        Returns:
            str: the value of `key_name_12` or None if not set
        """
        return self._data["Key Name 12"]

    @key_name_12.setter
    def key_name_12(self, value=None):
        """  Corresponds to IDD Field `key_name_12`

        Args:
            value (str): value for IDD Field `key_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_12`')

        self._data["Key Name 12"] = value

    @property
    def output_variable_or_meter_name_12(self):
        """Get output_variable_or_meter_name_12

        Returns:
            str: the value of `output_variable_or_meter_name_12` or None if not set
        """
        return self._data["Output Variable or Meter Name 12"]

    @output_variable_or_meter_name_12.setter
    def output_variable_or_meter_name_12(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_12`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_12`')

        self._data["Output Variable or Meter Name 12"] = value

    @property
    def key_name_13(self):
        """Get key_name_13

        Returns:
            str: the value of `key_name_13` or None if not set
        """
        return self._data["Key Name 13"]

    @key_name_13.setter
    def key_name_13(self, value=None):
        """  Corresponds to IDD Field `key_name_13`

        Args:
            value (str): value for IDD Field `key_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_13`')

        self._data["Key Name 13"] = value

    @property
    def output_variable_or_meter_name_13(self):
        """Get output_variable_or_meter_name_13

        Returns:
            str: the value of `output_variable_or_meter_name_13` or None if not set
        """
        return self._data["Output Variable or Meter Name 13"]

    @output_variable_or_meter_name_13.setter
    def output_variable_or_meter_name_13(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_13`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_13`')

        self._data["Output Variable or Meter Name 13"] = value

    @property
    def key_name_14(self):
        """Get key_name_14

        Returns:
            str: the value of `key_name_14` or None if not set
        """
        return self._data["Key Name 14"]

    @key_name_14.setter
    def key_name_14(self, value=None):
        """  Corresponds to IDD Field `key_name_14`

        Args:
            value (str): value for IDD Field `key_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_14`')

        self._data["Key Name 14"] = value

    @property
    def output_variable_or_meter_name_14(self):
        """Get output_variable_or_meter_name_14

        Returns:
            str: the value of `output_variable_or_meter_name_14` or None if not set
        """
        return self._data["Output Variable or Meter Name 14"]

    @output_variable_or_meter_name_14.setter
    def output_variable_or_meter_name_14(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_14`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_14`')

        self._data["Output Variable or Meter Name 14"] = value

    @property
    def key_name_15(self):
        """Get key_name_15

        Returns:
            str: the value of `key_name_15` or None if not set
        """
        return self._data["Key Name 15"]

    @key_name_15.setter
    def key_name_15(self, value=None):
        """  Corresponds to IDD Field `key_name_15`

        Args:
            value (str): value for IDD Field `key_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_15`')

        self._data["Key Name 15"] = value

    @property
    def output_variable_or_meter_name_15(self):
        """Get output_variable_or_meter_name_15

        Returns:
            str: the value of `output_variable_or_meter_name_15` or None if not set
        """
        return self._data["Output Variable or Meter Name 15"]

    @output_variable_or_meter_name_15.setter
    def output_variable_or_meter_name_15(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_15`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_15`')

        self._data["Output Variable or Meter Name 15"] = value

    @property
    def key_name_16(self):
        """Get key_name_16

        Returns:
            str: the value of `key_name_16` or None if not set
        """
        return self._data["Key Name 16"]

    @key_name_16.setter
    def key_name_16(self, value=None):
        """  Corresponds to IDD Field `key_name_16`

        Args:
            value (str): value for IDD Field `key_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_16`')

        self._data["Key Name 16"] = value

    @property
    def output_variable_or_meter_name_16(self):
        """Get output_variable_or_meter_name_16

        Returns:
            str: the value of `output_variable_or_meter_name_16` or None if not set
        """
        return self._data["Output Variable or Meter Name 16"]

    @output_variable_or_meter_name_16.setter
    def output_variable_or_meter_name_16(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_16`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_16`')

        self._data["Output Variable or Meter Name 16"] = value

    @property
    def key_name_17(self):
        """Get key_name_17

        Returns:
            str: the value of `key_name_17` or None if not set
        """
        return self._data["Key Name 17"]

    @key_name_17.setter
    def key_name_17(self, value=None):
        """  Corresponds to IDD Field `key_name_17`

        Args:
            value (str): value for IDD Field `key_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_17`')

        self._data["Key Name 17"] = value

    @property
    def output_variable_or_meter_name_17(self):
        """Get output_variable_or_meter_name_17

        Returns:
            str: the value of `output_variable_or_meter_name_17` or None if not set
        """
        return self._data["Output Variable or Meter Name 17"]

    @output_variable_or_meter_name_17.setter
    def output_variable_or_meter_name_17(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_17`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_17`')

        self._data["Output Variable or Meter Name 17"] = value

    @property
    def key_name_18(self):
        """Get key_name_18

        Returns:
            str: the value of `key_name_18` or None if not set
        """
        return self._data["Key Name 18"]

    @key_name_18.setter
    def key_name_18(self, value=None):
        """  Corresponds to IDD Field `key_name_18`

        Args:
            value (str): value for IDD Field `key_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_18`')

        self._data["Key Name 18"] = value

    @property
    def output_variable_or_meter_name_18(self):
        """Get output_variable_or_meter_name_18

        Returns:
            str: the value of `output_variable_or_meter_name_18` or None if not set
        """
        return self._data["Output Variable or Meter Name 18"]

    @output_variable_or_meter_name_18.setter
    def output_variable_or_meter_name_18(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_18`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_18`')

        self._data["Output Variable or Meter Name 18"] = value

    @property
    def key_name_19(self):
        """Get key_name_19

        Returns:
            str: the value of `key_name_19` or None if not set
        """
        return self._data["Key Name 19"]

    @key_name_19.setter
    def key_name_19(self, value=None):
        """  Corresponds to IDD Field `key_name_19`

        Args:
            value (str): value for IDD Field `key_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_19`')

        self._data["Key Name 19"] = value

    @property
    def output_variable_or_meter_name_19(self):
        """Get output_variable_or_meter_name_19

        Returns:
            str: the value of `output_variable_or_meter_name_19` or None if not set
        """
        return self._data["Output Variable or Meter Name 19"]

    @output_variable_or_meter_name_19.setter
    def output_variable_or_meter_name_19(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_19`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_19`')

        self._data["Output Variable or Meter Name 19"] = value

    @property
    def key_name_20(self):
        """Get key_name_20

        Returns:
            str: the value of `key_name_20` or None if not set
        """
        return self._data["Key Name 20"]

    @key_name_20.setter
    def key_name_20(self, value=None):
        """  Corresponds to IDD Field `key_name_20`

        Args:
            value (str): value for IDD Field `key_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_20`')

        self._data["Key Name 20"] = value

    @property
    def output_variable_or_meter_name_20(self):
        """Get output_variable_or_meter_name_20

        Returns:
            str: the value of `output_variable_or_meter_name_20` or None if not set
        """
        return self._data["Output Variable or Meter Name 20"]

    @output_variable_or_meter_name_20.setter
    def output_variable_or_meter_name_20(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_20`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_20`')

        self._data["Output Variable or Meter Name 20"] = value

    @property
    def key_name_21(self):
        """Get key_name_21

        Returns:
            str: the value of `key_name_21` or None if not set
        """
        return self._data["Key Name 21"]

    @key_name_21.setter
    def key_name_21(self, value=None):
        """  Corresponds to IDD Field `key_name_21`

        Args:
            value (str): value for IDD Field `key_name_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_21`')

        self._data["Key Name 21"] = value

    @property
    def output_variable_or_meter_name_21(self):
        """Get output_variable_or_meter_name_21

        Returns:
            str: the value of `output_variable_or_meter_name_21` or None if not set
        """
        return self._data["Output Variable or Meter Name 21"]

    @output_variable_or_meter_name_21.setter
    def output_variable_or_meter_name_21(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_21`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_21`')

        self._data["Output Variable or Meter Name 21"] = value

    @property
    def key_name_22(self):
        """Get key_name_22

        Returns:
            str: the value of `key_name_22` or None if not set
        """
        return self._data["Key Name 22"]

    @key_name_22.setter
    def key_name_22(self, value=None):
        """  Corresponds to IDD Field `key_name_22`

        Args:
            value (str): value for IDD Field `key_name_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_22`')

        self._data["Key Name 22"] = value

    @property
    def output_variable_or_meter_name_22(self):
        """Get output_variable_or_meter_name_22

        Returns:
            str: the value of `output_variable_or_meter_name_22` or None if not set
        """
        return self._data["Output Variable or Meter Name 22"]

    @output_variable_or_meter_name_22.setter
    def output_variable_or_meter_name_22(self, value=None):
        """  Corresponds to IDD Field `output_variable_or_meter_name_22`

        Args:
            value (str): value for IDD Field `output_variable_or_meter_name_22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_22`')

        self._data["Output Variable or Meter Name 22"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.fuel_type))
        out.append(self._to_str(self.source_meter_name))
        out.append(self._to_str(self.key_name_1))
        out.append(self._to_str(self.output_variable_or_meter_name_1))
        out.append(self._to_str(self.key_name_2))
        out.append(self._to_str(self.output_variable_or_meter_name_2))
        out.append(self._to_str(self.key_name_3))
        out.append(self._to_str(self.output_variable_or_meter_name_3))
        out.append(self._to_str(self.key_name_4))
        out.append(self._to_str(self.output_variable_or_meter_name_4))
        out.append(self._to_str(self.key_name_5))
        out.append(self._to_str(self.output_variable_or_meter_name_5))
        out.append(self._to_str(self.key_name_6))
        out.append(self._to_str(self.output_variable_or_meter_name_6))
        out.append(self._to_str(self.key_name_7))
        out.append(self._to_str(self.output_variable_or_meter_name_7))
        out.append(self._to_str(self.key_name_8))
        out.append(self._to_str(self.output_variable_or_meter_name_8))
        out.append(self._to_str(self.key_name_9))
        out.append(self._to_str(self.output_variable_or_meter_name_9))
        out.append(self._to_str(self.key_name_10))
        out.append(self._to_str(self.output_variable_or_meter_name_10))
        out.append(self._to_str(self.key_name_11))
        out.append(self._to_str(self.output_variable_or_meter_name_11))
        out.append(self._to_str(self.key_name_12))
        out.append(self._to_str(self.output_variable_or_meter_name_12))
        out.append(self._to_str(self.key_name_13))
        out.append(self._to_str(self.output_variable_or_meter_name_13))
        out.append(self._to_str(self.key_name_14))
        out.append(self._to_str(self.output_variable_or_meter_name_14))
        out.append(self._to_str(self.key_name_15))
        out.append(self._to_str(self.output_variable_or_meter_name_15))
        out.append(self._to_str(self.key_name_16))
        out.append(self._to_str(self.output_variable_or_meter_name_16))
        out.append(self._to_str(self.key_name_17))
        out.append(self._to_str(self.output_variable_or_meter_name_17))
        out.append(self._to_str(self.key_name_18))
        out.append(self._to_str(self.output_variable_or_meter_name_18))
        out.append(self._to_str(self.key_name_19))
        out.append(self._to_str(self.output_variable_or_meter_name_19))
        out.append(self._to_str(self.key_name_20))
        out.append(self._to_str(self.output_variable_or_meter_name_20))
        out.append(self._to_str(self.key_name_21))
        out.append(self._to_str(self.output_variable_or_meter_name_21))
        out.append(self._to_str(self.key_name_22))
        out.append(self._to_str(self.output_variable_or_meter_name_22))
        return ",".join(out)

class OutputSqlite(object):
    """ Corresponds to IDD object `Output:SQLite`
        Output from EnergyPlus can be written to an SQLite format file.
    
    """
    internal_name = "Output:SQLite"
    field_count = 1
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:SQLite`
        """
        self._data = OrderedDict()
        self._data["Option Type"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.option_type = None
        else:
            self.option_type = vals[i]
        i += 1

    @property
    def option_type(self):
        """Get option_type

        Returns:
            str: the value of `option_type` or None if not set
        """
        return self._data["Option Type"]

    @option_type.setter
    def option_type(self, value=None):
        """  Corresponds to IDD Field `option_type`

        Args:
            value (str): value for IDD Field `option_type`
                Accepted values are:
                      - Simple
                      - SimpleAndTabular
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `option_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `option_type`')
            vals = set()
            vals.add("Simple")
            vals.add("SimpleAndTabular")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `option_type`'.format(value))

        self._data["Option Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.option_type))
        return ",".join(out)

class OutputEnvironmentalImpactFactors(object):
    """ Corresponds to IDD object `Output:EnvironmentalImpactFactors`
        This is used to Automatically report the facility meters and turn on the Environmental Impact Report calculations
        for all of the Environmental Factors.
    
    """
    internal_name = "Output:EnvironmentalImpactFactors"
    field_count = 1
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:EnvironmentalImpactFactors`
        """
        self._data = OrderedDict()
        self._data["Reporting Frequency"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value=None):
        """  Corresponds to IDD Field `reporting_frequency`

        Args:
            value (str): value for IDD Field `reporting_frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            vals = set()
            vals.add("Timestep")
            vals.add("Hourly")
            vals.add("Daily")
            vals.add("Monthly")
            vals.add("RunPeriod")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `reporting_frequency`'.format(value))

        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.reporting_frequency))
        return ",".join(out)

class EnvironmentalImpactFactors(object):
    """ Corresponds to IDD object `EnvironmentalImpactFactors`
        Used to help convert district and ideal energy use to a fuel type and provide total carbon equivalent with coefficients
        Also used in Source=>Site conversions.
    
    """
    internal_name = "EnvironmentalImpactFactors"
    field_count = 6
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `EnvironmentalImpactFactors`
        """
        self._data = OrderedDict()
        self._data["District Heating Efficiency"] = None
        self._data["District Cooling COP"] = None
        self._data["Steam Conversion Efficiency"] = None
        self._data["Total Carbon Equivalent Emission Factor From N2O"] = None
        self._data["Total Carbon Equivalent Emission Factor From CH4"] = None
        self._data["Total Carbon Equivalent Emission Factor From CO2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.district_heating_efficiency = None
        else:
            self.district_heating_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.district_cooling_cop = None
        else:
            self.district_cooling_cop = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.steam_conversion_efficiency = None
        else:
            self.steam_conversion_efficiency = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_carbon_equivalent_emission_factor_from_n2o = None
        else:
            self.total_carbon_equivalent_emission_factor_from_n2o = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_carbon_equivalent_emission_factor_from_ch4 = None
        else:
            self.total_carbon_equivalent_emission_factor_from_ch4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.total_carbon_equivalent_emission_factor_from_co2 = None
        else:
            self.total_carbon_equivalent_emission_factor_from_co2 = vals[i]
        i += 1

    @property
    def district_heating_efficiency(self):
        """Get district_heating_efficiency

        Returns:
            float: the value of `district_heating_efficiency` or None if not set
        """
        return self._data["District Heating Efficiency"]

    @district_heating_efficiency.setter
    def district_heating_efficiency(self, value=0.3 ):
        """  Corresponds to IDD Field `district_heating_efficiency`
        District heating efficiency used when converted to natural gas

        Args:
            value (float): value for IDD Field `district_heating_efficiency`
                Default value: 0.3
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `district_heating_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `district_heating_efficiency`')

        self._data["District Heating Efficiency"] = value

    @property
    def district_cooling_cop(self):
        """Get district_cooling_cop

        Returns:
            float: the value of `district_cooling_cop` or None if not set
        """
        return self._data["District Cooling COP"]

    @district_cooling_cop.setter
    def district_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `district_cooling_cop`
        District cooling COP used when converted to electricity

        Args:
            value (float): value for IDD Field `district_cooling_cop`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `district_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `district_cooling_cop`')

        self._data["District Cooling COP"] = value

    @property
    def steam_conversion_efficiency(self):
        """Get steam_conversion_efficiency

        Returns:
            float: the value of `steam_conversion_efficiency` or None if not set
        """
        return self._data["Steam Conversion Efficiency"]

    @steam_conversion_efficiency.setter
    def steam_conversion_efficiency(self, value=0.25 ):
        """  Corresponds to IDD Field `steam_conversion_efficiency`
        Steam conversion efficiency used to convert steam usage to natural gas

        Args:
            value (float): value for IDD Field `steam_conversion_efficiency`
                Default value: 0.25
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `steam_conversion_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `steam_conversion_efficiency`')

        self._data["Steam Conversion Efficiency"] = value

    @property
    def total_carbon_equivalent_emission_factor_from_n2o(self):
        """Get total_carbon_equivalent_emission_factor_from_n2o

        Returns:
            float: the value of `total_carbon_equivalent_emission_factor_from_n2o` or None if not set
        """
        return self._data["Total Carbon Equivalent Emission Factor From N2O"]

    @total_carbon_equivalent_emission_factor_from_n2o.setter
    def total_carbon_equivalent_emission_factor_from_n2o(self, value=80.7272 ):
        """  Corresponds to IDD Field `total_carbon_equivalent_emission_factor_from_n2o`

        Args:
            value (float): value for IDD Field `total_carbon_equivalent_emission_factor_from_n2o`
                Units: kg/kg
                Default value: 80.7272
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_carbon_equivalent_emission_factor_from_n2o`'.format(value))

        self._data["Total Carbon Equivalent Emission Factor From N2O"] = value

    @property
    def total_carbon_equivalent_emission_factor_from_ch4(self):
        """Get total_carbon_equivalent_emission_factor_from_ch4

        Returns:
            float: the value of `total_carbon_equivalent_emission_factor_from_ch4` or None if not set
        """
        return self._data["Total Carbon Equivalent Emission Factor From CH4"]

    @total_carbon_equivalent_emission_factor_from_ch4.setter
    def total_carbon_equivalent_emission_factor_from_ch4(self, value=6.2727 ):
        """  Corresponds to IDD Field `total_carbon_equivalent_emission_factor_from_ch4`

        Args:
            value (float): value for IDD Field `total_carbon_equivalent_emission_factor_from_ch4`
                Units: kg/kg
                Default value: 6.2727
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_carbon_equivalent_emission_factor_from_ch4`'.format(value))

        self._data["Total Carbon Equivalent Emission Factor From CH4"] = value

    @property
    def total_carbon_equivalent_emission_factor_from_co2(self):
        """Get total_carbon_equivalent_emission_factor_from_co2

        Returns:
            float: the value of `total_carbon_equivalent_emission_factor_from_co2` or None if not set
        """
        return self._data["Total Carbon Equivalent Emission Factor From CO2"]

    @total_carbon_equivalent_emission_factor_from_co2.setter
    def total_carbon_equivalent_emission_factor_from_co2(self, value=0.2727 ):
        """  Corresponds to IDD Field `total_carbon_equivalent_emission_factor_from_co2`

        Args:
            value (float): value for IDD Field `total_carbon_equivalent_emission_factor_from_co2`
                Units: kg/kg
                Default value: 0.2727
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_carbon_equivalent_emission_factor_from_co2`'.format(value))

        self._data["Total Carbon Equivalent Emission Factor From CO2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.district_heating_efficiency))
        out.append(self._to_str(self.district_cooling_cop))
        out.append(self._to_str(self.steam_conversion_efficiency))
        out.append(self._to_str(self.total_carbon_equivalent_emission_factor_from_n2o))
        out.append(self._to_str(self.total_carbon_equivalent_emission_factor_from_ch4))
        out.append(self._to_str(self.total_carbon_equivalent_emission_factor_from_co2))
        return ",".join(out)

class FuelFactors(object):
    """ Corresponds to IDD object `FuelFactors`
        Provides Fuel Factors for Emissions as well as Source=>Site conversions.
        OtherFuel1, OtherFuel2 provide options for users who want to create and use
        fuels that may not be mainstream (biomass, wood, pellets).
    
    """
    internal_name = "FuelFactors"
    field_count = 37
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `FuelFactors`
        """
        self._data = OrderedDict()
        self._data["Existing Fuel Resource Name"] = None
        self._data["Units of Measure"] = None
        self._data["Energy per Unit Factor"] = None
        self._data["Source Energy Factor"] = None
        self._data["Source Energy Schedule Name"] = None
        self._data["CO2 Emission Factor"] = None
        self._data["CO2 Emission Factor Schedule Name"] = None
        self._data["CO Emission Factor"] = None
        self._data["CO Emission Factor Schedule Name"] = None
        self._data["CH4 Emission Factor"] = None
        self._data["CH4 Emission Factor Schedule Name"] = None
        self._data["NOx Emission Factor"] = None
        self._data["NOx Emission Factor Schedule Name"] = None
        self._data["N2O Emission Factor"] = None
        self._data["N2O Emission Factor Schedule Name"] = None
        self._data["SO2 Emission Factor"] = None
        self._data["SO2 Emission Factor Schedule Name"] = None
        self._data["PM Emission Factor"] = None
        self._data["PM Emission Factor Schedule Name"] = None
        self._data["PM10 Emission Factor"] = None
        self._data["PM10 Emission Factor Schedule Name"] = None
        self._data["PM2.5 Emission Factor"] = None
        self._data["PM2.5 Emission Factor Schedule Name"] = None
        self._data["NH3 Emission Factor"] = None
        self._data["NH3 Emission Factor Schedule Name"] = None
        self._data["NMVOC Emission Factor"] = None
        self._data["NMVOC Emission Factor Schedule Name"] = None
        self._data["Hg Emission Factor"] = None
        self._data["Hg Emission Factor Schedule Name"] = None
        self._data["Pb Emission Factor"] = None
        self._data["Pb Emission Factor Schedule Name"] = None
        self._data["Water Emission Factor"] = None
        self._data["Water Emission Factor Schedule Name"] = None
        self._data["Nuclear High Level Emission Factor"] = None
        self._data["Nuclear High Level Emission Factor Schedule Name"] = None
        self._data["Nuclear Low Level Emission Factor"] = None
        self._data["Nuclear Low Level Emission Factor Schedule Name"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.existing_fuel_resource_name = None
        else:
            self.existing_fuel_resource_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.units_of_measure = None
        else:
            self.units_of_measure = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.energy_per_unit_factor = None
        else:
            self.energy_per_unit_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_energy_factor = None
        else:
            self.source_energy_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.source_energy_schedule_name = None
        else:
            self.source_energy_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.co2_emission_factor = None
        else:
            self.co2_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.co2_emission_factor_schedule_name = None
        else:
            self.co2_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.co_emission_factor = None
        else:
            self.co_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.co_emission_factor_schedule_name = None
        else:
            self.co_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ch4_emission_factor = None
        else:
            self.ch4_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.ch4_emission_factor_schedule_name = None
        else:
            self.ch4_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nox_emission_factor = None
        else:
            self.nox_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nox_emission_factor_schedule_name = None
        else:
            self.nox_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.n2o_emission_factor = None
        else:
            self.n2o_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.n2o_emission_factor_schedule_name = None
        else:
            self.n2o_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.so2_emission_factor = None
        else:
            self.so2_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.so2_emission_factor_schedule_name = None
        else:
            self.so2_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pm_emission_factor = None
        else:
            self.pm_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pm_emission_factor_schedule_name = None
        else:
            self.pm_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pm10_emission_factor = None
        else:
            self.pm10_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pm10_emission_factor_schedule_name = None
        else:
            self.pm10_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pm2_5_emission_factor = None
        else:
            self.pm2_5_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pm2_5_emission_factor_schedule_name = None
        else:
            self.pm2_5_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nh3_emission_factor = None
        else:
            self.nh3_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nh3_emission_factor_schedule_name = None
        else:
            self.nh3_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nmvoc_emission_factor = None
        else:
            self.nmvoc_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nmvoc_emission_factor_schedule_name = None
        else:
            self.nmvoc_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hg_emission_factor = None
        else:
            self.hg_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.hg_emission_factor_schedule_name = None
        else:
            self.hg_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pb_emission_factor = None
        else:
            self.pb_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.pb_emission_factor_schedule_name = None
        else:
            self.pb_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_emission_factor = None
        else:
            self.water_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.water_emission_factor_schedule_name = None
        else:
            self.water_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nuclear_high_level_emission_factor = None
        else:
            self.nuclear_high_level_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nuclear_high_level_emission_factor_schedule_name = None
        else:
            self.nuclear_high_level_emission_factor_schedule_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nuclear_low_level_emission_factor = None
        else:
            self.nuclear_low_level_emission_factor = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.nuclear_low_level_emission_factor_schedule_name = None
        else:
            self.nuclear_low_level_emission_factor_schedule_name = vals[i]
        i += 1

    @property
    def existing_fuel_resource_name(self):
        """Get existing_fuel_resource_name

        Returns:
            str: the value of `existing_fuel_resource_name` or None if not set
        """
        return self._data["Existing Fuel Resource Name"]

    @existing_fuel_resource_name.setter
    def existing_fuel_resource_name(self, value=None):
        """  Corresponds to IDD Field `existing_fuel_resource_name`

        Args:
            value (str): value for IDD Field `existing_fuel_resource_name`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Gasoline
                      - Propane
                      - Diesel
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `existing_fuel_resource_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `existing_fuel_resource_name`')
            vals = set()
            vals.add("Electricity")
            vals.add("NaturalGas")
            vals.add("FuelOil#1")
            vals.add("FuelOil#2")
            vals.add("Coal")
            vals.add("Gasoline")
            vals.add("Propane")
            vals.add("Diesel")
            vals.add("OtherFuel1")
            vals.add("OtherFuel2")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `existing_fuel_resource_name`'.format(value))

        self._data["Existing Fuel Resource Name"] = value

    @property
    def units_of_measure(self):
        """Get units_of_measure

        Returns:
            str: the value of `units_of_measure` or None if not set
        """
        return self._data["Units of Measure"]

    @units_of_measure.setter
    def units_of_measure(self, value=None):
        """  Corresponds to IDD Field `units_of_measure`

        Args:
            value (str): value for IDD Field `units_of_measure`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `units_of_measure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `units_of_measure`')

        self._data["Units of Measure"] = value

    @property
    def energy_per_unit_factor(self):
        """Get energy_per_unit_factor

        Returns:
            float: the value of `energy_per_unit_factor` or None if not set
        """
        return self._data["Energy per Unit Factor"]

    @energy_per_unit_factor.setter
    def energy_per_unit_factor(self, value=None):
        """  Corresponds to IDD Field `energy_per_unit_factor`

        Args:
            value (float): value for IDD Field `energy_per_unit_factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `energy_per_unit_factor`'.format(value))

        self._data["Energy per Unit Factor"] = value

    @property
    def source_energy_factor(self):
        """Get source_energy_factor

        Returns:
            float: the value of `source_energy_factor` or None if not set
        """
        return self._data["Source Energy Factor"]

    @source_energy_factor.setter
    def source_energy_factor(self, value=None):
        """  Corresponds to IDD Field `source_energy_factor`

        Args:
            value (float): value for IDD Field `source_energy_factor`
                Units: J/J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_energy_factor`'.format(value))

        self._data["Source Energy Factor"] = value

    @property
    def source_energy_schedule_name(self):
        """Get source_energy_schedule_name

        Returns:
            str: the value of `source_energy_schedule_name` or None if not set
        """
        return self._data["Source Energy Schedule Name"]

    @source_energy_schedule_name.setter
    def source_energy_schedule_name(self, value=None):
        """  Corresponds to IDD Field `source_energy_schedule_name`

        Args:
            value (str): value for IDD Field `source_energy_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_energy_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_energy_schedule_name`')

        self._data["Source Energy Schedule Name"] = value

    @property
    def co2_emission_factor(self):
        """Get co2_emission_factor

        Returns:
            float: the value of `co2_emission_factor` or None if not set
        """
        return self._data["CO2 Emission Factor"]

    @co2_emission_factor.setter
    def co2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `co2_emission_factor`

        Args:
            value (float): value for IDD Field `co2_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `co2_emission_factor`'.format(value))

        self._data["CO2 Emission Factor"] = value

    @property
    def co2_emission_factor_schedule_name(self):
        """Get co2_emission_factor_schedule_name

        Returns:
            str: the value of `co2_emission_factor_schedule_name` or None if not set
        """
        return self._data["CO2 Emission Factor Schedule Name"]

    @co2_emission_factor_schedule_name.setter
    def co2_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `co2_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `co2_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `co2_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `co2_emission_factor_schedule_name`')

        self._data["CO2 Emission Factor Schedule Name"] = value

    @property
    def co_emission_factor(self):
        """Get co_emission_factor

        Returns:
            float: the value of `co_emission_factor` or None if not set
        """
        return self._data["CO Emission Factor"]

    @co_emission_factor.setter
    def co_emission_factor(self, value=None):
        """  Corresponds to IDD Field `co_emission_factor`

        Args:
            value (float): value for IDD Field `co_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `co_emission_factor`'.format(value))

        self._data["CO Emission Factor"] = value

    @property
    def co_emission_factor_schedule_name(self):
        """Get co_emission_factor_schedule_name

        Returns:
            str: the value of `co_emission_factor_schedule_name` or None if not set
        """
        return self._data["CO Emission Factor Schedule Name"]

    @co_emission_factor_schedule_name.setter
    def co_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `co_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `co_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `co_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `co_emission_factor_schedule_name`')

        self._data["CO Emission Factor Schedule Name"] = value

    @property
    def ch4_emission_factor(self):
        """Get ch4_emission_factor

        Returns:
            float: the value of `ch4_emission_factor` or None if not set
        """
        return self._data["CH4 Emission Factor"]

    @ch4_emission_factor.setter
    def ch4_emission_factor(self, value=None):
        """  Corresponds to IDD Field `ch4_emission_factor`

        Args:
            value (float): value for IDD Field `ch4_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `ch4_emission_factor`'.format(value))

        self._data["CH4 Emission Factor"] = value

    @property
    def ch4_emission_factor_schedule_name(self):
        """Get ch4_emission_factor_schedule_name

        Returns:
            str: the value of `ch4_emission_factor_schedule_name` or None if not set
        """
        return self._data["CH4 Emission Factor Schedule Name"]

    @ch4_emission_factor_schedule_name.setter
    def ch4_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `ch4_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `ch4_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `ch4_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ch4_emission_factor_schedule_name`')

        self._data["CH4 Emission Factor Schedule Name"] = value

    @property
    def nox_emission_factor(self):
        """Get nox_emission_factor

        Returns:
            float: the value of `nox_emission_factor` or None if not set
        """
        return self._data["NOx Emission Factor"]

    @nox_emission_factor.setter
    def nox_emission_factor(self, value=None):
        """  Corresponds to IDD Field `nox_emission_factor`

        Args:
            value (float): value for IDD Field `nox_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nox_emission_factor`'.format(value))

        self._data["NOx Emission Factor"] = value

    @property
    def nox_emission_factor_schedule_name(self):
        """Get nox_emission_factor_schedule_name

        Returns:
            str: the value of `nox_emission_factor_schedule_name` or None if not set
        """
        return self._data["NOx Emission Factor Schedule Name"]

    @nox_emission_factor_schedule_name.setter
    def nox_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `nox_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `nox_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `nox_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nox_emission_factor_schedule_name`')

        self._data["NOx Emission Factor Schedule Name"] = value

    @property
    def n2o_emission_factor(self):
        """Get n2o_emission_factor

        Returns:
            float: the value of `n2o_emission_factor` or None if not set
        """
        return self._data["N2O Emission Factor"]

    @n2o_emission_factor.setter
    def n2o_emission_factor(self, value=None):
        """  Corresponds to IDD Field `n2o_emission_factor`

        Args:
            value (float): value for IDD Field `n2o_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `n2o_emission_factor`'.format(value))

        self._data["N2O Emission Factor"] = value

    @property
    def n2o_emission_factor_schedule_name(self):
        """Get n2o_emission_factor_schedule_name

        Returns:
            str: the value of `n2o_emission_factor_schedule_name` or None if not set
        """
        return self._data["N2O Emission Factor Schedule Name"]

    @n2o_emission_factor_schedule_name.setter
    def n2o_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `n2o_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `n2o_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `n2o_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `n2o_emission_factor_schedule_name`')

        self._data["N2O Emission Factor Schedule Name"] = value

    @property
    def so2_emission_factor(self):
        """Get so2_emission_factor

        Returns:
            float: the value of `so2_emission_factor` or None if not set
        """
        return self._data["SO2 Emission Factor"]

    @so2_emission_factor.setter
    def so2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `so2_emission_factor`

        Args:
            value (float): value for IDD Field `so2_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `so2_emission_factor`'.format(value))

        self._data["SO2 Emission Factor"] = value

    @property
    def so2_emission_factor_schedule_name(self):
        """Get so2_emission_factor_schedule_name

        Returns:
            str: the value of `so2_emission_factor_schedule_name` or None if not set
        """
        return self._data["SO2 Emission Factor Schedule Name"]

    @so2_emission_factor_schedule_name.setter
    def so2_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `so2_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `so2_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `so2_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `so2_emission_factor_schedule_name`')

        self._data["SO2 Emission Factor Schedule Name"] = value

    @property
    def pm_emission_factor(self):
        """Get pm_emission_factor

        Returns:
            float: the value of `pm_emission_factor` or None if not set
        """
        return self._data["PM Emission Factor"]

    @pm_emission_factor.setter
    def pm_emission_factor(self, value=None):
        """  Corresponds to IDD Field `pm_emission_factor`

        Args:
            value (float): value for IDD Field `pm_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pm_emission_factor`'.format(value))

        self._data["PM Emission Factor"] = value

    @property
    def pm_emission_factor_schedule_name(self):
        """Get pm_emission_factor_schedule_name

        Returns:
            str: the value of `pm_emission_factor_schedule_name` or None if not set
        """
        return self._data["PM Emission Factor Schedule Name"]

    @pm_emission_factor_schedule_name.setter
    def pm_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pm_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `pm_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pm_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pm_emission_factor_schedule_name`')

        self._data["PM Emission Factor Schedule Name"] = value

    @property
    def pm10_emission_factor(self):
        """Get pm10_emission_factor

        Returns:
            float: the value of `pm10_emission_factor` or None if not set
        """
        return self._data["PM10 Emission Factor"]

    @pm10_emission_factor.setter
    def pm10_emission_factor(self, value=None):
        """  Corresponds to IDD Field `pm10_emission_factor`

        Args:
            value (float): value for IDD Field `pm10_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pm10_emission_factor`'.format(value))

        self._data["PM10 Emission Factor"] = value

    @property
    def pm10_emission_factor_schedule_name(self):
        """Get pm10_emission_factor_schedule_name

        Returns:
            str: the value of `pm10_emission_factor_schedule_name` or None if not set
        """
        return self._data["PM10 Emission Factor Schedule Name"]

    @pm10_emission_factor_schedule_name.setter
    def pm10_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pm10_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `pm10_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pm10_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pm10_emission_factor_schedule_name`')

        self._data["PM10 Emission Factor Schedule Name"] = value

    @property
    def pm2_5_emission_factor(self):
        """Get pm2_5_emission_factor

        Returns:
            float: the value of `pm2_5_emission_factor` or None if not set
        """
        return self._data["PM2.5 Emission Factor"]

    @pm2_5_emission_factor.setter
    def pm2_5_emission_factor(self, value=None):
        """  Corresponds to IDD Field `pm2_5_emission_factor`

        Args:
            value (float): value for IDD Field `pm2_5_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pm2_5_emission_factor`'.format(value))

        self._data["PM2.5 Emission Factor"] = value

    @property
    def pm2_5_emission_factor_schedule_name(self):
        """Get pm2_5_emission_factor_schedule_name

        Returns:
            str: the value of `pm2_5_emission_factor_schedule_name` or None if not set
        """
        return self._data["PM2.5 Emission Factor Schedule Name"]

    @pm2_5_emission_factor_schedule_name.setter
    def pm2_5_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pm2_5_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `pm2_5_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pm2_5_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pm2_5_emission_factor_schedule_name`')

        self._data["PM2.5 Emission Factor Schedule Name"] = value

    @property
    def nh3_emission_factor(self):
        """Get nh3_emission_factor

        Returns:
            float: the value of `nh3_emission_factor` or None if not set
        """
        return self._data["NH3 Emission Factor"]

    @nh3_emission_factor.setter
    def nh3_emission_factor(self, value=None):
        """  Corresponds to IDD Field `nh3_emission_factor`

        Args:
            value (float): value for IDD Field `nh3_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nh3_emission_factor`'.format(value))

        self._data["NH3 Emission Factor"] = value

    @property
    def nh3_emission_factor_schedule_name(self):
        """Get nh3_emission_factor_schedule_name

        Returns:
            str: the value of `nh3_emission_factor_schedule_name` or None if not set
        """
        return self._data["NH3 Emission Factor Schedule Name"]

    @nh3_emission_factor_schedule_name.setter
    def nh3_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `nh3_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `nh3_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `nh3_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nh3_emission_factor_schedule_name`')

        self._data["NH3 Emission Factor Schedule Name"] = value

    @property
    def nmvoc_emission_factor(self):
        """Get nmvoc_emission_factor

        Returns:
            float: the value of `nmvoc_emission_factor` or None if not set
        """
        return self._data["NMVOC Emission Factor"]

    @nmvoc_emission_factor.setter
    def nmvoc_emission_factor(self, value=None):
        """  Corresponds to IDD Field `nmvoc_emission_factor`

        Args:
            value (float): value for IDD Field `nmvoc_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nmvoc_emission_factor`'.format(value))

        self._data["NMVOC Emission Factor"] = value

    @property
    def nmvoc_emission_factor_schedule_name(self):
        """Get nmvoc_emission_factor_schedule_name

        Returns:
            str: the value of `nmvoc_emission_factor_schedule_name` or None if not set
        """
        return self._data["NMVOC Emission Factor Schedule Name"]

    @nmvoc_emission_factor_schedule_name.setter
    def nmvoc_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `nmvoc_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `nmvoc_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `nmvoc_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nmvoc_emission_factor_schedule_name`')

        self._data["NMVOC Emission Factor Schedule Name"] = value

    @property
    def hg_emission_factor(self):
        """Get hg_emission_factor

        Returns:
            float: the value of `hg_emission_factor` or None if not set
        """
        return self._data["Hg Emission Factor"]

    @hg_emission_factor.setter
    def hg_emission_factor(self, value=None):
        """  Corresponds to IDD Field `hg_emission_factor`

        Args:
            value (float): value for IDD Field `hg_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `hg_emission_factor`'.format(value))

        self._data["Hg Emission Factor"] = value

    @property
    def hg_emission_factor_schedule_name(self):
        """Get hg_emission_factor_schedule_name

        Returns:
            str: the value of `hg_emission_factor_schedule_name` or None if not set
        """
        return self._data["Hg Emission Factor Schedule Name"]

    @hg_emission_factor_schedule_name.setter
    def hg_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `hg_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `hg_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `hg_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hg_emission_factor_schedule_name`')

        self._data["Hg Emission Factor Schedule Name"] = value

    @property
    def pb_emission_factor(self):
        """Get pb_emission_factor

        Returns:
            float: the value of `pb_emission_factor` or None if not set
        """
        return self._data["Pb Emission Factor"]

    @pb_emission_factor.setter
    def pb_emission_factor(self, value=None):
        """  Corresponds to IDD Field `pb_emission_factor`

        Args:
            value (float): value for IDD Field `pb_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `pb_emission_factor`'.format(value))

        self._data["Pb Emission Factor"] = value

    @property
    def pb_emission_factor_schedule_name(self):
        """Get pb_emission_factor_schedule_name

        Returns:
            str: the value of `pb_emission_factor_schedule_name` or None if not set
        """
        return self._data["Pb Emission Factor Schedule Name"]

    @pb_emission_factor_schedule_name.setter
    def pb_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `pb_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `pb_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `pb_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pb_emission_factor_schedule_name`')

        self._data["Pb Emission Factor Schedule Name"] = value

    @property
    def water_emission_factor(self):
        """Get water_emission_factor

        Returns:
            float: the value of `water_emission_factor` or None if not set
        """
        return self._data["Water Emission Factor"]

    @water_emission_factor.setter
    def water_emission_factor(self, value=None):
        """  Corresponds to IDD Field `water_emission_factor`

        Args:
            value (float): value for IDD Field `water_emission_factor`
                Units: L/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_emission_factor`'.format(value))

        self._data["Water Emission Factor"] = value

    @property
    def water_emission_factor_schedule_name(self):
        """Get water_emission_factor_schedule_name

        Returns:
            str: the value of `water_emission_factor_schedule_name` or None if not set
        """
        return self._data["Water Emission Factor Schedule Name"]

    @water_emission_factor_schedule_name.setter
    def water_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `water_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `water_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_emission_factor_schedule_name`')

        self._data["Water Emission Factor Schedule Name"] = value

    @property
    def nuclear_high_level_emission_factor(self):
        """Get nuclear_high_level_emission_factor

        Returns:
            float: the value of `nuclear_high_level_emission_factor` or None if not set
        """
        return self._data["Nuclear High Level Emission Factor"]

    @nuclear_high_level_emission_factor.setter
    def nuclear_high_level_emission_factor(self, value=None):
        """  Corresponds to IDD Field `nuclear_high_level_emission_factor`

        Args:
            value (float): value for IDD Field `nuclear_high_level_emission_factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nuclear_high_level_emission_factor`'.format(value))

        self._data["Nuclear High Level Emission Factor"] = value

    @property
    def nuclear_high_level_emission_factor_schedule_name(self):
        """Get nuclear_high_level_emission_factor_schedule_name

        Returns:
            str: the value of `nuclear_high_level_emission_factor_schedule_name` or None if not set
        """
        return self._data["Nuclear High Level Emission Factor Schedule Name"]

    @nuclear_high_level_emission_factor_schedule_name.setter
    def nuclear_high_level_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `nuclear_high_level_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `nuclear_high_level_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `nuclear_high_level_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nuclear_high_level_emission_factor_schedule_name`')

        self._data["Nuclear High Level Emission Factor Schedule Name"] = value

    @property
    def nuclear_low_level_emission_factor(self):
        """Get nuclear_low_level_emission_factor

        Returns:
            float: the value of `nuclear_low_level_emission_factor` or None if not set
        """
        return self._data["Nuclear Low Level Emission Factor"]

    @nuclear_low_level_emission_factor.setter
    def nuclear_low_level_emission_factor(self, value=None):
        """  Corresponds to IDD Field `nuclear_low_level_emission_factor`

        Args:
            value (float): value for IDD Field `nuclear_low_level_emission_factor`
                Units: m3/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `nuclear_low_level_emission_factor`'.format(value))

        self._data["Nuclear Low Level Emission Factor"] = value

    @property
    def nuclear_low_level_emission_factor_schedule_name(self):
        """Get nuclear_low_level_emission_factor_schedule_name

        Returns:
            str: the value of `nuclear_low_level_emission_factor_schedule_name` or None if not set
        """
        return self._data["Nuclear Low Level Emission Factor Schedule Name"]

    @nuclear_low_level_emission_factor_schedule_name.setter
    def nuclear_low_level_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `nuclear_low_level_emission_factor_schedule_name`

        Args:
            value (str): value for IDD Field `nuclear_low_level_emission_factor_schedule_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `nuclear_low_level_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nuclear_low_level_emission_factor_schedule_name`')

        self._data["Nuclear Low Level Emission Factor Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.existing_fuel_resource_name))
        out.append(self._to_str(self.units_of_measure))
        out.append(self._to_str(self.energy_per_unit_factor))
        out.append(self._to_str(self.source_energy_factor))
        out.append(self._to_str(self.source_energy_schedule_name))
        out.append(self._to_str(self.co2_emission_factor))
        out.append(self._to_str(self.co2_emission_factor_schedule_name))
        out.append(self._to_str(self.co_emission_factor))
        out.append(self._to_str(self.co_emission_factor_schedule_name))
        out.append(self._to_str(self.ch4_emission_factor))
        out.append(self._to_str(self.ch4_emission_factor_schedule_name))
        out.append(self._to_str(self.nox_emission_factor))
        out.append(self._to_str(self.nox_emission_factor_schedule_name))
        out.append(self._to_str(self.n2o_emission_factor))
        out.append(self._to_str(self.n2o_emission_factor_schedule_name))
        out.append(self._to_str(self.so2_emission_factor))
        out.append(self._to_str(self.so2_emission_factor_schedule_name))
        out.append(self._to_str(self.pm_emission_factor))
        out.append(self._to_str(self.pm_emission_factor_schedule_name))
        out.append(self._to_str(self.pm10_emission_factor))
        out.append(self._to_str(self.pm10_emission_factor_schedule_name))
        out.append(self._to_str(self.pm2_5_emission_factor))
        out.append(self._to_str(self.pm2_5_emission_factor_schedule_name))
        out.append(self._to_str(self.nh3_emission_factor))
        out.append(self._to_str(self.nh3_emission_factor_schedule_name))
        out.append(self._to_str(self.nmvoc_emission_factor))
        out.append(self._to_str(self.nmvoc_emission_factor_schedule_name))
        out.append(self._to_str(self.hg_emission_factor))
        out.append(self._to_str(self.hg_emission_factor_schedule_name))
        out.append(self._to_str(self.pb_emission_factor))
        out.append(self._to_str(self.pb_emission_factor_schedule_name))
        out.append(self._to_str(self.water_emission_factor))
        out.append(self._to_str(self.water_emission_factor_schedule_name))
        out.append(self._to_str(self.nuclear_high_level_emission_factor))
        out.append(self._to_str(self.nuclear_high_level_emission_factor_schedule_name))
        out.append(self._to_str(self.nuclear_low_level_emission_factor))
        out.append(self._to_str(self.nuclear_low_level_emission_factor_schedule_name))
        return ",".join(out)

class OutputDiagnostics(object):
    """ Corresponds to IDD object `Output:Diagnostics`
        Special keys to produce certain warning messages or effect certain simulation characteristics.
    
    """
    internal_name = "Output:Diagnostics"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Diagnostics`
        """
        self._data = OrderedDict()
        self._data["Key 1"] = None
        self._data["Key 2"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.key_1 = None
        else:
            self.key_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.key_2 = None
        else:
            self.key_2 = vals[i]
        i += 1

    @property
    def key_1(self):
        """Get key_1

        Returns:
            str: the value of `key_1` or None if not set
        """
        return self._data["Key 1"]

    @key_1.setter
    def key_1(self, value=None):
        """  Corresponds to IDD Field `key_1`

        Args:
            value (str): value for IDD Field `key_1`
                Accepted values are:
                      - DisplayAllWarnings
                      - DisplayExtraWarnings
                      - DisplayUnusedSchedules
                      - DisplayUnusedObjects
                      - DisplayAdvancedReportVariables
                      - DisplayZoneAirHeatBalanceOffBalance
                      - DoNotMirrorDetachedShading
                      - DisplayWeatherMissingDataWarnings
                      - ReportDuringWarmup
                      - ReportDetailedWarmupConvergence
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_1`')
            vals = set()
            vals.add("DisplayAllWarnings")
            vals.add("DisplayExtraWarnings")
            vals.add("DisplayUnusedSchedules")
            vals.add("DisplayUnusedObjects")
            vals.add("DisplayAdvancedReportVariables")
            vals.add("DisplayZoneAirHeatBalanceOffBalance")
            vals.add("DoNotMirrorDetachedShading")
            vals.add("DisplayWeatherMissingDataWarnings")
            vals.add("ReportDuringWarmup")
            vals.add("ReportDetailedWarmupConvergence")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_1`'.format(value))

        self._data["Key 1"] = value

    @property
    def key_2(self):
        """Get key_2

        Returns:
            str: the value of `key_2` or None if not set
        """
        return self._data["Key 2"]

    @key_2.setter
    def key_2(self, value=None):
        """  Corresponds to IDD Field `key_2`

        Args:
            value (str): value for IDD Field `key_2`
                Accepted values are:
                      - DisplayAllWarnings
                      - DisplayExtraWarnings
                      - DisplayUnusedSchedules
                      - DisplayUnusedObjects
                      - DisplayAdvancedReportVariables
                      - DisplayZoneAirHeatBalanceOffBalance
                      - DoNotMirrorDetachedShading
                      - DisplayWeatherMissingDataWarnings
                      - ReportDuringWarmup
                      - ReportDetailedWarmupConvergence
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_2`')
            vals = set()
            vals.add("DisplayAllWarnings")
            vals.add("DisplayExtraWarnings")
            vals.add("DisplayUnusedSchedules")
            vals.add("DisplayUnusedObjects")
            vals.add("DisplayAdvancedReportVariables")
            vals.add("DisplayZoneAirHeatBalanceOffBalance")
            vals.add("DoNotMirrorDetachedShading")
            vals.add("DisplayWeatherMissingDataWarnings")
            vals.add("ReportDuringWarmup")
            vals.add("ReportDetailedWarmupConvergence")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `key_2`'.format(value))

        self._data["Key 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.key_1))
        out.append(self._to_str(self.key_2))
        return ",".join(out)

class OutputDebuggingData(object):
    """ Corresponds to IDD object `Output:DebuggingData`
        switch eplusout.dbg file on or off
    
    """
    internal_name = "Output:DebuggingData"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:DebuggingData`
        """
        self._data = OrderedDict()
        self._data["Report Debugging Data"] = None
        self._data["Report During Warmup"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.report_debugging_data = None
        else:
            self.report_debugging_data = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.report_during_warmup = None
        else:
            self.report_during_warmup = vals[i]
        i += 1

    @property
    def report_debugging_data(self):
        """Get report_debugging_data

        Returns:
            float: the value of `report_debugging_data` or None if not set
        """
        return self._data["Report Debugging Data"]

    @report_debugging_data.setter
    def report_debugging_data(self, value=None):
        """  Corresponds to IDD Field `report_debugging_data`
        value=1 then yes all others no

        Args:
            value (float): value for IDD Field `report_debugging_data`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `report_debugging_data`'.format(value))

        self._data["Report Debugging Data"] = value

    @property
    def report_during_warmup(self):
        """Get report_during_warmup

        Returns:
            float: the value of `report_during_warmup` or None if not set
        """
        return self._data["Report During Warmup"]

    @report_during_warmup.setter
    def report_during_warmup(self, value=None):
        """  Corresponds to IDD Field `report_during_warmup`
        value=1 then always even during warmup  all others no

        Args:
            value (float): value for IDD Field `report_during_warmup`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `report_during_warmup`'.format(value))

        self._data["Report During Warmup"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.report_debugging_data))
        out.append(self._to_str(self.report_during_warmup))
        return ",".join(out)

class OutputPreprocessorMessage(object):
    """ Corresponds to IDD object `Output:PreprocessorMessage`
        This object does not come from a user input.  This is generated by a pre-processor
        so that various conditions can be gracefully passed on by the InputProcessor.
    
    """
    internal_name = "Output:PreprocessorMessage"
    field_count = 12
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:PreprocessorMessage`
        """
        self._data = OrderedDict()
        self._data["Preprocessor Name"] = None
        self._data["Error Severity"] = None
        self._data["Message Line 1"] = None
        self._data["Message Line 2"] = None
        self._data["Message Line 3"] = None
        self._data["Message Line 4"] = None
        self._data["Message Line 5"] = None
        self._data["Message Line 6"] = None
        self._data["Message Line 7"] = None
        self._data["Message Line 8"] = None
        self._data["Message Line 9"] = None
        self._data["Message Line 10"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.preprocessor_name = None
        else:
            self.preprocessor_name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.error_severity = None
        else:
            self.error_severity = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_1 = None
        else:
            self.message_line_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_2 = None
        else:
            self.message_line_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_3 = None
        else:
            self.message_line_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_4 = None
        else:
            self.message_line_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_5 = None
        else:
            self.message_line_5 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_6 = None
        else:
            self.message_line_6 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_7 = None
        else:
            self.message_line_7 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_8 = None
        else:
            self.message_line_8 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_9 = None
        else:
            self.message_line_9 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.message_line_10 = None
        else:
            self.message_line_10 = vals[i]
        i += 1

    @property
    def preprocessor_name(self):
        """Get preprocessor_name

        Returns:
            str: the value of `preprocessor_name` or None if not set
        """
        return self._data["Preprocessor Name"]

    @preprocessor_name.setter
    def preprocessor_name(self, value=None):
        """  Corresponds to IDD Field `preprocessor_name`

        Args:
            value (str): value for IDD Field `preprocessor_name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `preprocessor_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preprocessor_name`')

        self._data["Preprocessor Name"] = value

    @property
    def error_severity(self):
        """Get error_severity

        Returns:
            str: the value of `error_severity` or None if not set
        """
        return self._data["Error Severity"]

    @error_severity.setter
    def error_severity(self, value=None):
        """  Corresponds to IDD Field `error_severity`
        Depending on type, InputProcessor may terminate the program.

        Args:
            value (str): value for IDD Field `error_severity`
                Accepted values are:
                      - Information
                      - Warning
                      - Severe
                      - Fatal
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `error_severity`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `error_severity`')
            vals = set()
            vals.add("Information")
            vals.add("Warning")
            vals.add("Severe")
            vals.add("Fatal")
            if value not in vals:
                raise ValueError('value {} is not an accepted value for '
                                 'field `error_severity`'.format(value))

        self._data["Error Severity"] = value

    @property
    def message_line_1(self):
        """Get message_line_1

        Returns:
            str: the value of `message_line_1` or None if not set
        """
        return self._data["Message Line 1"]

    @message_line_1.setter
    def message_line_1(self, value=None):
        """  Corresponds to IDD Field `message_line_1`

        Args:
            value (str): value for IDD Field `message_line_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_1`')

        self._data["Message Line 1"] = value

    @property
    def message_line_2(self):
        """Get message_line_2

        Returns:
            str: the value of `message_line_2` or None if not set
        """
        return self._data["Message Line 2"]

    @message_line_2.setter
    def message_line_2(self, value=None):
        """  Corresponds to IDD Field `message_line_2`

        Args:
            value (str): value for IDD Field `message_line_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_2`')

        self._data["Message Line 2"] = value

    @property
    def message_line_3(self):
        """Get message_line_3

        Returns:
            str: the value of `message_line_3` or None if not set
        """
        return self._data["Message Line 3"]

    @message_line_3.setter
    def message_line_3(self, value=None):
        """  Corresponds to IDD Field `message_line_3`

        Args:
            value (str): value for IDD Field `message_line_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_3`')

        self._data["Message Line 3"] = value

    @property
    def message_line_4(self):
        """Get message_line_4

        Returns:
            str: the value of `message_line_4` or None if not set
        """
        return self._data["Message Line 4"]

    @message_line_4.setter
    def message_line_4(self, value=None):
        """  Corresponds to IDD Field `message_line_4`

        Args:
            value (str): value for IDD Field `message_line_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_4`')

        self._data["Message Line 4"] = value

    @property
    def message_line_5(self):
        """Get message_line_5

        Returns:
            str: the value of `message_line_5` or None if not set
        """
        return self._data["Message Line 5"]

    @message_line_5.setter
    def message_line_5(self, value=None):
        """  Corresponds to IDD Field `message_line_5`

        Args:
            value (str): value for IDD Field `message_line_5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_5`')

        self._data["Message Line 5"] = value

    @property
    def message_line_6(self):
        """Get message_line_6

        Returns:
            str: the value of `message_line_6` or None if not set
        """
        return self._data["Message Line 6"]

    @message_line_6.setter
    def message_line_6(self, value=None):
        """  Corresponds to IDD Field `message_line_6`

        Args:
            value (str): value for IDD Field `message_line_6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_6`')

        self._data["Message Line 6"] = value

    @property
    def message_line_7(self):
        """Get message_line_7

        Returns:
            str: the value of `message_line_7` or None if not set
        """
        return self._data["Message Line 7"]

    @message_line_7.setter
    def message_line_7(self, value=None):
        """  Corresponds to IDD Field `message_line_7`

        Args:
            value (str): value for IDD Field `message_line_7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_7`')

        self._data["Message Line 7"] = value

    @property
    def message_line_8(self):
        """Get message_line_8

        Returns:
            str: the value of `message_line_8` or None if not set
        """
        return self._data["Message Line 8"]

    @message_line_8.setter
    def message_line_8(self, value=None):
        """  Corresponds to IDD Field `message_line_8`

        Args:
            value (str): value for IDD Field `message_line_8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_8`')

        self._data["Message Line 8"] = value

    @property
    def message_line_9(self):
        """Get message_line_9

        Returns:
            str: the value of `message_line_9` or None if not set
        """
        return self._data["Message Line 9"]

    @message_line_9.setter
    def message_line_9(self, value=None):
        """  Corresponds to IDD Field `message_line_9`

        Args:
            value (str): value for IDD Field `message_line_9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_9`')

        self._data["Message Line 9"] = value

    @property
    def message_line_10(self):
        """Get message_line_10

        Returns:
            str: the value of `message_line_10` or None if not set
        """
        return self._data["Message Line 10"]

    @message_line_10.setter
    def message_line_10(self, value=None):
        """  Corresponds to IDD Field `message_line_10`

        Args:
            value (str): value for IDD Field `message_line_10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_10`')

        self._data["Message Line 10"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.preprocessor_name))
        out.append(self._to_str(self.error_severity))
        out.append(self._to_str(self.message_line_1))
        out.append(self._to_str(self.message_line_2))
        out.append(self._to_str(self.message_line_3))
        out.append(self._to_str(self.message_line_4))
        out.append(self._to_str(self.message_line_5))
        out.append(self._to_str(self.message_line_6))
        out.append(self._to_str(self.message_line_7))
        out.append(self._to_str(self.message_line_8))
        out.append(self._to_str(self.message_line_9))
        out.append(self._to_str(self.message_line_10))
        return ",".join(out)