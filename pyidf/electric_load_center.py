from collections import OrderedDict
import logging
import re

class GeneratorInternalCombustionEngine(object):
    """ Corresponds to IDD object `Generator:InternalCombustionEngine`
        This generator model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Engine performance
        curves are generated by fitting catalog data to second order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Generator:InternalCombustionEngine"
    field_count = 21
    required_fields = ["Name", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:InternalCombustionEngine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Power Output"] = None
        self._data["Electric Circuit Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Shaft Power Curve Name"] = None
        self._data["Jacket Heat Recovery Curve Name"] = None
        self._data["Lube Heat Recovery Curve Name"] = None
        self._data["Total Exhaust Energy Curve Name"] = None
        self._data["Exhaust Temperature Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_power_output = None
        else:
            self.rated_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_circuit_node_name = None
        else:
            self.electric_circuit_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shaft_power_curve_name = None
        else:
            self.shaft_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.jacket_heat_recovery_curve_name = None
        else:
            self.jacket_heat_recovery_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.lube_heat_recovery_curve_name = None
        else:
            self.lube_heat_recovery_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_exhaust_energy_curve_name = None
        else:
            self.total_exhaust_energy_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_temperature_curve_name = None
        else:
            self.exhaust_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def rated_power_output(self):
        """Get rated_power_output

        Returns:
            float: the value of `rated_power_output` or None if not set
        """
        return self._data["Rated Power Output"]

    @rated_power_output.setter
    def rated_power_output(self, value=None):
        """  Corresponds to IDD Field `Rated Power Output`

        Args:
            value (float): value for IDD Field `Rated Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_power_output`'.format(value))
        self._data["Rated Power Output"] = value

    @property
    def electric_circuit_node_name(self):
        """Get electric_circuit_node_name

        Returns:
            str: the value of `electric_circuit_node_name` or None if not set
        """
        return self._data["Electric Circuit Node Name"]

    @electric_circuit_node_name.setter
    def electric_circuit_node_name(self, value=None):
        """  Corresponds to IDD Field `Electric Circuit Node Name`

        Args:
            value (str): value for IDD Field `Electric Circuit Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_circuit_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_circuit_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_circuit_node_name`')
        self._data["Electric Circuit Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
        self._data["Optimum Part Load Ratio"] = value

    @property
    def shaft_power_curve_name(self):
        """Get shaft_power_curve_name

        Returns:
            str: the value of `shaft_power_curve_name` or None if not set
        """
        return self._data["Shaft Power Curve Name"]

    @shaft_power_curve_name.setter
    def shaft_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Shaft Power Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `Shaft Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `shaft_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shaft_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shaft_power_curve_name`')
        self._data["Shaft Power Curve Name"] = value

    @property
    def jacket_heat_recovery_curve_name(self):
        """Get jacket_heat_recovery_curve_name

        Returns:
            str: the value of `jacket_heat_recovery_curve_name` or None if not set
        """
        return self._data["Jacket Heat Recovery Curve Name"]

    @jacket_heat_recovery_curve_name.setter
    def jacket_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `Jacket Heat Recovery Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `Jacket Heat Recovery Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `jacket_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `jacket_heat_recovery_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `jacket_heat_recovery_curve_name`')
        self._data["Jacket Heat Recovery Curve Name"] = value

    @property
    def lube_heat_recovery_curve_name(self):
        """Get lube_heat_recovery_curve_name

        Returns:
            str: the value of `lube_heat_recovery_curve_name` or None if not set
        """
        return self._data["Lube Heat Recovery Curve Name"]

    @lube_heat_recovery_curve_name.setter
    def lube_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `Lube Heat Recovery Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `Lube Heat Recovery Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `lube_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lube_heat_recovery_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `lube_heat_recovery_curve_name`')
        self._data["Lube Heat Recovery Curve Name"] = value

    @property
    def total_exhaust_energy_curve_name(self):
        """Get total_exhaust_energy_curve_name

        Returns:
            str: the value of `total_exhaust_energy_curve_name` or None if not set
        """
        return self._data["Total Exhaust Energy Curve Name"]

    @total_exhaust_energy_curve_name.setter
    def total_exhaust_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Exhaust Energy Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `Total Exhaust Energy Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `total_exhaust_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_exhaust_energy_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_exhaust_energy_curve_name`')
        self._data["Total Exhaust Energy Curve Name"] = value

    @property
    def exhaust_temperature_curve_name(self):
        """Get exhaust_temperature_curve_name

        Returns:
            str: the value of `exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Temperature Curve Name"]

    @exhaust_temperature_curve_name.setter
    def exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `Exhaust Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_temperature_curve_name`')
        self._data["Exhaust Temperature Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of U-Factor Times Area Curve`
        curve = C1 * Generator Rated Power Output**C2

        Args:
            value (float): value for IDD Field `Coefficient 1 of U-Factor Times Area Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of U-Factor Times Area Curve`
        curve = C1 * Generator Rated Power Output**C2
        typical value .9

        Args:
            value (float): value for IDD Field `Coefficient 2 of U-Factor Times Area Curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `Maximum Exhaust Flow per Unit of Power Output`

        Args:
            value (float): value for IDD Field `Maximum Exhaust Flow per Unit of Power Output`
                Units: (kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Minimum Exhaust Temperature`

        Args:
            value (float): value for IDD Field `Design Minimum Exhaust Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_minimum_exhaust_temperature`'.format(value))
        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `Fuel Higher Heating Value`

        Args:
            value (float): value for IDD Field `Fuel Higher Heating Value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_higher_heating_value`'.format(value))
        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        if non-zero, then inlet, outlet nodes must be entered.

        Args:
            value (float): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="Diesel"):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: Diesel
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0):
        """  Corresponds to IDD Field `Heat Recovery Maximum Temperature`

        Args:
            value (float): value for IDD Field `Heat Recovery Maximum Temperature`
                Units: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')
        self._data["Heat Recovery Maximum Temperature"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorCombustionTurbine(object):
    """ Corresponds to IDD object `Generator:CombustionTurbine`
        This generator model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Generator performance
        curves are generated by fitting catalog data to second order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Generator:CombustionTurbine"
    field_count = 24
    required_fields = ["Name", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:CombustionTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Power Output"] = None
        self._data["Electric Circuit Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Part Load Based Fuel Input Curve Name"] = None
        self._data["Temperature Based Fuel Input Curve Name"] = None
        self._data["Exhaust Flow Curve Name"] = None
        self._data["Part Load Based Exhaust Temperature Curve Name"] = None
        self._data["Temperature Based Exhaust Temperature Curve Name"] = None
        self._data["Heat Recovery Lube Energy Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Design Air Inlet Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None
        self._data["Outdoor Air Inlet Node Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_power_output = None
        else:
            self.rated_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_circuit_node_name = None
        else:
            self.electric_circuit_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_based_fuel_input_curve_name = None
        else:
            self.part_load_based_fuel_input_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_based_fuel_input_curve_name = None
        else:
            self.temperature_based_fuel_input_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_flow_curve_name = None
        else:
            self.exhaust_flow_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_based_exhaust_temperature_curve_name = None
        else:
            self.part_load_based_exhaust_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_based_exhaust_temperature_curve_name = None
        else:
            self.temperature_based_exhaust_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_lube_energy_curve_name = None
        else:
            self.heat_recovery_lube_energy_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_air_inlet_temperature = None
        else:
            self.design_air_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_air_inlet_node_name = None
        else:
            self.outdoor_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def rated_power_output(self):
        """Get rated_power_output

        Returns:
            float: the value of `rated_power_output` or None if not set
        """
        return self._data["Rated Power Output"]

    @rated_power_output.setter
    def rated_power_output(self, value=None):
        """  Corresponds to IDD Field `Rated Power Output`

        Args:
            value (float): value for IDD Field `Rated Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_power_output`'.format(value))
        self._data["Rated Power Output"] = value

    @property
    def electric_circuit_node_name(self):
        """Get electric_circuit_node_name

        Returns:
            str: the value of `electric_circuit_node_name` or None if not set
        """
        return self._data["Electric Circuit Node Name"]

    @electric_circuit_node_name.setter
    def electric_circuit_node_name(self, value=None):
        """  Corresponds to IDD Field `Electric Circuit Node Name`

        Args:
            value (str): value for IDD Field `Electric Circuit Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_circuit_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_circuit_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_circuit_node_name`')
        self._data["Electric Circuit Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
        self._data["Optimum Part Load Ratio"] = value

    @property
    def part_load_based_fuel_input_curve_name(self):
        """Get part_load_based_fuel_input_curve_name

        Returns:
            str: the value of `part_load_based_fuel_input_curve_name` or None if not set
        """
        return self._data["Part Load Based Fuel Input Curve Name"]

    @part_load_based_fuel_input_curve_name.setter
    def part_load_based_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Based Fuel Input Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output
        this curve is multiplied to the Temperature Based Fuel Input Curve
        to determine Fuel Energy In

        Args:
            value (str): value for IDD Field `Part Load Based Fuel Input Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `part_load_based_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_based_fuel_input_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_based_fuel_input_curve_name`')
        self._data["Part Load Based Fuel Input Curve Name"] = value

    @property
    def temperature_based_fuel_input_curve_name(self):
        """Get temperature_based_fuel_input_curve_name

        Returns:
            str: the value of `temperature_based_fuel_input_curve_name` or None if not set
        """
        return self._data["Temperature Based Fuel Input Curve Name"]

    @temperature_based_fuel_input_curve_name.setter
    def temperature_based_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Based Fuel Input Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T
        this curve is multiplied to the Part Load Based Fuel Input Curve
        to determine Fuel Energy In

        Args:
            value (str): value for IDD Field `Temperature Based Fuel Input Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_based_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_based_fuel_input_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_based_fuel_input_curve_name`')
        self._data["Temperature Based Fuel Input Curve Name"] = value

    @property
    def exhaust_flow_curve_name(self):
        """Get exhaust_flow_curve_name

        Returns:
            str: the value of `exhaust_flow_curve_name` or None if not set
        """
        return self._data["Exhaust Flow Curve Name"]

    @exhaust_flow_curve_name.setter
    def exhaust_flow_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Flow Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T

        Args:
            value (str): value for IDD Field `Exhaust Flow Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_flow_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_flow_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_flow_curve_name`')
        self._data["Exhaust Flow Curve Name"] = value

    @property
    def part_load_based_exhaust_temperature_curve_name(self):
        """Get part_load_based_exhaust_temperature_curve_name

        Returns:
            str: the value of `part_load_based_exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Part Load Based Exhaust Temperature Curve Name"]

    @part_load_based_exhaust_temperature_curve_name.setter
    def part_load_based_exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Based Exhaust Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output
        this curve is multiplied to the Temperature Based Exhaust Temperature Curve
        to determine Exhaust Temperature

        Args:
            value (str): value for IDD Field `Part Load Based Exhaust Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `part_load_based_exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_based_exhaust_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_based_exhaust_temperature_curve_name`')
        self._data["Part Load Based Exhaust Temperature Curve Name"] = value

    @property
    def temperature_based_exhaust_temperature_curve_name(self):
        """Get temperature_based_exhaust_temperature_curve_name

        Returns:
            str: the value of `temperature_based_exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Temperature Based Exhaust Temperature Curve Name"]

    @temperature_based_exhaust_temperature_curve_name.setter
    def temperature_based_exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Based Exhaust Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*AT + c*AT**2
        AT = Ambient Delta T
        this curve is multiplied to the Part Load Based Exhaust Temperatuer Curve
        to determine Exhaust Temperature

        Args:
            value (str): value for IDD Field `Temperature Based Exhaust Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_based_exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_based_exhaust_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_based_exhaust_temperature_curve_name`')
        self._data["Temperature Based Exhaust Temperature Curve Name"] = value

    @property
    def heat_recovery_lube_energy_curve_name(self):
        """Get heat_recovery_lube_energy_curve_name

        Returns:
            str: the value of `heat_recovery_lube_energy_curve_name` or None if not set
        """
        return self._data["Heat Recovery Lube Energy Curve Name"]

    @heat_recovery_lube_energy_curve_name.setter
    def heat_recovery_lube_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Lube Energy Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of Generator Load to Rated Power Output

        Args:
            value (str): value for IDD Field `Heat Recovery Lube Energy Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_lube_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_lube_energy_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_lube_energy_curve_name`')
        self._data["Heat Recovery Lube Energy Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of U-Factor Times Area Curve`
        curve = C1 * Rated Power Output**C2

        Args:
            value (float): value for IDD Field `Coefficient 1 of U-Factor Times Area Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of U-Factor Times Area Curve`
        curve = C1 * Rated Power Output**C2
        typical value .9

        Args:
            value (float): value for IDD Field `Coefficient 2 of U-Factor Times Area Curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `Maximum Exhaust Flow per Unit of Power Output`

        Args:
            value (float): value for IDD Field `Maximum Exhaust Flow per Unit of Power Output`
                Units: (Kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Minimum Exhaust Temperature`

        Args:
            value (float): value for IDD Field `Design Minimum Exhaust Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_minimum_exhaust_temperature`'.format(value))
        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def design_air_inlet_temperature(self):
        """Get design_air_inlet_temperature

        Returns:
            float: the value of `design_air_inlet_temperature` or None if not set
        """
        return self._data["Design Air Inlet Temperature"]

    @design_air_inlet_temperature.setter
    def design_air_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Air Inlet Temperature`

        Args:
            value (float): value for IDD Field `Design Air Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_air_inlet_temperature`'.format(value))
        self._data["Design Air Inlet Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `Fuel Higher Heating Value`

        Args:
            value (float): value for IDD Field `Fuel Higher Heating Value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_higher_heating_value`'.format(value))
        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        if non-zero, then inlet, outlet nodes must be entered.

        Args:
            value (float): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0):
        """  Corresponds to IDD Field `Heat Recovery Maximum Temperature`

        Args:
            value (float): value for IDD Field `Heat Recovery Maximum Temperature`
                Units: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')
        self._data["Heat Recovery Maximum Temperature"] = value

    @property
    def outdoor_air_inlet_node_name(self):
        """Get outdoor_air_inlet_node_name

        Returns:
            str: the value of `outdoor_air_inlet_node_name` or None if not set
        """
        return self._data["Outdoor Air Inlet Node Name"]

    @outdoor_air_inlet_node_name.setter
    def outdoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Outdoor Air Inlet Node Name`
        Enter the name of an outdoor air node

        Args:
            value (str): value for IDD Field `Outdoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outdoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outdoor_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outdoor_air_inlet_node_name`')
        self._data["Outdoor Air Inlet Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorMicroTurbine(object):
    """ Corresponds to IDD object `Generator:MicroTurbine`
        MicroTurbine generators are small combustion turbines (e.g., 25kW to 500kW). The model
        calculates electrical power output, fuel use, standby and ancillary power.
        Energy recovery from exhaust air can be used to heat water.
    """
    internal_name = "Generator:MicroTurbine"
    field_count = 39
    required_fields = ["Name", "Reference Electrical Power Output", "Reference Electrical Efficiency Using Lower Heating Value", "Electrical Power Function of Temperature and Elevation Curve Name", "Electrical Efficiency Function of Temperature Curve Name", "Electrical Efficiency Function of Part Load Ratio Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:MicroTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Electrical Power Output"] = None
        self._data["Minimum Full Load Electrical Power Output"] = None
        self._data["Maximum Full Load Electrical Power Output"] = None
        self._data["Reference Electrical Efficiency Using Lower Heating Value"] = None
        self._data["Reference Combustion Air Inlet Temperature"] = None
        self._data["Reference Combustion Air Inlet Humidity Ratio"] = None
        self._data["Reference Elevation"] = None
        self._data["Electrical Power Function of Temperature and Elevation Curve Name"] = None
        self._data["Electrical Efficiency Function of Temperature Curve Name"] = None
        self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"] = None
        self._data["Fuel Type"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Fuel Lower Heating Value"] = None
        self._data["Standby Power"] = None
        self._data["Ancillary Power"] = None
        self._data["Ancillary Power Function of Fuel Input Curve Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Reference Thermal Efficiency Using Lower Heat Value"] = None
        self._data["Reference Inlet Water Temperature"] = None
        self._data["Heat Recovery Water Flow Operating Mode"] = None
        self._data["Reference Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"] = None
        self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"] = None
        self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"] = None
        self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"] = None
        self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"] = None
        self._data["Minimum Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Heat Recovery Water Flow Rate"] = None
        self._data["Maximum Heat Recovery Water Temperature"] = None
        self._data["Combustion Air Inlet Node Name"] = None
        self._data["Combustion Air Outlet Node Name"] = None
        self._data["Reference Exhaust Air Mass Flow Rate"] = None
        self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"] = None
        self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"] = None
        self._data["Nominal Exhaust Air Outlet Temperature"] = None
        self._data["Exhaust Air Temperature Function of Temperature Curve Name"] = None
        self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_electrical_power_output = None
        else:
            self.reference_electrical_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_full_load_electrical_power_output = None
        else:
            self.minimum_full_load_electrical_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_full_load_electrical_power_output = None
        else:
            self.maximum_full_load_electrical_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_electrical_efficiency_using_lower_heating_value = None
        else:
            self.reference_electrical_efficiency_using_lower_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_combustion_air_inlet_temperature = None
        else:
            self.reference_combustion_air_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_combustion_air_inlet_humidity_ratio = None
        else:
            self.reference_combustion_air_inlet_humidity_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_elevation = None
        else:
            self.reference_elevation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_power_function_of_temperature_and_elevation_curve_name = None
        else:
            self.electrical_power_function_of_temperature_and_elevation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_efficiency_function_of_temperature_curve_name = None
        else:
            self.electrical_efficiency_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_efficiency_function_of_part_load_ratio_curve_name = None
        else:
            self.electrical_efficiency_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_lower_heating_value = None
        else:
            self.fuel_lower_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancillary_power = None
        else:
            self.ancillary_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancillary_power_function_of_fuel_input_curve_name = None
        else:
            self.ancillary_power_function_of_fuel_input_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_thermal_efficiency_using_lower_heat_value = None
        else:
            self.reference_thermal_efficiency_using_lower_heat_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_inlet_water_temperature = None
        else:
            self.reference_inlet_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_flow_operating_mode = None
        else:
            self.heat_recovery_water_flow_operating_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_heat_recovery_water_flow_rate = None
        else:
            self.reference_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name = None
        else:
            self.heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.thermal_efficiency_function_of_temperature_and_elevation_curve_name = None
        else:
            self.thermal_efficiency_function_of_temperature_and_elevation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_part_load_ratio_curve_name = None
        else:
            self.heat_recovery_rate_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name = None
        else:
            self.heat_recovery_rate_function_of_inlet_water_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_rate_function_of_water_flow_rate_curve_name = None
        else:
            self.heat_recovery_rate_function_of_water_flow_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_heat_recovery_water_flow_rate = None
        else:
            self.minimum_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_heat_recovery_water_flow_rate = None
        else:
            self.maximum_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_heat_recovery_water_temperature = None
        else:
            self.maximum_heat_recovery_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.combustion_air_inlet_node_name = None
        else:
            self.combustion_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.combustion_air_outlet_node_name = None
        else:
            self.combustion_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_exhaust_air_mass_flow_rate = None
        else:
            self.reference_exhaust_air_mass_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate_function_of_temperature_curve_name = None
        else:
            self.exhaust_air_flow_rate_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name = None
        else:
            self.exhaust_air_flow_rate_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_exhaust_air_outlet_temperature = None
        else:
            self.nominal_exhaust_air_outlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_function_of_temperature_curve_name = None
        else:
            self.exhaust_air_temperature_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_air_temperature_function_of_part_load_ratio_curve_name = None
        else:
            self.exhaust_air_temperature_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reference_electrical_power_output(self):
        """Get reference_electrical_power_output

        Returns:
            float: the value of `reference_electrical_power_output` or None if not set
        """
        return self._data["Reference Electrical Power Output"]

    @reference_electrical_power_output.setter
    def reference_electrical_power_output(self, value=None):
        """  Corresponds to IDD Field `Reference Electrical Power Output`

        Args:
            value (float): value for IDD Field `Reference Electrical Power Output`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_electrical_power_output`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_electrical_power_output`')
        self._data["Reference Electrical Power Output"] = value

    @property
    def minimum_full_load_electrical_power_output(self):
        """Get minimum_full_load_electrical_power_output

        Returns:
            float: the value of `minimum_full_load_electrical_power_output` or None if not set
        """
        return self._data["Minimum Full Load Electrical Power Output"]

    @minimum_full_load_electrical_power_output.setter
    def minimum_full_load_electrical_power_output(self, value=0.0):
        """  Corresponds to IDD Field `Minimum Full Load Electrical Power Output`

        Args:
            value (float): value for IDD Field `Minimum Full Load Electrical Power Output`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_full_load_electrical_power_output`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_full_load_electrical_power_output`')
        self._data["Minimum Full Load Electrical Power Output"] = value

    @property
    def maximum_full_load_electrical_power_output(self):
        """Get maximum_full_load_electrical_power_output

        Returns:
            float: the value of `maximum_full_load_electrical_power_output` or None if not set
        """
        return self._data["Maximum Full Load Electrical Power Output"]

    @maximum_full_load_electrical_power_output.setter
    def maximum_full_load_electrical_power_output(self, value=None):
        """  Corresponds to IDD Field `Maximum Full Load Electrical Power Output`
        If left blank, Maximum Full Load Electrical Power Output will be set
        equal to the Reference Electrical Power Output.

        Args:
            value (float): value for IDD Field `Maximum Full Load Electrical Power Output`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_full_load_electrical_power_output`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_full_load_electrical_power_output`')
        self._data["Maximum Full Load Electrical Power Output"] = value

    @property
    def reference_electrical_efficiency_using_lower_heating_value(self):
        """Get reference_electrical_efficiency_using_lower_heating_value

        Returns:
            float: the value of `reference_electrical_efficiency_using_lower_heating_value` or None if not set
        """
        return self._data["Reference Electrical Efficiency Using Lower Heating Value"]

    @reference_electrical_efficiency_using_lower_heating_value.setter
    def reference_electrical_efficiency_using_lower_heating_value(self, value=None):
        """  Corresponds to IDD Field `Reference Electrical Efficiency Using Lower Heating Value`
        Electric power output divided by fuel energy input (LHV basis)
        at reference conditions.

        Args:
            value (float): value for IDD Field `Reference Electrical Efficiency Using Lower Heating Value`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `reference_electrical_efficiency_using_lower_heating_value`')
        self._data["Reference Electrical Efficiency Using Lower Heating Value"] = value

    @property
    def reference_combustion_air_inlet_temperature(self):
        """Get reference_combustion_air_inlet_temperature

        Returns:
            float: the value of `reference_combustion_air_inlet_temperature` or None if not set
        """
        return self._data["Reference Combustion Air Inlet Temperature"]

    @reference_combustion_air_inlet_temperature.setter
    def reference_combustion_air_inlet_temperature(self, value=15.0):
        """  Corresponds to IDD Field `Reference Combustion Air Inlet Temperature`

        Args:
            value (float): value for IDD Field `Reference Combustion Air Inlet Temperature`
                Units: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_combustion_air_inlet_temperature`'.format(value))
        self._data["Reference Combustion Air Inlet Temperature"] = value

    @property
    def reference_combustion_air_inlet_humidity_ratio(self):
        """Get reference_combustion_air_inlet_humidity_ratio

        Returns:
            float: the value of `reference_combustion_air_inlet_humidity_ratio` or None if not set
        """
        return self._data["Reference Combustion Air Inlet Humidity Ratio"]

    @reference_combustion_air_inlet_humidity_ratio.setter
    def reference_combustion_air_inlet_humidity_ratio(self, value=0.00638):
        """  Corresponds to IDD Field `Reference Combustion Air Inlet Humidity Ratio`

        Args:
            value (float): value for IDD Field `Reference Combustion Air Inlet Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: 0.00638
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_combustion_air_inlet_humidity_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_combustion_air_inlet_humidity_ratio`')
        self._data["Reference Combustion Air Inlet Humidity Ratio"] = value

    @property
    def reference_elevation(self):
        """Get reference_elevation

        Returns:
            float: the value of `reference_elevation` or None if not set
        """
        return self._data["Reference Elevation"]

    @reference_elevation.setter
    def reference_elevation(self, value=0.0):
        """  Corresponds to IDD Field `Reference Elevation`

        Args:
            value (float): value for IDD Field `Reference Elevation`
                Units: m
                Default value: 0.0
                value >= -300.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_elevation`'.format(value))
            if value < -300.0:
                raise ValueError('value need to be greater or equal -300.0 '
                                 'for field `reference_elevation`')
        self._data["Reference Elevation"] = value

    @property
    def electrical_power_function_of_temperature_and_elevation_curve_name(self):
        """Get electrical_power_function_of_temperature_and_elevation_curve_name

        Returns:
            str: the value of `electrical_power_function_of_temperature_and_elevation_curve_name` or None if not set
        """
        return self._data["Electrical Power Function of Temperature and Elevation Curve Name"]

    @electrical_power_function_of_temperature_and_elevation_curve_name.setter
    def electrical_power_function_of_temperature_and_elevation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electrical Power Function of Temperature and Elevation Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev
        T = combustion air inlet temperature (C)
        Elev = elevation (m)

        Args:
            value (str): value for IDD Field `Electrical Power Function of Temperature and Elevation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_power_function_of_temperature_and_elevation_curve_name`')
        self._data["Electrical Power Function of Temperature and Elevation Curve Name"] = value

    @property
    def electrical_efficiency_function_of_temperature_curve_name(self):
        """Get electrical_efficiency_function_of_temperature_curve_name

        Returns:
            str: the value of `electrical_efficiency_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Function of Temperature Curve Name"]

    @electrical_efficiency_function_of_temperature_curve_name.setter
    def electrical_efficiency_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electrical Efficiency Function of Temperature Curve Name`
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)

        Args:
            value (str): value for IDD Field `Electrical Efficiency Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_efficiency_function_of_temperature_curve_name`')
        self._data["Electrical Efficiency Function of Temperature Curve Name"] = value

    @property
    def electrical_efficiency_function_of_part_load_ratio_curve_name(self):
        """Get electrical_efficiency_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electrical_efficiency_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"]

    @electrical_efficiency_function_of_part_load_ratio_curve_name.setter
    def electrical_efficiency_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electrical Efficiency Function of Part Load Ratio Curve Name`
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions

        Args:
            value (str): value for IDD Field `Electrical Efficiency Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_efficiency_function_of_part_load_ratio_curve_name`')
        self._data["Electrical Efficiency Function of Part Load Ratio Curve Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=50000.0):
        """  Corresponds to IDD Field `Fuel Higher Heating Value`

        Args:
            value (float): value for IDD Field `Fuel Higher Heating Value`
                Units: kJ/kg
                Default value: 50000.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_higher_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_higher_heating_value`')
        self._data["Fuel Higher Heating Value"] = value

    @property
    def fuel_lower_heating_value(self):
        """Get fuel_lower_heating_value

        Returns:
            float: the value of `fuel_lower_heating_value` or None if not set
        """
        return self._data["Fuel Lower Heating Value"]

    @fuel_lower_heating_value.setter
    def fuel_lower_heating_value(self, value=45450.0):
        """  Corresponds to IDD Field `Fuel Lower Heating Value`

        Args:
            value (float): value for IDD Field `Fuel Lower Heating Value`
                Units: kJ/kg
                Default value: 45450.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_lower_heating_value`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_lower_heating_value`')
        self._data["Fuel Lower Heating Value"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=0.0):
        """  Corresponds to IDD Field `Standby Power`
        Electric power consumed when the generator is available but not being called
        by the Electric Load Center.

        Args:
            value (float): value for IDD Field `Standby Power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `standby_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `standby_power`')
        self._data["Standby Power"] = value

    @property
    def ancillary_power(self):
        """Get ancillary_power

        Returns:
            float: the value of `ancillary_power` or None if not set
        """
        return self._data["Ancillary Power"]

    @ancillary_power.setter
    def ancillary_power(self, value=0.0):
        """  Corresponds to IDD Field `Ancillary Power`
        Electric power consumed by ancillary equipment (e.g., external fuel pressurization pump).
        Set to zero if Reference Electrical Power Output is the 'net' value (ancillary power
        already deducted). Input value is positive, but indicates negative electric generation.

        Args:
            value (float): value for IDD Field `Ancillary Power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancillary_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancillary_power`')
        self._data["Ancillary Power"] = value

    @property
    def ancillary_power_function_of_fuel_input_curve_name(self):
        """Get ancillary_power_function_of_fuel_input_curve_name

        Returns:
            str: the value of `ancillary_power_function_of_fuel_input_curve_name` or None if not set
        """
        return self._data["Ancillary Power Function of Fuel Input Curve Name"]

    @ancillary_power_function_of_fuel_input_curve_name.setter
    def ancillary_power_function_of_fuel_input_curve_name(self, value=None):
        """  Corresponds to IDD Field `Ancillary Power Function of Fuel Input Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*mdot + c*mdot**2
        mdot = fuel mass flow rate (kg/s)
        If left blank, model assumes ancillary power defined in previous field is constant
        whenever the generator is operating.

        Args:
            value (str): value for IDD Field `Ancillary Power Function of Fuel Input Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `ancillary_power_function_of_fuel_input_curve_name`')
        self._data["Ancillary Power Function of Fuel Input Curve Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_inlet_node_name`')
        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_outlet_node_name`')
        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def reference_thermal_efficiency_using_lower_heat_value(self):
        """Get reference_thermal_efficiency_using_lower_heat_value

        Returns:
            float: the value of `reference_thermal_efficiency_using_lower_heat_value` or None if not set
        """
        return self._data["Reference Thermal Efficiency Using Lower Heat Value"]

    @reference_thermal_efficiency_using_lower_heat_value.setter
    def reference_thermal_efficiency_using_lower_heat_value(self, value=0.0):
        """  Corresponds to IDD Field `Reference Thermal Efficiency Using Lower Heat Value`
        Reference thermal efficiency (heat recovery to water) based on the
        Lower Heating Value (LHV) of the fuel.

        Args:
            value (float): value for IDD Field `Reference Thermal Efficiency Using Lower Heat Value`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `reference_thermal_efficiency_using_lower_heat_value`')
        self._data["Reference Thermal Efficiency Using Lower Heat Value"] = value

    @property
    def reference_inlet_water_temperature(self):
        """Get reference_inlet_water_temperature

        Returns:
            float: the value of `reference_inlet_water_temperature` or None if not set
        """
        return self._data["Reference Inlet Water Temperature"]

    @reference_inlet_water_temperature.setter
    def reference_inlet_water_temperature(self, value=None):
        """  Corresponds to IDD Field `Reference Inlet Water Temperature`

        Args:
            value (float): value for IDD Field `Reference Inlet Water Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_inlet_water_temperature`'.format(value))
        self._data["Reference Inlet Water Temperature"] = value

    @property
    def heat_recovery_water_flow_operating_mode(self):
        """Get heat_recovery_water_flow_operating_mode

        Returns:
            str: the value of `heat_recovery_water_flow_operating_mode` or None if not set
        """
        return self._data["Heat Recovery Water Flow Operating Mode"]

    @heat_recovery_water_flow_operating_mode.setter
    def heat_recovery_water_flow_operating_mode(self, value="PlantControl"):
        """  Corresponds to IDD Field `Heat Recovery Water Flow Operating Mode`
        PlantControl means the heat recovery water flow rate is determined by the plant,
        but the user needs to supply a heat recovery water flow rate.
        InternalControl means the heat recovery water flow rate is controlled by this generator.
        If 'InternalControl' is selected, then the user needs to supply a reference heat
        recovery water flow rate and optionally the name of a heat recovery flow rate modifier curve.

        Args:
            value (str): value for IDD Field `Heat Recovery Water Flow Operating Mode`
                Accepted values are:
                      - PlantControl
                      - InternalControl
                Default value: PlantControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_flow_operating_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_flow_operating_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_flow_operating_mode`')
            vals = {}
            vals["plantcontrol"] = "PlantControl"
            vals["internalcontrol"] = "InternalControl"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_recovery_water_flow_operating_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heat_recovery_water_flow_operating_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heat Recovery Water Flow Operating Mode"] = value

    @property
    def reference_heat_recovery_water_flow_rate(self):
        """Get reference_heat_recovery_water_flow_rate

        Returns:
            float: the value of `reference_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Reference Heat Recovery Water Flow Rate"]

    @reference_heat_recovery_water_flow_rate.setter
    def reference_heat_recovery_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Reference Heat Recovery Water Flow Rate`

        Args:
            value (float): value for IDD Field `Reference Heat Recovery Water Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_heat_recovery_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_heat_recovery_water_flow_rate`')
        self._data["Reference Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name(self):
        """Get heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name

        Returns:
            str: the value of `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name` or None if not set
        """
        return self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"]

    @heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name.setter
    def heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*T + c*T**2 + d*Pnet + e*Pnet + f*T*Pnet
        T = heat recovery inlet water temperature
        Pnet = net power output = electric power output - ancillary power
        If left blank, model assumes the heat recovery water flow rate is constant whenever the
        generator is operating, at the Reference HR Water Flow Rate defined in the previous field.

        Args:
            value (str): value for IDD Field `Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_flow_rate_function_of_temperature_and_power_curve_name`')
        self._data["Heat Recovery Water Flow Rate Function of Temperature and Power Curve Name"] = value

    @property
    def thermal_efficiency_function_of_temperature_and_elevation_curve_name(self):
        """Get thermal_efficiency_function_of_temperature_and_elevation_curve_name

        Returns:
            str: the value of `thermal_efficiency_function_of_temperature_and_elevation_curve_name` or None if not set
        """
        return self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"]

    @thermal_efficiency_function_of_temperature_and_elevation_curve_name.setter
    def thermal_efficiency_function_of_temperature_and_elevation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Thermal Efficiency Function of Temperature and Elevation Curve Name`
        Table:TwoIndependentVariables object can also be used
        Bicubic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev + g*T**3 + h*Elev**3 + i*T**2*Elev + j*T*Elev**2
        Biquadratic curve = a + b*T + c*T**2 + d*Elev + e*Elev**2 + f*T*Elev
        T = combustion air inlet temperature (C)
        Elev = elevation (m)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Thermal Efficiency Function of Temperature and Elevation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `thermal_efficiency_function_of_temperature_and_elevation_curve_name`')
        self._data["Thermal Efficiency Function of Temperature and Elevation Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_part_load_ratio_curve_name(self):
        """Get heat_recovery_rate_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"]

    @heat_recovery_rate_function_of_part_load_ratio_curve_name.setter
    def heat_recovery_rate_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Rate Function of Part Load Ratio Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Heat Recovery Rate Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_rate_function_of_part_load_ratio_curve_name`')
        self._data["Heat Recovery Rate Function of Part Load Ratio Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_inlet_water_temperature_curve_name(self):
        """Get heat_recovery_rate_function_of_inlet_water_temperature_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_inlet_water_temperature_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"]

    @heat_recovery_rate_function_of_inlet_water_temperature_curve_name.setter
    def heat_recovery_rate_function_of_inlet_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Rate Function of Inlet Water Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        T = inlet water temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Heat Recovery Rate Function of Inlet Water Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_rate_function_of_inlet_water_temperature_curve_name`')
        self._data["Heat Recovery Rate Function of Inlet Water Temperature Curve Name"] = value

    @property
    def heat_recovery_rate_function_of_water_flow_rate_curve_name(self):
        """Get heat_recovery_rate_function_of_water_flow_rate_curve_name

        Returns:
            str: the value of `heat_recovery_rate_function_of_water_flow_rate_curve_name` or None if not set
        """
        return self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"]

    @heat_recovery_rate_function_of_water_flow_rate_curve_name.setter
    def heat_recovery_rate_function_of_water_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Rate Function of Water Flow Rate Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*Flow + c*Flow**2
        Flow = flow rate of water through the heat exchanger (m3/s)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Heat Recovery Rate Function of Water Flow Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_rate_function_of_water_flow_rate_curve_name`')
        self._data["Heat Recovery Rate Function of Water Flow Rate Curve Name"] = value

    @property
    def minimum_heat_recovery_water_flow_rate(self):
        """Get minimum_heat_recovery_water_flow_rate

        Returns:
            float: the value of `minimum_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Minimum Heat Recovery Water Flow Rate"]

    @minimum_heat_recovery_water_flow_rate.setter
    def minimum_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Minimum Heat Recovery Water Flow Rate`

        Args:
            value (float): value for IDD Field `Minimum Heat Recovery Water Flow Rate`
                Units: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_heat_recovery_water_flow_rate`')
        self._data["Minimum Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_heat_recovery_water_flow_rate(self):
        """Get maximum_heat_recovery_water_flow_rate

        Returns:
            float: the value of `maximum_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Maximum Heat Recovery Water Flow Rate"]

    @maximum_heat_recovery_water_flow_rate.setter
    def maximum_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Maximum Heat Recovery Water Flow Rate`

        Args:
            value (float): value for IDD Field `Maximum Heat Recovery Water Flow Rate`
                Units: m3/s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_heat_recovery_water_flow_rate`')
        self._data["Maximum Heat Recovery Water Flow Rate"] = value

    @property
    def maximum_heat_recovery_water_temperature(self):
        """Get maximum_heat_recovery_water_temperature

        Returns:
            float: the value of `maximum_heat_recovery_water_temperature` or None if not set
        """
        return self._data["Maximum Heat Recovery Water Temperature"]

    @maximum_heat_recovery_water_temperature.setter
    def maximum_heat_recovery_water_temperature(self, value=None):
        """  Corresponds to IDD Field `Maximum Heat Recovery Water Temperature`

        Args:
            value (float): value for IDD Field `Maximum Heat Recovery Water Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_heat_recovery_water_temperature`'.format(value))
        self._data["Maximum Heat Recovery Water Temperature"] = value

    @property
    def combustion_air_inlet_node_name(self):
        """Get combustion_air_inlet_node_name

        Returns:
            str: the value of `combustion_air_inlet_node_name` or None if not set
        """
        return self._data["Combustion Air Inlet Node Name"]

    @combustion_air_inlet_node_name.setter
    def combustion_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Combustion Air Inlet Node Name`
        Must be an outdoor air node.

        Args:
            value (str): value for IDD Field `Combustion Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `combustion_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `combustion_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `combustion_air_inlet_node_name`')
        self._data["Combustion Air Inlet Node Name"] = value

    @property
    def combustion_air_outlet_node_name(self):
        """Get combustion_air_outlet_node_name

        Returns:
            str: the value of `combustion_air_outlet_node_name` or None if not set
        """
        return self._data["Combustion Air Outlet Node Name"]

    @combustion_air_outlet_node_name.setter
    def combustion_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Combustion Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Combustion Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `combustion_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `combustion_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `combustion_air_outlet_node_name`')
        self._data["Combustion Air Outlet Node Name"] = value

    @property
    def reference_exhaust_air_mass_flow_rate(self):
        """Get reference_exhaust_air_mass_flow_rate

        Returns:
            float: the value of `reference_exhaust_air_mass_flow_rate` or None if not set
        """
        return self._data["Reference Exhaust Air Mass Flow Rate"]

    @reference_exhaust_air_mass_flow_rate.setter
    def reference_exhaust_air_mass_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Reference Exhaust Air Mass Flow Rate`

        Args:
            value (float): value for IDD Field `Reference Exhaust Air Mass Flow Rate`
                Units: kg/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_exhaust_air_mass_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_exhaust_air_mass_flow_rate`')
        self._data["Reference Exhaust Air Mass Flow Rate"] = value

    @property
    def exhaust_air_flow_rate_function_of_temperature_curve_name(self):
        """Get exhaust_air_flow_rate_function_of_temperature_curve_name

        Returns:
            str: the value of `exhaust_air_flow_rate_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"]

    @exhaust_air_flow_rate_function_of_temperature_curve_name.setter
    def exhaust_air_flow_rate_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Air Flow Rate Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Exhaust Air Flow Rate Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_air_flow_rate_function_of_temperature_curve_name`')
        self._data["Exhaust Air Flow Rate Function of Temperature Curve Name"] = value

    @property
    def exhaust_air_flow_rate_function_of_part_load_ratio_curve_name(self):
        """Get exhaust_air_flow_rate_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"]

    @exhaust_air_flow_rate_function_of_part_load_ratio_curve_name.setter
    def exhaust_air_flow_rate_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Air Flow Rate Function of Part Load Ratio Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions.
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Exhaust Air Flow Rate Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_air_flow_rate_function_of_part_load_ratio_curve_name`')
        self._data["Exhaust Air Flow Rate Function of Part Load Ratio Curve Name"] = value

    @property
    def nominal_exhaust_air_outlet_temperature(self):
        """Get nominal_exhaust_air_outlet_temperature

        Returns:
            float: the value of `nominal_exhaust_air_outlet_temperature` or None if not set
        """
        return self._data["Nominal Exhaust Air Outlet Temperature"]

    @nominal_exhaust_air_outlet_temperature.setter
    def nominal_exhaust_air_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Exhaust Air Outlet Temperature`
        Exhaust air outlet temperature at reference conditions.

        Args:
            value (float): value for IDD Field `Nominal Exhaust Air Outlet Temperature`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_exhaust_air_outlet_temperature`'.format(value))
        self._data["Nominal Exhaust Air Outlet Temperature"] = value

    @property
    def exhaust_air_temperature_function_of_temperature_curve_name(self):
        """Get exhaust_air_temperature_function_of_temperature_curve_name

        Returns:
            str: the value of `exhaust_air_temperature_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Air Temperature Function of Temperature Curve Name"]

    @exhaust_air_temperature_function_of_temperature_curve_name.setter
    def exhaust_air_temperature_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Air Temperature Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*T + c*T**2
        Cubic curve = a + b*T + c*T**2 + d*T**3
        T = combustion air inlet temperature (C)
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Exhaust Air Temperature Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_air_temperature_function_of_temperature_curve_name`')
        self._data["Exhaust Air Temperature Function of Temperature Curve Name"] = value

    @property
    def exhaust_air_temperature_function_of_part_load_ratio_curve_name(self):
        """Get exhaust_air_temperature_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `exhaust_air_temperature_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"]

    @exhaust_air_temperature_function_of_part_load_ratio_curve_name.setter
    def exhaust_air_temperature_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Air Temperature Function of Part Load Ratio Curve Name`
        Table:OneIndependentVariable object can also be used
        Quadratic curve = a + b*PLR + c*PLR**2
        Cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = ratio of Generator Load to steady state Electrical Power Output at
        current operating conditions.
        If field is left blank, model assumes this modifier equals 1 for entire simulation.

        Args:
            value (str): value for IDD Field `Exhaust Air Temperature Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_air_temperature_function_of_part_load_ratio_curve_name`')
        self._data["Exhaust Air Temperature Function of Part Load Ratio Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorPhotovoltaic(object):
    """ Corresponds to IDD object `Generator:Photovoltaic`
        Describes an array of photovoltaic (PV) modules.  A series of different PV arrays
        can be connected to a single electric load center (and inverter) by listing them all
        in an ElectricLoadCenter:Generator object. PV performance is taken from the
        referenced PhotovoltaicPerformance:* object. Array tilt, azimuth, and gross area
        are taken from the referenced building surface or shading surface. The array
        surface participates normally in all shading calculations.
    """
    internal_name = "Generator:Photovoltaic"
    field_count = 7
    required_fields = ["Name", "Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:Photovoltaic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface Name"] = None
        self._data["Photovoltaic Performance Object Type"] = None
        self._data["Module Performance Name"] = None
        self._data["Heat Transfer Integration Mode"] = None
        self._data["Number of Series Strings in Parallel"] = None
        self._data["Number of Modules in Series"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_name = None
        else:
            self.surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.photovoltaic_performance_object_type = None
        else:
            self.photovoltaic_performance_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_performance_name = None
        else:
            self.module_performance_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_transfer_integration_mode = None
        else:
            self.heat_transfer_integration_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_series_strings_in_parallel = None
        else:
            self.number_of_series_strings_in_parallel = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_modules_in_series = None
        else:
            self.number_of_modules_in_series = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def surface_name(self):
        """Get surface_name

        Returns:
            str: the value of `surface_name` or None if not set
        """
        return self._data["Surface Name"]

    @surface_name.setter
    def surface_name(self, value=None):
        """  Corresponds to IDD Field `Surface Name`

        Args:
            value (str): value for IDD Field `Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_name`')
        self._data["Surface Name"] = value

    @property
    def photovoltaic_performance_object_type(self):
        """Get photovoltaic_performance_object_type

        Returns:
            str: the value of `photovoltaic_performance_object_type` or None if not set
        """
        return self._data["Photovoltaic Performance Object Type"]

    @photovoltaic_performance_object_type.setter
    def photovoltaic_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `Photovoltaic Performance Object Type`

        Args:
            value (str): value for IDD Field `Photovoltaic Performance Object Type`
                Accepted values are:
                      - PhotovoltaicPerformance:Simple
                      - PhotovoltaicPerformance:EquivalentOne-Diode
                      - PhotovoltaicPerformance:Sandia
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `photovoltaic_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `photovoltaic_performance_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `photovoltaic_performance_object_type`')
            vals = {}
            vals["photovoltaicperformance:simple"] = "PhotovoltaicPerformance:Simple"
            vals["photovoltaicperformance:equivalentone-diode"] = "PhotovoltaicPerformance:EquivalentOne-Diode"
            vals["photovoltaicperformance:sandia"] = "PhotovoltaicPerformance:Sandia"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `photovoltaic_performance_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `photovoltaic_performance_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Photovoltaic Performance Object Type"] = value

    @property
    def module_performance_name(self):
        """Get module_performance_name

        Returns:
            str: the value of `module_performance_name` or None if not set
        """
        return self._data["Module Performance Name"]

    @module_performance_name.setter
    def module_performance_name(self, value=None):
        """  Corresponds to IDD Field `Module Performance Name`
        PV array modeling details

        Args:
            value (str): value for IDD Field `Module Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `module_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `module_performance_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `module_performance_name`')
        self._data["Module Performance Name"] = value

    @property
    def heat_transfer_integration_mode(self):
        """Get heat_transfer_integration_mode

        Returns:
            str: the value of `heat_transfer_integration_mode` or None if not set
        """
        return self._data["Heat Transfer Integration Mode"]

    @heat_transfer_integration_mode.setter
    def heat_transfer_integration_mode(self, value="Decoupled"):
        """  Corresponds to IDD Field `Heat Transfer Integration Mode`

        Args:
            value (str): value for IDD Field `Heat Transfer Integration Mode`
                Accepted values are:
                      - Decoupled
                      - DecoupledUllebergDynamic
                      - IntegratedSurfaceOutsideFace
                      - IntegratedTranspiredCollector
                      - IntegratedExteriorVentedCavity
                      - PhotovoltaicThermalSolarCollector
                Default value: Decoupled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_transfer_integration_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_transfer_integration_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_transfer_integration_mode`')
            vals = {}
            vals["decoupled"] = "Decoupled"
            vals["decoupledullebergdynamic"] = "DecoupledUllebergDynamic"
            vals["integratedsurfaceoutsideface"] = "IntegratedSurfaceOutsideFace"
            vals["integratedtranspiredcollector"] = "IntegratedTranspiredCollector"
            vals["integratedexteriorventedcavity"] = "IntegratedExteriorVentedCavity"
            vals["photovoltaicthermalsolarcollector"] = "PhotovoltaicThermalSolarCollector"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_transfer_integration_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heat_transfer_integration_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heat Transfer Integration Mode"] = value

    @property
    def number_of_series_strings_in_parallel(self):
        """Get number_of_series_strings_in_parallel

        Returns:
            float: the value of `number_of_series_strings_in_parallel` or None if not set
        """
        return self._data["Number of Series Strings in Parallel"]

    @number_of_series_strings_in_parallel.setter
    def number_of_series_strings_in_parallel(self, value=1.0):
        """  Corresponds to IDD Field `Number of Series Strings in Parallel`
        number of series-wired strings of PV modules that are in parallel

        Args:
            value (float): value for IDD Field `Number of Series Strings in Parallel`
                Units: dimensionless
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_series_strings_in_parallel`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_series_strings_in_parallel`')
        self._data["Number of Series Strings in Parallel"] = value

    @property
    def number_of_modules_in_series(self):
        """Get number_of_modules_in_series

        Returns:
            float: the value of `number_of_modules_in_series` or None if not set
        """
        return self._data["Number of Modules in Series"]

    @number_of_modules_in_series.setter
    def number_of_modules_in_series(self, value=1.0):
        """  Corresponds to IDD Field `Number of Modules in Series`
        Number of PV modules wired in series for each string.

        Args:
            value (float): value for IDD Field `Number of Modules in Series`
                Units: dimensionless
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_modules_in_series`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `number_of_modules_in_series`')
        self._data["Number of Modules in Series"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class PhotovoltaicPerformanceSimple(object):
    """ Corresponds to IDD object `PhotovoltaicPerformance:Simple`
        Describes a simple model of photovoltaics that may be useful for early phase
        design analysis. In this model the user has direct access to the efficiency with
        which surfaces convert incident solar radiation to electricity and need not specify
        arrays of specific modules.
    """
    internal_name = "PhotovoltaicPerformance:Simple"
    field_count = 5
    required_fields = ["Fraction of Surface Area with Active Solar Cells"]

    def __init__(self):
        """ Init data dictionary object for IDD  `PhotovoltaicPerformance:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fraction of Surface Area with Active Solar Cells"] = None
        self._data["Conversion Efficiency Input Mode"] = None
        self._data["Value for Cell Efficiency if Fixed"] = None
        self._data["Efficiency Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_surface_area_with_active_solar_cells = None
        else:
            self.fraction_of_surface_area_with_active_solar_cells = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.conversion_efficiency_input_mode = None
        else:
            self.conversion_efficiency_input_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.value_for_cell_efficiency_if_fixed = None
        else:
            self.value_for_cell_efficiency_if_fixed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_schedule_name = None
        else:
            self.efficiency_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def fraction_of_surface_area_with_active_solar_cells(self):
        """Get fraction_of_surface_area_with_active_solar_cells

        Returns:
            float: the value of `fraction_of_surface_area_with_active_solar_cells` or None if not set
        """
        return self._data["Fraction of Surface Area with Active Solar Cells"]

    @fraction_of_surface_area_with_active_solar_cells.setter
    def fraction_of_surface_area_with_active_solar_cells(self, value=None):
        """  Corresponds to IDD Field `Fraction of Surface Area with Active Solar Cells`

        Args:
            value (float): value for IDD Field `Fraction of Surface Area with Active Solar Cells`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_surface_area_with_active_solar_cells`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_surface_area_with_active_solar_cells`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_surface_area_with_active_solar_cells`')
        self._data["Fraction of Surface Area with Active Solar Cells"] = value

    @property
    def conversion_efficiency_input_mode(self):
        """Get conversion_efficiency_input_mode

        Returns:
            str: the value of `conversion_efficiency_input_mode` or None if not set
        """
        return self._data["Conversion Efficiency Input Mode"]

    @conversion_efficiency_input_mode.setter
    def conversion_efficiency_input_mode(self, value=None):
        """  Corresponds to IDD Field `Conversion Efficiency Input Mode`

        Args:
            value (str): value for IDD Field `Conversion Efficiency Input Mode`
                Accepted values are:
                      - Fixed
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `conversion_efficiency_input_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `conversion_efficiency_input_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `conversion_efficiency_input_mode`')
            vals = {}
            vals["fixed"] = "Fixed"
            vals["scheduled"] = "Scheduled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `conversion_efficiency_input_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `conversion_efficiency_input_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Conversion Efficiency Input Mode"] = value

    @property
    def value_for_cell_efficiency_if_fixed(self):
        """Get value_for_cell_efficiency_if_fixed

        Returns:
            float: the value of `value_for_cell_efficiency_if_fixed` or None if not set
        """
        return self._data["Value for Cell Efficiency if Fixed"]

    @value_for_cell_efficiency_if_fixed.setter
    def value_for_cell_efficiency_if_fixed(self, value=None):
        """  Corresponds to IDD Field `Value for Cell Efficiency if Fixed`
        Efficiency = (power generated [W])/(incident solar[W])

        Args:
            value (float): value for IDD Field `Value for Cell Efficiency if Fixed`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `value_for_cell_efficiency_if_fixed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `value_for_cell_efficiency_if_fixed`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `value_for_cell_efficiency_if_fixed`')
        self._data["Value for Cell Efficiency if Fixed"] = value

    @property
    def efficiency_schedule_name(self):
        """Get efficiency_schedule_name

        Returns:
            str: the value of `efficiency_schedule_name` or None if not set
        """
        return self._data["Efficiency Schedule Name"]

    @efficiency_schedule_name.setter
    def efficiency_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Efficiency Schedule Name`

        Args:
            value (str): value for IDD Field `Efficiency Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `efficiency_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `efficiency_schedule_name`')
        self._data["Efficiency Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class PhotovoltaicPerformanceEquivalentOneDiode(object):
    """ Corresponds to IDD object `PhotovoltaicPerformance:EquivalentOne-Diode`
        Describes the performance characteristics of Photovoltaic (PV) modules to be modeled
        using an equivalent one-diode circuit.  This model is also known as
        the 4- or 5-parameter TRNSYS model for photovoltaics.
    """
    internal_name = "PhotovoltaicPerformance:EquivalentOne-Diode"
    field_count = 20
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `PhotovoltaicPerformance:EquivalentOne-Diode`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Cell type"] = None
        self._data["Number of Cells in Series"] = None
        self._data["Active Area"] = None
        self._data["Transmittance Absorptance Product"] = None
        self._data["Semiconductor Bandgap"] = None
        self._data["Shunt Resistance"] = None
        self._data["Short Circuit Current"] = None
        self._data["Open Circuit Voltage"] = None
        self._data["Reference Temperature"] = None
        self._data["Reference Insolation"] = None
        self._data["Module Current at Maximum Power"] = None
        self._data["Module Voltage at Maximum Power"] = None
        self._data["Temperature Coefficient of Short Circuit Current"] = None
        self._data["Temperature Coefficient of Open Circuit Voltage"] = None
        self._data["Nominal Operating Cell Temperature Test Ambient Temperature"] = None
        self._data["Nominal Operating Cell Temperature Test Cell Temperature"] = None
        self._data["Nominal Operating Cell Temperature Test Insolation"] = None
        self._data["Module Heat Loss Coefficient"] = None
        self._data["Total Heat Capacity"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cell_type = None
        else:
            self.cell_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_cells_in_series = None
        else:
            self.number_of_cells_in_series = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.active_area = None
        else:
            self.active_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.transmittance_absorptance_product = None
        else:
            self.transmittance_absorptance_product = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.semiconductor_bandgap = None
        else:
            self.semiconductor_bandgap = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shunt_resistance = None
        else:
            self.shunt_resistance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.short_circuit_current = None
        else:
            self.short_circuit_current = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.open_circuit_voltage = None
        else:
            self.open_circuit_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_temperature = None
        else:
            self.reference_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_insolation = None
        else:
            self.reference_insolation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_current_at_maximum_power = None
        else:
            self.module_current_at_maximum_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_voltage_at_maximum_power = None
        else:
            self.module_voltage_at_maximum_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_coefficient_of_short_circuit_current = None
        else:
            self.temperature_coefficient_of_short_circuit_current = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_coefficient_of_open_circuit_voltage = None
        else:
            self.temperature_coefficient_of_open_circuit_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_operating_cell_temperature_test_ambient_temperature = None
        else:
            self.nominal_operating_cell_temperature_test_ambient_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_operating_cell_temperature_test_cell_temperature = None
        else:
            self.nominal_operating_cell_temperature_test_cell_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_operating_cell_temperature_test_insolation = None
        else:
            self.nominal_operating_cell_temperature_test_insolation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_heat_loss_coefficient = None
        else:
            self.module_heat_loss_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_heat_capacity = None
        else:
            self.total_heat_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def cell_type(self):
        """Get cell_type

        Returns:
            str: the value of `cell_type` or None if not set
        """
        return self._data["Cell type"]

    @cell_type.setter
    def cell_type(self, value=None):
        """  Corresponds to IDD Field `Cell type`

        Args:
            value (str): value for IDD Field `Cell type`
                Accepted values are:
                      - CrystallineSilicon
                      - AmorphousSilicon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cell_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cell_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cell_type`')
            vals = {}
            vals["crystallinesilicon"] = "CrystallineSilicon"
            vals["amorphoussilicon"] = "AmorphousSilicon"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cell_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `cell_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Cell type"] = value

    @property
    def number_of_cells_in_series(self):
        """Get number_of_cells_in_series

        Returns:
            int: the value of `number_of_cells_in_series` or None if not set
        """
        return self._data["Number of Cells in Series"]

    @number_of_cells_in_series.setter
    def number_of_cells_in_series(self, value=36):
        """  Corresponds to IDD Field `Number of Cells in Series`

        Args:
            value (int): value for IDD Field `Number of Cells in Series`
                Units: dimensionless
                Default value: 36
                value >= 0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_cells_in_series`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_cells_in_series`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `number_of_cells_in_series`')
        self._data["Number of Cells in Series"] = value

    @property
    def active_area(self):
        """Get active_area

        Returns:
            float: the value of `active_area` or None if not set
        """
        return self._data["Active Area"]

    @active_area.setter
    def active_area(self, value=0.89):
        """  Corresponds to IDD Field `Active Area`
        The total power output of the array is determined by the
        number of modules (see above).  The Active Area is only
        used to calculate the PV Array Efficiency output variable.

        Args:
            value (float): value for IDD Field `Active Area`
                Units: m2
                Default value: 0.89
                value >= 0.1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `active_area`'.format(value))
            if value < 0.1:
                raise ValueError('value need to be greater or equal 0.1 '
                                 'for field `active_area`')
        self._data["Active Area"] = value

    @property
    def transmittance_absorptance_product(self):
        """Get transmittance_absorptance_product

        Returns:
            float: the value of `transmittance_absorptance_product` or None if not set
        """
        return self._data["Transmittance Absorptance Product"]

    @transmittance_absorptance_product.setter
    def transmittance_absorptance_product(self, value=0.95):
        """  Corresponds to IDD Field `Transmittance Absorptance Product`

        Args:
            value (float): value for IDD Field `Transmittance Absorptance Product`
                Units: dimensionless
                Default value: 0.95
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `transmittance_absorptance_product`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `transmittance_absorptance_product`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `transmittance_absorptance_product`')
        self._data["Transmittance Absorptance Product"] = value

    @property
    def semiconductor_bandgap(self):
        """Get semiconductor_bandgap

        Returns:
            float: the value of `semiconductor_bandgap` or None if not set
        """
        return self._data["Semiconductor Bandgap"]

    @semiconductor_bandgap.setter
    def semiconductor_bandgap(self, value=1.12):
        """  Corresponds to IDD Field `Semiconductor Bandgap`

        Args:
            value (float): value for IDD Field `Semiconductor Bandgap`
                Units: eV
                Default value: 1.12
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `semiconductor_bandgap`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `semiconductor_bandgap`')
        self._data["Semiconductor Bandgap"] = value

    @property
    def shunt_resistance(self):
        """Get shunt_resistance

        Returns:
            float: the value of `shunt_resistance` or None if not set
        """
        return self._data["Shunt Resistance"]

    @shunt_resistance.setter
    def shunt_resistance(self, value=1000000.0):
        """  Corresponds to IDD Field `Shunt Resistance`

        Args:
            value (float): value for IDD Field `Shunt Resistance`
                Units: ohms
                Default value: 1000000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `shunt_resistance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `shunt_resistance`')
        self._data["Shunt Resistance"] = value

    @property
    def short_circuit_current(self):
        """Get short_circuit_current

        Returns:
            float: the value of `short_circuit_current` or None if not set
        """
        return self._data["Short Circuit Current"]

    @short_circuit_current.setter
    def short_circuit_current(self, value=6.5):
        """  Corresponds to IDD Field `Short Circuit Current`

        Args:
            value (float): value for IDD Field `Short Circuit Current`
                Units: A
                Default value: 6.5
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `short_circuit_current`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `short_circuit_current`')
        self._data["Short Circuit Current"] = value

    @property
    def open_circuit_voltage(self):
        """Get open_circuit_voltage

        Returns:
            float: the value of `open_circuit_voltage` or None if not set
        """
        return self._data["Open Circuit Voltage"]

    @open_circuit_voltage.setter
    def open_circuit_voltage(self, value=21.6):
        """  Corresponds to IDD Field `Open Circuit Voltage`

        Args:
            value (float): value for IDD Field `Open Circuit Voltage`
                Units: V
                Default value: 21.6
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `open_circuit_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `open_circuit_voltage`')
        self._data["Open Circuit Voltage"] = value

    @property
    def reference_temperature(self):
        """Get reference_temperature

        Returns:
            float: the value of `reference_temperature` or None if not set
        """
        return self._data["Reference Temperature"]

    @reference_temperature.setter
    def reference_temperature(self, value=25.0):
        """  Corresponds to IDD Field `Reference Temperature`

        Args:
            value (float): value for IDD Field `Reference Temperature`
                Units: C
                Default value: 25.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_temperature`')
        self._data["Reference Temperature"] = value

    @property
    def reference_insolation(self):
        """Get reference_insolation

        Returns:
            float: the value of `reference_insolation` or None if not set
        """
        return self._data["Reference Insolation"]

    @reference_insolation.setter
    def reference_insolation(self, value=1000.0):
        """  Corresponds to IDD Field `Reference Insolation`

        Args:
            value (float): value for IDD Field `Reference Insolation`
                Units: W/m2
                Default value: 1000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_insolation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_insolation`')
        self._data["Reference Insolation"] = value

    @property
    def module_current_at_maximum_power(self):
        """Get module_current_at_maximum_power

        Returns:
            float: the value of `module_current_at_maximum_power` or None if not set
        """
        return self._data["Module Current at Maximum Power"]

    @module_current_at_maximum_power.setter
    def module_current_at_maximum_power(self, value=5.9):
        """  Corresponds to IDD Field `Module Current at Maximum Power`
        Single module current at the maximum power point
        and reference conditions.  Module Current, Module Voltage,
        Number of Modules in Parallel and Number of Modules in Series
        determine the maximum power output of the array.

        Args:
            value (float): value for IDD Field `Module Current at Maximum Power`
                Units: A
                Default value: 5.9
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `module_current_at_maximum_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_current_at_maximum_power`')
        self._data["Module Current at Maximum Power"] = value

    @property
    def module_voltage_at_maximum_power(self):
        """Get module_voltage_at_maximum_power

        Returns:
            float: the value of `module_voltage_at_maximum_power` or None if not set
        """
        return self._data["Module Voltage at Maximum Power"]

    @module_voltage_at_maximum_power.setter
    def module_voltage_at_maximum_power(self, value=17.0):
        """  Corresponds to IDD Field `Module Voltage at Maximum Power`
        Single module voltage at the maximum power point
        and reference conditions.  Module Current, Module Voltage,
        Number of Modules in Parallel and Number of Modules in Series
        determine the maximum power output of the array.

        Args:
            value (float): value for IDD Field `Module Voltage at Maximum Power`
                Units: V
                Default value: 17.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `module_voltage_at_maximum_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_voltage_at_maximum_power`')
        self._data["Module Voltage at Maximum Power"] = value

    @property
    def temperature_coefficient_of_short_circuit_current(self):
        """Get temperature_coefficient_of_short_circuit_current

        Returns:
            float: the value of `temperature_coefficient_of_short_circuit_current` or None if not set
        """
        return self._data["Temperature Coefficient of Short Circuit Current"]

    @temperature_coefficient_of_short_circuit_current.setter
    def temperature_coefficient_of_short_circuit_current(self, value=0.02):
        """  Corresponds to IDD Field `Temperature Coefficient of Short Circuit Current`

        Args:
            value (float): value for IDD Field `Temperature Coefficient of Short Circuit Current`
                Units: A/K
                Default value: 0.02
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `temperature_coefficient_of_short_circuit_current`'.format(value))
        self._data["Temperature Coefficient of Short Circuit Current"] = value

    @property
    def temperature_coefficient_of_open_circuit_voltage(self):
        """Get temperature_coefficient_of_open_circuit_voltage

        Returns:
            float: the value of `temperature_coefficient_of_open_circuit_voltage` or None if not set
        """
        return self._data["Temperature Coefficient of Open Circuit Voltage"]

    @temperature_coefficient_of_open_circuit_voltage.setter
    def temperature_coefficient_of_open_circuit_voltage(self, value=-0.079):
        """  Corresponds to IDD Field `Temperature Coefficient of Open Circuit Voltage`

        Args:
            value (float): value for IDD Field `Temperature Coefficient of Open Circuit Voltage`
                Units: V/K
                Default value: -0.079
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `temperature_coefficient_of_open_circuit_voltage`'.format(value))
        self._data["Temperature Coefficient of Open Circuit Voltage"] = value

    @property
    def nominal_operating_cell_temperature_test_ambient_temperature(self):
        """Get nominal_operating_cell_temperature_test_ambient_temperature

        Returns:
            float: the value of `nominal_operating_cell_temperature_test_ambient_temperature` or None if not set
        """
        return self._data["Nominal Operating Cell Temperature Test Ambient Temperature"]

    @nominal_operating_cell_temperature_test_ambient_temperature.setter
    def nominal_operating_cell_temperature_test_ambient_temperature(self, value=20.0):
        """  Corresponds to IDD Field `Nominal Operating Cell Temperature Test Ambient Temperature`

        Args:
            value (float): value for IDD Field `Nominal Operating Cell Temperature Test Ambient Temperature`
                Units: C
                Default value: 20.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_operating_cell_temperature_test_ambient_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_operating_cell_temperature_test_ambient_temperature`')
        self._data["Nominal Operating Cell Temperature Test Ambient Temperature"] = value

    @property
    def nominal_operating_cell_temperature_test_cell_temperature(self):
        """Get nominal_operating_cell_temperature_test_cell_temperature

        Returns:
            float: the value of `nominal_operating_cell_temperature_test_cell_temperature` or None if not set
        """
        return self._data["Nominal Operating Cell Temperature Test Cell Temperature"]

    @nominal_operating_cell_temperature_test_cell_temperature.setter
    def nominal_operating_cell_temperature_test_cell_temperature(self, value=40.0):
        """  Corresponds to IDD Field `Nominal Operating Cell Temperature Test Cell Temperature`

        Args:
            value (float): value for IDD Field `Nominal Operating Cell Temperature Test Cell Temperature`
                Units: C
                Default value: 40.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_operating_cell_temperature_test_cell_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_operating_cell_temperature_test_cell_temperature`')
        self._data["Nominal Operating Cell Temperature Test Cell Temperature"] = value

    @property
    def nominal_operating_cell_temperature_test_insolation(self):
        """Get nominal_operating_cell_temperature_test_insolation

        Returns:
            float: the value of `nominal_operating_cell_temperature_test_insolation` or None if not set
        """
        return self._data["Nominal Operating Cell Temperature Test Insolation"]

    @nominal_operating_cell_temperature_test_insolation.setter
    def nominal_operating_cell_temperature_test_insolation(self, value=800.0):
        """  Corresponds to IDD Field `Nominal Operating Cell Temperature Test Insolation`

        Args:
            value (float): value for IDD Field `Nominal Operating Cell Temperature Test Insolation`
                Units: W/m2
                Default value: 800.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_operating_cell_temperature_test_insolation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_operating_cell_temperature_test_insolation`')
        self._data["Nominal Operating Cell Temperature Test Insolation"] = value

    @property
    def module_heat_loss_coefficient(self):
        """Get module_heat_loss_coefficient

        Returns:
            float: the value of `module_heat_loss_coefficient` or None if not set
        """
        return self._data["Module Heat Loss Coefficient"]

    @module_heat_loss_coefficient.setter
    def module_heat_loss_coefficient(self, value=30.0):
        """  Corresponds to IDD Field `Module Heat Loss Coefficient`

        Args:
            value (float): value for IDD Field `Module Heat Loss Coefficient`
                Units: W/m2-K
                Default value: 30.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `module_heat_loss_coefficient`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_heat_loss_coefficient`')
        self._data["Module Heat Loss Coefficient"] = value

    @property
    def total_heat_capacity(self):
        """Get total_heat_capacity

        Returns:
            float: the value of `total_heat_capacity` or None if not set
        """
        return self._data["Total Heat Capacity"]

    @total_heat_capacity.setter
    def total_heat_capacity(self, value=50000.0):
        """  Corresponds to IDD Field `Total Heat Capacity`

        Args:
            value (float): value for IDD Field `Total Heat Capacity`
                Units: J/m2-K
                Default value: 50000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `total_heat_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `total_heat_capacity`')
        self._data["Total Heat Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class PhotovoltaicPerformanceSandia(object):
    """ Corresponds to IDD object `PhotovoltaicPerformance:Sandia`
        Describes performance input data needed for specific makes and models of production
        PV panels using the empirical coefficients assembled by Sandia National Laboratory.
    """
    internal_name = "PhotovoltaicPerformance:Sandia"
    field_count = 40
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `PhotovoltaicPerformance:Sandia`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Active Area"] = None
        self._data["Number of Cells in Series"] = None
        self._data["Number of Cells in Parallel"] = None
        self._data["Short Circuit Current"] = None
        self._data["Open Circuit Voltage"] = None
        self._data["Current at Maximum Power Point"] = None
        self._data["Voltage at Maximum Power Point"] = None
        self._data["Sandia Database Parameter aIsc"] = None
        self._data["Sandia Database Parameter aImp"] = None
        self._data["Sandia Database Parameter c0"] = None
        self._data["Sandia Database Parameter c1"] = None
        self._data["Sandia Database Parameter BVoc0"] = None
        self._data["Sandia Database Parameter mBVoc"] = None
        self._data["Sandia Database Parameter BVmp0"] = None
        self._data["Sandia Database Parameter mBVmp"] = None
        self._data["Diode Factor"] = None
        self._data["Sandia Database Parameter c2"] = None
        self._data["Sandia Database Parameter c3"] = None
        self._data["Sandia Database Parameter a0"] = None
        self._data["Sandia Database Parameter a1"] = None
        self._data["Sandia Database Parameter a2"] = None
        self._data["Sandia Database Parameter a3"] = None
        self._data["Sandia Database Parameter a4"] = None
        self._data["Sandia Database Parameter b0"] = None
        self._data["Sandia Database Parameter b1"] = None
        self._data["Sandia Database Parameter b2"] = None
        self._data["Sandia Database Parameter b3"] = None
        self._data["Sandia Database Parameter b4"] = None
        self._data["Sandia Database Parameter b5"] = None
        self._data["Sandia Database Parameter Delta(Tc)"] = None
        self._data["Sandia Database Parameter fd"] = None
        self._data["Sandia Database Parameter a"] = None
        self._data["Sandia Database Parameter b"] = None
        self._data["Sandia Database Parameter c4"] = None
        self._data["Sandia Database Parameter c5"] = None
        self._data["Sandia Database Parameter Ix0"] = None
        self._data["Sandia Database Parameter Ixx0"] = None
        self._data["Sandia Database Parameter c6"] = None
        self._data["Sandia Database Parameter c7"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.active_area = None
        else:
            self.active_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_cells_in_series = None
        else:
            self.number_of_cells_in_series = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_cells_in_parallel = None
        else:
            self.number_of_cells_in_parallel = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.short_circuit_current = None
        else:
            self.short_circuit_current = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.open_circuit_voltage = None
        else:
            self.open_circuit_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.current_at_maximum_power_point = None
        else:
            self.current_at_maximum_power_point = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.voltage_at_maximum_power_point = None
        else:
            self.voltage_at_maximum_power_point = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_aisc = None
        else:
            self.sandia_database_parameter_aisc = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_aimp = None
        else:
            self.sandia_database_parameter_aimp = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c0 = None
        else:
            self.sandia_database_parameter_c0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c1 = None
        else:
            self.sandia_database_parameter_c1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_bvoc0 = None
        else:
            self.sandia_database_parameter_bvoc0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_mbvoc = None
        else:
            self.sandia_database_parameter_mbvoc = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_bvmp0 = None
        else:
            self.sandia_database_parameter_bvmp0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_mbvmp = None
        else:
            self.sandia_database_parameter_mbvmp = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.diode_factor = None
        else:
            self.diode_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c2 = None
        else:
            self.sandia_database_parameter_c2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c3 = None
        else:
            self.sandia_database_parameter_c3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a0 = None
        else:
            self.sandia_database_parameter_a0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a1 = None
        else:
            self.sandia_database_parameter_a1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a2 = None
        else:
            self.sandia_database_parameter_a2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a3 = None
        else:
            self.sandia_database_parameter_a3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a4 = None
        else:
            self.sandia_database_parameter_a4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b0 = None
        else:
            self.sandia_database_parameter_b0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b1 = None
        else:
            self.sandia_database_parameter_b1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b2 = None
        else:
            self.sandia_database_parameter_b2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b3 = None
        else:
            self.sandia_database_parameter_b3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b4 = None
        else:
            self.sandia_database_parameter_b4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b5 = None
        else:
            self.sandia_database_parameter_b5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_deltatc = None
        else:
            self.sandia_database_parameter_deltatc = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_fd = None
        else:
            self.sandia_database_parameter_fd = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_a = None
        else:
            self.sandia_database_parameter_a = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_b = None
        else:
            self.sandia_database_parameter_b = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c4 = None
        else:
            self.sandia_database_parameter_c4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c5 = None
        else:
            self.sandia_database_parameter_c5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_ix0 = None
        else:
            self.sandia_database_parameter_ix0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_ixx0 = None
        else:
            self.sandia_database_parameter_ixx0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c6 = None
        else:
            self.sandia_database_parameter_c6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sandia_database_parameter_c7 = None
        else:
            self.sandia_database_parameter_c7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def active_area(self):
        """Get active_area

        Returns:
            float: the value of `active_area` or None if not set
        """
        return self._data["Active Area"]

    @active_area.setter
    def active_area(self, value=1.0):
        """  Corresponds to IDD Field `Active Area`
        (m2, single module)

        Args:
            value (float): value for IDD Field `Active Area`
                Units: m2
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `active_area`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `active_area`')
        self._data["Active Area"] = value

    @property
    def number_of_cells_in_series(self):
        """Get number_of_cells_in_series

        Returns:
            int: the value of `number_of_cells_in_series` or None if not set
        """
        return self._data["Number of Cells in Series"]

    @number_of_cells_in_series.setter
    def number_of_cells_in_series(self, value=1):
        """  Corresponds to IDD Field `Number of Cells in Series`

        Args:
            value (int): value for IDD Field `Number of Cells in Series`
                Units: dimensionless
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_cells_in_series`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_cells_in_series`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_cells_in_series`')
        self._data["Number of Cells in Series"] = value

    @property
    def number_of_cells_in_parallel(self):
        """Get number_of_cells_in_parallel

        Returns:
            int: the value of `number_of_cells_in_parallel` or None if not set
        """
        return self._data["Number of Cells in Parallel"]

    @number_of_cells_in_parallel.setter
    def number_of_cells_in_parallel(self, value=1):
        """  Corresponds to IDD Field `Number of Cells in Parallel`

        Args:
            value (int): value for IDD Field `Number of Cells in Parallel`
                Units: dimensionless
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_cells_in_parallel`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_cells_in_parallel`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_cells_in_parallel`')
        self._data["Number of Cells in Parallel"] = value

    @property
    def short_circuit_current(self):
        """Get short_circuit_current

        Returns:
            float: the value of `short_circuit_current` or None if not set
        """
        return self._data["Short Circuit Current"]

    @short_circuit_current.setter
    def short_circuit_current(self, value=None):
        """  Corresponds to IDD Field `Short Circuit Current`
        (Amps)

        Args:
            value (float): value for IDD Field `Short Circuit Current`
                Units: A
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `short_circuit_current`'.format(value))
        self._data["Short Circuit Current"] = value

    @property
    def open_circuit_voltage(self):
        """Get open_circuit_voltage

        Returns:
            float: the value of `open_circuit_voltage` or None if not set
        """
        return self._data["Open Circuit Voltage"]

    @open_circuit_voltage.setter
    def open_circuit_voltage(self, value=None):
        """  Corresponds to IDD Field `Open Circuit Voltage`
        (Volts)

        Args:
            value (float): value for IDD Field `Open Circuit Voltage`
                Units: V
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `open_circuit_voltage`'.format(value))
        self._data["Open Circuit Voltage"] = value

    @property
    def current_at_maximum_power_point(self):
        """Get current_at_maximum_power_point

        Returns:
            float: the value of `current_at_maximum_power_point` or None if not set
        """
        return self._data["Current at Maximum Power Point"]

    @current_at_maximum_power_point.setter
    def current_at_maximum_power_point(self, value=None):
        """  Corresponds to IDD Field `Current at Maximum Power Point`
        (Amps)

        Args:
            value (float): value for IDD Field `Current at Maximum Power Point`
                Units: A
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `current_at_maximum_power_point`'.format(value))
        self._data["Current at Maximum Power Point"] = value

    @property
    def voltage_at_maximum_power_point(self):
        """Get voltage_at_maximum_power_point

        Returns:
            float: the value of `voltage_at_maximum_power_point` or None if not set
        """
        return self._data["Voltage at Maximum Power Point"]

    @voltage_at_maximum_power_point.setter
    def voltage_at_maximum_power_point(self, value=None):
        """  Corresponds to IDD Field `Voltage at Maximum Power Point`
        (Volts)

        Args:
            value (float): value for IDD Field `Voltage at Maximum Power Point`
                Units: V
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `voltage_at_maximum_power_point`'.format(value))
        self._data["Voltage at Maximum Power Point"] = value

    @property
    def sandia_database_parameter_aisc(self):
        """Get sandia_database_parameter_aisc

        Returns:
            float: the value of `sandia_database_parameter_aisc` or None if not set
        """
        return self._data["Sandia Database Parameter aIsc"]

    @sandia_database_parameter_aisc.setter
    def sandia_database_parameter_aisc(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter aIsc`
        (1/degC)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter aIsc`
                Units: 1/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_aisc`'.format(value))
        self._data["Sandia Database Parameter aIsc"] = value

    @property
    def sandia_database_parameter_aimp(self):
        """Get sandia_database_parameter_aimp

        Returns:
            float: the value of `sandia_database_parameter_aimp` or None if not set
        """
        return self._data["Sandia Database Parameter aImp"]

    @sandia_database_parameter_aimp.setter
    def sandia_database_parameter_aimp(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter aImp`
        (1/degC)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter aImp`
                Units: 1/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_aimp`'.format(value))
        self._data["Sandia Database Parameter aImp"] = value

    @property
    def sandia_database_parameter_c0(self):
        """Get sandia_database_parameter_c0

        Returns:
            float: the value of `sandia_database_parameter_c0` or None if not set
        """
        return self._data["Sandia Database Parameter c0"]

    @sandia_database_parameter_c0.setter
    def sandia_database_parameter_c0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c0`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c0`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c0`'.format(value))
        self._data["Sandia Database Parameter c0"] = value

    @property
    def sandia_database_parameter_c1(self):
        """Get sandia_database_parameter_c1

        Returns:
            float: the value of `sandia_database_parameter_c1` or None if not set
        """
        return self._data["Sandia Database Parameter c1"]

    @sandia_database_parameter_c1.setter
    def sandia_database_parameter_c1(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c1`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c1`'.format(value))
        self._data["Sandia Database Parameter c1"] = value

    @property
    def sandia_database_parameter_bvoc0(self):
        """Get sandia_database_parameter_bvoc0

        Returns:
            float: the value of `sandia_database_parameter_bvoc0` or None if not set
        """
        return self._data["Sandia Database Parameter BVoc0"]

    @sandia_database_parameter_bvoc0.setter
    def sandia_database_parameter_bvoc0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter BVoc0`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter BVoc0`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_bvoc0`'.format(value))
        self._data["Sandia Database Parameter BVoc0"] = value

    @property
    def sandia_database_parameter_mbvoc(self):
        """Get sandia_database_parameter_mbvoc

        Returns:
            float: the value of `sandia_database_parameter_mbvoc` or None if not set
        """
        return self._data["Sandia Database Parameter mBVoc"]

    @sandia_database_parameter_mbvoc.setter
    def sandia_database_parameter_mbvoc(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter mBVoc`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter mBVoc`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_mbvoc`'.format(value))
        self._data["Sandia Database Parameter mBVoc"] = value

    @property
    def sandia_database_parameter_bvmp0(self):
        """Get sandia_database_parameter_bvmp0

        Returns:
            float: the value of `sandia_database_parameter_bvmp0` or None if not set
        """
        return self._data["Sandia Database Parameter BVmp0"]

    @sandia_database_parameter_bvmp0.setter
    def sandia_database_parameter_bvmp0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter BVmp0`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter BVmp0`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_bvmp0`'.format(value))
        self._data["Sandia Database Parameter BVmp0"] = value

    @property
    def sandia_database_parameter_mbvmp(self):
        """Get sandia_database_parameter_mbvmp

        Returns:
            float: the value of `sandia_database_parameter_mbvmp` or None if not set
        """
        return self._data["Sandia Database Parameter mBVmp"]

    @sandia_database_parameter_mbvmp.setter
    def sandia_database_parameter_mbvmp(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter mBVmp`
        (Volts/degC)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter mBVmp`
                Units: V/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_mbvmp`'.format(value))
        self._data["Sandia Database Parameter mBVmp"] = value

    @property
    def diode_factor(self):
        """Get diode_factor

        Returns:
            float: the value of `diode_factor` or None if not set
        """
        return self._data["Diode Factor"]

    @diode_factor.setter
    def diode_factor(self, value=None):
        """  Corresponds to IDD Field `Diode Factor`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Diode Factor`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `diode_factor`'.format(value))
        self._data["Diode Factor"] = value

    @property
    def sandia_database_parameter_c2(self):
        """Get sandia_database_parameter_c2

        Returns:
            float: the value of `sandia_database_parameter_c2` or None if not set
        """
        return self._data["Sandia Database Parameter c2"]

    @sandia_database_parameter_c2.setter
    def sandia_database_parameter_c2(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c2`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c2`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c2`'.format(value))
        self._data["Sandia Database Parameter c2"] = value

    @property
    def sandia_database_parameter_c3(self):
        """Get sandia_database_parameter_c3

        Returns:
            float: the value of `sandia_database_parameter_c3` or None if not set
        """
        return self._data["Sandia Database Parameter c3"]

    @sandia_database_parameter_c3.setter
    def sandia_database_parameter_c3(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c3`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c3`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c3`'.format(value))
        self._data["Sandia Database Parameter c3"] = value

    @property
    def sandia_database_parameter_a0(self):
        """Get sandia_database_parameter_a0

        Returns:
            float: the value of `sandia_database_parameter_a0` or None if not set
        """
        return self._data["Sandia Database Parameter a0"]

    @sandia_database_parameter_a0.setter
    def sandia_database_parameter_a0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter a0`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter a0`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_a0`'.format(value))
        self._data["Sandia Database Parameter a0"] = value

    @property
    def sandia_database_parameter_a1(self):
        """Get sandia_database_parameter_a1

        Returns:
            float: the value of `sandia_database_parameter_a1` or None if not set
        """
        return self._data["Sandia Database Parameter a1"]

    @sandia_database_parameter_a1.setter
    def sandia_database_parameter_a1(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter a1`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter a1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_a1`'.format(value))
        self._data["Sandia Database Parameter a1"] = value

    @property
    def sandia_database_parameter_a2(self):
        """Get sandia_database_parameter_a2

        Returns:
            float: the value of `sandia_database_parameter_a2` or None if not set
        """
        return self._data["Sandia Database Parameter a2"]

    @sandia_database_parameter_a2.setter
    def sandia_database_parameter_a2(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter a2`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter a2`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_a2`'.format(value))
        self._data["Sandia Database Parameter a2"] = value

    @property
    def sandia_database_parameter_a3(self):
        """Get sandia_database_parameter_a3

        Returns:
            float: the value of `sandia_database_parameter_a3` or None if not set
        """
        return self._data["Sandia Database Parameter a3"]

    @sandia_database_parameter_a3.setter
    def sandia_database_parameter_a3(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter a3`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter a3`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_a3`'.format(value))
        self._data["Sandia Database Parameter a3"] = value

    @property
    def sandia_database_parameter_a4(self):
        """Get sandia_database_parameter_a4

        Returns:
            float: the value of `sandia_database_parameter_a4` or None if not set
        """
        return self._data["Sandia Database Parameter a4"]

    @sandia_database_parameter_a4.setter
    def sandia_database_parameter_a4(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter a4`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter a4`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_a4`'.format(value))
        self._data["Sandia Database Parameter a4"] = value

    @property
    def sandia_database_parameter_b0(self):
        """Get sandia_database_parameter_b0

        Returns:
            float: the value of `sandia_database_parameter_b0` or None if not set
        """
        return self._data["Sandia Database Parameter b0"]

    @sandia_database_parameter_b0.setter
    def sandia_database_parameter_b0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b0`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b0`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b0`'.format(value))
        self._data["Sandia Database Parameter b0"] = value

    @property
    def sandia_database_parameter_b1(self):
        """Get sandia_database_parameter_b1

        Returns:
            float: the value of `sandia_database_parameter_b1` or None if not set
        """
        return self._data["Sandia Database Parameter b1"]

    @sandia_database_parameter_b1.setter
    def sandia_database_parameter_b1(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b1`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b1`'.format(value))
        self._data["Sandia Database Parameter b1"] = value

    @property
    def sandia_database_parameter_b2(self):
        """Get sandia_database_parameter_b2

        Returns:
            float: the value of `sandia_database_parameter_b2` or None if not set
        """
        return self._data["Sandia Database Parameter b2"]

    @sandia_database_parameter_b2.setter
    def sandia_database_parameter_b2(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b2`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b2`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b2`'.format(value))
        self._data["Sandia Database Parameter b2"] = value

    @property
    def sandia_database_parameter_b3(self):
        """Get sandia_database_parameter_b3

        Returns:
            float: the value of `sandia_database_parameter_b3` or None if not set
        """
        return self._data["Sandia Database Parameter b3"]

    @sandia_database_parameter_b3.setter
    def sandia_database_parameter_b3(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b3`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b3`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b3`'.format(value))
        self._data["Sandia Database Parameter b3"] = value

    @property
    def sandia_database_parameter_b4(self):
        """Get sandia_database_parameter_b4

        Returns:
            float: the value of `sandia_database_parameter_b4` or None if not set
        """
        return self._data["Sandia Database Parameter b4"]

    @sandia_database_parameter_b4.setter
    def sandia_database_parameter_b4(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b4`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b4`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b4`'.format(value))
        self._data["Sandia Database Parameter b4"] = value

    @property
    def sandia_database_parameter_b5(self):
        """Get sandia_database_parameter_b5

        Returns:
            float: the value of `sandia_database_parameter_b5` or None if not set
        """
        return self._data["Sandia Database Parameter b5"]

    @sandia_database_parameter_b5.setter
    def sandia_database_parameter_b5(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b5`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b5`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b5`'.format(value))
        self._data["Sandia Database Parameter b5"] = value

    @property
    def sandia_database_parameter_deltatc(self):
        """Get sandia_database_parameter_deltatc

        Returns:
            float: the value of `sandia_database_parameter_deltatc` or None if not set
        """
        return self._data["Sandia Database Parameter Delta(Tc)"]

    @sandia_database_parameter_deltatc.setter
    def sandia_database_parameter_deltatc(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter Delta(Tc)`
        (deg C)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter Delta(Tc)`
                Units: deltaC
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_deltatc`'.format(value))
        self._data["Sandia Database Parameter Delta(Tc)"] = value

    @property
    def sandia_database_parameter_fd(self):
        """Get sandia_database_parameter_fd

        Returns:
            float: the value of `sandia_database_parameter_fd` or None if not set
        """
        return self._data["Sandia Database Parameter fd"]

    @sandia_database_parameter_fd.setter
    def sandia_database_parameter_fd(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter fd`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter fd`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_fd`'.format(value))
        self._data["Sandia Database Parameter fd"] = value

    @property
    def sandia_database_parameter_a(self):
        """Get sandia_database_parameter_a

        Returns:
            float: the value of `sandia_database_parameter_a` or None if not set
        """
        return self._data["Sandia Database Parameter a"]

    @sandia_database_parameter_a.setter
    def sandia_database_parameter_a(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter a`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter a`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_a`'.format(value))
        self._data["Sandia Database Parameter a"] = value

    @property
    def sandia_database_parameter_b(self):
        """Get sandia_database_parameter_b

        Returns:
            float: the value of `sandia_database_parameter_b` or None if not set
        """
        return self._data["Sandia Database Parameter b"]

    @sandia_database_parameter_b.setter
    def sandia_database_parameter_b(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter b`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter b`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_b`'.format(value))
        self._data["Sandia Database Parameter b"] = value

    @property
    def sandia_database_parameter_c4(self):
        """Get sandia_database_parameter_c4

        Returns:
            float: the value of `sandia_database_parameter_c4` or None if not set
        """
        return self._data["Sandia Database Parameter c4"]

    @sandia_database_parameter_c4.setter
    def sandia_database_parameter_c4(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c4`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c4`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c4`'.format(value))
        self._data["Sandia Database Parameter c4"] = value

    @property
    def sandia_database_parameter_c5(self):
        """Get sandia_database_parameter_c5

        Returns:
            float: the value of `sandia_database_parameter_c5` or None if not set
        """
        return self._data["Sandia Database Parameter c5"]

    @sandia_database_parameter_c5.setter
    def sandia_database_parameter_c5(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c5`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c5`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c5`'.format(value))
        self._data["Sandia Database Parameter c5"] = value

    @property
    def sandia_database_parameter_ix0(self):
        """Get sandia_database_parameter_ix0

        Returns:
            float: the value of `sandia_database_parameter_ix0` or None if not set
        """
        return self._data["Sandia Database Parameter Ix0"]

    @sandia_database_parameter_ix0.setter
    def sandia_database_parameter_ix0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter Ix0`
        (Amps)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter Ix0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_ix0`'.format(value))
        self._data["Sandia Database Parameter Ix0"] = value

    @property
    def sandia_database_parameter_ixx0(self):
        """Get sandia_database_parameter_ixx0

        Returns:
            float: the value of `sandia_database_parameter_ixx0` or None if not set
        """
        return self._data["Sandia Database Parameter Ixx0"]

    @sandia_database_parameter_ixx0.setter
    def sandia_database_parameter_ixx0(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter Ixx0`
        (Amps)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter Ixx0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_ixx0`'.format(value))
        self._data["Sandia Database Parameter Ixx0"] = value

    @property
    def sandia_database_parameter_c6(self):
        """Get sandia_database_parameter_c6

        Returns:
            float: the value of `sandia_database_parameter_c6` or None if not set
        """
        return self._data["Sandia Database Parameter c6"]

    @sandia_database_parameter_c6.setter
    def sandia_database_parameter_c6(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c6`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c6`'.format(value))
        self._data["Sandia Database Parameter c6"] = value

    @property
    def sandia_database_parameter_c7(self):
        """Get sandia_database_parameter_c7

        Returns:
            float: the value of `sandia_database_parameter_c7` or None if not set
        """
        return self._data["Sandia Database Parameter c7"]

    @sandia_database_parameter_c7.setter
    def sandia_database_parameter_c7(self, value=None):
        """  Corresponds to IDD Field `Sandia Database Parameter c7`
        (nondimensional)

        Args:
            value (float): value for IDD Field `Sandia Database Parameter c7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sandia_database_parameter_c7`'.format(value))
        self._data["Sandia Database Parameter c7"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCell(object):
    """ Corresponds to IDD object `Generator:FuelCell`
        This generator model is the FC model from IEA Annex 42
    """
    internal_name = "Generator:FuelCell"
    field_count = 10
    required_fields = ["Name", "Power Module Name", "Air Supply Name", "Fuel Supply Name", "Water Supply Name", "Auxiliary Heater Name", "Heat Exchanger Name", "Electrical Storage Name", "Inverter Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Power Module Name"] = None
        self._data["Air Supply Name"] = None
        self._data["Fuel Supply Name"] = None
        self._data["Water Supply Name"] = None
        self._data["Auxiliary Heater Name"] = None
        self._data["Heat Exchanger Name"] = None
        self._data["Electrical Storage Name"] = None
        self._data["Inverter Name"] = None
        self._data["Stack Cooler Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_module_name = None
        else:
            self.power_module_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_supply_name = None
        else:
            self.air_supply_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_supply_name = None
        else:
            self.fuel_supply_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_supply_name = None
        else:
            self.water_supply_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.auxiliary_heater_name = None
        else:
            self.auxiliary_heater_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_name = None
        else:
            self.heat_exchanger_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_storage_name = None
        else:
            self.electrical_storage_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inverter_name = None
        else:
            self.inverter_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cooler_name = None
        else:
            self.stack_cooler_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def power_module_name(self):
        """Get power_module_name

        Returns:
            str: the value of `power_module_name` or None if not set
        """
        return self._data["Power Module Name"]

    @power_module_name.setter
    def power_module_name(self, value=None):
        """  Corresponds to IDD Field `Power Module Name`
        Enter the name of a Generator:FuelCell:PowerModule object.

        Args:
            value (str): value for IDD Field `Power Module Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `power_module_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `power_module_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `power_module_name`')
        self._data["Power Module Name"] = value

    @property
    def air_supply_name(self):
        """Get air_supply_name

        Returns:
            str: the value of `air_supply_name` or None if not set
        """
        return self._data["Air Supply Name"]

    @air_supply_name.setter
    def air_supply_name(self, value=None):
        """  Corresponds to IDD Field `Air Supply Name`
        Enter the name of a Generator:FuelCell:AirSupply object.

        Args:
            value (str): value for IDD Field `Air Supply Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_supply_name`')
        self._data["Air Supply Name"] = value

    @property
    def fuel_supply_name(self):
        """Get fuel_supply_name

        Returns:
            str: the value of `fuel_supply_name` or None if not set
        """
        return self._data["Fuel Supply Name"]

    @fuel_supply_name.setter
    def fuel_supply_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Supply Name`
        Enter the name of a Generator:FuelSupply object.

        Args:
            value (str): value for IDD Field `Fuel Supply Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_supply_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_supply_name`')
        self._data["Fuel Supply Name"] = value

    @property
    def water_supply_name(self):
        """Get water_supply_name

        Returns:
            str: the value of `water_supply_name` or None if not set
        """
        return self._data["Water Supply Name"]

    @water_supply_name.setter
    def water_supply_name(self, value=None):
        """  Corresponds to IDD Field `Water Supply Name`
        Enter the name of a Generator:FuelCell:WaterSupply object.

        Args:
            value (str): value for IDD Field `Water Supply Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `water_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_supply_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_supply_name`')
        self._data["Water Supply Name"] = value

    @property
    def auxiliary_heater_name(self):
        """Get auxiliary_heater_name

        Returns:
            str: the value of `auxiliary_heater_name` or None if not set
        """
        return self._data["Auxiliary Heater Name"]

    @auxiliary_heater_name.setter
    def auxiliary_heater_name(self, value=None):
        """  Corresponds to IDD Field `Auxiliary Heater Name`
        Enter the name of a Generator:FuelCell:AuxiliaryHeater object.

        Args:
            value (str): value for IDD Field `Auxiliary Heater Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `auxiliary_heater_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `auxiliary_heater_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `auxiliary_heater_name`')
        self._data["Auxiliary Heater Name"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name

        Returns:
            str: the value of `heat_exchanger_name` or None if not set
        """
        return self._data["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Name`
        Enter the name of a Generator:FuelCell:ExhaustGasToWaterHeatExchanger object.

        Args:
            value (str): value for IDD Field `Heat Exchanger Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_name`')
        self._data["Heat Exchanger Name"] = value

    @property
    def electrical_storage_name(self):
        """Get electrical_storage_name

        Returns:
            str: the value of `electrical_storage_name` or None if not set
        """
        return self._data["Electrical Storage Name"]

    @electrical_storage_name.setter
    def electrical_storage_name(self, value=None):
        """  Corresponds to IDD Field `Electrical Storage Name`
        Enter the name of a Generator:FuelCell:ElectricalStorage object.

        Args:
            value (str): value for IDD Field `Electrical Storage Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_storage_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_storage_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_storage_name`')
        self._data["Electrical Storage Name"] = value

    @property
    def inverter_name(self):
        """Get inverter_name

        Returns:
            str: the value of `inverter_name` or None if not set
        """
        return self._data["Inverter Name"]

    @inverter_name.setter
    def inverter_name(self, value=None):
        """  Corresponds to IDD Field `Inverter Name`
        Enter the name of a Generator:FuelCell:Inverter object.

        Args:
            value (str): value for IDD Field `Inverter Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inverter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inverter_name`')
        self._data["Inverter Name"] = value

    @property
    def stack_cooler_name(self):
        """Get stack_cooler_name

        Returns:
            str: the value of `stack_cooler_name` or None if not set
        """
        return self._data["Stack Cooler Name"]

    @stack_cooler_name.setter
    def stack_cooler_name(self, value=None):
        """  Corresponds to IDD Field `Stack Cooler Name`
        Enter the name of a Generator:FuelCell:StackCooler object.
        optional, used for PEMFC

        Args:
            value (str): value for IDD Field `Stack Cooler Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `stack_cooler_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `stack_cooler_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `stack_cooler_name`')
        self._data["Stack Cooler Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellPowerModule(object):
    """ Corresponds to IDD object `Generator:FuelCell:PowerModule`
        Describe the core power module subsystem of a fuel cell power generator. This includes
        the fuel cell stack, fuel reformer, and whatever ancillary devices are included inside.
        If the model has multiple FC generators that are of the exact same type, then only one
        of these objects is needed and all the Generator:FuelCell objects can reference it.
    """
    internal_name = "Generator:FuelCell:PowerModule"
    field_count = 33
    required_fields = ["Name", "Efficiency Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:PowerModule`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Efficiency Curve Mode"] = None
        self._data["Efficiency Curve Name"] = None
        self._data["Nominal Efficiency"] = None
        self._data["Nominal Electrical Power"] = None
        self._data["Number of Stops at Start of Simulation"] = None
        self._data["Cycling Performance Degradation Coefficient"] = None
        self._data["Number of Run Hours at Beginning of Simulation"] = None
        self._data["Accumulated Run Time Degradation Coefficient"] = None
        self._data["Run Time Degradation Initiation Time Threshold"] = None
        self._data["Power Up Transient Limit"] = None
        self._data["Power Down Transient Limit"] = None
        self._data["Start Up Time"] = None
        self._data["Start Up Fuel"] = None
        self._data["Start Up Electricity Consumption"] = None
        self._data["Start Up Electricity Produced"] = None
        self._data["Shut Down Time"] = None
        self._data["Shut Down Fuel"] = None
        self._data["Shut Down Electricity Consumption"] = None
        self._data["Ancilliary Electricity Constant Term"] = None
        self._data["Ancilliary Electricity Linear Term"] = None
        self._data["Skin Loss Calculation Mode"] = None
        self._data["Zone Name"] = None
        self._data["Skin Loss Radiative Fraction"] = None
        self._data["Constant Skin Loss Rate"] = None
        self._data["Skin Loss U-Factor Times Area Term"] = None
        self._data["Skin Loss Quadratic Curve Name"] = None
        self._data["Dilution Air Flow Rate"] = None
        self._data["Stack Heat loss to Dilution Air"] = None
        self._data["Dilution Inlet Air Node Name"] = None
        self._data["Dilution Outlet Air Node Name"] = None
        self._data["Minimum Operating Point"] = None
        self._data["Maximum Operating Point"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_curve_mode = None
        else:
            self.efficiency_curve_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_curve_name = None
        else:
            self.efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_efficiency = None
        else:
            self.nominal_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_electrical_power = None
        else:
            self.nominal_electrical_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_stops_at_start_of_simulation = None
        else:
            self.number_of_stops_at_start_of_simulation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cycling_performance_degradation_coefficient = None
        else:
            self.cycling_performance_degradation_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_run_hours_at_beginning_of_simulation = None
        else:
            self.number_of_run_hours_at_beginning_of_simulation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.accumulated_run_time_degradation_coefficient = None
        else:
            self.accumulated_run_time_degradation_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.run_time_degradation_initiation_time_threshold = None
        else:
            self.run_time_degradation_initiation_time_threshold = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_up_transient_limit = None
        else:
            self.power_up_transient_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_down_transient_limit = None
        else:
            self.power_down_transient_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.start_up_time = None
        else:
            self.start_up_time = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.start_up_fuel = None
        else:
            self.start_up_fuel = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.start_up_electricity_consumption = None
        else:
            self.start_up_electricity_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.start_up_electricity_produced = None
        else:
            self.start_up_electricity_produced = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shut_down_time = None
        else:
            self.shut_down_time = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shut_down_fuel = None
        else:
            self.shut_down_fuel = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shut_down_electricity_consumption = None
        else:
            self.shut_down_electricity_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancilliary_electricity_constant_term = None
        else:
            self.ancilliary_electricity_constant_term = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancilliary_electricity_linear_term = None
        else:
            self.ancilliary_electricity_linear_term = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_calculation_mode = None
        else:
            self.skin_loss_calculation_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_radiative_fraction = None
        else:
            self.skin_loss_radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constant_skin_loss_rate = None
        else:
            self.constant_skin_loss_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_term = None
        else:
            self.skin_loss_ufactor_times_area_term = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_quadratic_curve_name = None
        else:
            self.skin_loss_quadratic_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dilution_air_flow_rate = None
        else:
            self.dilution_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_heat_loss_to_dilution_air = None
        else:
            self.stack_heat_loss_to_dilution_air = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dilution_inlet_air_node_name = None
        else:
            self.dilution_inlet_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dilution_outlet_air_node_name = None
        else:
            self.dilution_outlet_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_operating_point = None
        else:
            self.minimum_operating_point = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_operating_point = None
        else:
            self.maximum_operating_point = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def efficiency_curve_mode(self):
        """Get efficiency_curve_mode

        Returns:
            str: the value of `efficiency_curve_mode` or None if not set
        """
        return self._data["Efficiency Curve Mode"]

    @efficiency_curve_mode.setter
    def efficiency_curve_mode(self, value=None):
        """  Corresponds to IDD Field `Efficiency Curve Mode`

        Args:
            value (str): value for IDD Field `Efficiency Curve Mode`
                Accepted values are:
                      - Annex42
                      - Normalized
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `efficiency_curve_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `efficiency_curve_mode`')
            vals = {}
            vals["annex42"] = "Annex42"
            vals["normalized"] = "Normalized"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `efficiency_curve_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `efficiency_curve_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Efficiency Curve Mode"] = value

    @property
    def efficiency_curve_name(self):
        """Get efficiency_curve_name

        Returns:
            str: the value of `efficiency_curve_name` or None if not set
        """
        return self._data["Efficiency Curve Name"]

    @efficiency_curve_name.setter
    def efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Efficiency Curve Name`
        Table:OneIndependentVariable

        Args:
            value (str): value for IDD Field `Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `efficiency_curve_name`')
        self._data["Efficiency Curve Name"] = value

    @property
    def nominal_efficiency(self):
        """Get nominal_efficiency

        Returns:
            float: the value of `nominal_efficiency` or None if not set
        """
        return self._data["Nominal Efficiency"]

    @nominal_efficiency.setter
    def nominal_efficiency(self, value=None):
        """  Corresponds to IDD Field `Nominal Efficiency`
        This field is not used.

        Args:
            value (float): value for IDD Field `Nominal Efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_efficiency`'.format(value))
        self._data["Nominal Efficiency"] = value

    @property
    def nominal_electrical_power(self):
        """Get nominal_electrical_power

        Returns:
            float: the value of `nominal_electrical_power` or None if not set
        """
        return self._data["Nominal Electrical Power"]

    @nominal_electrical_power.setter
    def nominal_electrical_power(self, value=None):
        """  Corresponds to IDD Field `Nominal Electrical Power`
        This field is not used

        Args:
            value (float): value for IDD Field `Nominal Electrical Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_electrical_power`'.format(value))
        self._data["Nominal Electrical Power"] = value

    @property
    def number_of_stops_at_start_of_simulation(self):
        """Get number_of_stops_at_start_of_simulation

        Returns:
            float: the value of `number_of_stops_at_start_of_simulation` or None if not set
        """
        return self._data["Number of Stops at Start of Simulation"]

    @number_of_stops_at_start_of_simulation.setter
    def number_of_stops_at_start_of_simulation(self, value=None):
        """  Corresponds to IDD Field `Number of Stops at Start of Simulation`
        this is Nstops in SOFC model specification

        Args:
            value (float): value for IDD Field `Number of Stops at Start of Simulation`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_stops_at_start_of_simulation`'.format(value))
        self._data["Number of Stops at Start of Simulation"] = value

    @property
    def cycling_performance_degradation_coefficient(self):
        """Get cycling_performance_degradation_coefficient

        Returns:
            float: the value of `cycling_performance_degradation_coefficient` or None if not set
        """
        return self._data["Cycling Performance Degradation Coefficient"]

    @cycling_performance_degradation_coefficient.setter
    def cycling_performance_degradation_coefficient(self, value=None):
        """  Corresponds to IDD Field `Cycling Performance Degradation Coefficient`
        this is D in SOFC model specification

        Args:
            value (float): value for IDD Field `Cycling Performance Degradation Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cycling_performance_degradation_coefficient`'.format(value))
        self._data["Cycling Performance Degradation Coefficient"] = value

    @property
    def number_of_run_hours_at_beginning_of_simulation(self):
        """Get number_of_run_hours_at_beginning_of_simulation

        Returns:
            float: the value of `number_of_run_hours_at_beginning_of_simulation` or None if not set
        """
        return self._data["Number of Run Hours at Beginning of Simulation"]

    @number_of_run_hours_at_beginning_of_simulation.setter
    def number_of_run_hours_at_beginning_of_simulation(self, value=None):
        """  Corresponds to IDD Field `Number of Run Hours at Beginning of Simulation`

        Args:
            value (float): value for IDD Field `Number of Run Hours at Beginning of Simulation`
                Units: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_run_hours_at_beginning_of_simulation`'.format(value))
        self._data["Number of Run Hours at Beginning of Simulation"] = value

    @property
    def accumulated_run_time_degradation_coefficient(self):
        """Get accumulated_run_time_degradation_coefficient

        Returns:
            float: the value of `accumulated_run_time_degradation_coefficient` or None if not set
        """
        return self._data["Accumulated Run Time Degradation Coefficient"]

    @accumulated_run_time_degradation_coefficient.setter
    def accumulated_run_time_degradation_coefficient(self, value=None):
        """  Corresponds to IDD Field `Accumulated Run Time Degradation Coefficient`
        this is L in SOFC model specification

        Args:
            value (float): value for IDD Field `Accumulated Run Time Degradation Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `accumulated_run_time_degradation_coefficient`'.format(value))
        self._data["Accumulated Run Time Degradation Coefficient"] = value

    @property
    def run_time_degradation_initiation_time_threshold(self):
        """Get run_time_degradation_initiation_time_threshold

        Returns:
            float: the value of `run_time_degradation_initiation_time_threshold` or None if not set
        """
        return self._data["Run Time Degradation Initiation Time Threshold"]

    @run_time_degradation_initiation_time_threshold.setter
    def run_time_degradation_initiation_time_threshold(self, value=None):
        """  Corresponds to IDD Field `Run Time Degradation Initiation Time Threshold`

        Args:
            value (float): value for IDD Field `Run Time Degradation Initiation Time Threshold`
                Units: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `run_time_degradation_initiation_time_threshold`'.format(value))
        self._data["Run Time Degradation Initiation Time Threshold"] = value

    @property
    def power_up_transient_limit(self):
        """Get power_up_transient_limit

        Returns:
            float: the value of `power_up_transient_limit` or None if not set
        """
        return self._data["Power Up Transient Limit"]

    @power_up_transient_limit.setter
    def power_up_transient_limit(self, value=None):
        """  Corresponds to IDD Field `Power Up Transient Limit`
        Maximum rate of change in elecrical output [power increasing]

        Args:
            value (float): value for IDD Field `Power Up Transient Limit`
                Units: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_up_transient_limit`'.format(value))
        self._data["Power Up Transient Limit"] = value

    @property
    def power_down_transient_limit(self):
        """Get power_down_transient_limit

        Returns:
            float: the value of `power_down_transient_limit` or None if not set
        """
        return self._data["Power Down Transient Limit"]

    @power_down_transient_limit.setter
    def power_down_transient_limit(self, value=None):
        """  Corresponds to IDD Field `Power Down Transient Limit`
        Maximum rate of change in elecrical output [power decreasing]
        Enter positive value for rate of change

        Args:
            value (float): value for IDD Field `Power Down Transient Limit`
                Units: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_down_transient_limit`'.format(value))
        self._data["Power Down Transient Limit"] = value

    @property
    def start_up_time(self):
        """Get start_up_time

        Returns:
            float: the value of `start_up_time` or None if not set
        """
        return self._data["Start Up Time"]

    @start_up_time.setter
    def start_up_time(self, value=None):
        """  Corresponds to IDD Field `Start Up Time`
        Time from start up to normal operation

        Args:
            value (float): value for IDD Field `Start Up Time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `start_up_time`'.format(value))
        self._data["Start Up Time"] = value

    @property
    def start_up_fuel(self):
        """Get start_up_fuel

        Returns:
            float: the value of `start_up_fuel` or None if not set
        """
        return self._data["Start Up Fuel"]

    @start_up_fuel.setter
    def start_up_fuel(self, value=None):
        """  Corresponds to IDD Field `Start Up Fuel`

        Args:
            value (float): value for IDD Field `Start Up Fuel`
                Units: kmol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `start_up_fuel`'.format(value))
        self._data["Start Up Fuel"] = value

    @property
    def start_up_electricity_consumption(self):
        """Get start_up_electricity_consumption

        Returns:
            float: the value of `start_up_electricity_consumption` or None if not set
        """
        return self._data["Start Up Electricity Consumption"]

    @start_up_electricity_consumption.setter
    def start_up_electricity_consumption(self, value=None):
        """  Corresponds to IDD Field `Start Up Electricity Consumption`

        Args:
            value (float): value for IDD Field `Start Up Electricity Consumption`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `start_up_electricity_consumption`'.format(value))
        self._data["Start Up Electricity Consumption"] = value

    @property
    def start_up_electricity_produced(self):
        """Get start_up_electricity_produced

        Returns:
            float: the value of `start_up_electricity_produced` or None if not set
        """
        return self._data["Start Up Electricity Produced"]

    @start_up_electricity_produced.setter
    def start_up_electricity_produced(self, value=None):
        """  Corresponds to IDD Field `Start Up Electricity Produced`

        Args:
            value (float): value for IDD Field `Start Up Electricity Produced`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `start_up_electricity_produced`'.format(value))
        self._data["Start Up Electricity Produced"] = value

    @property
    def shut_down_time(self):
        """Get shut_down_time

        Returns:
            float: the value of `shut_down_time` or None if not set
        """
        return self._data["Shut Down Time"]

    @shut_down_time.setter
    def shut_down_time(self, value=None):
        """  Corresponds to IDD Field `Shut Down Time`

        Args:
            value (float): value for IDD Field `Shut Down Time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `shut_down_time`'.format(value))
        self._data["Shut Down Time"] = value

    @property
    def shut_down_fuel(self):
        """Get shut_down_fuel

        Returns:
            float: the value of `shut_down_fuel` or None if not set
        """
        return self._data["Shut Down Fuel"]

    @shut_down_fuel.setter
    def shut_down_fuel(self, value=None):
        """  Corresponds to IDD Field `Shut Down Fuel`

        Args:
            value (float): value for IDD Field `Shut Down Fuel`
                Units: kmol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `shut_down_fuel`'.format(value))
        self._data["Shut Down Fuel"] = value

    @property
    def shut_down_electricity_consumption(self):
        """Get shut_down_electricity_consumption

        Returns:
            float: the value of `shut_down_electricity_consumption` or None if not set
        """
        return self._data["Shut Down Electricity Consumption"]

    @shut_down_electricity_consumption.setter
    def shut_down_electricity_consumption(self, value=None):
        """  Corresponds to IDD Field `Shut Down Electricity Consumption`

        Args:
            value (float): value for IDD Field `Shut Down Electricity Consumption`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `shut_down_electricity_consumption`'.format(value))
        self._data["Shut Down Electricity Consumption"] = value

    @property
    def ancilliary_electricity_constant_term(self):
        """Get ancilliary_electricity_constant_term

        Returns:
            float: the value of `ancilliary_electricity_constant_term` or None if not set
        """
        return self._data["Ancilliary Electricity Constant Term"]

    @ancilliary_electricity_constant_term.setter
    def ancilliary_electricity_constant_term(self, value=None):
        """  Corresponds to IDD Field `Ancilliary Electricity Constant Term`

        Args:
            value (float): value for IDD Field `Ancilliary Electricity Constant Term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancilliary_electricity_constant_term`'.format(value))
        self._data["Ancilliary Electricity Constant Term"] = value

    @property
    def ancilliary_electricity_linear_term(self):
        """Get ancilliary_electricity_linear_term

        Returns:
            float: the value of `ancilliary_electricity_linear_term` or None if not set
        """
        return self._data["Ancilliary Electricity Linear Term"]

    @ancilliary_electricity_linear_term.setter
    def ancilliary_electricity_linear_term(self, value=None):
        """  Corresponds to IDD Field `Ancilliary Electricity Linear Term`

        Args:
            value (float): value for IDD Field `Ancilliary Electricity Linear Term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancilliary_electricity_linear_term`'.format(value))
        self._data["Ancilliary Electricity Linear Term"] = value

    @property
    def skin_loss_calculation_mode(self):
        """Get skin_loss_calculation_mode

        Returns:
            str: the value of `skin_loss_calculation_mode` or None if not set
        """
        return self._data["Skin Loss Calculation Mode"]

    @skin_loss_calculation_mode.setter
    def skin_loss_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `Skin Loss Calculation Mode`

        Args:
            value (str): value for IDD Field `Skin Loss Calculation Mode`
                Accepted values are:
                      - ConstantRate
                      - UAForProcessGasTemperature
                      - QuadraticFunctionOfFuelRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `skin_loss_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_calculation_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `skin_loss_calculation_mode`')
            vals = {}
            vals["constantrate"] = "ConstantRate"
            vals["uaforprocessgastemperature"] = "UAForProcessGasTemperature"
            vals["quadraticfunctionoffuelrate"] = "QuadraticFunctionOfFuelRate"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `skin_loss_calculation_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `skin_loss_calculation_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Skin Loss Calculation Mode"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def skin_loss_radiative_fraction(self):
        """Get skin_loss_radiative_fraction

        Returns:
            float: the value of `skin_loss_radiative_fraction` or None if not set
        """
        return self._data["Skin Loss Radiative Fraction"]

    @skin_loss_radiative_fraction.setter
    def skin_loss_radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `Skin Loss Radiative Fraction`

        Args:
            value (float): value for IDD Field `Skin Loss Radiative Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `skin_loss_radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `skin_loss_radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `skin_loss_radiative_fraction`')
        self._data["Skin Loss Radiative Fraction"] = value

    @property
    def constant_skin_loss_rate(self):
        """Get constant_skin_loss_rate

        Returns:
            float: the value of `constant_skin_loss_rate` or None if not set
        """
        return self._data["Constant Skin Loss Rate"]

    @constant_skin_loss_rate.setter
    def constant_skin_loss_rate(self, value=None):
        """  Corresponds to IDD Field `Constant Skin Loss Rate`

        Args:
            value (float): value for IDD Field `Constant Skin Loss Rate`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constant_skin_loss_rate`'.format(value))
        self._data["Constant Skin Loss Rate"] = value

    @property
    def skin_loss_ufactor_times_area_term(self):
        """Get skin_loss_ufactor_times_area_term

        Returns:
            float: the value of `skin_loss_ufactor_times_area_term` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Term"]

    @skin_loss_ufactor_times_area_term.setter
    def skin_loss_ufactor_times_area_term(self, value=None):
        """  Corresponds to IDD Field `Skin Loss U-Factor Times Area Term`

        Args:
            value (float): value for IDD Field `Skin Loss U-Factor Times Area Term`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `skin_loss_ufactor_times_area_term`'.format(value))
        self._data["Skin Loss U-Factor Times Area Term"] = value

    @property
    def skin_loss_quadratic_curve_name(self):
        """Get skin_loss_quadratic_curve_name

        Returns:
            str: the value of `skin_loss_quadratic_curve_name` or None if not set
        """
        return self._data["Skin Loss Quadratic Curve Name"]

    @skin_loss_quadratic_curve_name.setter
    def skin_loss_quadratic_curve_name(self, value=None):
        """  Corresponds to IDD Field `Skin Loss Quadratic Curve Name`
        Table:OneIndependentVariable object can also be used
        curve is function of fuel use rate

        Args:
            value (str): value for IDD Field `Skin Loss Quadratic Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `skin_loss_quadratic_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_quadratic_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `skin_loss_quadratic_curve_name`')
        self._data["Skin Loss Quadratic Curve Name"] = value

    @property
    def dilution_air_flow_rate(self):
        """Get dilution_air_flow_rate

        Returns:
            float: the value of `dilution_air_flow_rate` or None if not set
        """
        return self._data["Dilution Air Flow Rate"]

    @dilution_air_flow_rate.setter
    def dilution_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Dilution Air Flow Rate`

        Args:
            value (float): value for IDD Field `Dilution Air Flow Rate`
                Units: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `dilution_air_flow_rate`'.format(value))
        self._data["Dilution Air Flow Rate"] = value

    @property
    def stack_heat_loss_to_dilution_air(self):
        """Get stack_heat_loss_to_dilution_air

        Returns:
            float: the value of `stack_heat_loss_to_dilution_air` or None if not set
        """
        return self._data["Stack Heat loss to Dilution Air"]

    @stack_heat_loss_to_dilution_air.setter
    def stack_heat_loss_to_dilution_air(self, value=None):
        """  Corresponds to IDD Field `Stack Heat loss to Dilution Air`

        Args:
            value (float): value for IDD Field `Stack Heat loss to Dilution Air`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_heat_loss_to_dilution_air`'.format(value))
        self._data["Stack Heat loss to Dilution Air"] = value

    @property
    def dilution_inlet_air_node_name(self):
        """Get dilution_inlet_air_node_name

        Returns:
            str: the value of `dilution_inlet_air_node_name` or None if not set
        """
        return self._data["Dilution Inlet Air Node Name"]

    @dilution_inlet_air_node_name.setter
    def dilution_inlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Dilution Inlet Air Node Name`

        Args:
            value (str): value for IDD Field `Dilution Inlet Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `dilution_inlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dilution_inlet_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dilution_inlet_air_node_name`')
        self._data["Dilution Inlet Air Node Name"] = value

    @property
    def dilution_outlet_air_node_name(self):
        """Get dilution_outlet_air_node_name

        Returns:
            str: the value of `dilution_outlet_air_node_name` or None if not set
        """
        return self._data["Dilution Outlet Air Node Name"]

    @dilution_outlet_air_node_name.setter
    def dilution_outlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Dilution Outlet Air Node Name`

        Args:
            value (str): value for IDD Field `Dilution Outlet Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `dilution_outlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dilution_outlet_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dilution_outlet_air_node_name`')
        self._data["Dilution Outlet Air Node Name"] = value

    @property
    def minimum_operating_point(self):
        """Get minimum_operating_point

        Returns:
            float: the value of `minimum_operating_point` or None if not set
        """
        return self._data["Minimum Operating Point"]

    @minimum_operating_point.setter
    def minimum_operating_point(self, value=None):
        """  Corresponds to IDD Field `Minimum Operating Point`

        Args:
            value (float): value for IDD Field `Minimum Operating Point`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_operating_point`'.format(value))
        self._data["Minimum Operating Point"] = value

    @property
    def maximum_operating_point(self):
        """Get maximum_operating_point

        Returns:
            float: the value of `maximum_operating_point` or None if not set
        """
        return self._data["Maximum Operating Point"]

    @maximum_operating_point.setter
    def maximum_operating_point(self, value=None):
        """  Corresponds to IDD Field `Maximum Operating Point`

        Args:
            value (float): value for IDD Field `Maximum Operating Point`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_operating_point`'.format(value))
        self._data["Maximum Operating Point"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellAirSupply(object):
    """ Corresponds to IDD object `Generator:FuelCell:AirSupply`
        Used to define details of the air supply subsystem for a fuel cell power generator.
    """
    internal_name = "Generator:FuelCell:AirSupply"
    field_count = 22
    required_fields = ["Name", "Air Supply Rate Calculation Mode", "Air Intake Heat Recovery Mode", "Air Supply Constituent Mode"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:AirSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Blower Power Curve Name"] = None
        self._data["Blower Heat Loss Factor"] = None
        self._data["Air Supply Rate Calculation Mode"] = None
        self._data["Stoichiometric Ratio"] = None
        self._data["Air Rate Function of Electric Power Curve Name"] = None
        self._data["Air Rate Air Temperature Coefficient"] = None
        self._data["Air Rate Function of Fuel Rate Curve Name"] = None
        self._data["Air Intake Heat Recovery Mode"] = None
        self._data["Air Supply Constituent Mode"] = None
        self._data["Number of UserDefined Constituents"] = None
        self._data["Constituent 1 Name"] = None
        self._data["Molar Fraction 1"] = None
        self._data["Constituent 2 Name"] = None
        self._data["Molar Fraction 2"] = None
        self._data["Constituent 3 Name"] = None
        self._data["Molar Fraction 3"] = None
        self._data["Constituent 4 Name"] = None
        self._data["Molar Fraction 4"] = None
        self._data["Constituent 5 Name"] = None
        self._data["Molar Fraction 5"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.blower_power_curve_name = None
        else:
            self.blower_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.blower_heat_loss_factor = None
        else:
            self.blower_heat_loss_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_supply_rate_calculation_mode = None
        else:
            self.air_supply_rate_calculation_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stoichiometric_ratio = None
        else:
            self.stoichiometric_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_rate_function_of_electric_power_curve_name = None
        else:
            self.air_rate_function_of_electric_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_rate_air_temperature_coefficient = None
        else:
            self.air_rate_air_temperature_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_rate_function_of_fuel_rate_curve_name = None
        else:
            self.air_rate_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_intake_heat_recovery_mode = None
        else:
            self.air_intake_heat_recovery_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_supply_constituent_mode = None
        else:
            self.air_supply_constituent_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_userdefined_constituents = None
        else:
            self.number_of_userdefined_constituents = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_1_name = None
        else:
            self.constituent_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.molar_fraction_1 = None
        else:
            self.molar_fraction_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_2_name = None
        else:
            self.constituent_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.molar_fraction_2 = None
        else:
            self.molar_fraction_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_3_name = None
        else:
            self.constituent_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.molar_fraction_3 = None
        else:
            self.molar_fraction_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_4_name = None
        else:
            self.constituent_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.molar_fraction_4 = None
        else:
            self.molar_fraction_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_5_name = None
        else:
            self.constituent_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.molar_fraction_5 = None
        else:
            self.molar_fraction_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def blower_power_curve_name(self):
        """Get blower_power_curve_name

        Returns:
            str: the value of `blower_power_curve_name` or None if not set
        """
        return self._data["Blower Power Curve Name"]

    @blower_power_curve_name.setter
    def blower_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Blower Power Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Blower Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `blower_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `blower_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `blower_power_curve_name`')
        self._data["Blower Power Curve Name"] = value

    @property
    def blower_heat_loss_factor(self):
        """Get blower_heat_loss_factor

        Returns:
            float: the value of `blower_heat_loss_factor` or None if not set
        """
        return self._data["Blower Heat Loss Factor"]

    @blower_heat_loss_factor.setter
    def blower_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `Blower Heat Loss Factor`

        Args:
            value (float): value for IDD Field `Blower Heat Loss Factor`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `blower_heat_loss_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `blower_heat_loss_factor`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `blower_heat_loss_factor`')
        self._data["Blower Heat Loss Factor"] = value

    @property
    def air_supply_rate_calculation_mode(self):
        """Get air_supply_rate_calculation_mode

        Returns:
            str: the value of `air_supply_rate_calculation_mode` or None if not set
        """
        return self._data["Air Supply Rate Calculation Mode"]

    @air_supply_rate_calculation_mode.setter
    def air_supply_rate_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `Air Supply Rate Calculation Mode`

        Args:
            value (str): value for IDD Field `Air Supply Rate Calculation Mode`
                Accepted values are:
                      - AirRatiobyStoics
                      - QuadraticFunctionofElectricPower
                      - QuadraticFunctionofFuelRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_supply_rate_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_rate_calculation_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_supply_rate_calculation_mode`')
            vals = {}
            vals["airratiobystoics"] = "AirRatiobyStoics"
            vals["quadraticfunctionofelectricpower"] = "QuadraticFunctionofElectricPower"
            vals["quadraticfunctionoffuelrate"] = "QuadraticFunctionofFuelRate"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `air_supply_rate_calculation_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `air_supply_rate_calculation_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Air Supply Rate Calculation Mode"] = value

    @property
    def stoichiometric_ratio(self):
        """Get stoichiometric_ratio

        Returns:
            float: the value of `stoichiometric_ratio` or None if not set
        """
        return self._data["Stoichiometric Ratio"]

    @stoichiometric_ratio.setter
    def stoichiometric_ratio(self, value=None):
        """  Corresponds to IDD Field `Stoichiometric Ratio`
        This is the excess air "stoics"
        the value entered is incremented by 1 in the model.

        Args:
            value (float): value for IDD Field `Stoichiometric Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stoichiometric_ratio`'.format(value))
        self._data["Stoichiometric Ratio"] = value

    @property
    def air_rate_function_of_electric_power_curve_name(self):
        """Get air_rate_function_of_electric_power_curve_name

        Returns:
            str: the value of `air_rate_function_of_electric_power_curve_name` or None if not set
        """
        return self._data["Air Rate Function of Electric Power Curve Name"]

    @air_rate_function_of_electric_power_curve_name.setter
    def air_rate_function_of_electric_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Air Rate Function of Electric Power Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Air Rate Function of Electric Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_rate_function_of_electric_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_rate_function_of_electric_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_rate_function_of_electric_power_curve_name`')
        self._data["Air Rate Function of Electric Power Curve Name"] = value

    @property
    def air_rate_air_temperature_coefficient(self):
        """Get air_rate_air_temperature_coefficient

        Returns:
            float: the value of `air_rate_air_temperature_coefficient` or None if not set
        """
        return self._data["Air Rate Air Temperature Coefficient"]

    @air_rate_air_temperature_coefficient.setter
    def air_rate_air_temperature_coefficient(self, value=None):
        """  Corresponds to IDD Field `Air Rate Air Temperature Coefficient`

        Args:
            value (float): value for IDD Field `Air Rate Air Temperature Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `air_rate_air_temperature_coefficient`'.format(value))
        self._data["Air Rate Air Temperature Coefficient"] = value

    @property
    def air_rate_function_of_fuel_rate_curve_name(self):
        """Get air_rate_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `air_rate_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Air Rate Function of Fuel Rate Curve Name"]

    @air_rate_function_of_fuel_rate_curve_name.setter
    def air_rate_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Air Rate Function of Fuel Rate Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Air Rate Function of Fuel Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_rate_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_rate_function_of_fuel_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_rate_function_of_fuel_rate_curve_name`')
        self._data["Air Rate Function of Fuel Rate Curve Name"] = value

    @property
    def air_intake_heat_recovery_mode(self):
        """Get air_intake_heat_recovery_mode

        Returns:
            str: the value of `air_intake_heat_recovery_mode` or None if not set
        """
        return self._data["Air Intake Heat Recovery Mode"]

    @air_intake_heat_recovery_mode.setter
    def air_intake_heat_recovery_mode(self, value=None):
        """  Corresponds to IDD Field `Air Intake Heat Recovery Mode`

        Args:
            value (str): value for IDD Field `Air Intake Heat Recovery Mode`
                Accepted values are:
                      - NoRecovery
                      - RecoverBurnerInverterStorage
                      - RecoverAuxiliaryBurner
                      - RecoverInverterandStorage
                      - RecoverInverter
                      - RecoverElectricalStorage
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_intake_heat_recovery_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_intake_heat_recovery_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_intake_heat_recovery_mode`')
            vals = {}
            vals["norecovery"] = "NoRecovery"
            vals["recoverburnerinverterstorage"] = "RecoverBurnerInverterStorage"
            vals["recoverauxiliaryburner"] = "RecoverAuxiliaryBurner"
            vals["recoverinverterandstorage"] = "RecoverInverterandStorage"
            vals["recoverinverter"] = "RecoverInverter"
            vals["recoverelectricalstorage"] = "RecoverElectricalStorage"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `air_intake_heat_recovery_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `air_intake_heat_recovery_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Air Intake Heat Recovery Mode"] = value

    @property
    def air_supply_constituent_mode(self):
        """Get air_supply_constituent_mode

        Returns:
            str: the value of `air_supply_constituent_mode` or None if not set
        """
        return self._data["Air Supply Constituent Mode"]

    @air_supply_constituent_mode.setter
    def air_supply_constituent_mode(self, value=None):
        """  Corresponds to IDD Field `Air Supply Constituent Mode`

        Args:
            value (str): value for IDD Field `Air Supply Constituent Mode`
                Accepted values are:
                      - AmbientAir
                      - UserDefinedConstituents
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_supply_constituent_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_supply_constituent_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_supply_constituent_mode`')
            vals = {}
            vals["ambientair"] = "AmbientAir"
            vals["userdefinedconstituents"] = "UserDefinedConstituents"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `air_supply_constituent_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `air_supply_constituent_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Air Supply Constituent Mode"] = value

    @property
    def number_of_userdefined_constituents(self):
        """Get number_of_userdefined_constituents

        Returns:
            float: the value of `number_of_userdefined_constituents` or None if not set
        """
        return self._data["Number of UserDefined Constituents"]

    @number_of_userdefined_constituents.setter
    def number_of_userdefined_constituents(self, value=None):
        """  Corresponds to IDD Field `Number of UserDefined Constituents`

        Args:
            value (float): value for IDD Field `Number of UserDefined Constituents`
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_userdefined_constituents`'.format(value))
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `number_of_userdefined_constituents`')
        self._data["Number of UserDefined Constituents"] = value

    @property
    def constituent_1_name(self):
        """Get constituent_1_name

        Returns:
            str: the value of `constituent_1_name` or None if not set
        """
        return self._data["Constituent 1 Name"]

    @constituent_1_name.setter
    def constituent_1_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 1 Name`

        Args:
            value (str): value for IDD Field `Constituent 1 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_1_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_1_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_1_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 1 Name"] = value

    @property
    def molar_fraction_1(self):
        """Get molar_fraction_1

        Returns:
            float: the value of `molar_fraction_1` or None if not set
        """
        return self._data["Molar Fraction 1"]

    @molar_fraction_1.setter
    def molar_fraction_1(self, value=None):
        """  Corresponds to IDD Field `Molar Fraction 1`

        Args:
            value (float): value for IDD Field `Molar Fraction 1`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `molar_fraction_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_1`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_1`')
        self._data["Molar Fraction 1"] = value

    @property
    def constituent_2_name(self):
        """Get constituent_2_name

        Returns:
            str: the value of `constituent_2_name` or None if not set
        """
        return self._data["Constituent 2 Name"]

    @constituent_2_name.setter
    def constituent_2_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 2 Name`

        Args:
            value (str): value for IDD Field `Constituent 2 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_2_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_2_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_2_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 2 Name"] = value

    @property
    def molar_fraction_2(self):
        """Get molar_fraction_2

        Returns:
            float: the value of `molar_fraction_2` or None if not set
        """
        return self._data["Molar Fraction 2"]

    @molar_fraction_2.setter
    def molar_fraction_2(self, value=None):
        """  Corresponds to IDD Field `Molar Fraction 2`

        Args:
            value (float): value for IDD Field `Molar Fraction 2`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `molar_fraction_2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_2`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_2`')
        self._data["Molar Fraction 2"] = value

    @property
    def constituent_3_name(self):
        """Get constituent_3_name

        Returns:
            str: the value of `constituent_3_name` or None if not set
        """
        return self._data["Constituent 3 Name"]

    @constituent_3_name.setter
    def constituent_3_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 3 Name`

        Args:
            value (str): value for IDD Field `Constituent 3 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_3_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_3_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_3_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 3 Name"] = value

    @property
    def molar_fraction_3(self):
        """Get molar_fraction_3

        Returns:
            float: the value of `molar_fraction_3` or None if not set
        """
        return self._data["Molar Fraction 3"]

    @molar_fraction_3.setter
    def molar_fraction_3(self, value=None):
        """  Corresponds to IDD Field `Molar Fraction 3`

        Args:
            value (float): value for IDD Field `Molar Fraction 3`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `molar_fraction_3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_3`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_3`')
        self._data["Molar Fraction 3"] = value

    @property
    def constituent_4_name(self):
        """Get constituent_4_name

        Returns:
            str: the value of `constituent_4_name` or None if not set
        """
        return self._data["Constituent 4 Name"]

    @constituent_4_name.setter
    def constituent_4_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 4 Name`

        Args:
            value (str): value for IDD Field `Constituent 4 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_4_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_4_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_4_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 4 Name"] = value

    @property
    def molar_fraction_4(self):
        """Get molar_fraction_4

        Returns:
            float: the value of `molar_fraction_4` or None if not set
        """
        return self._data["Molar Fraction 4"]

    @molar_fraction_4.setter
    def molar_fraction_4(self, value=None):
        """  Corresponds to IDD Field `Molar Fraction 4`

        Args:
            value (float): value for IDD Field `Molar Fraction 4`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `molar_fraction_4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_4`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_4`')
        self._data["Molar Fraction 4"] = value

    @property
    def constituent_5_name(self):
        """Get constituent_5_name

        Returns:
            str: the value of `constituent_5_name` or None if not set
        """
        return self._data["Constituent 5 Name"]

    @constituent_5_name.setter
    def constituent_5_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 5 Name`

        Args:
            value (str): value for IDD Field `Constituent 5 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_5_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_5_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_5_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 5 Name"] = value

    @property
    def molar_fraction_5(self):
        """Get molar_fraction_5

        Returns:
            float: the value of `molar_fraction_5` or None if not set
        """
        return self._data["Molar Fraction 5"]

    @molar_fraction_5.setter
    def molar_fraction_5(self, value=None):
        """  Corresponds to IDD Field `Molar Fraction 5`

        Args:
            value (float): value for IDD Field `Molar Fraction 5`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `molar_fraction_5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `molar_fraction_5`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `molar_fraction_5`')
        self._data["Molar Fraction 5"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellWaterSupply(object):
    """ Corresponds to IDD object `Generator:FuelCell:WaterSupply`
        Used to provide details of the water supply subsystem for a fuel cell power generator.
        This water is used for steam reforming of the fuel and is not the same
        as the water used for thermal heat recovery.
    """
    internal_name = "Generator:FuelCell:WaterSupply"
    field_count = 7
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:WaterSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"] = None
        self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"] = None
        self._data["Pump Heat Loss Factor"] = None
        self._data["Water Temperature Modeling Mode"] = None
        self._data["Water Temperature Reference Node Name"] = None
        self._data["Water Temperature Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reformer_water_flow_rate_function_of_fuel_rate_curve_name = None
        else:
            self.reformer_water_flow_rate_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reformer_water_pump_power_function_of_fuel_rate_curve_name = None
        else:
            self.reformer_water_pump_power_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pump_heat_loss_factor = None
        else:
            self.pump_heat_loss_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_temperature_modeling_mode = None
        else:
            self.water_temperature_modeling_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_temperature_reference_node_name = None
        else:
            self.water_temperature_reference_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_temperature_schedule_name = None
        else:
            self.water_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reformer_water_flow_rate_function_of_fuel_rate_curve_name(self):
        """Get reformer_water_flow_rate_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `reformer_water_flow_rate_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"]

    @reformer_water_flow_rate_function_of_fuel_rate_curve_name.setter
    def reformer_water_flow_rate_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Reformer Water Flow Rate Function of Fuel Rate Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Reformer Water Flow Rate Function of Fuel Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reformer_water_flow_rate_function_of_fuel_rate_curve_name`')
        self._data["Reformer Water Flow Rate Function of Fuel Rate Curve Name"] = value

    @property
    def reformer_water_pump_power_function_of_fuel_rate_curve_name(self):
        """Get reformer_water_pump_power_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `reformer_water_pump_power_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"]

    @reformer_water_pump_power_function_of_fuel_rate_curve_name.setter
    def reformer_water_pump_power_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Reformer Water Pump Power Function of Fuel Rate Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Reformer Water Pump Power Function of Fuel Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reformer_water_pump_power_function_of_fuel_rate_curve_name`')
        self._data["Reformer Water Pump Power Function of Fuel Rate Curve Name"] = value

    @property
    def pump_heat_loss_factor(self):
        """Get pump_heat_loss_factor

        Returns:
            float: the value of `pump_heat_loss_factor` or None if not set
        """
        return self._data["Pump Heat Loss Factor"]

    @pump_heat_loss_factor.setter
    def pump_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `Pump Heat Loss Factor`

        Args:
            value (float): value for IDD Field `Pump Heat Loss Factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `pump_heat_loss_factor`'.format(value))
        self._data["Pump Heat Loss Factor"] = value

    @property
    def water_temperature_modeling_mode(self):
        """Get water_temperature_modeling_mode

        Returns:
            str: the value of `water_temperature_modeling_mode` or None if not set
        """
        return self._data["Water Temperature Modeling Mode"]

    @water_temperature_modeling_mode.setter
    def water_temperature_modeling_mode(self, value=None):
        """  Corresponds to IDD Field `Water Temperature Modeling Mode`

        Args:
            value (str): value for IDD Field `Water Temperature Modeling Mode`
                Accepted values are:
                      - TemperatureFromAirNode
                      - TemperatureFromWaterNode
                      - TemperatureFromSchedule
                      - MainsWaterTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `water_temperature_modeling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_modeling_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_temperature_modeling_mode`')
            vals = {}
            vals["temperaturefromairnode"] = "TemperatureFromAirNode"
            vals["temperaturefromwaternode"] = "TemperatureFromWaterNode"
            vals["temperaturefromschedule"] = "TemperatureFromSchedule"
            vals["mainswatertemperature"] = "MainsWaterTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `water_temperature_modeling_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `water_temperature_modeling_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Water Temperature Modeling Mode"] = value

    @property
    def water_temperature_reference_node_name(self):
        """Get water_temperature_reference_node_name

        Returns:
            str: the value of `water_temperature_reference_node_name` or None if not set
        """
        return self._data["Water Temperature Reference Node Name"]

    @water_temperature_reference_node_name.setter
    def water_temperature_reference_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Temperature Reference Node Name`

        Args:
            value (str): value for IDD Field `Water Temperature Reference Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `water_temperature_reference_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_reference_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_temperature_reference_node_name`')
        self._data["Water Temperature Reference Node Name"] = value

    @property
    def water_temperature_schedule_name(self):
        """Get water_temperature_schedule_name

        Returns:
            str: the value of `water_temperature_schedule_name` or None if not set
        """
        return self._data["Water Temperature Schedule Name"]

    @water_temperature_schedule_name.setter
    def water_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Water Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Water Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `water_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_temperature_schedule_name`')
        self._data["Water Temperature Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellAuxiliaryHeater(object):
    """ Corresponds to IDD object `Generator:FuelCell:AuxiliaryHeater`
        Intended for modeling an auxiliary heater for a fuel cell power generator, however this
        portion of the model is not yet available. The program still requires one of these
        objects be included even though the data are not yet used (so that internal data
        structures can be allocated).
    """
    internal_name = "Generator:FuelCell:AuxiliaryHeater"
    field_count = 12
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:AuxiliaryHeater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Excess Air Ratio"] = None
        self._data["Ancilliary Power Constant Term"] = None
        self._data["Ancilliary Power Linear Term"] = None
        self._data["Skin Loss U-Factor Times Area Value"] = None
        self._data["Skin Loss Destination"] = None
        self._data["Zone Name to Receive Skin Losses"] = None
        self._data["Heating Capacity Units"] = None
        self._data["Maximum Heating Capacity in Watts"] = None
        self._data["Minimum Heating Capacity in Watts"] = None
        self._data["Maximum Heating Capacity in Kmol per Second"] = None
        self._data["Minimum Heating Capacity in Kmol per Second"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.excess_air_ratio = None
        else:
            self.excess_air_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancilliary_power_constant_term = None
        else:
            self.ancilliary_power_constant_term = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancilliary_power_linear_term = None
        else:
            self.ancilliary_power_linear_term = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_value = None
        else:
            self.skin_loss_ufactor_times_area_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_destination = None
        else:
            self.skin_loss_destination = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name_to_receive_skin_losses = None
        else:
            self.zone_name_to_receive_skin_losses = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_units = None
        else:
            self.heating_capacity_units = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_heating_capacity_in_watts = None
        else:
            self.maximum_heating_capacity_in_watts = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_heating_capacity_in_watts = None
        else:
            self.minimum_heating_capacity_in_watts = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_heating_capacity_in_kmol_per_second = None
        else:
            self.maximum_heating_capacity_in_kmol_per_second = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_heating_capacity_in_kmol_per_second = None
        else:
            self.minimum_heating_capacity_in_kmol_per_second = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def excess_air_ratio(self):
        """Get excess_air_ratio

        Returns:
            float: the value of `excess_air_ratio` or None if not set
        """
        return self._data["Excess Air Ratio"]

    @excess_air_ratio.setter
    def excess_air_ratio(self, value=None):
        """  Corresponds to IDD Field `Excess Air Ratio`

        Args:
            value (float): value for IDD Field `Excess Air Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `excess_air_ratio`'.format(value))
        self._data["Excess Air Ratio"] = value

    @property
    def ancilliary_power_constant_term(self):
        """Get ancilliary_power_constant_term

        Returns:
            float: the value of `ancilliary_power_constant_term` or None if not set
        """
        return self._data["Ancilliary Power Constant Term"]

    @ancilliary_power_constant_term.setter
    def ancilliary_power_constant_term(self, value=None):
        """  Corresponds to IDD Field `Ancilliary Power Constant Term`

        Args:
            value (float): value for IDD Field `Ancilliary Power Constant Term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancilliary_power_constant_term`'.format(value))
        self._data["Ancilliary Power Constant Term"] = value

    @property
    def ancilliary_power_linear_term(self):
        """Get ancilliary_power_linear_term

        Returns:
            float: the value of `ancilliary_power_linear_term` or None if not set
        """
        return self._data["Ancilliary Power Linear Term"]

    @ancilliary_power_linear_term.setter
    def ancilliary_power_linear_term(self, value=None):
        """  Corresponds to IDD Field `Ancilliary Power Linear Term`

        Args:
            value (float): value for IDD Field `Ancilliary Power Linear Term`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancilliary_power_linear_term`'.format(value))
        self._data["Ancilliary Power Linear Term"] = value

    @property
    def skin_loss_ufactor_times_area_value(self):
        """Get skin_loss_ufactor_times_area_value

        Returns:
            float: the value of `skin_loss_ufactor_times_area_value` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Value"]

    @skin_loss_ufactor_times_area_value.setter
    def skin_loss_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `Skin Loss U-Factor Times Area Value`

        Args:
            value (float): value for IDD Field `Skin Loss U-Factor Times Area Value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `skin_loss_ufactor_times_area_value`'.format(value))
        self._data["Skin Loss U-Factor Times Area Value"] = value

    @property
    def skin_loss_destination(self):
        """Get skin_loss_destination

        Returns:
            str: the value of `skin_loss_destination` or None if not set
        """
        return self._data["Skin Loss Destination"]

    @skin_loss_destination.setter
    def skin_loss_destination(self, value=None):
        """  Corresponds to IDD Field `Skin Loss Destination`

        Args:
            value (str): value for IDD Field `Skin Loss Destination`
                Accepted values are:
                      - SurroundingZone
                      - AirInletForFuelCell
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `skin_loss_destination`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `skin_loss_destination`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `skin_loss_destination`')
            vals = {}
            vals["surroundingzone"] = "SurroundingZone"
            vals["airinletforfuelcell"] = "AirInletForFuelCell"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `skin_loss_destination`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `skin_loss_destination`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Skin Loss Destination"] = value

    @property
    def zone_name_to_receive_skin_losses(self):
        """Get zone_name_to_receive_skin_losses

        Returns:
            str: the value of `zone_name_to_receive_skin_losses` or None if not set
        """
        return self._data["Zone Name to Receive Skin Losses"]

    @zone_name_to_receive_skin_losses.setter
    def zone_name_to_receive_skin_losses(self, value=None):
        """  Corresponds to IDD Field `Zone Name to Receive Skin Losses`

        Args:
            value (str): value for IDD Field `Zone Name to Receive Skin Losses`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name_to_receive_skin_losses`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name_to_receive_skin_losses`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name_to_receive_skin_losses`')
        self._data["Zone Name to Receive Skin Losses"] = value

    @property
    def heating_capacity_units(self):
        """Get heating_capacity_units

        Returns:
            str: the value of `heating_capacity_units` or None if not set
        """
        return self._data["Heating Capacity Units"]

    @heating_capacity_units.setter
    def heating_capacity_units(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Units`

        Args:
            value (str): value for IDD Field `Heating Capacity Units`
                Accepted values are:
                      - Watts
                      - kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_capacity_units`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_units`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_units`')
            vals = {}
            vals["watts"] = "Watts"
            vals["kmol/s"] = "kmol/s"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_capacity_units`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_capacity_units`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Capacity Units"] = value

    @property
    def maximum_heating_capacity_in_watts(self):
        """Get maximum_heating_capacity_in_watts

        Returns:
            float: the value of `maximum_heating_capacity_in_watts` or None if not set
        """
        return self._data["Maximum Heating Capacity in Watts"]

    @maximum_heating_capacity_in_watts.setter
    def maximum_heating_capacity_in_watts(self, value=None):
        """  Corresponds to IDD Field `Maximum Heating Capacity in Watts`

        Args:
            value (float): value for IDD Field `Maximum Heating Capacity in Watts`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_heating_capacity_in_watts`'.format(value))
        self._data["Maximum Heating Capacity in Watts"] = value

    @property
    def minimum_heating_capacity_in_watts(self):
        """Get minimum_heating_capacity_in_watts

        Returns:
            float: the value of `minimum_heating_capacity_in_watts` or None if not set
        """
        return self._data["Minimum Heating Capacity in Watts"]

    @minimum_heating_capacity_in_watts.setter
    def minimum_heating_capacity_in_watts(self, value=None):
        """  Corresponds to IDD Field `Minimum Heating Capacity in Watts`

        Args:
            value (float): value for IDD Field `Minimum Heating Capacity in Watts`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_heating_capacity_in_watts`'.format(value))
        self._data["Minimum Heating Capacity in Watts"] = value

    @property
    def maximum_heating_capacity_in_kmol_per_second(self):
        """Get maximum_heating_capacity_in_kmol_per_second

        Returns:
            float: the value of `maximum_heating_capacity_in_kmol_per_second` or None if not set
        """
        return self._data["Maximum Heating Capacity in Kmol per Second"]

    @maximum_heating_capacity_in_kmol_per_second.setter
    def maximum_heating_capacity_in_kmol_per_second(self, value=None):
        """  Corresponds to IDD Field `Maximum Heating Capacity in Kmol per Second`

        Args:
            value (float): value for IDD Field `Maximum Heating Capacity in Kmol per Second`
                Units: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_heating_capacity_in_kmol_per_second`'.format(value))
        self._data["Maximum Heating Capacity in Kmol per Second"] = value

    @property
    def minimum_heating_capacity_in_kmol_per_second(self):
        """Get minimum_heating_capacity_in_kmol_per_second

        Returns:
            float: the value of `minimum_heating_capacity_in_kmol_per_second` or None if not set
        """
        return self._data["Minimum Heating Capacity in Kmol per Second"]

    @minimum_heating_capacity_in_kmol_per_second.setter
    def minimum_heating_capacity_in_kmol_per_second(self, value=None):
        """  Corresponds to IDD Field `Minimum Heating Capacity in Kmol per Second`

        Args:
            value (float): value for IDD Field `Minimum Heating Capacity in Kmol per Second`
                Units: kmol/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_heating_capacity_in_kmol_per_second`'.format(value))
        self._data["Minimum Heating Capacity in Kmol per Second"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellExhaustGasToWaterHeatExchanger(object):
    """ Corresponds to IDD object `Generator:FuelCell:ExhaustGasToWaterHeatExchanger`
        Describes the exhaust gas heat exchanger subsystem of a fuel cell power generator
        used to recovery thermal energy
    """
    internal_name = "Generator:FuelCell:ExhaustGasToWaterHeatExchanger"
    field_count = 24
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:ExhaustGasToWaterHeatExchanger`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Heat Recovery Water Maximum Flow Rate"] = None
        self._data["Exhaust Outlet Air Node Name"] = None
        self._data["Heat Exchanger Calculation Method"] = None
        self._data["Method 1 Heat Exchanger Effectiveness"] = None
        self._data["Method 2 Parameter hxs0"] = None
        self._data["Method 2 Parameter hxs1"] = None
        self._data["Method 2 Parameter hxs2"] = None
        self._data["Method 2 Parameter hxs3"] = None
        self._data["Method 2 Parameter hxs4"] = None
        self._data["Method 3 h0Gas Coefficient"] = None
        self._data["Method 3 NdotGasRef Coefficient"] = None
        self._data["Method 3 n Coefficient"] = None
        self._data["Method 3 Gas Area"] = None
        self._data["Method 3 h0 Water Coefficient"] = None
        self._data["Method 3 N dot Water ref Coefficient"] = None
        self._data["Method 3 m Coefficient"] = None
        self._data["Method 3 Water Area"] = None
        self._data["Method 3 F Adjustment Factor"] = None
        self._data["Method 4 hxl1 Coefficient"] = None
        self._data["Method 4 hxl2 Coefficient"] = None
        self._data["Method 4 Condensation Threshold"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_maximum_flow_rate = None
        else:
            self.heat_recovery_water_maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_outlet_air_node_name = None
        else:
            self.exhaust_outlet_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_calculation_method = None
        else:
            self.heat_exchanger_calculation_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_1_heat_exchanger_effectiveness = None
        else:
            self.method_1_heat_exchanger_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs0 = None
        else:
            self.method_2_parameter_hxs0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs1 = None
        else:
            self.method_2_parameter_hxs1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs2 = None
        else:
            self.method_2_parameter_hxs2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs3 = None
        else:
            self.method_2_parameter_hxs3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_2_parameter_hxs4 = None
        else:
            self.method_2_parameter_hxs4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_h0gas_coefficient = None
        else:
            self.method_3_h0gas_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_ndotgasref_coefficient = None
        else:
            self.method_3_ndotgasref_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_n_coefficient = None
        else:
            self.method_3_n_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_gas_area = None
        else:
            self.method_3_gas_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_h0_water_coefficient = None
        else:
            self.method_3_h0_water_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_n_dot_water_ref_coefficient = None
        else:
            self.method_3_n_dot_water_ref_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_m_coefficient = None
        else:
            self.method_3_m_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_water_area = None
        else:
            self.method_3_water_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_3_f_adjustment_factor = None
        else:
            self.method_3_f_adjustment_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_4_hxl1_coefficient = None
        else:
            self.method_4_hxl1_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_4_hxl2_coefficient = None
        else:
            self.method_4_hxl2_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.method_4_condensation_threshold = None
        else:
            self.method_4_condensation_threshold = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_inlet_node_name`')
        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_outlet_node_name`')
        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def heat_recovery_water_maximum_flow_rate(self):
        """Get heat_recovery_water_maximum_flow_rate

        Returns:
            float: the value of `heat_recovery_water_maximum_flow_rate` or None if not set
        """
        return self._data["Heat Recovery Water Maximum Flow Rate"]

    @heat_recovery_water_maximum_flow_rate.setter
    def heat_recovery_water_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Maximum Flow Rate`

        Args:
            value (float): value for IDD Field `Heat Recovery Water Maximum Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heat_recovery_water_maximum_flow_rate`'.format(value))
        self._data["Heat Recovery Water Maximum Flow Rate"] = value

    @property
    def exhaust_outlet_air_node_name(self):
        """Get exhaust_outlet_air_node_name

        Returns:
            str: the value of `exhaust_outlet_air_node_name` or None if not set
        """
        return self._data["Exhaust Outlet Air Node Name"]

    @exhaust_outlet_air_node_name.setter
    def exhaust_outlet_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Outlet Air Node Name`

        Args:
            value (str): value for IDD Field `Exhaust Outlet Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_outlet_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_outlet_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_outlet_air_node_name`')
        self._data["Exhaust Outlet Air Node Name"] = value

    @property
    def heat_exchanger_calculation_method(self):
        """Get heat_exchanger_calculation_method

        Returns:
            str: the value of `heat_exchanger_calculation_method` or None if not set
        """
        return self._data["Heat Exchanger Calculation Method"]

    @heat_exchanger_calculation_method.setter
    def heat_exchanger_calculation_method(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Calculation Method`

        Args:
            value (str): value for IDD Field `Heat Exchanger Calculation Method`
                Accepted values are:
                      - FixedEffectiveness
                      - EmpiricalUAeff
                      - FundementalUAeff
                      - Condensing
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_exchanger_calculation_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_calculation_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_calculation_method`')
            vals = {}
            vals["fixedeffectiveness"] = "FixedEffectiveness"
            vals["empiricaluaeff"] = "EmpiricalUAeff"
            vals["fundementaluaeff"] = "FundementalUAeff"
            vals["condensing"] = "Condensing"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_exchanger_calculation_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heat_exchanger_calculation_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heat Exchanger Calculation Method"] = value

    @property
    def method_1_heat_exchanger_effectiveness(self):
        """Get method_1_heat_exchanger_effectiveness

        Returns:
            float: the value of `method_1_heat_exchanger_effectiveness` or None if not set
        """
        return self._data["Method 1 Heat Exchanger Effectiveness"]

    @method_1_heat_exchanger_effectiveness.setter
    def method_1_heat_exchanger_effectiveness(self, value=None):
        """  Corresponds to IDD Field `Method 1 Heat Exchanger Effectiveness`

        Args:
            value (float): value for IDD Field `Method 1 Heat Exchanger Effectiveness`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_1_heat_exchanger_effectiveness`'.format(value))
        self._data["Method 1 Heat Exchanger Effectiveness"] = value

    @property
    def method_2_parameter_hxs0(self):
        """Get method_2_parameter_hxs0

        Returns:
            float: the value of `method_2_parameter_hxs0` or None if not set
        """
        return self._data["Method 2 Parameter hxs0"]

    @method_2_parameter_hxs0.setter
    def method_2_parameter_hxs0(self, value=None):
        """  Corresponds to IDD Field `Method 2 Parameter hxs0`

        Args:
            value (float): value for IDD Field `Method 2 Parameter hxs0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_2_parameter_hxs0`'.format(value))
        self._data["Method 2 Parameter hxs0"] = value

    @property
    def method_2_parameter_hxs1(self):
        """Get method_2_parameter_hxs1

        Returns:
            float: the value of `method_2_parameter_hxs1` or None if not set
        """
        return self._data["Method 2 Parameter hxs1"]

    @method_2_parameter_hxs1.setter
    def method_2_parameter_hxs1(self, value=None):
        """  Corresponds to IDD Field `Method 2 Parameter hxs1`

        Args:
            value (float): value for IDD Field `Method 2 Parameter hxs1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_2_parameter_hxs1`'.format(value))
        self._data["Method 2 Parameter hxs1"] = value

    @property
    def method_2_parameter_hxs2(self):
        """Get method_2_parameter_hxs2

        Returns:
            float: the value of `method_2_parameter_hxs2` or None if not set
        """
        return self._data["Method 2 Parameter hxs2"]

    @method_2_parameter_hxs2.setter
    def method_2_parameter_hxs2(self, value=None):
        """  Corresponds to IDD Field `Method 2 Parameter hxs2`

        Args:
            value (float): value for IDD Field `Method 2 Parameter hxs2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_2_parameter_hxs2`'.format(value))
        self._data["Method 2 Parameter hxs2"] = value

    @property
    def method_2_parameter_hxs3(self):
        """Get method_2_parameter_hxs3

        Returns:
            float: the value of `method_2_parameter_hxs3` or None if not set
        """
        return self._data["Method 2 Parameter hxs3"]

    @method_2_parameter_hxs3.setter
    def method_2_parameter_hxs3(self, value=None):
        """  Corresponds to IDD Field `Method 2 Parameter hxs3`

        Args:
            value (float): value for IDD Field `Method 2 Parameter hxs3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_2_parameter_hxs3`'.format(value))
        self._data["Method 2 Parameter hxs3"] = value

    @property
    def method_2_parameter_hxs4(self):
        """Get method_2_parameter_hxs4

        Returns:
            float: the value of `method_2_parameter_hxs4` or None if not set
        """
        return self._data["Method 2 Parameter hxs4"]

    @method_2_parameter_hxs4.setter
    def method_2_parameter_hxs4(self, value=None):
        """  Corresponds to IDD Field `Method 2 Parameter hxs4`

        Args:
            value (float): value for IDD Field `Method 2 Parameter hxs4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_2_parameter_hxs4`'.format(value))
        self._data["Method 2 Parameter hxs4"] = value

    @property
    def method_3_h0gas_coefficient(self):
        """Get method_3_h0gas_coefficient

        Returns:
            float: the value of `method_3_h0gas_coefficient` or None if not set
        """
        return self._data["Method 3 h0Gas Coefficient"]

    @method_3_h0gas_coefficient.setter
    def method_3_h0gas_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 3 h0Gas Coefficient`

        Args:
            value (float): value for IDD Field `Method 3 h0Gas Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_h0gas_coefficient`'.format(value))
        self._data["Method 3 h0Gas Coefficient"] = value

    @property
    def method_3_ndotgasref_coefficient(self):
        """Get method_3_ndotgasref_coefficient

        Returns:
            float: the value of `method_3_ndotgasref_coefficient` or None if not set
        """
        return self._data["Method 3 NdotGasRef Coefficient"]

    @method_3_ndotgasref_coefficient.setter
    def method_3_ndotgasref_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 3 NdotGasRef Coefficient`

        Args:
            value (float): value for IDD Field `Method 3 NdotGasRef Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_ndotgasref_coefficient`'.format(value))
        self._data["Method 3 NdotGasRef Coefficient"] = value

    @property
    def method_3_n_coefficient(self):
        """Get method_3_n_coefficient

        Returns:
            float: the value of `method_3_n_coefficient` or None if not set
        """
        return self._data["Method 3 n Coefficient"]

    @method_3_n_coefficient.setter
    def method_3_n_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 3 n Coefficient`

        Args:
            value (float): value for IDD Field `Method 3 n Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_n_coefficient`'.format(value))
        self._data["Method 3 n Coefficient"] = value

    @property
    def method_3_gas_area(self):
        """Get method_3_gas_area

        Returns:
            float: the value of `method_3_gas_area` or None if not set
        """
        return self._data["Method 3 Gas Area"]

    @method_3_gas_area.setter
    def method_3_gas_area(self, value=None):
        """  Corresponds to IDD Field `Method 3 Gas Area`

        Args:
            value (float): value for IDD Field `Method 3 Gas Area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_gas_area`'.format(value))
        self._data["Method 3 Gas Area"] = value

    @property
    def method_3_h0_water_coefficient(self):
        """Get method_3_h0_water_coefficient

        Returns:
            float: the value of `method_3_h0_water_coefficient` or None if not set
        """
        return self._data["Method 3 h0 Water Coefficient"]

    @method_3_h0_water_coefficient.setter
    def method_3_h0_water_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 3 h0 Water Coefficient`

        Args:
            value (float): value for IDD Field `Method 3 h0 Water Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_h0_water_coefficient`'.format(value))
        self._data["Method 3 h0 Water Coefficient"] = value

    @property
    def method_3_n_dot_water_ref_coefficient(self):
        """Get method_3_n_dot_water_ref_coefficient

        Returns:
            float: the value of `method_3_n_dot_water_ref_coefficient` or None if not set
        """
        return self._data["Method 3 N dot Water ref Coefficient"]

    @method_3_n_dot_water_ref_coefficient.setter
    def method_3_n_dot_water_ref_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 3 N dot Water ref Coefficient`

        Args:
            value (float): value for IDD Field `Method 3 N dot Water ref Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_n_dot_water_ref_coefficient`'.format(value))
        self._data["Method 3 N dot Water ref Coefficient"] = value

    @property
    def method_3_m_coefficient(self):
        """Get method_3_m_coefficient

        Returns:
            float: the value of `method_3_m_coefficient` or None if not set
        """
        return self._data["Method 3 m Coefficient"]

    @method_3_m_coefficient.setter
    def method_3_m_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 3 m Coefficient`

        Args:
            value (float): value for IDD Field `Method 3 m Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_m_coefficient`'.format(value))
        self._data["Method 3 m Coefficient"] = value

    @property
    def method_3_water_area(self):
        """Get method_3_water_area

        Returns:
            float: the value of `method_3_water_area` or None if not set
        """
        return self._data["Method 3 Water Area"]

    @method_3_water_area.setter
    def method_3_water_area(self, value=None):
        """  Corresponds to IDD Field `Method 3 Water Area`

        Args:
            value (float): value for IDD Field `Method 3 Water Area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_water_area`'.format(value))
        self._data["Method 3 Water Area"] = value

    @property
    def method_3_f_adjustment_factor(self):
        """Get method_3_f_adjustment_factor

        Returns:
            float: the value of `method_3_f_adjustment_factor` or None if not set
        """
        return self._data["Method 3 F Adjustment Factor"]

    @method_3_f_adjustment_factor.setter
    def method_3_f_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `Method 3 F Adjustment Factor`

        Args:
            value (float): value for IDD Field `Method 3 F Adjustment Factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_3_f_adjustment_factor`'.format(value))
        self._data["Method 3 F Adjustment Factor"] = value

    @property
    def method_4_hxl1_coefficient(self):
        """Get method_4_hxl1_coefficient

        Returns:
            float: the value of `method_4_hxl1_coefficient` or None if not set
        """
        return self._data["Method 4 hxl1 Coefficient"]

    @method_4_hxl1_coefficient.setter
    def method_4_hxl1_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 4 hxl1 Coefficient`

        Args:
            value (float): value for IDD Field `Method 4 hxl1 Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_4_hxl1_coefficient`'.format(value))
        self._data["Method 4 hxl1 Coefficient"] = value

    @property
    def method_4_hxl2_coefficient(self):
        """Get method_4_hxl2_coefficient

        Returns:
            float: the value of `method_4_hxl2_coefficient` or None if not set
        """
        return self._data["Method 4 hxl2 Coefficient"]

    @method_4_hxl2_coefficient.setter
    def method_4_hxl2_coefficient(self, value=None):
        """  Corresponds to IDD Field `Method 4 hxl2 Coefficient`

        Args:
            value (float): value for IDD Field `Method 4 hxl2 Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_4_hxl2_coefficient`'.format(value))
        self._data["Method 4 hxl2 Coefficient"] = value

    @property
    def method_4_condensation_threshold(self):
        """Get method_4_condensation_threshold

        Returns:
            float: the value of `method_4_condensation_threshold` or None if not set
        """
        return self._data["Method 4 Condensation Threshold"]

    @method_4_condensation_threshold.setter
    def method_4_condensation_threshold(self, value=None):
        """  Corresponds to IDD Field `Method 4 Condensation Threshold`

        Args:
            value (float): value for IDD Field `Method 4 Condensation Threshold`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `method_4_condensation_threshold`'.format(value))
        self._data["Method 4 Condensation Threshold"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellElectricalStorage(object):
    """ Corresponds to IDD object `Generator:FuelCell:ElectricalStorage`
        Used to describe the electrical storage subsystem for a fuel cell power generator.
        The electrical storage model is a very simple "constrained bucket" model.
        Note that this electrical storage is embedded within the FC device.
    """
    internal_name = "Generator:FuelCell:ElectricalStorage"
    field_count = 8
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:ElectricalStorage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Choice of Model"] = None
        self._data["Nominal Charging Energetic Efficiency"] = None
        self._data["Nominal Discharging Energetic Efficiency"] = None
        self._data["Simple Maximum Capacity"] = None
        self._data["Simple Maximum Power Draw"] = None
        self._data["Simple Maximum Power Store"] = None
        self._data["Initial Charge State"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.choice_of_model = None
        else:
            self.choice_of_model = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_charging_energetic_efficiency = None
        else:
            self.nominal_charging_energetic_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_discharging_energetic_efficiency = None
        else:
            self.nominal_discharging_energetic_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.simple_maximum_capacity = None
        else:
            self.simple_maximum_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.simple_maximum_power_draw = None
        else:
            self.simple_maximum_power_draw = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.simple_maximum_power_store = None
        else:
            self.simple_maximum_power_store = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.initial_charge_state = None
        else:
            self.initial_charge_state = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def choice_of_model(self):
        """Get choice_of_model

        Returns:
            str: the value of `choice_of_model` or None if not set
        """
        return self._data["Choice of Model"]

    @choice_of_model.setter
    def choice_of_model(self, value=None):
        """  Corresponds to IDD Field `Choice of Model`

        Args:
            value (str): value for IDD Field `Choice of Model`
                Accepted values are:
                      - SimpleEfficiencyWithConstraints
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `choice_of_model`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `choice_of_model`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `choice_of_model`')
            vals = {}
            vals["simpleefficiencywithconstraints"] = "SimpleEfficiencyWithConstraints"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `choice_of_model`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `choice_of_model`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Choice of Model"] = value

    @property
    def nominal_charging_energetic_efficiency(self):
        """Get nominal_charging_energetic_efficiency

        Returns:
            float: the value of `nominal_charging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Charging Energetic Efficiency"]

    @nominal_charging_energetic_efficiency.setter
    def nominal_charging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `Nominal Charging Energetic Efficiency`

        Args:
            value (float): value for IDD Field `Nominal Charging Energetic Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_charging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_charging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_charging_energetic_efficiency`')
        self._data["Nominal Charging Energetic Efficiency"] = value

    @property
    def nominal_discharging_energetic_efficiency(self):
        """Get nominal_discharging_energetic_efficiency

        Returns:
            float: the value of `nominal_discharging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Discharging Energetic Efficiency"]

    @nominal_discharging_energetic_efficiency.setter
    def nominal_discharging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `Nominal Discharging Energetic Efficiency`

        Args:
            value (float): value for IDD Field `Nominal Discharging Energetic Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_discharging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
        self._data["Nominal Discharging Energetic Efficiency"] = value

    @property
    def simple_maximum_capacity(self):
        """Get simple_maximum_capacity

        Returns:
            float: the value of `simple_maximum_capacity` or None if not set
        """
        return self._data["Simple Maximum Capacity"]

    @simple_maximum_capacity.setter
    def simple_maximum_capacity(self, value=None):
        """  Corresponds to IDD Field `Simple Maximum Capacity`

        Args:
            value (float): value for IDD Field `Simple Maximum Capacity`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `simple_maximum_capacity`'.format(value))
        self._data["Simple Maximum Capacity"] = value

    @property
    def simple_maximum_power_draw(self):
        """Get simple_maximum_power_draw

        Returns:
            float: the value of `simple_maximum_power_draw` or None if not set
        """
        return self._data["Simple Maximum Power Draw"]

    @simple_maximum_power_draw.setter
    def simple_maximum_power_draw(self, value=None):
        """  Corresponds to IDD Field `Simple Maximum Power Draw`

        Args:
            value (float): value for IDD Field `Simple Maximum Power Draw`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `simple_maximum_power_draw`'.format(value))
        self._data["Simple Maximum Power Draw"] = value

    @property
    def simple_maximum_power_store(self):
        """Get simple_maximum_power_store

        Returns:
            float: the value of `simple_maximum_power_store` or None if not set
        """
        return self._data["Simple Maximum Power Store"]

    @simple_maximum_power_store.setter
    def simple_maximum_power_store(self, value=None):
        """  Corresponds to IDD Field `Simple Maximum Power Store`

        Args:
            value (float): value for IDD Field `Simple Maximum Power Store`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `simple_maximum_power_store`'.format(value))
        self._data["Simple Maximum Power Store"] = value

    @property
    def initial_charge_state(self):
        """Get initial_charge_state

        Returns:
            float: the value of `initial_charge_state` or None if not set
        """
        return self._data["Initial Charge State"]

    @initial_charge_state.setter
    def initial_charge_state(self, value=None):
        """  Corresponds to IDD Field `Initial Charge State`

        Args:
            value (float): value for IDD Field `Initial Charge State`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `initial_charge_state`'.format(value))
        self._data["Initial Charge State"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellInverter(object):
    """ Corresponds to IDD object `Generator:FuelCell:Inverter`
        Used to describe the power condition unit subsystem of a fuel cell power generator.
        This object models an inverter system contained within a fuel cell system that
        converts from direct current (DC) to alternating current (AC).
    """
    internal_name = "Generator:FuelCell:Inverter"
    field_count = 4
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:Inverter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inverter Efficiency Calculation Mode"] = None
        self._data["Inverter Efficiency"] = None
        self._data["Efficiency Function of DC Power Curve Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inverter_efficiency_calculation_mode = None
        else:
            self.inverter_efficiency_calculation_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inverter_efficiency = None
        else:
            self.inverter_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_function_of_dc_power_curve_name = None
        else:
            self.efficiency_function_of_dc_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def inverter_efficiency_calculation_mode(self):
        """Get inverter_efficiency_calculation_mode

        Returns:
            str: the value of `inverter_efficiency_calculation_mode` or None if not set
        """
        return self._data["Inverter Efficiency Calculation Mode"]

    @inverter_efficiency_calculation_mode.setter
    def inverter_efficiency_calculation_mode(self, value=None):
        """  Corresponds to IDD Field `Inverter Efficiency Calculation Mode`

        Args:
            value (str): value for IDD Field `Inverter Efficiency Calculation Mode`
                Accepted values are:
                      - Quadratic
                      - Constant
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inverter_efficiency_calculation_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_efficiency_calculation_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inverter_efficiency_calculation_mode`')
            vals = {}
            vals["quadratic"] = "Quadratic"
            vals["constant"] = "Constant"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `inverter_efficiency_calculation_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `inverter_efficiency_calculation_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Inverter Efficiency Calculation Mode"] = value

    @property
    def inverter_efficiency(self):
        """Get inverter_efficiency

        Returns:
            float: the value of `inverter_efficiency` or None if not set
        """
        return self._data["Inverter Efficiency"]

    @inverter_efficiency.setter
    def inverter_efficiency(self, value=None):
        """  Corresponds to IDD Field `Inverter Efficiency`

        Args:
            value (float): value for IDD Field `Inverter Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `inverter_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inverter_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inverter_efficiency`')
        self._data["Inverter Efficiency"] = value

    @property
    def efficiency_function_of_dc_power_curve_name(self):
        """Get efficiency_function_of_dc_power_curve_name

        Returns:
            str: the value of `efficiency_function_of_dc_power_curve_name` or None if not set
        """
        return self._data["Efficiency Function of DC Power Curve Name"]

    @efficiency_function_of_dc_power_curve_name.setter
    def efficiency_function_of_dc_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Efficiency Function of DC Power Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Efficiency Function of DC Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `efficiency_function_of_dc_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_function_of_dc_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `efficiency_function_of_dc_power_curve_name`')
        self._data["Efficiency Function of DC Power Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelCellStackCooler(object):
    """ Corresponds to IDD object `Generator:FuelCell:StackCooler`
        This object is optional and is used to define details needed to model the stack cooler
        on PEMFC.
    """
    internal_name = "Generator:FuelCell:StackCooler"
    field_count = 21
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelCell:StackCooler`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Recovery Water Inlet Node Name"] = None
        self._data["Heat Recovery Water Outlet Node Name"] = None
        self._data["Nominal Stack Temperature"] = None
        self._data["Actual Stack Temperature"] = None
        self._data["Coefficient r0"] = None
        self._data["Coefficient r1"] = None
        self._data["Coefficient r2"] = None
        self._data["Coefficient r3"] = None
        self._data["Stack Coolant Flow Rate"] = None
        self._data["Stack Cooler U-Factor Times Area Value"] = None
        self._data["Fs-cogen Adjustment Factor"] = None
        self._data["Stack Cogeneration Exchanger Area"] = None
        self._data["Stack Cogeneration Exchanger Nominal Flow Rate"] = None
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"] = None
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"] = None
        self._data["Stack Cooler Pump Power"] = None
        self._data["Stack Cooler Pump Heat Loss Fraction"] = None
        self._data["Stack Air Cooler Fan Coefficient f0"] = None
        self._data["Stack Air Cooler Fan Coefficient f1"] = None
        self._data["Stack Air Cooler Fan Coefficient f2"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_inlet_node_name = None
        else:
            self.heat_recovery_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_water_outlet_node_name = None
        else:
            self.heat_recovery_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_stack_temperature = None
        else:
            self.nominal_stack_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.actual_stack_temperature = None
        else:
            self.actual_stack_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_r0 = None
        else:
            self.coefficient_r0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_r1 = None
        else:
            self.coefficient_r1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_r2 = None
        else:
            self.coefficient_r2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_r3 = None
        else:
            self.coefficient_r3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_coolant_flow_rate = None
        else:
            self.stack_coolant_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cooler_ufactor_times_area_value = None
        else:
            self.stack_cooler_ufactor_times_area_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fscogen_adjustment_factor = None
        else:
            self.fscogen_adjustment_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_area = None
        else:
            self.stack_cogeneration_exchanger_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_flow_rate = None
        else:
            self.stack_cogeneration_exchanger_nominal_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient = None
        else:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent = None
        else:
            self.stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cooler_pump_power = None
        else:
            self.stack_cooler_pump_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_cooler_pump_heat_loss_fraction = None
        else:
            self.stack_cooler_pump_heat_loss_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f0 = None
        else:
            self.stack_air_cooler_fan_coefficient_f0 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f1 = None
        else:
            self.stack_air_cooler_fan_coefficient_f1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stack_air_cooler_fan_coefficient_f2 = None
        else:
            self.stack_air_cooler_fan_coefficient_f2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def heat_recovery_water_inlet_node_name(self):
        """Get heat_recovery_water_inlet_node_name

        Returns:
            str: the value of `heat_recovery_water_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Inlet Node Name"]

    @heat_recovery_water_inlet_node_name.setter
    def heat_recovery_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_inlet_node_name`')
        self._data["Heat Recovery Water Inlet Node Name"] = value

    @property
    def heat_recovery_water_outlet_node_name(self):
        """Get heat_recovery_water_outlet_node_name

        Returns:
            str: the value of `heat_recovery_water_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Water Outlet Node Name"]

    @heat_recovery_water_outlet_node_name.setter
    def heat_recovery_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_water_outlet_node_name`')
        self._data["Heat Recovery Water Outlet Node Name"] = value

    @property
    def nominal_stack_temperature(self):
        """Get nominal_stack_temperature

        Returns:
            float: the value of `nominal_stack_temperature` or None if not set
        """
        return self._data["Nominal Stack Temperature"]

    @nominal_stack_temperature.setter
    def nominal_stack_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Stack Temperature`

        Args:
            value (float): value for IDD Field `Nominal Stack Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_stack_temperature`'.format(value))
        self._data["Nominal Stack Temperature"] = value

    @property
    def actual_stack_temperature(self):
        """Get actual_stack_temperature

        Returns:
            float: the value of `actual_stack_temperature` or None if not set
        """
        return self._data["Actual Stack Temperature"]

    @actual_stack_temperature.setter
    def actual_stack_temperature(self, value=None):
        """  Corresponds to IDD Field `Actual Stack Temperature`

        Args:
            value (float): value for IDD Field `Actual Stack Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `actual_stack_temperature`'.format(value))
        self._data["Actual Stack Temperature"] = value

    @property
    def coefficient_r0(self):
        """Get coefficient_r0

        Returns:
            float: the value of `coefficient_r0` or None if not set
        """
        return self._data["Coefficient r0"]

    @coefficient_r0.setter
    def coefficient_r0(self, value=None):
        """  Corresponds to IDD Field `Coefficient r0`

        Args:
            value (float): value for IDD Field `Coefficient r0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_r0`'.format(value))
        self._data["Coefficient r0"] = value

    @property
    def coefficient_r1(self):
        """Get coefficient_r1

        Returns:
            float: the value of `coefficient_r1` or None if not set
        """
        return self._data["Coefficient r1"]

    @coefficient_r1.setter
    def coefficient_r1(self, value=None):
        """  Corresponds to IDD Field `Coefficient r1`

        Args:
            value (float): value for IDD Field `Coefficient r1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_r1`'.format(value))
        self._data["Coefficient r1"] = value

    @property
    def coefficient_r2(self):
        """Get coefficient_r2

        Returns:
            float: the value of `coefficient_r2` or None if not set
        """
        return self._data["Coefficient r2"]

    @coefficient_r2.setter
    def coefficient_r2(self, value=None):
        """  Corresponds to IDD Field `Coefficient r2`

        Args:
            value (float): value for IDD Field `Coefficient r2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_r2`'.format(value))
        self._data["Coefficient r2"] = value

    @property
    def coefficient_r3(self):
        """Get coefficient_r3

        Returns:
            float: the value of `coefficient_r3` or None if not set
        """
        return self._data["Coefficient r3"]

    @coefficient_r3.setter
    def coefficient_r3(self, value=None):
        """  Corresponds to IDD Field `Coefficient r3`

        Args:
            value (float): value for IDD Field `Coefficient r3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_r3`'.format(value))
        self._data["Coefficient r3"] = value

    @property
    def stack_coolant_flow_rate(self):
        """Get stack_coolant_flow_rate

        Returns:
            float: the value of `stack_coolant_flow_rate` or None if not set
        """
        return self._data["Stack Coolant Flow Rate"]

    @stack_coolant_flow_rate.setter
    def stack_coolant_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Stack Coolant Flow Rate`

        Args:
            value (float): value for IDD Field `Stack Coolant Flow Rate`
                Units: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_coolant_flow_rate`'.format(value))
        self._data["Stack Coolant Flow Rate"] = value

    @property
    def stack_cooler_ufactor_times_area_value(self):
        """Get stack_cooler_ufactor_times_area_value

        Returns:
            float: the value of `stack_cooler_ufactor_times_area_value` or None if not set
        """
        return self._data["Stack Cooler U-Factor Times Area Value"]

    @stack_cooler_ufactor_times_area_value.setter
    def stack_cooler_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `Stack Cooler U-Factor Times Area Value`

        Args:
            value (float): value for IDD Field `Stack Cooler U-Factor Times Area Value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cooler_ufactor_times_area_value`'.format(value))
        self._data["Stack Cooler U-Factor Times Area Value"] = value

    @property
    def fscogen_adjustment_factor(self):
        """Get fscogen_adjustment_factor

        Returns:
            float: the value of `fscogen_adjustment_factor` or None if not set
        """
        return self._data["Fs-cogen Adjustment Factor"]

    @fscogen_adjustment_factor.setter
    def fscogen_adjustment_factor(self, value=None):
        """  Corresponds to IDD Field `Fs-cogen Adjustment Factor`

        Args:
            value (float): value for IDD Field `Fs-cogen Adjustment Factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fscogen_adjustment_factor`'.format(value))
        self._data["Fs-cogen Adjustment Factor"] = value

    @property
    def stack_cogeneration_exchanger_area(self):
        """Get stack_cogeneration_exchanger_area

        Returns:
            float: the value of `stack_cogeneration_exchanger_area` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Area"]

    @stack_cogeneration_exchanger_area.setter
    def stack_cogeneration_exchanger_area(self, value=None):
        """  Corresponds to IDD Field `Stack Cogeneration Exchanger Area`

        Args:
            value (float): value for IDD Field `Stack Cogeneration Exchanger Area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cogeneration_exchanger_area`'.format(value))
        self._data["Stack Cogeneration Exchanger Area"] = value

    @property
    def stack_cogeneration_exchanger_nominal_flow_rate(self):
        """Get stack_cogeneration_exchanger_nominal_flow_rate

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_flow_rate` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Flow Rate"]

    @stack_cogeneration_exchanger_nominal_flow_rate.setter
    def stack_cogeneration_exchanger_nominal_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Stack Cogeneration Exchanger Nominal Flow Rate`

        Args:
            value (float): value for IDD Field `Stack Cogeneration Exchanger Nominal Flow Rate`
                Units: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cogeneration_exchanger_nominal_flow_rate`'.format(value))
        self._data["Stack Cogeneration Exchanger Nominal Flow Rate"] = value

    @property
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient(self):
        """Get stack_cogeneration_exchanger_nominal_heat_transfer_coefficient

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"]

    @stack_cogeneration_exchanger_nominal_heat_transfer_coefficient.setter
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient`

        Args:
            value (float): value for IDD Field `Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient`
                Units: W/m2-K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient`'.format(value))
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient"] = value

    @property
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent(self):
        """Get stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent

        Returns:
            float: the value of `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent` or None if not set
        """
        return self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"]

    @stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent.setter
    def stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent(self, value=None):
        """  Corresponds to IDD Field `Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent`

        Args:
            value (float): value for IDD Field `Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cogeneration_exchanger_nominal_heat_transfer_coefficient_exponent`'.format(value))
        self._data["Stack Cogeneration Exchanger Nominal Heat Transfer Coefficient Exponent"] = value

    @property
    def stack_cooler_pump_power(self):
        """Get stack_cooler_pump_power

        Returns:
            float: the value of `stack_cooler_pump_power` or None if not set
        """
        return self._data["Stack Cooler Pump Power"]

    @stack_cooler_pump_power.setter
    def stack_cooler_pump_power(self, value=None):
        """  Corresponds to IDD Field `Stack Cooler Pump Power`

        Args:
            value (float): value for IDD Field `Stack Cooler Pump Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cooler_pump_power`'.format(value))
        self._data["Stack Cooler Pump Power"] = value

    @property
    def stack_cooler_pump_heat_loss_fraction(self):
        """Get stack_cooler_pump_heat_loss_fraction

        Returns:
            float: the value of `stack_cooler_pump_heat_loss_fraction` or None if not set
        """
        return self._data["Stack Cooler Pump Heat Loss Fraction"]

    @stack_cooler_pump_heat_loss_fraction.setter
    def stack_cooler_pump_heat_loss_fraction(self, value=None):
        """  Corresponds to IDD Field `Stack Cooler Pump Heat Loss Fraction`

        Args:
            value (float): value for IDD Field `Stack Cooler Pump Heat Loss Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_cooler_pump_heat_loss_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `stack_cooler_pump_heat_loss_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `stack_cooler_pump_heat_loss_fraction`')
        self._data["Stack Cooler Pump Heat Loss Fraction"] = value

    @property
    def stack_air_cooler_fan_coefficient_f0(self):
        """Get stack_air_cooler_fan_coefficient_f0

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f0` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f0"]

    @stack_air_cooler_fan_coefficient_f0.setter
    def stack_air_cooler_fan_coefficient_f0(self, value=None):
        """  Corresponds to IDD Field `Stack Air Cooler Fan Coefficient f0`

        Args:
            value (float): value for IDD Field `Stack Air Cooler Fan Coefficient f0`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_air_cooler_fan_coefficient_f0`'.format(value))
        self._data["Stack Air Cooler Fan Coefficient f0"] = value

    @property
    def stack_air_cooler_fan_coefficient_f1(self):
        """Get stack_air_cooler_fan_coefficient_f1

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f1` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f1"]

    @stack_air_cooler_fan_coefficient_f1.setter
    def stack_air_cooler_fan_coefficient_f1(self, value=None):
        """  Corresponds to IDD Field `Stack Air Cooler Fan Coefficient f1`

        Args:
            value (float): value for IDD Field `Stack Air Cooler Fan Coefficient f1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_air_cooler_fan_coefficient_f1`'.format(value))
        self._data["Stack Air Cooler Fan Coefficient f1"] = value

    @property
    def stack_air_cooler_fan_coefficient_f2(self):
        """Get stack_air_cooler_fan_coefficient_f2

        Returns:
            float: the value of `stack_air_cooler_fan_coefficient_f2` or None if not set
        """
        return self._data["Stack Air Cooler Fan Coefficient f2"]

    @stack_air_cooler_fan_coefficient_f2.setter
    def stack_air_cooler_fan_coefficient_f2(self, value=None):
        """  Corresponds to IDD Field `Stack Air Cooler Fan Coefficient f2`

        Args:
            value (float): value for IDD Field `Stack Air Cooler Fan Coefficient f2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `stack_air_cooler_fan_coefficient_f2`'.format(value))
        self._data["Stack Air Cooler Fan Coefficient f2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorMicroChp(object):
    """ Corresponds to IDD object `Generator:MicroCHP`
        Small-scale combined heat and power (micro CHP) electric generator using the model
        developed by IEA/ECBCS Annex 42  see www.cogen-sim.net. The model was developed
        for both internal combustion and Stirling cycle
        engines, but might be used for other types of residential CHP devices.
    """
    internal_name = "Generator:MicroCHP"
    field_count = 9
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:MicroCHP`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Performance Parameters Name"] = None
        self._data["Zone Name"] = None
        self._data["Cooling Water Inlet Node Name"] = None
        self._data["Cooling Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Generator Fuel Supply Name"] = None
        self._data["Availability Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.performance_parameters_name = None
        else:
            self.performance_parameters_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_inlet_node_name = None
        else:
            self.cooling_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_outlet_node_name = None
        else:
            self.cooling_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_fuel_supply_name = None
        else:
            self.generator_fuel_supply_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def performance_parameters_name(self):
        """Get performance_parameters_name

        Returns:
            str: the value of `performance_parameters_name` or None if not set
        """
        return self._data["Performance Parameters Name"]

    @performance_parameters_name.setter
    def performance_parameters_name(self, value=None):
        """  Corresponds to IDD Field `Performance Parameters Name`
        Enter the name of a Generator:MicroCHP:NonNormalizedParameters object.

        Args:
            value (str): value for IDD Field `Performance Parameters Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `performance_parameters_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_parameters_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `performance_parameters_name`')
        self._data["Performance Parameters Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def cooling_water_inlet_node_name(self):
        """Get cooling_water_inlet_node_name

        Returns:
            str: the value of `cooling_water_inlet_node_name` or None if not set
        """
        return self._data["Cooling Water Inlet Node Name"]

    @cooling_water_inlet_node_name.setter
    def cooling_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_inlet_node_name`')
        self._data["Cooling Water Inlet Node Name"] = value

    @property
    def cooling_water_outlet_node_name(self):
        """Get cooling_water_outlet_node_name

        Returns:
            str: the value of `cooling_water_outlet_node_name` or None if not set
        """
        return self._data["Cooling Water Outlet Node Name"]

    @cooling_water_outlet_node_name.setter
    def cooling_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_outlet_node_name`')
        self._data["Cooling Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def generator_fuel_supply_name(self):
        """Get generator_fuel_supply_name

        Returns:
            str: the value of `generator_fuel_supply_name` or None if not set
        """
        return self._data["Generator Fuel Supply Name"]

    @generator_fuel_supply_name.setter
    def generator_fuel_supply_name(self, value=None):
        """  Corresponds to IDD Field `Generator Fuel Supply Name`
        Enter the name of a Generator:FuelSupply object.

        Args:
            value (str): value for IDD Field `Generator Fuel Supply Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_fuel_supply_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_fuel_supply_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_fuel_supply_name`')
        self._data["Generator Fuel Supply Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorMicroChpNonNormalizedParameters(object):
    """ Corresponds to IDD object `Generator:MicroCHP:NonNormalizedParameters`
        This object is referenced by a Generator:MicroCHP object and provides the
        non-normalized parameters for the MicroCHP generator model.
    """
    internal_name = "Generator:MicroCHP:NonNormalizedParameters"
    field_count = 27
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:MicroCHP:NonNormalizedParameters`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Maximum Electric Power"] = None
        self._data["Minimum Electric Power"] = None
        self._data["Minimum Cooling Water Flow Rate"] = None
        self._data["Maximum Cooling Water Temperature"] = None
        self._data["Electrical Efficiency Curve Name"] = None
        self._data["Thermal Efficiency Curve Name"] = None
        self._data["Cooling Water Flow Rate Mode"] = None
        self._data["Cooling Water Flow Rate Curve Name"] = None
        self._data["Air Flow Rate Curve Name"] = None
        self._data["Maximum Net Electrical Power Rate of Change"] = None
        self._data["Maximum Fuel Flow Rate of Change"] = None
        self._data["Heat Exchanger U-Factor Times Area Value"] = None
        self._data["Skin Loss U-Factor Times Area Value"] = None
        self._data["Skin Loss Radiative Fraction"] = None
        self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"] = None
        self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"] = None
        self._data["Standby Power"] = None
        self._data["Warm Up Mode"] = None
        self._data["Warm Up Fuel Flow Rate Coefficient"] = None
        self._data["Nominal Engine Operating Temperature"] = None
        self._data["Warm Up Power Coefficient"] = None
        self._data["Warm Up Fuel Flow Rate Limit Ratio"] = None
        self._data["Warm Up Delay Time"] = None
        self._data["Cool Down Power"] = None
        self._data["Cool Down Delay Time"] = None
        self._data["Restart Mode"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_electric_power = None
        else:
            self.maximum_electric_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_electric_power = None
        else:
            self.minimum_electric_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_cooling_water_flow_rate = None
        else:
            self.minimum_cooling_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_cooling_water_temperature = None
        else:
            self.maximum_cooling_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_efficiency_curve_name = None
        else:
            self.electrical_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.thermal_efficiency_curve_name = None
        else:
            self.thermal_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_flow_rate_mode = None
        else:
            self.cooling_water_flow_rate_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_water_flow_rate_curve_name = None
        else:
            self.cooling_water_flow_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_flow_rate_curve_name = None
        else:
            self.air_flow_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_net_electrical_power_rate_of_change = None
        else:
            self.maximum_net_electrical_power_rate_of_change = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_fuel_flow_rate_of_change = None
        else:
            self.maximum_fuel_flow_rate_of_change = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_ufactor_times_area_value = None
        else:
            self.heat_exchanger_ufactor_times_area_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_ufactor_times_area_value = None
        else:
            self.skin_loss_ufactor_times_area_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.skin_loss_radiative_fraction = None
        else:
            self.skin_loss_radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator = None
        else:
            self.aggregated_thermal_mass_of_energy_conversion_portion_of_generator = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator = None
        else:
            self.aggregated_thermal_mass_of_heat_recovery_portion_of_generator = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.warm_up_mode = None
        else:
            self.warm_up_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.warm_up_fuel_flow_rate_coefficient = None
        else:
            self.warm_up_fuel_flow_rate_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_engine_operating_temperature = None
        else:
            self.nominal_engine_operating_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.warm_up_power_coefficient = None
        else:
            self.warm_up_power_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.warm_up_fuel_flow_rate_limit_ratio = None
        else:
            self.warm_up_fuel_flow_rate_limit_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.warm_up_delay_time = None
        else:
            self.warm_up_delay_time = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cool_down_power = None
        else:
            self.cool_down_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cool_down_delay_time = None
        else:
            self.cool_down_delay_time = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.restart_mode = None
        else:
            self.restart_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def maximum_electric_power(self):
        """Get maximum_electric_power

        Returns:
            float: the value of `maximum_electric_power` or None if not set
        """
        return self._data["Maximum Electric Power"]

    @maximum_electric_power.setter
    def maximum_electric_power(self, value=None):
        """  Corresponds to IDD Field `Maximum Electric Power`

        Args:
            value (float): value for IDD Field `Maximum Electric Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_electric_power`'.format(value))
        self._data["Maximum Electric Power"] = value

    @property
    def minimum_electric_power(self):
        """Get minimum_electric_power

        Returns:
            float: the value of `minimum_electric_power` or None if not set
        """
        return self._data["Minimum Electric Power"]

    @minimum_electric_power.setter
    def minimum_electric_power(self, value=None):
        """  Corresponds to IDD Field `Minimum Electric Power`

        Args:
            value (float): value for IDD Field `Minimum Electric Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_electric_power`'.format(value))
        self._data["Minimum Electric Power"] = value

    @property
    def minimum_cooling_water_flow_rate(self):
        """Get minimum_cooling_water_flow_rate

        Returns:
            float: the value of `minimum_cooling_water_flow_rate` or None if not set
        """
        return self._data["Minimum Cooling Water Flow Rate"]

    @minimum_cooling_water_flow_rate.setter
    def minimum_cooling_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Minimum Cooling Water Flow Rate`

        Args:
            value (float): value for IDD Field `Minimum Cooling Water Flow Rate`
                Units: kg/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_cooling_water_flow_rate`'.format(value))
        self._data["Minimum Cooling Water Flow Rate"] = value

    @property
    def maximum_cooling_water_temperature(self):
        """Get maximum_cooling_water_temperature

        Returns:
            float: the value of `maximum_cooling_water_temperature` or None if not set
        """
        return self._data["Maximum Cooling Water Temperature"]

    @maximum_cooling_water_temperature.setter
    def maximum_cooling_water_temperature(self, value=None):
        """  Corresponds to IDD Field `Maximum Cooling Water Temperature`

        Args:
            value (float): value for IDD Field `Maximum Cooling Water Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_cooling_water_temperature`'.format(value))
        self._data["Maximum Cooling Water Temperature"] = value

    @property
    def electrical_efficiency_curve_name(self):
        """Get electrical_efficiency_curve_name

        Returns:
            str: the value of `electrical_efficiency_curve_name` or None if not set
        """
        return self._data["Electrical Efficiency Curve Name"]

    @electrical_efficiency_curve_name.setter
    def electrical_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electrical Efficiency Curve Name`
        TriQuadratic
        Table:MultiVariableLookup object can also be used

        Args:
            value (str): value for IDD Field `Electrical Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_efficiency_curve_name`')
        self._data["Electrical Efficiency Curve Name"] = value

    @property
    def thermal_efficiency_curve_name(self):
        """Get thermal_efficiency_curve_name

        Returns:
            str: the value of `thermal_efficiency_curve_name` or None if not set
        """
        return self._data["Thermal Efficiency Curve Name"]

    @thermal_efficiency_curve_name.setter
    def thermal_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Thermal Efficiency Curve Name`
        TriQuadratic
        Table:MultiVariableLookup object can also be used

        Args:
            value (str): value for IDD Field `Thermal Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `thermal_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `thermal_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `thermal_efficiency_curve_name`')
        self._data["Thermal Efficiency Curve Name"] = value

    @property
    def cooling_water_flow_rate_mode(self):
        """Get cooling_water_flow_rate_mode

        Returns:
            str: the value of `cooling_water_flow_rate_mode` or None if not set
        """
        return self._data["Cooling Water Flow Rate Mode"]

    @cooling_water_flow_rate_mode.setter
    def cooling_water_flow_rate_mode(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Flow Rate Mode`

        Args:
            value (str): value for IDD Field `Cooling Water Flow Rate Mode`
                Accepted values are:
                      - PlantControl
                      - InternalControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_flow_rate_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_flow_rate_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_flow_rate_mode`')
            vals = {}
            vals["plantcontrol"] = "PlantControl"
            vals["internalcontrol"] = "InternalControl"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_water_flow_rate_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `cooling_water_flow_rate_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Cooling Water Flow Rate Mode"] = value

    @property
    def cooling_water_flow_rate_curve_name(self):
        """Get cooling_water_flow_rate_curve_name

        Returns:
            str: the value of `cooling_water_flow_rate_curve_name` or None if not set
        """
        return self._data["Cooling Water Flow Rate Curve Name"]

    @cooling_water_flow_rate_curve_name.setter
    def cooling_water_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Water Flow Rate Curve Name`
        Table:TwoIndependentVariables object can also be used

        Args:
            value (str): value for IDD Field `Cooling Water Flow Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_water_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_water_flow_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_water_flow_rate_curve_name`')
        self._data["Cooling Water Flow Rate Curve Name"] = value

    @property
    def air_flow_rate_curve_name(self):
        """Get air_flow_rate_curve_name

        Returns:
            str: the value of `air_flow_rate_curve_name` or None if not set
        """
        return self._data["Air Flow Rate Curve Name"]

    @air_flow_rate_curve_name.setter
    def air_flow_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Air Flow Rate Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Air Flow Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `air_flow_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_flow_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_flow_rate_curve_name`')
        self._data["Air Flow Rate Curve Name"] = value

    @property
    def maximum_net_electrical_power_rate_of_change(self):
        """Get maximum_net_electrical_power_rate_of_change

        Returns:
            float: the value of `maximum_net_electrical_power_rate_of_change` or None if not set
        """
        return self._data["Maximum Net Electrical Power Rate of Change"]

    @maximum_net_electrical_power_rate_of_change.setter
    def maximum_net_electrical_power_rate_of_change(self, value=None):
        """  Corresponds to IDD Field `Maximum Net Electrical Power Rate of Change`

        Args:
            value (float): value for IDD Field `Maximum Net Electrical Power Rate of Change`
                Units: W/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_net_electrical_power_rate_of_change`'.format(value))
        self._data["Maximum Net Electrical Power Rate of Change"] = value

    @property
    def maximum_fuel_flow_rate_of_change(self):
        """Get maximum_fuel_flow_rate_of_change

        Returns:
            float: the value of `maximum_fuel_flow_rate_of_change` or None if not set
        """
        return self._data["Maximum Fuel Flow Rate of Change"]

    @maximum_fuel_flow_rate_of_change.setter
    def maximum_fuel_flow_rate_of_change(self, value=None):
        """  Corresponds to IDD Field `Maximum Fuel Flow Rate of Change`

        Args:
            value (float): value for IDD Field `Maximum Fuel Flow Rate of Change`
                Units: kg/s2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_fuel_flow_rate_of_change`'.format(value))
        self._data["Maximum Fuel Flow Rate of Change"] = value

    @property
    def heat_exchanger_ufactor_times_area_value(self):
        """Get heat_exchanger_ufactor_times_area_value

        Returns:
            float: the value of `heat_exchanger_ufactor_times_area_value` or None if not set
        """
        return self._data["Heat Exchanger U-Factor Times Area Value"]

    @heat_exchanger_ufactor_times_area_value.setter
    def heat_exchanger_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger U-Factor Times Area Value`

        Args:
            value (float): value for IDD Field `Heat Exchanger U-Factor Times Area Value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heat_exchanger_ufactor_times_area_value`'.format(value))
        self._data["Heat Exchanger U-Factor Times Area Value"] = value

    @property
    def skin_loss_ufactor_times_area_value(self):
        """Get skin_loss_ufactor_times_area_value

        Returns:
            float: the value of `skin_loss_ufactor_times_area_value` or None if not set
        """
        return self._data["Skin Loss U-Factor Times Area Value"]

    @skin_loss_ufactor_times_area_value.setter
    def skin_loss_ufactor_times_area_value(self, value=None):
        """  Corresponds to IDD Field `Skin Loss U-Factor Times Area Value`

        Args:
            value (float): value for IDD Field `Skin Loss U-Factor Times Area Value`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `skin_loss_ufactor_times_area_value`'.format(value))
        self._data["Skin Loss U-Factor Times Area Value"] = value

    @property
    def skin_loss_radiative_fraction(self):
        """Get skin_loss_radiative_fraction

        Returns:
            float: the value of `skin_loss_radiative_fraction` or None if not set
        """
        return self._data["Skin Loss Radiative Fraction"]

    @skin_loss_radiative_fraction.setter
    def skin_loss_radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `Skin Loss Radiative Fraction`

        Args:
            value (float): value for IDD Field `Skin Loss Radiative Fraction`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `skin_loss_radiative_fraction`'.format(value))
        self._data["Skin Loss Radiative Fraction"] = value

    @property
    def aggregated_thermal_mass_of_energy_conversion_portion_of_generator(self):
        """Get aggregated_thermal_mass_of_energy_conversion_portion_of_generator

        Returns:
            float: the value of `aggregated_thermal_mass_of_energy_conversion_portion_of_generator` or None if not set
        """
        return self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"]

    @aggregated_thermal_mass_of_energy_conversion_portion_of_generator.setter
    def aggregated_thermal_mass_of_energy_conversion_portion_of_generator(self, value=None):
        """  Corresponds to IDD Field `Aggregated Thermal Mass of Energy Conversion Portion of Generator`

        Args:
            value (float): value for IDD Field `Aggregated Thermal Mass of Energy Conversion Portion of Generator`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `aggregated_thermal_mass_of_energy_conversion_portion_of_generator`')
        self._data["Aggregated Thermal Mass of Energy Conversion Portion of Generator"] = value

    @property
    def aggregated_thermal_mass_of_heat_recovery_portion_of_generator(self):
        """Get aggregated_thermal_mass_of_heat_recovery_portion_of_generator

        Returns:
            float: the value of `aggregated_thermal_mass_of_heat_recovery_portion_of_generator` or None if not set
        """
        return self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"]

    @aggregated_thermal_mass_of_heat_recovery_portion_of_generator.setter
    def aggregated_thermal_mass_of_heat_recovery_portion_of_generator(self, value=None):
        """  Corresponds to IDD Field `Aggregated Thermal Mass of Heat Recovery Portion of Generator`

        Args:
            value (float): value for IDD Field `Aggregated Thermal Mass of Heat Recovery Portion of Generator`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `aggregated_thermal_mass_of_heat_recovery_portion_of_generator`')
        self._data["Aggregated Thermal Mass of Heat Recovery Portion of Generator"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=None):
        """  Corresponds to IDD Field `Standby Power`

        Args:
            value (float): value for IDD Field `Standby Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `standby_power`'.format(value))
        self._data["Standby Power"] = value

    @property
    def warm_up_mode(self):
        """Get warm_up_mode

        Returns:
            str: the value of `warm_up_mode` or None if not set
        """
        return self._data["Warm Up Mode"]

    @warm_up_mode.setter
    def warm_up_mode(self, value=None):
        """  Corresponds to IDD Field `Warm Up Mode`
        Stirling engines use Nominal Engine Temperature
        Internal combustion engines use Time Delay

        Args:
            value (str): value for IDD Field `Warm Up Mode`
                Accepted values are:
                      - NominalEngineTemperature
                      - TimeDelay
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `warm_up_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `warm_up_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `warm_up_mode`')
            vals = {}
            vals["nominalenginetemperature"] = "NominalEngineTemperature"
            vals["timedelay"] = "TimeDelay"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `warm_up_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `warm_up_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Warm Up Mode"] = value

    @property
    def warm_up_fuel_flow_rate_coefficient(self):
        """Get warm_up_fuel_flow_rate_coefficient

        Returns:
            float: the value of `warm_up_fuel_flow_rate_coefficient` or None if not set
        """
        return self._data["Warm Up Fuel Flow Rate Coefficient"]

    @warm_up_fuel_flow_rate_coefficient.setter
    def warm_up_fuel_flow_rate_coefficient(self, value=None):
        """  Corresponds to IDD Field `Warm Up Fuel Flow Rate Coefficient`

        Args:
            value (float): value for IDD Field `Warm Up Fuel Flow Rate Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `warm_up_fuel_flow_rate_coefficient`'.format(value))
        self._data["Warm Up Fuel Flow Rate Coefficient"] = value

    @property
    def nominal_engine_operating_temperature(self):
        """Get nominal_engine_operating_temperature

        Returns:
            float: the value of `nominal_engine_operating_temperature` or None if not set
        """
        return self._data["Nominal Engine Operating Temperature"]

    @nominal_engine_operating_temperature.setter
    def nominal_engine_operating_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Engine Operating Temperature`

        Args:
            value (float): value for IDD Field `Nominal Engine Operating Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_engine_operating_temperature`'.format(value))
        self._data["Nominal Engine Operating Temperature"] = value

    @property
    def warm_up_power_coefficient(self):
        """Get warm_up_power_coefficient

        Returns:
            float: the value of `warm_up_power_coefficient` or None if not set
        """
        return self._data["Warm Up Power Coefficient"]

    @warm_up_power_coefficient.setter
    def warm_up_power_coefficient(self, value=None):
        """  Corresponds to IDD Field `Warm Up Power Coefficient`

        Args:
            value (float): value for IDD Field `Warm Up Power Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `warm_up_power_coefficient`'.format(value))
        self._data["Warm Up Power Coefficient"] = value

    @property
    def warm_up_fuel_flow_rate_limit_ratio(self):
        """Get warm_up_fuel_flow_rate_limit_ratio

        Returns:
            float: the value of `warm_up_fuel_flow_rate_limit_ratio` or None if not set
        """
        return self._data["Warm Up Fuel Flow Rate Limit Ratio"]

    @warm_up_fuel_flow_rate_limit_ratio.setter
    def warm_up_fuel_flow_rate_limit_ratio(self, value=None):
        """  Corresponds to IDD Field `Warm Up Fuel Flow Rate Limit Ratio`

        Args:
            value (float): value for IDD Field `Warm Up Fuel Flow Rate Limit Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `warm_up_fuel_flow_rate_limit_ratio`'.format(value))
        self._data["Warm Up Fuel Flow Rate Limit Ratio"] = value

    @property
    def warm_up_delay_time(self):
        """Get warm_up_delay_time

        Returns:
            float: the value of `warm_up_delay_time` or None if not set
        """
        return self._data["Warm Up Delay Time"]

    @warm_up_delay_time.setter
    def warm_up_delay_time(self, value=None):
        """  Corresponds to IDD Field `Warm Up Delay Time`

        Args:
            value (float): value for IDD Field `Warm Up Delay Time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `warm_up_delay_time`'.format(value))
        self._data["Warm Up Delay Time"] = value

    @property
    def cool_down_power(self):
        """Get cool_down_power

        Returns:
            float: the value of `cool_down_power` or None if not set
        """
        return self._data["Cool Down Power"]

    @cool_down_power.setter
    def cool_down_power(self, value=None):
        """  Corresponds to IDD Field `Cool Down Power`

        Args:
            value (float): value for IDD Field `Cool Down Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cool_down_power`'.format(value))
        self._data["Cool Down Power"] = value

    @property
    def cool_down_delay_time(self):
        """Get cool_down_delay_time

        Returns:
            float: the value of `cool_down_delay_time` or None if not set
        """
        return self._data["Cool Down Delay Time"]

    @cool_down_delay_time.setter
    def cool_down_delay_time(self, value=None):
        """  Corresponds to IDD Field `Cool Down Delay Time`

        Args:
            value (float): value for IDD Field `Cool Down Delay Time`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cool_down_delay_time`'.format(value))
        self._data["Cool Down Delay Time"] = value

    @property
    def restart_mode(self):
        """Get restart_mode

        Returns:
            str: the value of `restart_mode` or None if not set
        """
        return self._data["Restart Mode"]

    @restart_mode.setter
    def restart_mode(self, value=None):
        """  Corresponds to IDD Field `Restart Mode`

        Args:
            value (str): value for IDD Field `Restart Mode`
                Accepted values are:
                      - MandatoryCoolDown
                      - OptionalCoolDown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `restart_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `restart_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `restart_mode`')
            vals = {}
            vals["mandatorycooldown"] = "MandatoryCoolDown"
            vals["optionalcooldown"] = "OptionalCoolDown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `restart_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `restart_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Restart Mode"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorFuelSupply(object):
    """ Corresponds to IDD object `Generator:FuelSupply`
        Used only with Generator:FuelCell and Generator:MicroCHP
    """
    internal_name = "Generator:FuelSupply"
    field_count = 36
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:FuelSupply`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Temperature Modeling Mode"] = None
        self._data["Fuel Temperature Reference Node Name"] = None
        self._data["Fuel Temperature Schedule Name"] = None
        self._data["Compressor Power Function of Fuel Rate Curve Name"] = None
        self._data["Compressor Heat Loss Factor"] = None
        self._data["Fuel Type"] = None
        self._data["Liquid Generic Fuel Lower Heating Value"] = None
        self._data["Liquid Generic Fuel Higher Heating Value"] = None
        self._data["Liquid Generic Fuel Molecular Weight"] = None
        self._data["Liquid Generic Fuel CO2 Emission Factor"] = None
        self._data["Number of Constituents in Gaseous Constituent Fuel Supply"] = None
        self._data["Constituent 1 Name"] = None
        self._data["Constituent 1 Molar Fraction"] = None
        self._data["Constituent 2 Name"] = None
        self._data["Constituent 2 Molar Fraction"] = None
        self._data["Constituent 3 Name"] = None
        self._data["Constituent 3 Molar Fraction"] = None
        self._data["Constituent 4 Name"] = None
        self._data["Constituent 4 Molar Fraction"] = None
        self._data["Constituent 5 Name"] = None
        self._data["Constituent 5 Molar Fraction"] = None
        self._data["Constituent 6 Name"] = None
        self._data["Constituent 6 Molar Fraction"] = None
        self._data["Constituent 7 Name"] = None
        self._data["Constituent 7 Molar Fraction"] = None
        self._data["Constituent 8 Name"] = None
        self._data["Constituent 8 Molar Fraction"] = None
        self._data["Constituent 9 Name"] = None
        self._data["Constituent 9 Molar Fraction"] = None
        self._data["Constituent 10 Name"] = None
        self._data["Constituent 10 Molar Fraction"] = None
        self._data["Constituent 11 Name"] = None
        self._data["Constituent 11 Molar Fraction"] = None
        self._data["Constituent 12 Name"] = None
        self._data["Constituent 12 Molar Fraction"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_temperature_modeling_mode = None
        else:
            self.fuel_temperature_modeling_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_temperature_reference_node_name = None
        else:
            self.fuel_temperature_reference_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_temperature_schedule_name = None
        else:
            self.fuel_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_power_function_of_fuel_rate_curve_name = None
        else:
            self.compressor_power_function_of_fuel_rate_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_heat_loss_factor = None
        else:
            self.compressor_heat_loss_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_lower_heating_value = None
        else:
            self.liquid_generic_fuel_lower_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_higher_heating_value = None
        else:
            self.liquid_generic_fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_molecular_weight = None
        else:
            self.liquid_generic_fuel_molecular_weight = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.liquid_generic_fuel_co2_emission_factor = None
        else:
            self.liquid_generic_fuel_co2_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_constituents_in_gaseous_constituent_fuel_supply = None
        else:
            self.number_of_constituents_in_gaseous_constituent_fuel_supply = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_1_name = None
        else:
            self.constituent_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_1_molar_fraction = None
        else:
            self.constituent_1_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_2_name = None
        else:
            self.constituent_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_2_molar_fraction = None
        else:
            self.constituent_2_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_3_name = None
        else:
            self.constituent_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_3_molar_fraction = None
        else:
            self.constituent_3_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_4_name = None
        else:
            self.constituent_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_4_molar_fraction = None
        else:
            self.constituent_4_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_5_name = None
        else:
            self.constituent_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_5_molar_fraction = None
        else:
            self.constituent_5_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_6_name = None
        else:
            self.constituent_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_6_molar_fraction = None
        else:
            self.constituent_6_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_7_name = None
        else:
            self.constituent_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_7_molar_fraction = None
        else:
            self.constituent_7_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_8_name = None
        else:
            self.constituent_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_8_molar_fraction = None
        else:
            self.constituent_8_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_9_name = None
        else:
            self.constituent_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_9_molar_fraction = None
        else:
            self.constituent_9_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_10_name = None
        else:
            self.constituent_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_10_molar_fraction = None
        else:
            self.constituent_10_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_11_name = None
        else:
            self.constituent_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_11_molar_fraction = None
        else:
            self.constituent_11_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_12_name = None
        else:
            self.constituent_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constituent_12_molar_fraction = None
        else:
            self.constituent_12_molar_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def fuel_temperature_modeling_mode(self):
        """Get fuel_temperature_modeling_mode

        Returns:
            str: the value of `fuel_temperature_modeling_mode` or None if not set
        """
        return self._data["Fuel Temperature Modeling Mode"]

    @fuel_temperature_modeling_mode.setter
    def fuel_temperature_modeling_mode(self, value=None):
        """  Corresponds to IDD Field `Fuel Temperature Modeling Mode`

        Args:
            value (str): value for IDD Field `Fuel Temperature Modeling Mode`
                Accepted values are:
                      - TemperatureFromAirNode
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_temperature_modeling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_modeling_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_temperature_modeling_mode`')
            vals = {}
            vals["temperaturefromairnode"] = "TemperatureFromAirNode"
            vals["scheduled"] = "Scheduled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_temperature_modeling_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_temperature_modeling_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Temperature Modeling Mode"] = value

    @property
    def fuel_temperature_reference_node_name(self):
        """Get fuel_temperature_reference_node_name

        Returns:
            str: the value of `fuel_temperature_reference_node_name` or None if not set
        """
        return self._data["Fuel Temperature Reference Node Name"]

    @fuel_temperature_reference_node_name.setter
    def fuel_temperature_reference_node_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Temperature Reference Node Name`

        Args:
            value (str): value for IDD Field `Fuel Temperature Reference Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_temperature_reference_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_reference_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_temperature_reference_node_name`')
        self._data["Fuel Temperature Reference Node Name"] = value

    @property
    def fuel_temperature_schedule_name(self):
        """Get fuel_temperature_schedule_name

        Returns:
            str: the value of `fuel_temperature_schedule_name` or None if not set
        """
        return self._data["Fuel Temperature Schedule Name"]

    @fuel_temperature_schedule_name.setter
    def fuel_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Temperature Schedule Name`

        Args:
            value (str): value for IDD Field `Fuel Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_temperature_schedule_name`')
        self._data["Fuel Temperature Schedule Name"] = value

    @property
    def compressor_power_function_of_fuel_rate_curve_name(self):
        """Get compressor_power_function_of_fuel_rate_curve_name

        Returns:
            str: the value of `compressor_power_function_of_fuel_rate_curve_name` or None if not set
        """
        return self._data["Compressor Power Function of Fuel Rate Curve Name"]

    @compressor_power_function_of_fuel_rate_curve_name.setter
    def compressor_power_function_of_fuel_rate_curve_name(self, value=None):
        """  Corresponds to IDD Field `Compressor Power Function of Fuel Rate Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Compressor Power Function of Fuel Rate Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `compressor_power_function_of_fuel_rate_curve_name`')
        self._data["Compressor Power Function of Fuel Rate Curve Name"] = value

    @property
    def compressor_heat_loss_factor(self):
        """Get compressor_heat_loss_factor

        Returns:
            float: the value of `compressor_heat_loss_factor` or None if not set
        """
        return self._data["Compressor Heat Loss Factor"]

    @compressor_heat_loss_factor.setter
    def compressor_heat_loss_factor(self, value=None):
        """  Corresponds to IDD Field `Compressor Heat Loss Factor`

        Args:
            value (float): value for IDD Field `Compressor Heat Loss Factor`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `compressor_heat_loss_factor`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `compressor_heat_loss_factor`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `compressor_heat_loss_factor`')
        self._data["Compressor Heat Loss Factor"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - GaseousConstituents
                      - LiquidGeneric
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["gaseousconstituents"] = "GaseousConstituents"
            vals["liquidgeneric"] = "LiquidGeneric"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def liquid_generic_fuel_lower_heating_value(self):
        """Get liquid_generic_fuel_lower_heating_value

        Returns:
            float: the value of `liquid_generic_fuel_lower_heating_value` or None if not set
        """
        return self._data["Liquid Generic Fuel Lower Heating Value"]

    @liquid_generic_fuel_lower_heating_value.setter
    def liquid_generic_fuel_lower_heating_value(self, value=None):
        """  Corresponds to IDD Field `Liquid Generic Fuel Lower Heating Value`

        Args:
            value (float): value for IDD Field `Liquid Generic Fuel Lower Heating Value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `liquid_generic_fuel_lower_heating_value`'.format(value))
        self._data["Liquid Generic Fuel Lower Heating Value"] = value

    @property
    def liquid_generic_fuel_higher_heating_value(self):
        """Get liquid_generic_fuel_higher_heating_value

        Returns:
            float: the value of `liquid_generic_fuel_higher_heating_value` or None if not set
        """
        return self._data["Liquid Generic Fuel Higher Heating Value"]

    @liquid_generic_fuel_higher_heating_value.setter
    def liquid_generic_fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `Liquid Generic Fuel Higher Heating Value`

        Args:
            value (float): value for IDD Field `Liquid Generic Fuel Higher Heating Value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `liquid_generic_fuel_higher_heating_value`'.format(value))
        self._data["Liquid Generic Fuel Higher Heating Value"] = value

    @property
    def liquid_generic_fuel_molecular_weight(self):
        """Get liquid_generic_fuel_molecular_weight

        Returns:
            float: the value of `liquid_generic_fuel_molecular_weight` or None if not set
        """
        return self._data["Liquid Generic Fuel Molecular Weight"]

    @liquid_generic_fuel_molecular_weight.setter
    def liquid_generic_fuel_molecular_weight(self, value=None):
        """  Corresponds to IDD Field `Liquid Generic Fuel Molecular Weight`

        Args:
            value (float): value for IDD Field `Liquid Generic Fuel Molecular Weight`
                Units: g/mol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `liquid_generic_fuel_molecular_weight`'.format(value))
        self._data["Liquid Generic Fuel Molecular Weight"] = value

    @property
    def liquid_generic_fuel_co2_emission_factor(self):
        """Get liquid_generic_fuel_co2_emission_factor

        Returns:
            float: the value of `liquid_generic_fuel_co2_emission_factor` or None if not set
        """
        return self._data["Liquid Generic Fuel CO2 Emission Factor"]

    @liquid_generic_fuel_co2_emission_factor.setter
    def liquid_generic_fuel_co2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `Liquid Generic Fuel CO2 Emission Factor`

        Args:
            value (float): value for IDD Field `Liquid Generic Fuel CO2 Emission Factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `liquid_generic_fuel_co2_emission_factor`'.format(value))
        self._data["Liquid Generic Fuel CO2 Emission Factor"] = value

    @property
    def number_of_constituents_in_gaseous_constituent_fuel_supply(self):
        """Get number_of_constituents_in_gaseous_constituent_fuel_supply

        Returns:
            float: the value of `number_of_constituents_in_gaseous_constituent_fuel_supply` or None if not set
        """
        return self._data["Number of Constituents in Gaseous Constituent Fuel Supply"]

    @number_of_constituents_in_gaseous_constituent_fuel_supply.setter
    def number_of_constituents_in_gaseous_constituent_fuel_supply(self, value=None):
        """  Corresponds to IDD Field `Number of Constituents in Gaseous Constituent Fuel Supply`

        Args:
            value (float): value for IDD Field `Number of Constituents in Gaseous Constituent Fuel Supply`
                value >= 0.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `number_of_constituents_in_gaseous_constituent_fuel_supply`')
        self._data["Number of Constituents in Gaseous Constituent Fuel Supply"] = value

    @property
    def constituent_1_name(self):
        """Get constituent_1_name

        Returns:
            str: the value of `constituent_1_name` or None if not set
        """
        return self._data["Constituent 1 Name"]

    @constituent_1_name.setter
    def constituent_1_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 1 Name`

        Args:
            value (str): value for IDD Field `Constituent 1 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_1_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_1_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_1_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 1 Name"] = value

    @property
    def constituent_1_molar_fraction(self):
        """Get constituent_1_molar_fraction

        Returns:
            float: the value of `constituent_1_molar_fraction` or None if not set
        """
        return self._data["Constituent 1 Molar Fraction"]

    @constituent_1_molar_fraction.setter
    def constituent_1_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 1 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 1 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_1_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_1_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_1_molar_fraction`')
        self._data["Constituent 1 Molar Fraction"] = value

    @property
    def constituent_2_name(self):
        """Get constituent_2_name

        Returns:
            str: the value of `constituent_2_name` or None if not set
        """
        return self._data["Constituent 2 Name"]

    @constituent_2_name.setter
    def constituent_2_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 2 Name`

        Args:
            value (str): value for IDD Field `Constituent 2 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_2_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_2_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_2_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 2 Name"] = value

    @property
    def constituent_2_molar_fraction(self):
        """Get constituent_2_molar_fraction

        Returns:
            float: the value of `constituent_2_molar_fraction` or None if not set
        """
        return self._data["Constituent 2 Molar Fraction"]

    @constituent_2_molar_fraction.setter
    def constituent_2_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 2 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 2 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_2_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_2_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_2_molar_fraction`')
        self._data["Constituent 2 Molar Fraction"] = value

    @property
    def constituent_3_name(self):
        """Get constituent_3_name

        Returns:
            str: the value of `constituent_3_name` or None if not set
        """
        return self._data["Constituent 3 Name"]

    @constituent_3_name.setter
    def constituent_3_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 3 Name`

        Args:
            value (str): value for IDD Field `Constituent 3 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_3_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_3_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_3_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 3 Name"] = value

    @property
    def constituent_3_molar_fraction(self):
        """Get constituent_3_molar_fraction

        Returns:
            float: the value of `constituent_3_molar_fraction` or None if not set
        """
        return self._data["Constituent 3 Molar Fraction"]

    @constituent_3_molar_fraction.setter
    def constituent_3_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 3 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 3 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_3_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_3_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_3_molar_fraction`')
        self._data["Constituent 3 Molar Fraction"] = value

    @property
    def constituent_4_name(self):
        """Get constituent_4_name

        Returns:
            str: the value of `constituent_4_name` or None if not set
        """
        return self._data["Constituent 4 Name"]

    @constituent_4_name.setter
    def constituent_4_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 4 Name`

        Args:
            value (str): value for IDD Field `Constituent 4 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_4_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_4_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_4_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 4 Name"] = value

    @property
    def constituent_4_molar_fraction(self):
        """Get constituent_4_molar_fraction

        Returns:
            float: the value of `constituent_4_molar_fraction` or None if not set
        """
        return self._data["Constituent 4 Molar Fraction"]

    @constituent_4_molar_fraction.setter
    def constituent_4_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 4 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 4 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_4_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_4_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_4_molar_fraction`')
        self._data["Constituent 4 Molar Fraction"] = value

    @property
    def constituent_5_name(self):
        """Get constituent_5_name

        Returns:
            str: the value of `constituent_5_name` or None if not set
        """
        return self._data["Constituent 5 Name"]

    @constituent_5_name.setter
    def constituent_5_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 5 Name`

        Args:
            value (str): value for IDD Field `Constituent 5 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_5_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_5_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_5_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 5 Name"] = value

    @property
    def constituent_5_molar_fraction(self):
        """Get constituent_5_molar_fraction

        Returns:
            float: the value of `constituent_5_molar_fraction` or None if not set
        """
        return self._data["Constituent 5 Molar Fraction"]

    @constituent_5_molar_fraction.setter
    def constituent_5_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 5 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 5 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_5_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_5_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_5_molar_fraction`')
        self._data["Constituent 5 Molar Fraction"] = value

    @property
    def constituent_6_name(self):
        """Get constituent_6_name

        Returns:
            str: the value of `constituent_6_name` or None if not set
        """
        return self._data["Constituent 6 Name"]

    @constituent_6_name.setter
    def constituent_6_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 6 Name`

        Args:
            value (str): value for IDD Field `Constituent 6 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_6_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_6_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_6_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 6 Name"] = value

    @property
    def constituent_6_molar_fraction(self):
        """Get constituent_6_molar_fraction

        Returns:
            float: the value of `constituent_6_molar_fraction` or None if not set
        """
        return self._data["Constituent 6 Molar Fraction"]

    @constituent_6_molar_fraction.setter
    def constituent_6_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 6 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 6 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_6_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_6_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_6_molar_fraction`')
        self._data["Constituent 6 Molar Fraction"] = value

    @property
    def constituent_7_name(self):
        """Get constituent_7_name

        Returns:
            str: the value of `constituent_7_name` or None if not set
        """
        return self._data["Constituent 7 Name"]

    @constituent_7_name.setter
    def constituent_7_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 7 Name`

        Args:
            value (str): value for IDD Field `Constituent 7 Name`
                Accepted values are:
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_7_name`')
            vals = {}
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_7_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_7_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 7 Name"] = value

    @property
    def constituent_7_molar_fraction(self):
        """Get constituent_7_molar_fraction

        Returns:
            float: the value of `constituent_7_molar_fraction` or None if not set
        """
        return self._data["Constituent 7 Molar Fraction"]

    @constituent_7_molar_fraction.setter
    def constituent_7_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 7 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 7 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_7_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_7_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_7_molar_fraction`')
        self._data["Constituent 7 Molar Fraction"] = value

    @property
    def constituent_8_name(self):
        """Get constituent_8_name

        Returns:
            str: the value of `constituent_8_name` or None if not set
        """
        return self._data["Constituent 8 Name"]

    @constituent_8_name.setter
    def constituent_8_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 8 Name`

        Args:
            value (str): value for IDD Field `Constituent 8 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_8_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_8_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_8_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 8 Name"] = value

    @property
    def constituent_8_molar_fraction(self):
        """Get constituent_8_molar_fraction

        Returns:
            float: the value of `constituent_8_molar_fraction` or None if not set
        """
        return self._data["Constituent 8 Molar Fraction"]

    @constituent_8_molar_fraction.setter
    def constituent_8_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 8 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 8 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_8_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_8_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_8_molar_fraction`')
        self._data["Constituent 8 Molar Fraction"] = value

    @property
    def constituent_9_name(self):
        """Get constituent_9_name

        Returns:
            str: the value of `constituent_9_name` or None if not set
        """
        return self._data["Constituent 9 Name"]

    @constituent_9_name.setter
    def constituent_9_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 9 Name`

        Args:
            value (str): value for IDD Field `Constituent 9 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_9_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_9_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_9_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 9 Name"] = value

    @property
    def constituent_9_molar_fraction(self):
        """Get constituent_9_molar_fraction

        Returns:
            float: the value of `constituent_9_molar_fraction` or None if not set
        """
        return self._data["Constituent 9 Molar Fraction"]

    @constituent_9_molar_fraction.setter
    def constituent_9_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 9 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 9 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_9_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_9_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_9_molar_fraction`')
        self._data["Constituent 9 Molar Fraction"] = value

    @property
    def constituent_10_name(self):
        """Get constituent_10_name

        Returns:
            str: the value of `constituent_10_name` or None if not set
        """
        return self._data["Constituent 10 Name"]

    @constituent_10_name.setter
    def constituent_10_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 10 Name`

        Args:
            value (str): value for IDD Field `Constituent 10 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_10_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_10_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_10_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 10 Name"] = value

    @property
    def constituent_10_molar_fraction(self):
        """Get constituent_10_molar_fraction

        Returns:
            float: the value of `constituent_10_molar_fraction` or None if not set
        """
        return self._data["Constituent 10 Molar Fraction"]

    @constituent_10_molar_fraction.setter
    def constituent_10_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 10 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 10 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_10_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_10_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_10_molar_fraction`')
        self._data["Constituent 10 Molar Fraction"] = value

    @property
    def constituent_11_name(self):
        """Get constituent_11_name

        Returns:
            str: the value of `constituent_11_name` or None if not set
        """
        return self._data["Constituent 11 Name"]

    @constituent_11_name.setter
    def constituent_11_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 11 Name`

        Args:
            value (str): value for IDD Field `Constituent 11 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_11_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_11_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_11_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 11 Name"] = value

    @property
    def constituent_11_molar_fraction(self):
        """Get constituent_11_molar_fraction

        Returns:
            float: the value of `constituent_11_molar_fraction` or None if not set
        """
        return self._data["Constituent 11 Molar Fraction"]

    @constituent_11_molar_fraction.setter
    def constituent_11_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 11 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 11 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_11_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_11_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_11_molar_fraction`')
        self._data["Constituent 11 Molar Fraction"] = value

    @property
    def constituent_12_name(self):
        """Get constituent_12_name

        Returns:
            str: the value of `constituent_12_name` or None if not set
        """
        return self._data["Constituent 12 Name"]

    @constituent_12_name.setter
    def constituent_12_name(self, value=None):
        """  Corresponds to IDD Field `Constituent 12 Name`

        Args:
            value (str): value for IDD Field `Constituent 12 Name`
                Accepted values are:
                      - CarbonDioxide
                      - Nitrogen
                      - Oxygen
                      - Water
                      - Argon
                      - Hydrogen
                      - Methane
                      - Ethane
                      - Propane
                      - Butane
                      - Pentane
                      - Hexane
                      - Methanol
                      - Ethanol
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `constituent_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `constituent_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `constituent_12_name`')
            vals = {}
            vals["carbondioxide"] = "CarbonDioxide"
            vals["nitrogen"] = "Nitrogen"
            vals["oxygen"] = "Oxygen"
            vals["water"] = "Water"
            vals["argon"] = "Argon"
            vals["hydrogen"] = "Hydrogen"
            vals["methane"] = "Methane"
            vals["ethane"] = "Ethane"
            vals["propane"] = "Propane"
            vals["butane"] = "Butane"
            vals["pentane"] = "Pentane"
            vals["hexane"] = "Hexane"
            vals["methanol"] = "Methanol"
            vals["ethanol"] = "Ethanol"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `constituent_12_name`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `constituent_12_name`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Constituent 12 Name"] = value

    @property
    def constituent_12_molar_fraction(self):
        """Get constituent_12_molar_fraction

        Returns:
            float: the value of `constituent_12_molar_fraction` or None if not set
        """
        return self._data["Constituent 12 Molar Fraction"]

    @constituent_12_molar_fraction.setter
    def constituent_12_molar_fraction(self, value=None):
        """  Corresponds to IDD Field `Constituent 12 Molar Fraction`

        Args:
            value (float): value for IDD Field `Constituent 12 Molar Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constituent_12_molar_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `constituent_12_molar_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `constituent_12_molar_fraction`')
        self._data["Constituent 12 Molar Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeneratorWindTurbine(object):
    """ Corresponds to IDD object `Generator:WindTurbine`
        Wind turbine generator.
    """
    internal_name = "Generator:WindTurbine"
    field_count = 26
    required_fields = ["Name", "Rotor Type", "Power Control", "Rated Rotor Speed", "Rotor Diameter", "Overall Height", "Number of Blades", "Rated Power", "Rated Wind Speed", "Cut In Wind Speed", "Cut Out Wind Speed", "Maximum Tip Speed Ratio"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Generator:WindTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Rotor Type"] = None
        self._data["Power Control"] = None
        self._data["Rated Rotor Speed"] = None
        self._data["Rotor Diameter"] = None
        self._data["Overall Height"] = None
        self._data["Number of Blades"] = None
        self._data["Rated Power"] = None
        self._data["Rated Wind Speed"] = None
        self._data["Cut In Wind Speed"] = None
        self._data["Cut Out Wind Speed"] = None
        self._data["Fraction system Efficiency"] = None
        self._data["Maximum Tip Speed Ratio"] = None
        self._data["Maximum Power Coefficient"] = None
        self._data["Annual Local Average Wind Speed"] = None
        self._data["Height for Local Average Wind Speed"] = None
        self._data["Blade Chord Area"] = None
        self._data["Blade Drag Coefficient"] = None
        self._data["Blade Lift Coefficient"] = None
        self._data["Power Coefficient C1"] = None
        self._data["Power Coefficient C2"] = None
        self._data["Power Coefficient C3"] = None
        self._data["Power Coefficient C4"] = None
        self._data["Power Coefficient C5"] = None
        self._data["Power Coefficient C6"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rotor_type = None
        else:
            self.rotor_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_control = None
        else:
            self.power_control = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_rotor_speed = None
        else:
            self.rated_rotor_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rotor_diameter = None
        else:
            self.rotor_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.overall_height = None
        else:
            self.overall_height = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_blades = None
        else:
            self.number_of_blades = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_power = None
        else:
            self.rated_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_wind_speed = None
        else:
            self.rated_wind_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cut_in_wind_speed = None
        else:
            self.cut_in_wind_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cut_out_wind_speed = None
        else:
            self.cut_out_wind_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_system_efficiency = None
        else:
            self.fraction_system_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_tip_speed_ratio = None
        else:
            self.maximum_tip_speed_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_power_coefficient = None
        else:
            self.maximum_power_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.annual_local_average_wind_speed = None
        else:
            self.annual_local_average_wind_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height_for_local_average_wind_speed = None
        else:
            self.height_for_local_average_wind_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.blade_chord_area = None
        else:
            self.blade_chord_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.blade_drag_coefficient = None
        else:
            self.blade_drag_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.blade_lift_coefficient = None
        else:
            self.blade_lift_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_coefficient_c1 = None
        else:
            self.power_coefficient_c1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_coefficient_c2 = None
        else:
            self.power_coefficient_c2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_coefficient_c3 = None
        else:
            self.power_coefficient_c3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_coefficient_c4 = None
        else:
            self.power_coefficient_c4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_coefficient_c5 = None
        else:
            self.power_coefficient_c5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.power_coefficient_c6 = None
        else:
            self.power_coefficient_c6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def rotor_type(self):
        """Get rotor_type

        Returns:
            str: the value of `rotor_type` or None if not set
        """
        return self._data["Rotor Type"]

    @rotor_type.setter
    def rotor_type(self, value="HorizontalAxisWindTurbine"):
        """  Corresponds to IDD Field `Rotor Type`
        allowed values are: Horizontal Axis Wind Turbine or Vertical Axis Wind Turbine

        Args:
            value (str): value for IDD Field `Rotor Type`
                Accepted values are:
                      - HorizontalAxisWindTurbine
                      - VerticalAxisWindTurbine
                Default value: HorizontalAxisWindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `rotor_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `rotor_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `rotor_type`')
            vals = {}
            vals["horizontalaxiswindturbine"] = "HorizontalAxisWindTurbine"
            vals["verticalaxiswindturbine"] = "VerticalAxisWindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `rotor_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `rotor_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Rotor Type"] = value

    @property
    def power_control(self):
        """Get power_control

        Returns:
            str: the value of `power_control` or None if not set
        """
        return self._data["Power Control"]

    @power_control.setter
    def power_control(self, value="VariableSpeedVariablePitch"):
        """  Corresponds to IDD Field `Power Control`
        Constant power output is obtained in the last three control types
        when the wind speed exceeds the rated wind speed.
        allowd values are: Fixed Speed Fixed Pitch, Fixed Speed Variable Pitch,
        Variable Speed Fixed Pitch or Variable Speed Variable Pitch

        Args:
            value (str): value for IDD Field `Power Control`
                Accepted values are:
                      - FixedSpeedFixedPitch
                      - FixedSpeedVariablePitch
                      - VariableSpeedFixedPitch
                      - VariableSpeedVariablePitch
                Default value: VariableSpeedVariablePitch
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `power_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `power_control`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `power_control`')
            vals = {}
            vals["fixedspeedfixedpitch"] = "FixedSpeedFixedPitch"
            vals["fixedspeedvariablepitch"] = "FixedSpeedVariablePitch"
            vals["variablespeedfixedpitch"] = "VariableSpeedFixedPitch"
            vals["variablespeedvariablepitch"] = "VariableSpeedVariablePitch"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `power_control`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `power_control`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Power Control"] = value

    @property
    def rated_rotor_speed(self):
        """Get rated_rotor_speed

        Returns:
            float: the value of `rated_rotor_speed` or None if not set
        """
        return self._data["Rated Rotor Speed"]

    @rated_rotor_speed.setter
    def rated_rotor_speed(self, value=None):
        """  Corresponds to IDD Field `Rated Rotor Speed`

        Args:
            value (float): value for IDD Field `Rated Rotor Speed`
                Units: rev/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_rotor_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_rotor_speed`')
        self._data["Rated Rotor Speed"] = value

    @property
    def rotor_diameter(self):
        """Get rotor_diameter

        Returns:
            float: the value of `rotor_diameter` or None if not set
        """
        return self._data["Rotor Diameter"]

    @rotor_diameter.setter
    def rotor_diameter(self, value=None):
        """  Corresponds to IDD Field `Rotor Diameter`
        This field is the diameter of the perpendicular circle of the Vertical Axis Wind Turbine system
        from the upright pole on the ground.

        Args:
            value (float): value for IDD Field `Rotor Diameter`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rotor_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rotor_diameter`')
        self._data["Rotor Diameter"] = value

    @property
    def overall_height(self):
        """Get overall_height

        Returns:
            float: the value of `overall_height` or None if not set
        """
        return self._data["Overall Height"]

    @overall_height.setter
    def overall_height(self, value=None):
        """  Corresponds to IDD Field `Overall Height`
        This field is the height of the hub for the Horizontal Axis Wind Turbines and
        of the pole for the Vertical Axis Wind Turbines.

        Args:
            value (float): value for IDD Field `Overall Height`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `overall_height`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `overall_height`')
        self._data["Overall Height"] = value

    @property
    def number_of_blades(self):
        """Get number_of_blades

        Returns:
            float: the value of `number_of_blades` or None if not set
        """
        return self._data["Number of Blades"]

    @number_of_blades.setter
    def number_of_blades(self, value=3.0):
        """  Corresponds to IDD Field `Number of Blades`

        Args:
            value (float): value for IDD Field `Number of Blades`
                Default value: 3.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `number_of_blades`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `number_of_blades`')
        self._data["Number of Blades"] = value

    @property
    def rated_power(self):
        """Get rated_power

        Returns:
            float: the value of `rated_power` or None if not set
        """
        return self._data["Rated Power"]

    @rated_power.setter
    def rated_power(self, value=None):
        """  Corresponds to IDD Field `Rated Power`
        This field is the nominal power at the rated wind speed.
        Users should input maximum power in case of Fixed Speed Fixed Pitch control type.

        Args:
            value (float): value for IDD Field `Rated Power`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_power`')
        self._data["Rated Power"] = value

    @property
    def rated_wind_speed(self):
        """Get rated_wind_speed

        Returns:
            float: the value of `rated_wind_speed` or None if not set
        """
        return self._data["Rated Wind Speed"]

    @rated_wind_speed.setter
    def rated_wind_speed(self, value=None):
        """  Corresponds to IDD Field `Rated Wind Speed`

        Args:
            value (float): value for IDD Field `Rated Wind Speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_wind_speed`')
        self._data["Rated Wind Speed"] = value

    @property
    def cut_in_wind_speed(self):
        """Get cut_in_wind_speed

        Returns:
            float: the value of `cut_in_wind_speed` or None if not set
        """
        return self._data["Cut In Wind Speed"]

    @cut_in_wind_speed.setter
    def cut_in_wind_speed(self, value=None):
        """  Corresponds to IDD Field `Cut In Wind Speed`

        Args:
            value (float): value for IDD Field `Cut In Wind Speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cut_in_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cut_in_wind_speed`')
        self._data["Cut In Wind Speed"] = value

    @property
    def cut_out_wind_speed(self):
        """Get cut_out_wind_speed

        Returns:
            float: the value of `cut_out_wind_speed` or None if not set
        """
        return self._data["Cut Out Wind Speed"]

    @cut_out_wind_speed.setter
    def cut_out_wind_speed(self, value=None):
        """  Corresponds to IDD Field `Cut Out Wind Speed`

        Args:
            value (float): value for IDD Field `Cut Out Wind Speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cut_out_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cut_out_wind_speed`')
        self._data["Cut Out Wind Speed"] = value

    @property
    def fraction_system_efficiency(self):
        """Get fraction_system_efficiency

        Returns:
            float: the value of `fraction_system_efficiency` or None if not set
        """
        return self._data["Fraction system Efficiency"]

    @fraction_system_efficiency.setter
    def fraction_system_efficiency(self, value=0.835):
        """  Corresponds to IDD Field `Fraction system Efficiency`

        Args:
            value (float): value for IDD Field `Fraction system Efficiency`
                Default value: 0.835
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_system_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_system_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_system_efficiency`')
        self._data["Fraction system Efficiency"] = value

    @property
    def maximum_tip_speed_ratio(self):
        """Get maximum_tip_speed_ratio

        Returns:
            float: the value of `maximum_tip_speed_ratio` or None if not set
        """
        return self._data["Maximum Tip Speed Ratio"]

    @maximum_tip_speed_ratio.setter
    def maximum_tip_speed_ratio(self, value=5.0):
        """  Corresponds to IDD Field `Maximum Tip Speed Ratio`

        Args:
            value (float): value for IDD Field `Maximum Tip Speed Ratio`
                Default value: 5.0
                value > 0.0
                value <= 12.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_tip_speed_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_tip_speed_ratio`')
            if value > 12.0:
                raise ValueError('value need to be smaller 12.0 '
                                 'for field `maximum_tip_speed_ratio`')
        self._data["Maximum Tip Speed Ratio"] = value

    @property
    def maximum_power_coefficient(self):
        """Get maximum_power_coefficient

        Returns:
            float: the value of `maximum_power_coefficient` or None if not set
        """
        return self._data["Maximum Power Coefficient"]

    @maximum_power_coefficient.setter
    def maximum_power_coefficient(self, value=0.25):
        """  Corresponds to IDD Field `Maximum Power Coefficient`
        This field should be input if the rotor type is Horizontal Axis Wind Turbine

        Args:
            value (float): value for IDD Field `Maximum Power Coefficient`
                Default value: 0.25
                value > 0.0
                value <= 0.59
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_power_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_power_coefficient`')
            if value > 0.59:
                raise ValueError('value need to be smaller 0.59 '
                                 'for field `maximum_power_coefficient`')
        self._data["Maximum Power Coefficient"] = value

    @property
    def annual_local_average_wind_speed(self):
        """Get annual_local_average_wind_speed

        Returns:
            float: the value of `annual_local_average_wind_speed` or None if not set
        """
        return self._data["Annual Local Average Wind Speed"]

    @annual_local_average_wind_speed.setter
    def annual_local_average_wind_speed(self, value=None):
        """  Corresponds to IDD Field `Annual Local Average Wind Speed`

        Args:
            value (float): value for IDD Field `Annual Local Average Wind Speed`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `annual_local_average_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `annual_local_average_wind_speed`')
        self._data["Annual Local Average Wind Speed"] = value

    @property
    def height_for_local_average_wind_speed(self):
        """Get height_for_local_average_wind_speed

        Returns:
            float: the value of `height_for_local_average_wind_speed` or None if not set
        """
        return self._data["Height for Local Average Wind Speed"]

    @height_for_local_average_wind_speed.setter
    def height_for_local_average_wind_speed(self, value=50.0):
        """  Corresponds to IDD Field `Height for Local Average Wind Speed`

        Args:
            value (float): value for IDD Field `Height for Local Average Wind Speed`
                Units: m
                Default value: 50.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `height_for_local_average_wind_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `height_for_local_average_wind_speed`')
        self._data["Height for Local Average Wind Speed"] = value

    @property
    def blade_chord_area(self):
        """Get blade_chord_area

        Returns:
            float: the value of `blade_chord_area` or None if not set
        """
        return self._data["Blade Chord Area"]

    @blade_chord_area.setter
    def blade_chord_area(self, value=None):
        """  Corresponds to IDD Field `Blade Chord Area`

        Args:
            value (float): value for IDD Field `Blade Chord Area`
                Units: m2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `blade_chord_area`'.format(value))
        self._data["Blade Chord Area"] = value

    @property
    def blade_drag_coefficient(self):
        """Get blade_drag_coefficient

        Returns:
            float: the value of `blade_drag_coefficient` or None if not set
        """
        return self._data["Blade Drag Coefficient"]

    @blade_drag_coefficient.setter
    def blade_drag_coefficient(self, value=0.9):
        """  Corresponds to IDD Field `Blade Drag Coefficient`
        This field is only for Vertical Axis Wind Turbine..
        The user must input this field if the rotor type is Vertical Axis Wind Turbine.

        Args:
            value (float): value for IDD Field `Blade Drag Coefficient`
                Default value: 0.9
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `blade_drag_coefficient`'.format(value))
        self._data["Blade Drag Coefficient"] = value

    @property
    def blade_lift_coefficient(self):
        """Get blade_lift_coefficient

        Returns:
            float: the value of `blade_lift_coefficient` or None if not set
        """
        return self._data["Blade Lift Coefficient"]

    @blade_lift_coefficient.setter
    def blade_lift_coefficient(self, value=0.05):
        """  Corresponds to IDD Field `Blade Lift Coefficient`
        This field is only for Vertical Axis Wind Turbine..
        The user must input this field if the rotor type is Vertical Axis Wind Turbine.

        Args:
            value (float): value for IDD Field `Blade Lift Coefficient`
                Default value: 0.05
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `blade_lift_coefficient`'.format(value))
        self._data["Blade Lift Coefficient"] = value

    @property
    def power_coefficient_c1(self):
        """Get power_coefficient_c1

        Returns:
            float: the value of `power_coefficient_c1` or None if not set
        """
        return self._data["Power Coefficient C1"]

    @power_coefficient_c1.setter
    def power_coefficient_c1(self, value=0.5176):
        """  Corresponds to IDD Field `Power Coefficient C1`
        This field is only available for Horizontal Axis Wind Turbine.
        The user should input all six parameters
        so that the analytic approximation is assumed.
        The simple approximation will be assumed,
        if any field C1 through C6 is not input.
        Leave this field blank, if the manufacturers's data is unavailable
        so that the simple approximation will be assumed.

        Args:
            value (float): value for IDD Field `Power Coefficient C1`
                Default value: 0.5176
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_coefficient_c1`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c1`')
        self._data["Power Coefficient C1"] = value

    @property
    def power_coefficient_c2(self):
        """Get power_coefficient_c2

        Returns:
            float: the value of `power_coefficient_c2` or None if not set
        """
        return self._data["Power Coefficient C2"]

    @power_coefficient_c2.setter
    def power_coefficient_c2(self, value=116.0):
        """  Corresponds to IDD Field `Power Coefficient C2`

        Args:
            value (float): value for IDD Field `Power Coefficient C2`
                Default value: 116.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_coefficient_c2`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c2`')
        self._data["Power Coefficient C2"] = value

    @property
    def power_coefficient_c3(self):
        """Get power_coefficient_c3

        Returns:
            float: the value of `power_coefficient_c3` or None if not set
        """
        return self._data["Power Coefficient C3"]

    @power_coefficient_c3.setter
    def power_coefficient_c3(self, value=0.4):
        """  Corresponds to IDD Field `Power Coefficient C3`

        Args:
            value (float): value for IDD Field `Power Coefficient C3`
                Default value: 0.4
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_coefficient_c3`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c3`')
        self._data["Power Coefficient C3"] = value

    @property
    def power_coefficient_c4(self):
        """Get power_coefficient_c4

        Returns:
            float: the value of `power_coefficient_c4` or None if not set
        """
        return self._data["Power Coefficient C4"]

    @power_coefficient_c4.setter
    def power_coefficient_c4(self, value=0.0):
        """  Corresponds to IDD Field `Power Coefficient C4`

        Args:
            value (float): value for IDD Field `Power Coefficient C4`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_coefficient_c4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `power_coefficient_c4`')
        self._data["Power Coefficient C4"] = value

    @property
    def power_coefficient_c5(self):
        """Get power_coefficient_c5

        Returns:
            float: the value of `power_coefficient_c5` or None if not set
        """
        return self._data["Power Coefficient C5"]

    @power_coefficient_c5.setter
    def power_coefficient_c5(self, value=5.0):
        """  Corresponds to IDD Field `Power Coefficient C5`

        Args:
            value (float): value for IDD Field `Power Coefficient C5`
                Default value: 5.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_coefficient_c5`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c5`')
        self._data["Power Coefficient C5"] = value

    @property
    def power_coefficient_c6(self):
        """Get power_coefficient_c6

        Returns:
            float: the value of `power_coefficient_c6` or None if not set
        """
        return self._data["Power Coefficient C6"]

    @power_coefficient_c6.setter
    def power_coefficient_c6(self, value=21.0):
        """  Corresponds to IDD Field `Power Coefficient C6`

        Args:
            value (float): value for IDD Field `Power Coefficient C6`
                Default value: 21.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `power_coefficient_c6`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `power_coefficient_c6`')
        self._data["Power Coefficient C6"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterGenerators(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Generators`
        List of electric power generators to include in the simulation including the name and
        type of each generators along with availability schedule, rated power output,
        and thermal-to-electrical power ratio.
    """
    internal_name = "ElectricLoadCenter:Generators"
    field_count = 151
    required_fields = ["Name", "Generator 1 Name", "Generator 1 Object Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Generators`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Generator 1 Name"] = None
        self._data["Generator 1 Object Type"] = None
        self._data["Generator 1 Rated Electric Power Output"] = None
        self._data["Generator 1 Availability Schedule Name"] = None
        self._data["Generator 1 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 2 Name"] = None
        self._data["Generator 2 Object Type"] = None
        self._data["Generator 2 Rated Electric Power Output"] = None
        self._data["Generator 2 Availability Schedule Name"] = None
        self._data["Generator 2 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 3 Name"] = None
        self._data["Generator 3 Object Type"] = None
        self._data["Generator 3 Rated Electric Power Output"] = None
        self._data["Generator 3 Availability Schedule Name"] = None
        self._data["Generator 3 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 4 Name"] = None
        self._data["Generator 4 Object Type"] = None
        self._data["Generator 4 Rated Electric Power Output"] = None
        self._data["Generator 4 Availability Schedule Name"] = None
        self._data["Generator 4 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 5 Name"] = None
        self._data["Generator 5 Object Type"] = None
        self._data["Generator 5 Rated Electric Power Output"] = None
        self._data["Generator 5 Availability Schedule Name"] = None
        self._data["Generator 5 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 6 Name"] = None
        self._data["Generator 6 Object Type"] = None
        self._data["Generator 6 Rated Electric Power Output"] = None
        self._data["Generator 6 Availability Schedule Name"] = None
        self._data["Generator 6 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 7 Name"] = None
        self._data["Generator 7 Object Type"] = None
        self._data["Generator 7 Rated Electric Power Output"] = None
        self._data["Generator 7 Availability Schedule Name"] = None
        self._data["Generator 7 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 8 Name"] = None
        self._data["Generator 8 Object Type"] = None
        self._data["Generator 8 Rated Electric Power Output"] = None
        self._data["Generator 8 Availability Schedule Name"] = None
        self._data["Generator 8 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 9 Name"] = None
        self._data["Generator 9 Object Type"] = None
        self._data["Generator 9 Rated Electric Power Output"] = None
        self._data["Generator 9 Availability Schedule Name"] = None
        self._data["Generator 9 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 10 Name"] = None
        self._data["Generator 10 Object Type"] = None
        self._data["Generator 10 Rated Electric Power Output"] = None
        self._data["Generator 10 Availability Schedule Name"] = None
        self._data["Generator 10 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 11 Name"] = None
        self._data["Generator 11 Object Type"] = None
        self._data["Generator 11 Rated Electric Power Output"] = None
        self._data["Generator 11 Availability Schedule Name"] = None
        self._data["Generator 11 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 12 Name"] = None
        self._data["Generator 12 Object Type"] = None
        self._data["Generator 12 Rated Electric Power Output"] = None
        self._data["Generator 12 Availability Schedule Name"] = None
        self._data["Generator 12 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 13 Name"] = None
        self._data["Generator 13 Object Type"] = None
        self._data["Generator 13 Rated Electric Power Output"] = None
        self._data["Generator 13 Availability Schedule Name"] = None
        self._data["Generator 13 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 14 Name"] = None
        self._data["Generator 14 Object Type"] = None
        self._data["Generator 14 Rated Electric Power Output"] = None
        self._data["Generator 14 Availability Schedule Name"] = None
        self._data["Generator 14 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 15 Name"] = None
        self._data["Generator 15 Object Type"] = None
        self._data["Generator 15 Rated Electric Power Output"] = None
        self._data["Generator 15 Availability Schedule Name"] = None
        self._data["Generator 15 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 16 Name"] = None
        self._data["Generator 16 Object Type"] = None
        self._data["Generator 16 Rated Electric Power Output"] = None
        self._data["Generator 16 Availability Schedule Name"] = None
        self._data["Generator 16 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 17 Name"] = None
        self._data["Generator 17 Object Type"] = None
        self._data["Generator 17 Rated Electric Power Output"] = None
        self._data["Generator 17 Availability Schedule Name"] = None
        self._data["Generator 17 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 18 Name"] = None
        self._data["Generator 18 Object Type"] = None
        self._data["Generator 18 Rated Electric Power Output"] = None
        self._data["Generator 18 Availability Schedule Name"] = None
        self._data["Generator 18 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 19 Name"] = None
        self._data["Generator 19 Object Type"] = None
        self._data["Generator 19 Rated Electric Power Output"] = None
        self._data["Generator 19 Availability Schedule Name"] = None
        self._data["Generator 19 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 20 Name"] = None
        self._data["Generator 20 Object Type"] = None
        self._data["Generator 20 Rated Electric Power Output"] = None
        self._data["Generator 20 Availability Schedule Name"] = None
        self._data["Generator 20 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 21 Name"] = None
        self._data["Generator 21 Object Type"] = None
        self._data["Generator 21 Rated Electric Power Output"] = None
        self._data["Generator 21 Availability Schedule Name"] = None
        self._data["Generator 21 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 22 Name"] = None
        self._data["Generator 22 Object Type"] = None
        self._data["Generator 22 Rated Electric Power Output"] = None
        self._data["Generator 22 Availability Schedule Name"] = None
        self._data["Generator 22 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 23 Name"] = None
        self._data["Generator 23 Object Type"] = None
        self._data["Generator 23 Rated Electric Power Output"] = None
        self._data["Generator 23 Availability Schedule Name"] = None
        self._data["Generator 23 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 24 Name"] = None
        self._data["Generator 24 Object Type"] = None
        self._data["Generator 24 Rated Electric Power Output"] = None
        self._data["Generator 24 Availability Schedule Name"] = None
        self._data["Generator 24 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 25 Name"] = None
        self._data["Generator 25 Object Type"] = None
        self._data["Generator 25 Rated Electric Power Output"] = None
        self._data["Generator 25 Availability Schedule Name"] = None
        self._data["Generator 25 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 26 Name"] = None
        self._data["Generator 26 Object Type"] = None
        self._data["Generator 26 Rated Electric Power Output"] = None
        self._data["Generator 26 Availability Schedule Name"] = None
        self._data["Generator 26 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 27 Name"] = None
        self._data["Generator 27 Object Type"] = None
        self._data["Generator 27 Rated Electric Power Output"] = None
        self._data["Generator 27 Availability Schedule Name"] = None
        self._data["Generator 27 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 28 Name"] = None
        self._data["Generator 28 Object Type"] = None
        self._data["Generator 28 Rated Electric Power Output"] = None
        self._data["Generator 28 Availability Schedule Name"] = None
        self._data["Generator 28 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 29 Name"] = None
        self._data["Generator 29 Object Type"] = None
        self._data["Generator 29 Rated Electric Power Output"] = None
        self._data["Generator 29 Availability Schedule Name"] = None
        self._data["Generator 29 Rated Thermal to Electrical Power Ratio"] = None
        self._data["Generator 30 Name"] = None
        self._data["Generator 30 Object Type"] = None
        self._data["Generator 30 Rated Electric Power Output"] = None
        self._data["Generator 30 Availability Schedule Name"] = None
        self._data["Generator 30 Rated Thermal to Electrical Power Ratio"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_1_name = None
        else:
            self.generator_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_1_object_type = None
        else:
            self.generator_1_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_1_rated_electric_power_output = None
        else:
            self.generator_1_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_1_availability_schedule_name = None
        else:
            self.generator_1_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_1_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_1_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_2_name = None
        else:
            self.generator_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_2_object_type = None
        else:
            self.generator_2_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_2_rated_electric_power_output = None
        else:
            self.generator_2_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_2_availability_schedule_name = None
        else:
            self.generator_2_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_2_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_2_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_3_name = None
        else:
            self.generator_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_3_object_type = None
        else:
            self.generator_3_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_3_rated_electric_power_output = None
        else:
            self.generator_3_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_3_availability_schedule_name = None
        else:
            self.generator_3_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_3_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_3_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_4_name = None
        else:
            self.generator_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_4_object_type = None
        else:
            self.generator_4_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_4_rated_electric_power_output = None
        else:
            self.generator_4_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_4_availability_schedule_name = None
        else:
            self.generator_4_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_4_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_4_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_5_name = None
        else:
            self.generator_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_5_object_type = None
        else:
            self.generator_5_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_5_rated_electric_power_output = None
        else:
            self.generator_5_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_5_availability_schedule_name = None
        else:
            self.generator_5_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_5_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_5_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_6_name = None
        else:
            self.generator_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_6_object_type = None
        else:
            self.generator_6_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_6_rated_electric_power_output = None
        else:
            self.generator_6_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_6_availability_schedule_name = None
        else:
            self.generator_6_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_6_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_6_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_7_name = None
        else:
            self.generator_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_7_object_type = None
        else:
            self.generator_7_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_7_rated_electric_power_output = None
        else:
            self.generator_7_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_7_availability_schedule_name = None
        else:
            self.generator_7_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_7_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_7_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_8_name = None
        else:
            self.generator_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_8_object_type = None
        else:
            self.generator_8_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_8_rated_electric_power_output = None
        else:
            self.generator_8_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_8_availability_schedule_name = None
        else:
            self.generator_8_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_8_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_8_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_9_name = None
        else:
            self.generator_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_9_object_type = None
        else:
            self.generator_9_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_9_rated_electric_power_output = None
        else:
            self.generator_9_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_9_availability_schedule_name = None
        else:
            self.generator_9_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_9_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_9_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_10_name = None
        else:
            self.generator_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_10_object_type = None
        else:
            self.generator_10_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_10_rated_electric_power_output = None
        else:
            self.generator_10_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_10_availability_schedule_name = None
        else:
            self.generator_10_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_10_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_10_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_11_name = None
        else:
            self.generator_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_11_object_type = None
        else:
            self.generator_11_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_11_rated_electric_power_output = None
        else:
            self.generator_11_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_11_availability_schedule_name = None
        else:
            self.generator_11_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_11_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_11_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_12_name = None
        else:
            self.generator_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_12_object_type = None
        else:
            self.generator_12_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_12_rated_electric_power_output = None
        else:
            self.generator_12_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_12_availability_schedule_name = None
        else:
            self.generator_12_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_12_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_12_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_13_name = None
        else:
            self.generator_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_13_object_type = None
        else:
            self.generator_13_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_13_rated_electric_power_output = None
        else:
            self.generator_13_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_13_availability_schedule_name = None
        else:
            self.generator_13_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_13_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_13_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_14_name = None
        else:
            self.generator_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_14_object_type = None
        else:
            self.generator_14_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_14_rated_electric_power_output = None
        else:
            self.generator_14_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_14_availability_schedule_name = None
        else:
            self.generator_14_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_14_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_14_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_15_name = None
        else:
            self.generator_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_15_object_type = None
        else:
            self.generator_15_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_15_rated_electric_power_output = None
        else:
            self.generator_15_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_15_availability_schedule_name = None
        else:
            self.generator_15_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_15_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_15_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_16_name = None
        else:
            self.generator_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_16_object_type = None
        else:
            self.generator_16_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_16_rated_electric_power_output = None
        else:
            self.generator_16_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_16_availability_schedule_name = None
        else:
            self.generator_16_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_16_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_16_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_17_name = None
        else:
            self.generator_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_17_object_type = None
        else:
            self.generator_17_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_17_rated_electric_power_output = None
        else:
            self.generator_17_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_17_availability_schedule_name = None
        else:
            self.generator_17_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_17_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_17_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_18_name = None
        else:
            self.generator_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_18_object_type = None
        else:
            self.generator_18_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_18_rated_electric_power_output = None
        else:
            self.generator_18_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_18_availability_schedule_name = None
        else:
            self.generator_18_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_18_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_18_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_19_name = None
        else:
            self.generator_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_19_object_type = None
        else:
            self.generator_19_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_19_rated_electric_power_output = None
        else:
            self.generator_19_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_19_availability_schedule_name = None
        else:
            self.generator_19_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_19_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_19_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_20_name = None
        else:
            self.generator_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_20_object_type = None
        else:
            self.generator_20_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_20_rated_electric_power_output = None
        else:
            self.generator_20_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_20_availability_schedule_name = None
        else:
            self.generator_20_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_20_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_20_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_21_name = None
        else:
            self.generator_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_21_object_type = None
        else:
            self.generator_21_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_21_rated_electric_power_output = None
        else:
            self.generator_21_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_21_availability_schedule_name = None
        else:
            self.generator_21_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_21_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_21_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_22_name = None
        else:
            self.generator_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_22_object_type = None
        else:
            self.generator_22_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_22_rated_electric_power_output = None
        else:
            self.generator_22_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_22_availability_schedule_name = None
        else:
            self.generator_22_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_22_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_22_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_23_name = None
        else:
            self.generator_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_23_object_type = None
        else:
            self.generator_23_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_23_rated_electric_power_output = None
        else:
            self.generator_23_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_23_availability_schedule_name = None
        else:
            self.generator_23_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_23_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_23_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_24_name = None
        else:
            self.generator_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_24_object_type = None
        else:
            self.generator_24_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_24_rated_electric_power_output = None
        else:
            self.generator_24_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_24_availability_schedule_name = None
        else:
            self.generator_24_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_24_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_24_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_25_name = None
        else:
            self.generator_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_25_object_type = None
        else:
            self.generator_25_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_25_rated_electric_power_output = None
        else:
            self.generator_25_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_25_availability_schedule_name = None
        else:
            self.generator_25_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_25_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_25_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_26_name = None
        else:
            self.generator_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_26_object_type = None
        else:
            self.generator_26_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_26_rated_electric_power_output = None
        else:
            self.generator_26_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_26_availability_schedule_name = None
        else:
            self.generator_26_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_26_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_26_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_27_name = None
        else:
            self.generator_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_27_object_type = None
        else:
            self.generator_27_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_27_rated_electric_power_output = None
        else:
            self.generator_27_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_27_availability_schedule_name = None
        else:
            self.generator_27_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_27_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_27_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_28_name = None
        else:
            self.generator_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_28_object_type = None
        else:
            self.generator_28_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_28_rated_electric_power_output = None
        else:
            self.generator_28_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_28_availability_schedule_name = None
        else:
            self.generator_28_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_28_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_28_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_29_name = None
        else:
            self.generator_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_29_object_type = None
        else:
            self.generator_29_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_29_rated_electric_power_output = None
        else:
            self.generator_29_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_29_availability_schedule_name = None
        else:
            self.generator_29_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_29_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_29_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_30_name = None
        else:
            self.generator_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_30_object_type = None
        else:
            self.generator_30_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_30_rated_electric_power_output = None
        else:
            self.generator_30_rated_electric_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_30_availability_schedule_name = None
        else:
            self.generator_30_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_30_rated_thermal_to_electrical_power_ratio = None
        else:
            self.generator_30_rated_thermal_to_electrical_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def generator_1_name(self):
        """Get generator_1_name

        Returns:
            str: the value of `generator_1_name` or None if not set
        """
        return self._data["Generator 1 Name"]

    @generator_1_name.setter
    def generator_1_name(self, value=None):
        """  Corresponds to IDD Field `Generator 1 Name`

        Args:
            value (str): value for IDD Field `Generator 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_1_name`')
        self._data["Generator 1 Name"] = value

    @property
    def generator_1_object_type(self):
        """Get generator_1_object_type

        Returns:
            str: the value of `generator_1_object_type` or None if not set
        """
        return self._data["Generator 1 Object Type"]

    @generator_1_object_type.setter
    def generator_1_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 1 Object Type`

        Args:
            value (str): value for IDD Field `Generator 1 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_1_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_1_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_1_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_1_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 1 Object Type"] = value

    @property
    def generator_1_rated_electric_power_output(self):
        """Get generator_1_rated_electric_power_output

        Returns:
            float: the value of `generator_1_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 1 Rated Electric Power Output"]

    @generator_1_rated_electric_power_output.setter
    def generator_1_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 1 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 1 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_1_rated_electric_power_output`'.format(value))
        self._data["Generator 1 Rated Electric Power Output"] = value

    @property
    def generator_1_availability_schedule_name(self):
        """Get generator_1_availability_schedule_name

        Returns:
            str: the value of `generator_1_availability_schedule_name` or None if not set
        """
        return self._data["Generator 1 Availability Schedule Name"]

    @generator_1_availability_schedule_name.setter
    def generator_1_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 1 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 1 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_1_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_1_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_1_availability_schedule_name`')
        self._data["Generator 1 Availability Schedule Name"] = value

    @property
    def generator_1_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_1_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_1_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 1 Rated Thermal to Electrical Power Ratio"]

    @generator_1_rated_thermal_to_electrical_power_ratio.setter
    def generator_1_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 1 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 1 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_1_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 1 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_2_name(self):
        """Get generator_2_name

        Returns:
            str: the value of `generator_2_name` or None if not set
        """
        return self._data["Generator 2 Name"]

    @generator_2_name.setter
    def generator_2_name(self, value=None):
        """  Corresponds to IDD Field `Generator 2 Name`

        Args:
            value (str): value for IDD Field `Generator 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_2_name`')
        self._data["Generator 2 Name"] = value

    @property
    def generator_2_object_type(self):
        """Get generator_2_object_type

        Returns:
            str: the value of `generator_2_object_type` or None if not set
        """
        return self._data["Generator 2 Object Type"]

    @generator_2_object_type.setter
    def generator_2_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 2 Object Type`

        Args:
            value (str): value for IDD Field `Generator 2 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_2_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_2_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_2_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_2_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 2 Object Type"] = value

    @property
    def generator_2_rated_electric_power_output(self):
        """Get generator_2_rated_electric_power_output

        Returns:
            float: the value of `generator_2_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 2 Rated Electric Power Output"]

    @generator_2_rated_electric_power_output.setter
    def generator_2_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 2 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 2 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_2_rated_electric_power_output`'.format(value))
        self._data["Generator 2 Rated Electric Power Output"] = value

    @property
    def generator_2_availability_schedule_name(self):
        """Get generator_2_availability_schedule_name

        Returns:
            str: the value of `generator_2_availability_schedule_name` or None if not set
        """
        return self._data["Generator 2 Availability Schedule Name"]

    @generator_2_availability_schedule_name.setter
    def generator_2_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 2 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 2 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_2_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_2_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_2_availability_schedule_name`')
        self._data["Generator 2 Availability Schedule Name"] = value

    @property
    def generator_2_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_2_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_2_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 2 Rated Thermal to Electrical Power Ratio"]

    @generator_2_rated_thermal_to_electrical_power_ratio.setter
    def generator_2_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 2 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 2 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_2_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 2 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_3_name(self):
        """Get generator_3_name

        Returns:
            str: the value of `generator_3_name` or None if not set
        """
        return self._data["Generator 3 Name"]

    @generator_3_name.setter
    def generator_3_name(self, value=None):
        """  Corresponds to IDD Field `Generator 3 Name`

        Args:
            value (str): value for IDD Field `Generator 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_3_name`')
        self._data["Generator 3 Name"] = value

    @property
    def generator_3_object_type(self):
        """Get generator_3_object_type

        Returns:
            str: the value of `generator_3_object_type` or None if not set
        """
        return self._data["Generator 3 Object Type"]

    @generator_3_object_type.setter
    def generator_3_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 3 Object Type`

        Args:
            value (str): value for IDD Field `Generator 3 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_3_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_3_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_3_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_3_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 3 Object Type"] = value

    @property
    def generator_3_rated_electric_power_output(self):
        """Get generator_3_rated_electric_power_output

        Returns:
            float: the value of `generator_3_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 3 Rated Electric Power Output"]

    @generator_3_rated_electric_power_output.setter
    def generator_3_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 3 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 3 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_3_rated_electric_power_output`'.format(value))
        self._data["Generator 3 Rated Electric Power Output"] = value

    @property
    def generator_3_availability_schedule_name(self):
        """Get generator_3_availability_schedule_name

        Returns:
            str: the value of `generator_3_availability_schedule_name` or None if not set
        """
        return self._data["Generator 3 Availability Schedule Name"]

    @generator_3_availability_schedule_name.setter
    def generator_3_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 3 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 3 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_3_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_3_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_3_availability_schedule_name`')
        self._data["Generator 3 Availability Schedule Name"] = value

    @property
    def generator_3_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_3_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_3_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 3 Rated Thermal to Electrical Power Ratio"]

    @generator_3_rated_thermal_to_electrical_power_ratio.setter
    def generator_3_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 3 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 3 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_3_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 3 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_4_name(self):
        """Get generator_4_name

        Returns:
            str: the value of `generator_4_name` or None if not set
        """
        return self._data["Generator 4 Name"]

    @generator_4_name.setter
    def generator_4_name(self, value=None):
        """  Corresponds to IDD Field `Generator 4 Name`

        Args:
            value (str): value for IDD Field `Generator 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_4_name`')
        self._data["Generator 4 Name"] = value

    @property
    def generator_4_object_type(self):
        """Get generator_4_object_type

        Returns:
            str: the value of `generator_4_object_type` or None if not set
        """
        return self._data["Generator 4 Object Type"]

    @generator_4_object_type.setter
    def generator_4_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 4 Object Type`

        Args:
            value (str): value for IDD Field `Generator 4 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_4_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_4_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_4_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_4_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 4 Object Type"] = value

    @property
    def generator_4_rated_electric_power_output(self):
        """Get generator_4_rated_electric_power_output

        Returns:
            float: the value of `generator_4_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 4 Rated Electric Power Output"]

    @generator_4_rated_electric_power_output.setter
    def generator_4_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 4 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 4 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_4_rated_electric_power_output`'.format(value))
        self._data["Generator 4 Rated Electric Power Output"] = value

    @property
    def generator_4_availability_schedule_name(self):
        """Get generator_4_availability_schedule_name

        Returns:
            str: the value of `generator_4_availability_schedule_name` or None if not set
        """
        return self._data["Generator 4 Availability Schedule Name"]

    @generator_4_availability_schedule_name.setter
    def generator_4_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 4 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 4 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_4_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_4_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_4_availability_schedule_name`')
        self._data["Generator 4 Availability Schedule Name"] = value

    @property
    def generator_4_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_4_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_4_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 4 Rated Thermal to Electrical Power Ratio"]

    @generator_4_rated_thermal_to_electrical_power_ratio.setter
    def generator_4_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 4 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 4 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_4_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 4 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_5_name(self):
        """Get generator_5_name

        Returns:
            str: the value of `generator_5_name` or None if not set
        """
        return self._data["Generator 5 Name"]

    @generator_5_name.setter
    def generator_5_name(self, value=None):
        """  Corresponds to IDD Field `Generator 5 Name`

        Args:
            value (str): value for IDD Field `Generator 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_5_name`')
        self._data["Generator 5 Name"] = value

    @property
    def generator_5_object_type(self):
        """Get generator_5_object_type

        Returns:
            str: the value of `generator_5_object_type` or None if not set
        """
        return self._data["Generator 5 Object Type"]

    @generator_5_object_type.setter
    def generator_5_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 5 Object Type`

        Args:
            value (str): value for IDD Field `Generator 5 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_5_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_5_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_5_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_5_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 5 Object Type"] = value

    @property
    def generator_5_rated_electric_power_output(self):
        """Get generator_5_rated_electric_power_output

        Returns:
            float: the value of `generator_5_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 5 Rated Electric Power Output"]

    @generator_5_rated_electric_power_output.setter
    def generator_5_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 5 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 5 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_5_rated_electric_power_output`'.format(value))
        self._data["Generator 5 Rated Electric Power Output"] = value

    @property
    def generator_5_availability_schedule_name(self):
        """Get generator_5_availability_schedule_name

        Returns:
            str: the value of `generator_5_availability_schedule_name` or None if not set
        """
        return self._data["Generator 5 Availability Schedule Name"]

    @generator_5_availability_schedule_name.setter
    def generator_5_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 5 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 5 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_5_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_5_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_5_availability_schedule_name`')
        self._data["Generator 5 Availability Schedule Name"] = value

    @property
    def generator_5_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_5_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_5_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 5 Rated Thermal to Electrical Power Ratio"]

    @generator_5_rated_thermal_to_electrical_power_ratio.setter
    def generator_5_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 5 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 5 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_5_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 5 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_6_name(self):
        """Get generator_6_name

        Returns:
            str: the value of `generator_6_name` or None if not set
        """
        return self._data["Generator 6 Name"]

    @generator_6_name.setter
    def generator_6_name(self, value=None):
        """  Corresponds to IDD Field `Generator 6 Name`

        Args:
            value (str): value for IDD Field `Generator 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_6_name`')
        self._data["Generator 6 Name"] = value

    @property
    def generator_6_object_type(self):
        """Get generator_6_object_type

        Returns:
            str: the value of `generator_6_object_type` or None if not set
        """
        return self._data["Generator 6 Object Type"]

    @generator_6_object_type.setter
    def generator_6_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 6 Object Type`

        Args:
            value (str): value for IDD Field `Generator 6 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_6_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_6_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_6_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_6_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 6 Object Type"] = value

    @property
    def generator_6_rated_electric_power_output(self):
        """Get generator_6_rated_electric_power_output

        Returns:
            float: the value of `generator_6_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 6 Rated Electric Power Output"]

    @generator_6_rated_electric_power_output.setter
    def generator_6_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 6 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 6 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_6_rated_electric_power_output`'.format(value))
        self._data["Generator 6 Rated Electric Power Output"] = value

    @property
    def generator_6_availability_schedule_name(self):
        """Get generator_6_availability_schedule_name

        Returns:
            str: the value of `generator_6_availability_schedule_name` or None if not set
        """
        return self._data["Generator 6 Availability Schedule Name"]

    @generator_6_availability_schedule_name.setter
    def generator_6_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 6 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 6 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_6_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_6_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_6_availability_schedule_name`')
        self._data["Generator 6 Availability Schedule Name"] = value

    @property
    def generator_6_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_6_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_6_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 6 Rated Thermal to Electrical Power Ratio"]

    @generator_6_rated_thermal_to_electrical_power_ratio.setter
    def generator_6_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 6 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 6 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_6_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 6 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_7_name(self):
        """Get generator_7_name

        Returns:
            str: the value of `generator_7_name` or None if not set
        """
        return self._data["Generator 7 Name"]

    @generator_7_name.setter
    def generator_7_name(self, value=None):
        """  Corresponds to IDD Field `Generator 7 Name`

        Args:
            value (str): value for IDD Field `Generator 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_7_name`')
        self._data["Generator 7 Name"] = value

    @property
    def generator_7_object_type(self):
        """Get generator_7_object_type

        Returns:
            str: the value of `generator_7_object_type` or None if not set
        """
        return self._data["Generator 7 Object Type"]

    @generator_7_object_type.setter
    def generator_7_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 7 Object Type`

        Args:
            value (str): value for IDD Field `Generator 7 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_7_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_7_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_7_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_7_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 7 Object Type"] = value

    @property
    def generator_7_rated_electric_power_output(self):
        """Get generator_7_rated_electric_power_output

        Returns:
            float: the value of `generator_7_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 7 Rated Electric Power Output"]

    @generator_7_rated_electric_power_output.setter
    def generator_7_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 7 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 7 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_7_rated_electric_power_output`'.format(value))
        self._data["Generator 7 Rated Electric Power Output"] = value

    @property
    def generator_7_availability_schedule_name(self):
        """Get generator_7_availability_schedule_name

        Returns:
            str: the value of `generator_7_availability_schedule_name` or None if not set
        """
        return self._data["Generator 7 Availability Schedule Name"]

    @generator_7_availability_schedule_name.setter
    def generator_7_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 7 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 7 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_7_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_7_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_7_availability_schedule_name`')
        self._data["Generator 7 Availability Schedule Name"] = value

    @property
    def generator_7_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_7_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_7_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 7 Rated Thermal to Electrical Power Ratio"]

    @generator_7_rated_thermal_to_electrical_power_ratio.setter
    def generator_7_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 7 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 7 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_7_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 7 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_8_name(self):
        """Get generator_8_name

        Returns:
            str: the value of `generator_8_name` or None if not set
        """
        return self._data["Generator 8 Name"]

    @generator_8_name.setter
    def generator_8_name(self, value=None):
        """  Corresponds to IDD Field `Generator 8 Name`

        Args:
            value (str): value for IDD Field `Generator 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_8_name`')
        self._data["Generator 8 Name"] = value

    @property
    def generator_8_object_type(self):
        """Get generator_8_object_type

        Returns:
            str: the value of `generator_8_object_type` or None if not set
        """
        return self._data["Generator 8 Object Type"]

    @generator_8_object_type.setter
    def generator_8_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 8 Object Type`

        Args:
            value (str): value for IDD Field `Generator 8 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_8_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_8_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_8_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_8_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 8 Object Type"] = value

    @property
    def generator_8_rated_electric_power_output(self):
        """Get generator_8_rated_electric_power_output

        Returns:
            float: the value of `generator_8_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 8 Rated Electric Power Output"]

    @generator_8_rated_electric_power_output.setter
    def generator_8_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 8 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 8 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_8_rated_electric_power_output`'.format(value))
        self._data["Generator 8 Rated Electric Power Output"] = value

    @property
    def generator_8_availability_schedule_name(self):
        """Get generator_8_availability_schedule_name

        Returns:
            str: the value of `generator_8_availability_schedule_name` or None if not set
        """
        return self._data["Generator 8 Availability Schedule Name"]

    @generator_8_availability_schedule_name.setter
    def generator_8_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 8 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 8 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_8_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_8_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_8_availability_schedule_name`')
        self._data["Generator 8 Availability Schedule Name"] = value

    @property
    def generator_8_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_8_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_8_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 8 Rated Thermal to Electrical Power Ratio"]

    @generator_8_rated_thermal_to_electrical_power_ratio.setter
    def generator_8_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 8 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 8 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_8_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 8 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_9_name(self):
        """Get generator_9_name

        Returns:
            str: the value of `generator_9_name` or None if not set
        """
        return self._data["Generator 9 Name"]

    @generator_9_name.setter
    def generator_9_name(self, value=None):
        """  Corresponds to IDD Field `Generator 9 Name`

        Args:
            value (str): value for IDD Field `Generator 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_9_name`')
        self._data["Generator 9 Name"] = value

    @property
    def generator_9_object_type(self):
        """Get generator_9_object_type

        Returns:
            str: the value of `generator_9_object_type` or None if not set
        """
        return self._data["Generator 9 Object Type"]

    @generator_9_object_type.setter
    def generator_9_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 9 Object Type`

        Args:
            value (str): value for IDD Field `Generator 9 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_9_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_9_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_9_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_9_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 9 Object Type"] = value

    @property
    def generator_9_rated_electric_power_output(self):
        """Get generator_9_rated_electric_power_output

        Returns:
            float: the value of `generator_9_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 9 Rated Electric Power Output"]

    @generator_9_rated_electric_power_output.setter
    def generator_9_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 9 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 9 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_9_rated_electric_power_output`'.format(value))
        self._data["Generator 9 Rated Electric Power Output"] = value

    @property
    def generator_9_availability_schedule_name(self):
        """Get generator_9_availability_schedule_name

        Returns:
            str: the value of `generator_9_availability_schedule_name` or None if not set
        """
        return self._data["Generator 9 Availability Schedule Name"]

    @generator_9_availability_schedule_name.setter
    def generator_9_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 9 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 9 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_9_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_9_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_9_availability_schedule_name`')
        self._data["Generator 9 Availability Schedule Name"] = value

    @property
    def generator_9_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_9_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_9_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 9 Rated Thermal to Electrical Power Ratio"]

    @generator_9_rated_thermal_to_electrical_power_ratio.setter
    def generator_9_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 9 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 9 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_9_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 9 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_10_name(self):
        """Get generator_10_name

        Returns:
            str: the value of `generator_10_name` or None if not set
        """
        return self._data["Generator 10 Name"]

    @generator_10_name.setter
    def generator_10_name(self, value=None):
        """  Corresponds to IDD Field `Generator 10 Name`

        Args:
            value (str): value for IDD Field `Generator 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_10_name`')
        self._data["Generator 10 Name"] = value

    @property
    def generator_10_object_type(self):
        """Get generator_10_object_type

        Returns:
            str: the value of `generator_10_object_type` or None if not set
        """
        return self._data["Generator 10 Object Type"]

    @generator_10_object_type.setter
    def generator_10_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 10 Object Type`

        Args:
            value (str): value for IDD Field `Generator 10 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_10_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_10_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_10_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_10_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 10 Object Type"] = value

    @property
    def generator_10_rated_electric_power_output(self):
        """Get generator_10_rated_electric_power_output

        Returns:
            float: the value of `generator_10_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 10 Rated Electric Power Output"]

    @generator_10_rated_electric_power_output.setter
    def generator_10_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 10 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 10 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_10_rated_electric_power_output`'.format(value))
        self._data["Generator 10 Rated Electric Power Output"] = value

    @property
    def generator_10_availability_schedule_name(self):
        """Get generator_10_availability_schedule_name

        Returns:
            str: the value of `generator_10_availability_schedule_name` or None if not set
        """
        return self._data["Generator 10 Availability Schedule Name"]

    @generator_10_availability_schedule_name.setter
    def generator_10_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 10 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 10 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_10_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_10_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_10_availability_schedule_name`')
        self._data["Generator 10 Availability Schedule Name"] = value

    @property
    def generator_10_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_10_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_10_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 10 Rated Thermal to Electrical Power Ratio"]

    @generator_10_rated_thermal_to_electrical_power_ratio.setter
    def generator_10_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 10 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 10 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_10_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 10 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_11_name(self):
        """Get generator_11_name

        Returns:
            str: the value of `generator_11_name` or None if not set
        """
        return self._data["Generator 11 Name"]

    @generator_11_name.setter
    def generator_11_name(self, value=None):
        """  Corresponds to IDD Field `Generator 11 Name`

        Args:
            value (str): value for IDD Field `Generator 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_11_name`')
        self._data["Generator 11 Name"] = value

    @property
    def generator_11_object_type(self):
        """Get generator_11_object_type

        Returns:
            str: the value of `generator_11_object_type` or None if not set
        """
        return self._data["Generator 11 Object Type"]

    @generator_11_object_type.setter
    def generator_11_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 11 Object Type`

        Args:
            value (str): value for IDD Field `Generator 11 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_11_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_11_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_11_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_11_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_11_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 11 Object Type"] = value

    @property
    def generator_11_rated_electric_power_output(self):
        """Get generator_11_rated_electric_power_output

        Returns:
            float: the value of `generator_11_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 11 Rated Electric Power Output"]

    @generator_11_rated_electric_power_output.setter
    def generator_11_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 11 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 11 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_11_rated_electric_power_output`'.format(value))
        self._data["Generator 11 Rated Electric Power Output"] = value

    @property
    def generator_11_availability_schedule_name(self):
        """Get generator_11_availability_schedule_name

        Returns:
            str: the value of `generator_11_availability_schedule_name` or None if not set
        """
        return self._data["Generator 11 Availability Schedule Name"]

    @generator_11_availability_schedule_name.setter
    def generator_11_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 11 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 11 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_11_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_11_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_11_availability_schedule_name`')
        self._data["Generator 11 Availability Schedule Name"] = value

    @property
    def generator_11_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_11_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_11_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 11 Rated Thermal to Electrical Power Ratio"]

    @generator_11_rated_thermal_to_electrical_power_ratio.setter
    def generator_11_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 11 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 11 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_11_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 11 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_12_name(self):
        """Get generator_12_name

        Returns:
            str: the value of `generator_12_name` or None if not set
        """
        return self._data["Generator 12 Name"]

    @generator_12_name.setter
    def generator_12_name(self, value=None):
        """  Corresponds to IDD Field `Generator 12 Name`

        Args:
            value (str): value for IDD Field `Generator 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_12_name`')
        self._data["Generator 12 Name"] = value

    @property
    def generator_12_object_type(self):
        """Get generator_12_object_type

        Returns:
            str: the value of `generator_12_object_type` or None if not set
        """
        return self._data["Generator 12 Object Type"]

    @generator_12_object_type.setter
    def generator_12_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 12 Object Type`

        Args:
            value (str): value for IDD Field `Generator 12 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_12_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_12_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_12_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_12_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_12_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 12 Object Type"] = value

    @property
    def generator_12_rated_electric_power_output(self):
        """Get generator_12_rated_electric_power_output

        Returns:
            float: the value of `generator_12_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 12 Rated Electric Power Output"]

    @generator_12_rated_electric_power_output.setter
    def generator_12_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 12 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 12 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_12_rated_electric_power_output`'.format(value))
        self._data["Generator 12 Rated Electric Power Output"] = value

    @property
    def generator_12_availability_schedule_name(self):
        """Get generator_12_availability_schedule_name

        Returns:
            str: the value of `generator_12_availability_schedule_name` or None if not set
        """
        return self._data["Generator 12 Availability Schedule Name"]

    @generator_12_availability_schedule_name.setter
    def generator_12_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 12 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 12 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_12_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_12_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_12_availability_schedule_name`')
        self._data["Generator 12 Availability Schedule Name"] = value

    @property
    def generator_12_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_12_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_12_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 12 Rated Thermal to Electrical Power Ratio"]

    @generator_12_rated_thermal_to_electrical_power_ratio.setter
    def generator_12_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 12 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 12 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_12_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 12 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_13_name(self):
        """Get generator_13_name

        Returns:
            str: the value of `generator_13_name` or None if not set
        """
        return self._data["Generator 13 Name"]

    @generator_13_name.setter
    def generator_13_name(self, value=None):
        """  Corresponds to IDD Field `Generator 13 Name`

        Args:
            value (str): value for IDD Field `Generator 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_13_name`')
        self._data["Generator 13 Name"] = value

    @property
    def generator_13_object_type(self):
        """Get generator_13_object_type

        Returns:
            str: the value of `generator_13_object_type` or None if not set
        """
        return self._data["Generator 13 Object Type"]

    @generator_13_object_type.setter
    def generator_13_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 13 Object Type`

        Args:
            value (str): value for IDD Field `Generator 13 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_13_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_13_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_13_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_13_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_13_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 13 Object Type"] = value

    @property
    def generator_13_rated_electric_power_output(self):
        """Get generator_13_rated_electric_power_output

        Returns:
            float: the value of `generator_13_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 13 Rated Electric Power Output"]

    @generator_13_rated_electric_power_output.setter
    def generator_13_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 13 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 13 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_13_rated_electric_power_output`'.format(value))
        self._data["Generator 13 Rated Electric Power Output"] = value

    @property
    def generator_13_availability_schedule_name(self):
        """Get generator_13_availability_schedule_name

        Returns:
            str: the value of `generator_13_availability_schedule_name` or None if not set
        """
        return self._data["Generator 13 Availability Schedule Name"]

    @generator_13_availability_schedule_name.setter
    def generator_13_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 13 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 13 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_13_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_13_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_13_availability_schedule_name`')
        self._data["Generator 13 Availability Schedule Name"] = value

    @property
    def generator_13_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_13_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_13_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 13 Rated Thermal to Electrical Power Ratio"]

    @generator_13_rated_thermal_to_electrical_power_ratio.setter
    def generator_13_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 13 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 13 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_13_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 13 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_14_name(self):
        """Get generator_14_name

        Returns:
            str: the value of `generator_14_name` or None if not set
        """
        return self._data["Generator 14 Name"]

    @generator_14_name.setter
    def generator_14_name(self, value=None):
        """  Corresponds to IDD Field `Generator 14 Name`

        Args:
            value (str): value for IDD Field `Generator 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_14_name`')
        self._data["Generator 14 Name"] = value

    @property
    def generator_14_object_type(self):
        """Get generator_14_object_type

        Returns:
            str: the value of `generator_14_object_type` or None if not set
        """
        return self._data["Generator 14 Object Type"]

    @generator_14_object_type.setter
    def generator_14_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 14 Object Type`

        Args:
            value (str): value for IDD Field `Generator 14 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_14_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_14_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_14_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_14_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_14_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 14 Object Type"] = value

    @property
    def generator_14_rated_electric_power_output(self):
        """Get generator_14_rated_electric_power_output

        Returns:
            float: the value of `generator_14_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 14 Rated Electric Power Output"]

    @generator_14_rated_electric_power_output.setter
    def generator_14_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 14 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 14 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_14_rated_electric_power_output`'.format(value))
        self._data["Generator 14 Rated Electric Power Output"] = value

    @property
    def generator_14_availability_schedule_name(self):
        """Get generator_14_availability_schedule_name

        Returns:
            str: the value of `generator_14_availability_schedule_name` or None if not set
        """
        return self._data["Generator 14 Availability Schedule Name"]

    @generator_14_availability_schedule_name.setter
    def generator_14_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 14 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 14 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_14_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_14_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_14_availability_schedule_name`')
        self._data["Generator 14 Availability Schedule Name"] = value

    @property
    def generator_14_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_14_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_14_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 14 Rated Thermal to Electrical Power Ratio"]

    @generator_14_rated_thermal_to_electrical_power_ratio.setter
    def generator_14_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 14 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 14 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_14_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 14 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_15_name(self):
        """Get generator_15_name

        Returns:
            str: the value of `generator_15_name` or None if not set
        """
        return self._data["Generator 15 Name"]

    @generator_15_name.setter
    def generator_15_name(self, value=None):
        """  Corresponds to IDD Field `Generator 15 Name`

        Args:
            value (str): value for IDD Field `Generator 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_15_name`')
        self._data["Generator 15 Name"] = value

    @property
    def generator_15_object_type(self):
        """Get generator_15_object_type

        Returns:
            str: the value of `generator_15_object_type` or None if not set
        """
        return self._data["Generator 15 Object Type"]

    @generator_15_object_type.setter
    def generator_15_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 15 Object Type`

        Args:
            value (str): value for IDD Field `Generator 15 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_15_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_15_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_15_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_15_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_15_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 15 Object Type"] = value

    @property
    def generator_15_rated_electric_power_output(self):
        """Get generator_15_rated_electric_power_output

        Returns:
            float: the value of `generator_15_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 15 Rated Electric Power Output"]

    @generator_15_rated_electric_power_output.setter
    def generator_15_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 15 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 15 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_15_rated_electric_power_output`'.format(value))
        self._data["Generator 15 Rated Electric Power Output"] = value

    @property
    def generator_15_availability_schedule_name(self):
        """Get generator_15_availability_schedule_name

        Returns:
            str: the value of `generator_15_availability_schedule_name` or None if not set
        """
        return self._data["Generator 15 Availability Schedule Name"]

    @generator_15_availability_schedule_name.setter
    def generator_15_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 15 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 15 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_15_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_15_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_15_availability_schedule_name`')
        self._data["Generator 15 Availability Schedule Name"] = value

    @property
    def generator_15_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_15_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_15_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 15 Rated Thermal to Electrical Power Ratio"]

    @generator_15_rated_thermal_to_electrical_power_ratio.setter
    def generator_15_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 15 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 15 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_15_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 15 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_16_name(self):
        """Get generator_16_name

        Returns:
            str: the value of `generator_16_name` or None if not set
        """
        return self._data["Generator 16 Name"]

    @generator_16_name.setter
    def generator_16_name(self, value=None):
        """  Corresponds to IDD Field `Generator 16 Name`

        Args:
            value (str): value for IDD Field `Generator 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_16_name`')
        self._data["Generator 16 Name"] = value

    @property
    def generator_16_object_type(self):
        """Get generator_16_object_type

        Returns:
            str: the value of `generator_16_object_type` or None if not set
        """
        return self._data["Generator 16 Object Type"]

    @generator_16_object_type.setter
    def generator_16_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 16 Object Type`

        Args:
            value (str): value for IDD Field `Generator 16 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_16_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_16_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_16_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_16_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_16_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 16 Object Type"] = value

    @property
    def generator_16_rated_electric_power_output(self):
        """Get generator_16_rated_electric_power_output

        Returns:
            float: the value of `generator_16_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 16 Rated Electric Power Output"]

    @generator_16_rated_electric_power_output.setter
    def generator_16_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 16 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 16 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_16_rated_electric_power_output`'.format(value))
        self._data["Generator 16 Rated Electric Power Output"] = value

    @property
    def generator_16_availability_schedule_name(self):
        """Get generator_16_availability_schedule_name

        Returns:
            str: the value of `generator_16_availability_schedule_name` or None if not set
        """
        return self._data["Generator 16 Availability Schedule Name"]

    @generator_16_availability_schedule_name.setter
    def generator_16_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 16 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 16 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_16_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_16_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_16_availability_schedule_name`')
        self._data["Generator 16 Availability Schedule Name"] = value

    @property
    def generator_16_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_16_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_16_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 16 Rated Thermal to Electrical Power Ratio"]

    @generator_16_rated_thermal_to_electrical_power_ratio.setter
    def generator_16_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 16 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 16 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_16_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 16 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_17_name(self):
        """Get generator_17_name

        Returns:
            str: the value of `generator_17_name` or None if not set
        """
        return self._data["Generator 17 Name"]

    @generator_17_name.setter
    def generator_17_name(self, value=None):
        """  Corresponds to IDD Field `Generator 17 Name`

        Args:
            value (str): value for IDD Field `Generator 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_17_name`')
        self._data["Generator 17 Name"] = value

    @property
    def generator_17_object_type(self):
        """Get generator_17_object_type

        Returns:
            str: the value of `generator_17_object_type` or None if not set
        """
        return self._data["Generator 17 Object Type"]

    @generator_17_object_type.setter
    def generator_17_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 17 Object Type`

        Args:
            value (str): value for IDD Field `Generator 17 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_17_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_17_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_17_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_17_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_17_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 17 Object Type"] = value

    @property
    def generator_17_rated_electric_power_output(self):
        """Get generator_17_rated_electric_power_output

        Returns:
            float: the value of `generator_17_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 17 Rated Electric Power Output"]

    @generator_17_rated_electric_power_output.setter
    def generator_17_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 17 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 17 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_17_rated_electric_power_output`'.format(value))
        self._data["Generator 17 Rated Electric Power Output"] = value

    @property
    def generator_17_availability_schedule_name(self):
        """Get generator_17_availability_schedule_name

        Returns:
            str: the value of `generator_17_availability_schedule_name` or None if not set
        """
        return self._data["Generator 17 Availability Schedule Name"]

    @generator_17_availability_schedule_name.setter
    def generator_17_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 17 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 17 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_17_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_17_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_17_availability_schedule_name`')
        self._data["Generator 17 Availability Schedule Name"] = value

    @property
    def generator_17_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_17_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_17_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 17 Rated Thermal to Electrical Power Ratio"]

    @generator_17_rated_thermal_to_electrical_power_ratio.setter
    def generator_17_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 17 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 17 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_17_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 17 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_18_name(self):
        """Get generator_18_name

        Returns:
            str: the value of `generator_18_name` or None if not set
        """
        return self._data["Generator 18 Name"]

    @generator_18_name.setter
    def generator_18_name(self, value=None):
        """  Corresponds to IDD Field `Generator 18 Name`

        Args:
            value (str): value for IDD Field `Generator 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_18_name`')
        self._data["Generator 18 Name"] = value

    @property
    def generator_18_object_type(self):
        """Get generator_18_object_type

        Returns:
            str: the value of `generator_18_object_type` or None if not set
        """
        return self._data["Generator 18 Object Type"]

    @generator_18_object_type.setter
    def generator_18_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 18 Object Type`

        Args:
            value (str): value for IDD Field `Generator 18 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_18_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_18_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_18_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_18_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_18_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 18 Object Type"] = value

    @property
    def generator_18_rated_electric_power_output(self):
        """Get generator_18_rated_electric_power_output

        Returns:
            float: the value of `generator_18_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 18 Rated Electric Power Output"]

    @generator_18_rated_electric_power_output.setter
    def generator_18_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 18 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 18 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_18_rated_electric_power_output`'.format(value))
        self._data["Generator 18 Rated Electric Power Output"] = value

    @property
    def generator_18_availability_schedule_name(self):
        """Get generator_18_availability_schedule_name

        Returns:
            str: the value of `generator_18_availability_schedule_name` or None if not set
        """
        return self._data["Generator 18 Availability Schedule Name"]

    @generator_18_availability_schedule_name.setter
    def generator_18_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 18 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 18 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_18_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_18_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_18_availability_schedule_name`')
        self._data["Generator 18 Availability Schedule Name"] = value

    @property
    def generator_18_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_18_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_18_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 18 Rated Thermal to Electrical Power Ratio"]

    @generator_18_rated_thermal_to_electrical_power_ratio.setter
    def generator_18_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 18 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 18 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_18_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 18 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_19_name(self):
        """Get generator_19_name

        Returns:
            str: the value of `generator_19_name` or None if not set
        """
        return self._data["Generator 19 Name"]

    @generator_19_name.setter
    def generator_19_name(self, value=None):
        """  Corresponds to IDD Field `Generator 19 Name`

        Args:
            value (str): value for IDD Field `Generator 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_19_name`')
        self._data["Generator 19 Name"] = value

    @property
    def generator_19_object_type(self):
        """Get generator_19_object_type

        Returns:
            str: the value of `generator_19_object_type` or None if not set
        """
        return self._data["Generator 19 Object Type"]

    @generator_19_object_type.setter
    def generator_19_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 19 Object Type`

        Args:
            value (str): value for IDD Field `Generator 19 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_19_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_19_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_19_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_19_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_19_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 19 Object Type"] = value

    @property
    def generator_19_rated_electric_power_output(self):
        """Get generator_19_rated_electric_power_output

        Returns:
            float: the value of `generator_19_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 19 Rated Electric Power Output"]

    @generator_19_rated_electric_power_output.setter
    def generator_19_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 19 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 19 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_19_rated_electric_power_output`'.format(value))
        self._data["Generator 19 Rated Electric Power Output"] = value

    @property
    def generator_19_availability_schedule_name(self):
        """Get generator_19_availability_schedule_name

        Returns:
            str: the value of `generator_19_availability_schedule_name` or None if not set
        """
        return self._data["Generator 19 Availability Schedule Name"]

    @generator_19_availability_schedule_name.setter
    def generator_19_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 19 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 19 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_19_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_19_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_19_availability_schedule_name`')
        self._data["Generator 19 Availability Schedule Name"] = value

    @property
    def generator_19_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_19_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_19_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 19 Rated Thermal to Electrical Power Ratio"]

    @generator_19_rated_thermal_to_electrical_power_ratio.setter
    def generator_19_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 19 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 19 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_19_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 19 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_20_name(self):
        """Get generator_20_name

        Returns:
            str: the value of `generator_20_name` or None if not set
        """
        return self._data["Generator 20 Name"]

    @generator_20_name.setter
    def generator_20_name(self, value=None):
        """  Corresponds to IDD Field `Generator 20 Name`

        Args:
            value (str): value for IDD Field `Generator 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_20_name`')
        self._data["Generator 20 Name"] = value

    @property
    def generator_20_object_type(self):
        """Get generator_20_object_type

        Returns:
            str: the value of `generator_20_object_type` or None if not set
        """
        return self._data["Generator 20 Object Type"]

    @generator_20_object_type.setter
    def generator_20_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 20 Object Type`

        Args:
            value (str): value for IDD Field `Generator 20 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_20_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_20_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_20_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_20_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_20_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 20 Object Type"] = value

    @property
    def generator_20_rated_electric_power_output(self):
        """Get generator_20_rated_electric_power_output

        Returns:
            float: the value of `generator_20_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 20 Rated Electric Power Output"]

    @generator_20_rated_electric_power_output.setter
    def generator_20_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 20 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 20 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_20_rated_electric_power_output`'.format(value))
        self._data["Generator 20 Rated Electric Power Output"] = value

    @property
    def generator_20_availability_schedule_name(self):
        """Get generator_20_availability_schedule_name

        Returns:
            str: the value of `generator_20_availability_schedule_name` or None if not set
        """
        return self._data["Generator 20 Availability Schedule Name"]

    @generator_20_availability_schedule_name.setter
    def generator_20_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 20 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 20 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_20_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_20_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_20_availability_schedule_name`')
        self._data["Generator 20 Availability Schedule Name"] = value

    @property
    def generator_20_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_20_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_20_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 20 Rated Thermal to Electrical Power Ratio"]

    @generator_20_rated_thermal_to_electrical_power_ratio.setter
    def generator_20_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 20 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 20 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_20_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 20 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_21_name(self):
        """Get generator_21_name

        Returns:
            str: the value of `generator_21_name` or None if not set
        """
        return self._data["Generator 21 Name"]

    @generator_21_name.setter
    def generator_21_name(self, value=None):
        """  Corresponds to IDD Field `Generator 21 Name`

        Args:
            value (str): value for IDD Field `Generator 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_21_name`')
        self._data["Generator 21 Name"] = value

    @property
    def generator_21_object_type(self):
        """Get generator_21_object_type

        Returns:
            str: the value of `generator_21_object_type` or None if not set
        """
        return self._data["Generator 21 Object Type"]

    @generator_21_object_type.setter
    def generator_21_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 21 Object Type`

        Args:
            value (str): value for IDD Field `Generator 21 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_21_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_21_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_21_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_21_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_21_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 21 Object Type"] = value

    @property
    def generator_21_rated_electric_power_output(self):
        """Get generator_21_rated_electric_power_output

        Returns:
            float: the value of `generator_21_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 21 Rated Electric Power Output"]

    @generator_21_rated_electric_power_output.setter
    def generator_21_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 21 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 21 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_21_rated_electric_power_output`'.format(value))
        self._data["Generator 21 Rated Electric Power Output"] = value

    @property
    def generator_21_availability_schedule_name(self):
        """Get generator_21_availability_schedule_name

        Returns:
            str: the value of `generator_21_availability_schedule_name` or None if not set
        """
        return self._data["Generator 21 Availability Schedule Name"]

    @generator_21_availability_schedule_name.setter
    def generator_21_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 21 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 21 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_21_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_21_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_21_availability_schedule_name`')
        self._data["Generator 21 Availability Schedule Name"] = value

    @property
    def generator_21_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_21_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_21_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 21 Rated Thermal to Electrical Power Ratio"]

    @generator_21_rated_thermal_to_electrical_power_ratio.setter
    def generator_21_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 21 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 21 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_21_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 21 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_22_name(self):
        """Get generator_22_name

        Returns:
            str: the value of `generator_22_name` or None if not set
        """
        return self._data["Generator 22 Name"]

    @generator_22_name.setter
    def generator_22_name(self, value=None):
        """  Corresponds to IDD Field `Generator 22 Name`

        Args:
            value (str): value for IDD Field `Generator 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_22_name`')
        self._data["Generator 22 Name"] = value

    @property
    def generator_22_object_type(self):
        """Get generator_22_object_type

        Returns:
            str: the value of `generator_22_object_type` or None if not set
        """
        return self._data["Generator 22 Object Type"]

    @generator_22_object_type.setter
    def generator_22_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 22 Object Type`

        Args:
            value (str): value for IDD Field `Generator 22 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_22_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_22_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_22_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_22_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_22_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 22 Object Type"] = value

    @property
    def generator_22_rated_electric_power_output(self):
        """Get generator_22_rated_electric_power_output

        Returns:
            float: the value of `generator_22_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 22 Rated Electric Power Output"]

    @generator_22_rated_electric_power_output.setter
    def generator_22_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 22 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 22 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_22_rated_electric_power_output`'.format(value))
        self._data["Generator 22 Rated Electric Power Output"] = value

    @property
    def generator_22_availability_schedule_name(self):
        """Get generator_22_availability_schedule_name

        Returns:
            str: the value of `generator_22_availability_schedule_name` or None if not set
        """
        return self._data["Generator 22 Availability Schedule Name"]

    @generator_22_availability_schedule_name.setter
    def generator_22_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 22 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 22 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_22_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_22_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_22_availability_schedule_name`')
        self._data["Generator 22 Availability Schedule Name"] = value

    @property
    def generator_22_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_22_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_22_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 22 Rated Thermal to Electrical Power Ratio"]

    @generator_22_rated_thermal_to_electrical_power_ratio.setter
    def generator_22_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 22 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 22 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_22_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 22 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_23_name(self):
        """Get generator_23_name

        Returns:
            str: the value of `generator_23_name` or None if not set
        """
        return self._data["Generator 23 Name"]

    @generator_23_name.setter
    def generator_23_name(self, value=None):
        """  Corresponds to IDD Field `Generator 23 Name`

        Args:
            value (str): value for IDD Field `Generator 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_23_name`')
        self._data["Generator 23 Name"] = value

    @property
    def generator_23_object_type(self):
        """Get generator_23_object_type

        Returns:
            str: the value of `generator_23_object_type` or None if not set
        """
        return self._data["Generator 23 Object Type"]

    @generator_23_object_type.setter
    def generator_23_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 23 Object Type`

        Args:
            value (str): value for IDD Field `Generator 23 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_23_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_23_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_23_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_23_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_23_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 23 Object Type"] = value

    @property
    def generator_23_rated_electric_power_output(self):
        """Get generator_23_rated_electric_power_output

        Returns:
            float: the value of `generator_23_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 23 Rated Electric Power Output"]

    @generator_23_rated_electric_power_output.setter
    def generator_23_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 23 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 23 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_23_rated_electric_power_output`'.format(value))
        self._data["Generator 23 Rated Electric Power Output"] = value

    @property
    def generator_23_availability_schedule_name(self):
        """Get generator_23_availability_schedule_name

        Returns:
            str: the value of `generator_23_availability_schedule_name` or None if not set
        """
        return self._data["Generator 23 Availability Schedule Name"]

    @generator_23_availability_schedule_name.setter
    def generator_23_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 23 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 23 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_23_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_23_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_23_availability_schedule_name`')
        self._data["Generator 23 Availability Schedule Name"] = value

    @property
    def generator_23_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_23_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_23_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 23 Rated Thermal to Electrical Power Ratio"]

    @generator_23_rated_thermal_to_electrical_power_ratio.setter
    def generator_23_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 23 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 23 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_23_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 23 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_24_name(self):
        """Get generator_24_name

        Returns:
            str: the value of `generator_24_name` or None if not set
        """
        return self._data["Generator 24 Name"]

    @generator_24_name.setter
    def generator_24_name(self, value=None):
        """  Corresponds to IDD Field `Generator 24 Name`

        Args:
            value (str): value for IDD Field `Generator 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_24_name`')
        self._data["Generator 24 Name"] = value

    @property
    def generator_24_object_type(self):
        """Get generator_24_object_type

        Returns:
            str: the value of `generator_24_object_type` or None if not set
        """
        return self._data["Generator 24 Object Type"]

    @generator_24_object_type.setter
    def generator_24_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 24 Object Type`

        Args:
            value (str): value for IDD Field `Generator 24 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_24_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_24_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_24_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_24_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_24_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 24 Object Type"] = value

    @property
    def generator_24_rated_electric_power_output(self):
        """Get generator_24_rated_electric_power_output

        Returns:
            float: the value of `generator_24_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 24 Rated Electric Power Output"]

    @generator_24_rated_electric_power_output.setter
    def generator_24_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 24 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 24 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_24_rated_electric_power_output`'.format(value))
        self._data["Generator 24 Rated Electric Power Output"] = value

    @property
    def generator_24_availability_schedule_name(self):
        """Get generator_24_availability_schedule_name

        Returns:
            str: the value of `generator_24_availability_schedule_name` or None if not set
        """
        return self._data["Generator 24 Availability Schedule Name"]

    @generator_24_availability_schedule_name.setter
    def generator_24_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 24 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 24 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_24_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_24_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_24_availability_schedule_name`')
        self._data["Generator 24 Availability Schedule Name"] = value

    @property
    def generator_24_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_24_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_24_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 24 Rated Thermal to Electrical Power Ratio"]

    @generator_24_rated_thermal_to_electrical_power_ratio.setter
    def generator_24_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 24 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 24 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_24_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 24 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_25_name(self):
        """Get generator_25_name

        Returns:
            str: the value of `generator_25_name` or None if not set
        """
        return self._data["Generator 25 Name"]

    @generator_25_name.setter
    def generator_25_name(self, value=None):
        """  Corresponds to IDD Field `Generator 25 Name`

        Args:
            value (str): value for IDD Field `Generator 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_25_name`')
        self._data["Generator 25 Name"] = value

    @property
    def generator_25_object_type(self):
        """Get generator_25_object_type

        Returns:
            str: the value of `generator_25_object_type` or None if not set
        """
        return self._data["Generator 25 Object Type"]

    @generator_25_object_type.setter
    def generator_25_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 25 Object Type`

        Args:
            value (str): value for IDD Field `Generator 25 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_25_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_25_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_25_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_25_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_25_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 25 Object Type"] = value

    @property
    def generator_25_rated_electric_power_output(self):
        """Get generator_25_rated_electric_power_output

        Returns:
            float: the value of `generator_25_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 25 Rated Electric Power Output"]

    @generator_25_rated_electric_power_output.setter
    def generator_25_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 25 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 25 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_25_rated_electric_power_output`'.format(value))
        self._data["Generator 25 Rated Electric Power Output"] = value

    @property
    def generator_25_availability_schedule_name(self):
        """Get generator_25_availability_schedule_name

        Returns:
            str: the value of `generator_25_availability_schedule_name` or None if not set
        """
        return self._data["Generator 25 Availability Schedule Name"]

    @generator_25_availability_schedule_name.setter
    def generator_25_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 25 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 25 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_25_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_25_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_25_availability_schedule_name`')
        self._data["Generator 25 Availability Schedule Name"] = value

    @property
    def generator_25_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_25_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_25_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 25 Rated Thermal to Electrical Power Ratio"]

    @generator_25_rated_thermal_to_electrical_power_ratio.setter
    def generator_25_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 25 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 25 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_25_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 25 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_26_name(self):
        """Get generator_26_name

        Returns:
            str: the value of `generator_26_name` or None if not set
        """
        return self._data["Generator 26 Name"]

    @generator_26_name.setter
    def generator_26_name(self, value=None):
        """  Corresponds to IDD Field `Generator 26 Name`

        Args:
            value (str): value for IDD Field `Generator 26 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_26_name`')
        self._data["Generator 26 Name"] = value

    @property
    def generator_26_object_type(self):
        """Get generator_26_object_type

        Returns:
            str: the value of `generator_26_object_type` or None if not set
        """
        return self._data["Generator 26 Object Type"]

    @generator_26_object_type.setter
    def generator_26_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 26 Object Type`

        Args:
            value (str): value for IDD Field `Generator 26 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_26_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_26_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_26_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_26_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_26_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 26 Object Type"] = value

    @property
    def generator_26_rated_electric_power_output(self):
        """Get generator_26_rated_electric_power_output

        Returns:
            float: the value of `generator_26_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 26 Rated Electric Power Output"]

    @generator_26_rated_electric_power_output.setter
    def generator_26_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 26 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 26 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_26_rated_electric_power_output`'.format(value))
        self._data["Generator 26 Rated Electric Power Output"] = value

    @property
    def generator_26_availability_schedule_name(self):
        """Get generator_26_availability_schedule_name

        Returns:
            str: the value of `generator_26_availability_schedule_name` or None if not set
        """
        return self._data["Generator 26 Availability Schedule Name"]

    @generator_26_availability_schedule_name.setter
    def generator_26_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 26 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 26 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_26_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_26_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_26_availability_schedule_name`')
        self._data["Generator 26 Availability Schedule Name"] = value

    @property
    def generator_26_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_26_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_26_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 26 Rated Thermal to Electrical Power Ratio"]

    @generator_26_rated_thermal_to_electrical_power_ratio.setter
    def generator_26_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 26 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 26 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_26_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 26 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_27_name(self):
        """Get generator_27_name

        Returns:
            str: the value of `generator_27_name` or None if not set
        """
        return self._data["Generator 27 Name"]

    @generator_27_name.setter
    def generator_27_name(self, value=None):
        """  Corresponds to IDD Field `Generator 27 Name`

        Args:
            value (str): value for IDD Field `Generator 27 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_27_name`')
        self._data["Generator 27 Name"] = value

    @property
    def generator_27_object_type(self):
        """Get generator_27_object_type

        Returns:
            str: the value of `generator_27_object_type` or None if not set
        """
        return self._data["Generator 27 Object Type"]

    @generator_27_object_type.setter
    def generator_27_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 27 Object Type`

        Args:
            value (str): value for IDD Field `Generator 27 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_27_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_27_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_27_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_27_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_27_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 27 Object Type"] = value

    @property
    def generator_27_rated_electric_power_output(self):
        """Get generator_27_rated_electric_power_output

        Returns:
            float: the value of `generator_27_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 27 Rated Electric Power Output"]

    @generator_27_rated_electric_power_output.setter
    def generator_27_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 27 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 27 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_27_rated_electric_power_output`'.format(value))
        self._data["Generator 27 Rated Electric Power Output"] = value

    @property
    def generator_27_availability_schedule_name(self):
        """Get generator_27_availability_schedule_name

        Returns:
            str: the value of `generator_27_availability_schedule_name` or None if not set
        """
        return self._data["Generator 27 Availability Schedule Name"]

    @generator_27_availability_schedule_name.setter
    def generator_27_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 27 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 27 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_27_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_27_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_27_availability_schedule_name`')
        self._data["Generator 27 Availability Schedule Name"] = value

    @property
    def generator_27_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_27_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_27_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 27 Rated Thermal to Electrical Power Ratio"]

    @generator_27_rated_thermal_to_electrical_power_ratio.setter
    def generator_27_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 27 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 27 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_27_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 27 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_28_name(self):
        """Get generator_28_name

        Returns:
            str: the value of `generator_28_name` or None if not set
        """
        return self._data["Generator 28 Name"]

    @generator_28_name.setter
    def generator_28_name(self, value=None):
        """  Corresponds to IDD Field `Generator 28 Name`

        Args:
            value (str): value for IDD Field `Generator 28 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_28_name`')
        self._data["Generator 28 Name"] = value

    @property
    def generator_28_object_type(self):
        """Get generator_28_object_type

        Returns:
            str: the value of `generator_28_object_type` or None if not set
        """
        return self._data["Generator 28 Object Type"]

    @generator_28_object_type.setter
    def generator_28_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 28 Object Type`

        Args:
            value (str): value for IDD Field `Generator 28 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_28_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_28_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_28_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_28_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_28_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 28 Object Type"] = value

    @property
    def generator_28_rated_electric_power_output(self):
        """Get generator_28_rated_electric_power_output

        Returns:
            float: the value of `generator_28_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 28 Rated Electric Power Output"]

    @generator_28_rated_electric_power_output.setter
    def generator_28_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 28 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 28 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_28_rated_electric_power_output`'.format(value))
        self._data["Generator 28 Rated Electric Power Output"] = value

    @property
    def generator_28_availability_schedule_name(self):
        """Get generator_28_availability_schedule_name

        Returns:
            str: the value of `generator_28_availability_schedule_name` or None if not set
        """
        return self._data["Generator 28 Availability Schedule Name"]

    @generator_28_availability_schedule_name.setter
    def generator_28_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 28 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 28 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_28_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_28_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_28_availability_schedule_name`')
        self._data["Generator 28 Availability Schedule Name"] = value

    @property
    def generator_28_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_28_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_28_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 28 Rated Thermal to Electrical Power Ratio"]

    @generator_28_rated_thermal_to_electrical_power_ratio.setter
    def generator_28_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 28 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 28 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_28_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 28 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_29_name(self):
        """Get generator_29_name

        Returns:
            str: the value of `generator_29_name` or None if not set
        """
        return self._data["Generator 29 Name"]

    @generator_29_name.setter
    def generator_29_name(self, value=None):
        """  Corresponds to IDD Field `Generator 29 Name`

        Args:
            value (str): value for IDD Field `Generator 29 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_29_name`')
        self._data["Generator 29 Name"] = value

    @property
    def generator_29_object_type(self):
        """Get generator_29_object_type

        Returns:
            str: the value of `generator_29_object_type` or None if not set
        """
        return self._data["Generator 29 Object Type"]

    @generator_29_object_type.setter
    def generator_29_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 29 Object Type`

        Args:
            value (str): value for IDD Field `Generator 29 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_29_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_29_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_29_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_29_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_29_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 29 Object Type"] = value

    @property
    def generator_29_rated_electric_power_output(self):
        """Get generator_29_rated_electric_power_output

        Returns:
            float: the value of `generator_29_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 29 Rated Electric Power Output"]

    @generator_29_rated_electric_power_output.setter
    def generator_29_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 29 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 29 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_29_rated_electric_power_output`'.format(value))
        self._data["Generator 29 Rated Electric Power Output"] = value

    @property
    def generator_29_availability_schedule_name(self):
        """Get generator_29_availability_schedule_name

        Returns:
            str: the value of `generator_29_availability_schedule_name` or None if not set
        """
        return self._data["Generator 29 Availability Schedule Name"]

    @generator_29_availability_schedule_name.setter
    def generator_29_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 29 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 29 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_29_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_29_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_29_availability_schedule_name`')
        self._data["Generator 29 Availability Schedule Name"] = value

    @property
    def generator_29_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_29_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_29_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 29 Rated Thermal to Electrical Power Ratio"]

    @generator_29_rated_thermal_to_electrical_power_ratio.setter
    def generator_29_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 29 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 29 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_29_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 29 Rated Thermal to Electrical Power Ratio"] = value

    @property
    def generator_30_name(self):
        """Get generator_30_name

        Returns:
            str: the value of `generator_30_name` or None if not set
        """
        return self._data["Generator 30 Name"]

    @generator_30_name.setter
    def generator_30_name(self, value=None):
        """  Corresponds to IDD Field `Generator 30 Name`

        Args:
            value (str): value for IDD Field `Generator 30 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_30_name`')
        self._data["Generator 30 Name"] = value

    @property
    def generator_30_object_type(self):
        """Get generator_30_object_type

        Returns:
            str: the value of `generator_30_object_type` or None if not set
        """
        return self._data["Generator 30 Object Type"]

    @generator_30_object_type.setter
    def generator_30_object_type(self, value=None):
        """  Corresponds to IDD Field `Generator 30 Object Type`

        Args:
            value (str): value for IDD Field `Generator 30 Object Type`
                Accepted values are:
                      - Generator:InternalCombustionEngine
                      - Generator:CombustionTurbine
                      - Generator:Photovoltaic
                      - Generator:FuelCell
                      - Generator:MicroCHP
                      - Generator:MicroTurbine
                      - Generator:WindTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_30_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_30_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_30_object_type`')
            vals = {}
            vals["generator:internalcombustionengine"] = "Generator:InternalCombustionEngine"
            vals["generator:combustionturbine"] = "Generator:CombustionTurbine"
            vals["generator:photovoltaic"] = "Generator:Photovoltaic"
            vals["generator:fuelcell"] = "Generator:FuelCell"
            vals["generator:microchp"] = "Generator:MicroCHP"
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            vals["generator:windturbine"] = "Generator:WindTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_30_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_30_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator 30 Object Type"] = value

    @property
    def generator_30_rated_electric_power_output(self):
        """Get generator_30_rated_electric_power_output

        Returns:
            float: the value of `generator_30_rated_electric_power_output` or None if not set
        """
        return self._data["Generator 30 Rated Electric Power Output"]

    @generator_30_rated_electric_power_output.setter
    def generator_30_rated_electric_power_output(self, value=None):
        """  Corresponds to IDD Field `Generator 30 Rated Electric Power Output`

        Args:
            value (float): value for IDD Field `Generator 30 Rated Electric Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_30_rated_electric_power_output`'.format(value))
        self._data["Generator 30 Rated Electric Power Output"] = value

    @property
    def generator_30_availability_schedule_name(self):
        """Get generator_30_availability_schedule_name

        Returns:
            str: the value of `generator_30_availability_schedule_name` or None if not set
        """
        return self._data["Generator 30 Availability Schedule Name"]

    @generator_30_availability_schedule_name.setter
    def generator_30_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Generator 30 Availability Schedule Name`
        Availability schedule name for this generator. Schedule value > 0 means the generator is available.
        If this field is blank, the generator is always available.

        Args:
            value (str): value for IDD Field `Generator 30 Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_30_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_30_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_30_availability_schedule_name`')
        self._data["Generator 30 Availability Schedule Name"] = value

    @property
    def generator_30_rated_thermal_to_electrical_power_ratio(self):
        """Get generator_30_rated_thermal_to_electrical_power_ratio

        Returns:
            float: the value of `generator_30_rated_thermal_to_electrical_power_ratio` or None if not set
        """
        return self._data["Generator 30 Rated Thermal to Electrical Power Ratio"]

    @generator_30_rated_thermal_to_electrical_power_ratio.setter
    def generator_30_rated_thermal_to_electrical_power_ratio(self, value=None):
        """  Corresponds to IDD Field `Generator 30 Rated Thermal to Electrical Power Ratio`

        Args:
            value (float): value for IDD Field `Generator 30 Rated Thermal to Electrical Power Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `generator_30_rated_thermal_to_electrical_power_ratio`'.format(value))
        self._data["Generator 30 Rated Thermal to Electrical Power Ratio"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterInverterSimple(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Inverter:Simple`
        Electric power inverter to convert from direct current (DC) to alternating current
        (AC) in an electric load center that contains photovoltaic modules. This input
        object is for the simplest inverter model and uses a fixed efficiency.
    """
    internal_name = "ElectricLoadCenter:Inverter:Simple"
    field_count = 5
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Inverter:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Inverter Efficiency"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inverter_efficiency = None
        else:
            self.inverter_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        enter name of zone to receive inverter losses as heat
        if blank then inverter is assumed to be outdoors

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `Radiative Fraction`

        Args:
            value (float): value for IDD Field `Radiative Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')
        self._data["Radiative Fraction"] = value

    @property
    def inverter_efficiency(self):
        """Get inverter_efficiency

        Returns:
            float: the value of `inverter_efficiency` or None if not set
        """
        return self._data["Inverter Efficiency"]

    @inverter_efficiency.setter
    def inverter_efficiency(self, value=None):
        """  Corresponds to IDD Field `Inverter Efficiency`

        Args:
            value (float): value for IDD Field `Inverter Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `inverter_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inverter_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inverter_efficiency`')
        self._data["Inverter Efficiency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterInverterFunctionOfPower(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Inverter:FunctionOfPower`
        Electric power inverter to convert from direct current (DC) to alternating current
        (AC) in an electric load center that contains photovoltaic modules. This input
        object is for an inverter model where efficiency is a function of normalized
        power.
    """
    internal_name = "ElectricLoadCenter:Inverter:FunctionOfPower"
    field_count = 11
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Inverter:FunctionOfPower`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Efficiency Function of Power Curve Name"] = None
        self._data["Rated Maximum Continuous Input Power"] = None
        self._data["Minimum Efficiency"] = None
        self._data["Maximum Efficiency"] = None
        self._data["Minimum Power Output"] = None
        self._data["Maximum Power Output"] = None
        self._data["Ancillary Power Consumed In Standby"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_function_of_power_curve_name = None
        else:
            self.efficiency_function_of_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_maximum_continuous_input_power = None
        else:
            self.rated_maximum_continuous_input_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_efficiency = None
        else:
            self.minimum_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_efficiency = None
        else:
            self.maximum_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_power_output = None
        else:
            self.minimum_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_power_output = None
        else:
            self.maximum_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancillary_power_consumed_in_standby = None
        else:
            self.ancillary_power_consumed_in_standby = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Enter name of zone to receive inverter losses as heat
        if blank then inverter is assumed to be outdoors

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `Radiative Fraction`

        Args:
            value (float): value for IDD Field `Radiative Fraction`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `radiative_fraction`'.format(value))
        self._data["Radiative Fraction"] = value

    @property
    def efficiency_function_of_power_curve_name(self):
        """Get efficiency_function_of_power_curve_name

        Returns:
            str: the value of `efficiency_function_of_power_curve_name` or None if not set
        """
        return self._data["Efficiency Function of Power Curve Name"]

    @efficiency_function_of_power_curve_name.setter
    def efficiency_function_of_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Efficiency Function of Power Curve Name`
        curve describes efficiency as a function of power
        curve is normalized relative to rated power in next field
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Efficiency Function of Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `efficiency_function_of_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_function_of_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `efficiency_function_of_power_curve_name`')
        self._data["Efficiency Function of Power Curve Name"] = value

    @property
    def rated_maximum_continuous_input_power(self):
        """Get rated_maximum_continuous_input_power

        Returns:
            float: the value of `rated_maximum_continuous_input_power` or None if not set
        """
        return self._data["Rated Maximum Continuous Input Power"]

    @rated_maximum_continuous_input_power.setter
    def rated_maximum_continuous_input_power(self, value=None):
        """  Corresponds to IDD Field `Rated Maximum Continuous Input Power`

        Args:
            value (float): value for IDD Field `Rated Maximum Continuous Input Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_maximum_continuous_input_power`'.format(value))
        self._data["Rated Maximum Continuous Input Power"] = value

    @property
    def minimum_efficiency(self):
        """Get minimum_efficiency

        Returns:
            float: the value of `minimum_efficiency` or None if not set
        """
        return self._data["Minimum Efficiency"]

    @minimum_efficiency.setter
    def minimum_efficiency(self, value=None):
        """  Corresponds to IDD Field `Minimum Efficiency`

        Args:
            value (float): value for IDD Field `Minimum Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_efficiency`')
        self._data["Minimum Efficiency"] = value

    @property
    def maximum_efficiency(self):
        """Get maximum_efficiency

        Returns:
            float: the value of `maximum_efficiency` or None if not set
        """
        return self._data["Maximum Efficiency"]

    @maximum_efficiency.setter
    def maximum_efficiency(self, value=None):
        """  Corresponds to IDD Field `Maximum Efficiency`

        Args:
            value (float): value for IDD Field `Maximum Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_efficiency`')
        self._data["Maximum Efficiency"] = value

    @property
    def minimum_power_output(self):
        """Get minimum_power_output

        Returns:
            float: the value of `minimum_power_output` or None if not set
        """
        return self._data["Minimum Power Output"]

    @minimum_power_output.setter
    def minimum_power_output(self, value=None):
        """  Corresponds to IDD Field `Minimum Power Output`

        Args:
            value (float): value for IDD Field `Minimum Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_power_output`'.format(value))
        self._data["Minimum Power Output"] = value

    @property
    def maximum_power_output(self):
        """Get maximum_power_output

        Returns:
            float: the value of `maximum_power_output` or None if not set
        """
        return self._data["Maximum Power Output"]

    @maximum_power_output.setter
    def maximum_power_output(self, value=None):
        """  Corresponds to IDD Field `Maximum Power Output`

        Args:
            value (float): value for IDD Field `Maximum Power Output`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_power_output`'.format(value))
        self._data["Maximum Power Output"] = value

    @property
    def ancillary_power_consumed_in_standby(self):
        """Get ancillary_power_consumed_in_standby

        Returns:
            float: the value of `ancillary_power_consumed_in_standby` or None if not set
        """
        return self._data["Ancillary Power Consumed In Standby"]

    @ancillary_power_consumed_in_standby.setter
    def ancillary_power_consumed_in_standby(self, value=None):
        """  Corresponds to IDD Field `Ancillary Power Consumed In Standby`

        Args:
            value (float): value for IDD Field `Ancillary Power Consumed In Standby`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancillary_power_consumed_in_standby`'.format(value))
        self._data["Ancillary Power Consumed In Standby"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterInverterLookUpTable(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Inverter:LookUpTable`
        California Energy Commission tests and publishs data on inverters
        This inverter model interpolates using CEC test data
        Input data are at http://www.gosolarcalifornia.org/equipment/inverter_tests/summaries
    """
    internal_name = "ElectricLoadCenter:Inverter:LookUpTable"
    field_count = 13
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Inverter:LookUpTable`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Rated Maximum Continuous Output Power"] = None
        self._data["Night Tare Loss Power"] = None
        self._data["Nominal Voltage Input"] = None
        self._data["Efficiency at 10% Power and Nominal Voltage"] = None
        self._data["Efficiency at 20% Power and Nominal Voltage"] = None
        self._data["Efficiency at 30% Power and Nominal Voltage"] = None
        self._data["Efficiency at 50% Power and Nominal Voltage"] = None
        self._data["Efficiency at 75% Power and Nominal Voltage"] = None
        self._data["Efficiency at 100% Power and Nominal Voltage"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_maximum_continuous_output_power = None
        else:
            self.rated_maximum_continuous_output_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.night_tare_loss_power = None
        else:
            self.night_tare_loss_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_voltage_input = None
        else:
            self.nominal_voltage_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_at_10_power_and_nominal_voltage = None
        else:
            self.efficiency_at_10_power_and_nominal_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_at_20_power_and_nominal_voltage = None
        else:
            self.efficiency_at_20_power_and_nominal_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_at_30_power_and_nominal_voltage = None
        else:
            self.efficiency_at_30_power_and_nominal_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_at_50_power_and_nominal_voltage = None
        else:
            self.efficiency_at_50_power_and_nominal_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_at_75_power_and_nominal_voltage = None
        else:
            self.efficiency_at_75_power_and_nominal_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_at_100_power_and_nominal_voltage = None
        else:
            self.efficiency_at_100_power_and_nominal_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Enter name of zone to receive inverter losses as heat
        if blank then inverter is assumed to be outdoors

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=None):
        """  Corresponds to IDD Field `Radiative Fraction`

        Args:
            value (float): value for IDD Field `Radiative Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')
        self._data["Radiative Fraction"] = value

    @property
    def rated_maximum_continuous_output_power(self):
        """Get rated_maximum_continuous_output_power

        Returns:
            float: the value of `rated_maximum_continuous_output_power` or None if not set
        """
        return self._data["Rated Maximum Continuous Output Power"]

    @rated_maximum_continuous_output_power.setter
    def rated_maximum_continuous_output_power(self, value=None):
        """  Corresponds to IDD Field `Rated Maximum Continuous Output Power`

        Args:
            value (float): value for IDD Field `Rated Maximum Continuous Output Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_maximum_continuous_output_power`'.format(value))
        self._data["Rated Maximum Continuous Output Power"] = value

    @property
    def night_tare_loss_power(self):
        """Get night_tare_loss_power

        Returns:
            float: the value of `night_tare_loss_power` or None if not set
        """
        return self._data["Night Tare Loss Power"]

    @night_tare_loss_power.setter
    def night_tare_loss_power(self, value=None):
        """  Corresponds to IDD Field `Night Tare Loss Power`

        Args:
            value (float): value for IDD Field `Night Tare Loss Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `night_tare_loss_power`'.format(value))
        self._data["Night Tare Loss Power"] = value

    @property
    def nominal_voltage_input(self):
        """Get nominal_voltage_input

        Returns:
            float: the value of `nominal_voltage_input` or None if not set
        """
        return self._data["Nominal Voltage Input"]

    @nominal_voltage_input.setter
    def nominal_voltage_input(self, value=None):
        """  Corresponds to IDD Field `Nominal Voltage Input`

        Args:
            value (float): value for IDD Field `Nominal Voltage Input`
                Units: V
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_voltage_input`'.format(value))
        self._data["Nominal Voltage Input"] = value

    @property
    def efficiency_at_10_power_and_nominal_voltage(self):
        """Get efficiency_at_10_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_10_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 10% Power and Nominal Voltage"]

    @efficiency_at_10_power_and_nominal_voltage.setter
    def efficiency_at_10_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `Efficiency at 10% Power and Nominal Voltage`

        Args:
            value (float): value for IDD Field `Efficiency at 10% Power and Nominal Voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency_at_10_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_10_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_10_power_and_nominal_voltage`')
        self._data["Efficiency at 10% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_20_power_and_nominal_voltage(self):
        """Get efficiency_at_20_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_20_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 20% Power and Nominal Voltage"]

    @efficiency_at_20_power_and_nominal_voltage.setter
    def efficiency_at_20_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `Efficiency at 20% Power and Nominal Voltage`

        Args:
            value (float): value for IDD Field `Efficiency at 20% Power and Nominal Voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency_at_20_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_20_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_20_power_and_nominal_voltage`')
        self._data["Efficiency at 20% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_30_power_and_nominal_voltage(self):
        """Get efficiency_at_30_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_30_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 30% Power and Nominal Voltage"]

    @efficiency_at_30_power_and_nominal_voltage.setter
    def efficiency_at_30_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `Efficiency at 30% Power and Nominal Voltage`

        Args:
            value (float): value for IDD Field `Efficiency at 30% Power and Nominal Voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency_at_30_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_30_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_30_power_and_nominal_voltage`')
        self._data["Efficiency at 30% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_50_power_and_nominal_voltage(self):
        """Get efficiency_at_50_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_50_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 50% Power and Nominal Voltage"]

    @efficiency_at_50_power_and_nominal_voltage.setter
    def efficiency_at_50_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `Efficiency at 50% Power and Nominal Voltage`

        Args:
            value (float): value for IDD Field `Efficiency at 50% Power and Nominal Voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency_at_50_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_50_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_50_power_and_nominal_voltage`')
        self._data["Efficiency at 50% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_75_power_and_nominal_voltage(self):
        """Get efficiency_at_75_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_75_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 75% Power and Nominal Voltage"]

    @efficiency_at_75_power_and_nominal_voltage.setter
    def efficiency_at_75_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `Efficiency at 75% Power and Nominal Voltage`

        Args:
            value (float): value for IDD Field `Efficiency at 75% Power and Nominal Voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency_at_75_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_75_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_75_power_and_nominal_voltage`')
        self._data["Efficiency at 75% Power and Nominal Voltage"] = value

    @property
    def efficiency_at_100_power_and_nominal_voltage(self):
        """Get efficiency_at_100_power_and_nominal_voltage

        Returns:
            float: the value of `efficiency_at_100_power_and_nominal_voltage` or None if not set
        """
        return self._data["Efficiency at 100% Power and Nominal Voltage"]

    @efficiency_at_100_power_and_nominal_voltage.setter
    def efficiency_at_100_power_and_nominal_voltage(self, value=None):
        """  Corresponds to IDD Field `Efficiency at 100% Power and Nominal Voltage`

        Args:
            value (float): value for IDD Field `Efficiency at 100% Power and Nominal Voltage`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `efficiency_at_100_power_and_nominal_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `efficiency_at_100_power_and_nominal_voltage`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency_at_100_power_and_nominal_voltage`')
        self._data["Efficiency at 100% Power and Nominal Voltage"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterStorageSimple(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Storage:Simple`
        Used to model storage of electricity in an electric load center.  This is a simple
        model that does not attempt to represent any of the characteristics of a real
        storage device such as a battery.  The type of power, AC or DC, depends on
        the configuration chosen as the Electrical Buss Type in the
        ElectricLoadCenter:Distribution object.
    """
    internal_name = "ElectricLoadCenter:Storage:Simple"
    field_count = 10
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Storage:Simple`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction for Zone Heat Gains"] = None
        self._data["Nominal Energetic Efficiency for Charging"] = None
        self._data["Nominal Discharging Energetic Efficiency"] = None
        self._data["Maximum Storage Capacity"] = None
        self._data["Maximum Power for Discharging"] = None
        self._data["Maximum Power for Charging"] = None
        self._data["Initial State of Charge"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.radiative_fraction_for_zone_heat_gains = None
        else:
            self.radiative_fraction_for_zone_heat_gains = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_energetic_efficiency_for_charging = None
        else:
            self.nominal_energetic_efficiency_for_charging = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_discharging_energetic_efficiency = None
        else:
            self.nominal_discharging_energetic_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_storage_capacity = None
        else:
            self.maximum_storage_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_power_for_discharging = None
        else:
            self.maximum_power_for_discharging = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_power_for_charging = None
        else:
            self.maximum_power_for_charging = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.initial_state_of_charge = None
        else:
            self.initial_state_of_charge = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Enter name of zone to receive storage losses as heat
        if blank then storage is assumed to be outdoors

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def radiative_fraction_for_zone_heat_gains(self):
        """Get radiative_fraction_for_zone_heat_gains

        Returns:
            float: the value of `radiative_fraction_for_zone_heat_gains` or None if not set
        """
        return self._data["Radiative Fraction for Zone Heat Gains"]

    @radiative_fraction_for_zone_heat_gains.setter
    def radiative_fraction_for_zone_heat_gains(self, value=None):
        """  Corresponds to IDD Field `Radiative Fraction for Zone Heat Gains`

        Args:
            value (float): value for IDD Field `Radiative Fraction for Zone Heat Gains`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `radiative_fraction_for_zone_heat_gains`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction_for_zone_heat_gains`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction_for_zone_heat_gains`')
        self._data["Radiative Fraction for Zone Heat Gains"] = value

    @property
    def nominal_energetic_efficiency_for_charging(self):
        """Get nominal_energetic_efficiency_for_charging

        Returns:
            float: the value of `nominal_energetic_efficiency_for_charging` or None if not set
        """
        return self._data["Nominal Energetic Efficiency for Charging"]

    @nominal_energetic_efficiency_for_charging.setter
    def nominal_energetic_efficiency_for_charging(self, value=None):
        """  Corresponds to IDD Field `Nominal Energetic Efficiency for Charging`

        Args:
            value (float): value for IDD Field `Nominal Energetic Efficiency for Charging`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_energetic_efficiency_for_charging`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_energetic_efficiency_for_charging`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_energetic_efficiency_for_charging`')
        self._data["Nominal Energetic Efficiency for Charging"] = value

    @property
    def nominal_discharging_energetic_efficiency(self):
        """Get nominal_discharging_energetic_efficiency

        Returns:
            float: the value of `nominal_discharging_energetic_efficiency` or None if not set
        """
        return self._data["Nominal Discharging Energetic Efficiency"]

    @nominal_discharging_energetic_efficiency.setter
    def nominal_discharging_energetic_efficiency(self, value=None):
        """  Corresponds to IDD Field `Nominal Discharging Energetic Efficiency`

        Args:
            value (float): value for IDD Field `Nominal Discharging Energetic Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_discharging_energetic_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_discharging_energetic_efficiency`')
        self._data["Nominal Discharging Energetic Efficiency"] = value

    @property
    def maximum_storage_capacity(self):
        """Get maximum_storage_capacity

        Returns:
            float: the value of `maximum_storage_capacity` or None if not set
        """
        return self._data["Maximum Storage Capacity"]

    @maximum_storage_capacity.setter
    def maximum_storage_capacity(self, value=None):
        """  Corresponds to IDD Field `Maximum Storage Capacity`

        Args:
            value (float): value for IDD Field `Maximum Storage Capacity`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_storage_capacity`'.format(value))
        self._data["Maximum Storage Capacity"] = value

    @property
    def maximum_power_for_discharging(self):
        """Get maximum_power_for_discharging

        Returns:
            float: the value of `maximum_power_for_discharging` or None if not set
        """
        return self._data["Maximum Power for Discharging"]

    @maximum_power_for_discharging.setter
    def maximum_power_for_discharging(self, value=None):
        """  Corresponds to IDD Field `Maximum Power for Discharging`

        Args:
            value (float): value for IDD Field `Maximum Power for Discharging`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_power_for_discharging`'.format(value))
        self._data["Maximum Power for Discharging"] = value

    @property
    def maximum_power_for_charging(self):
        """Get maximum_power_for_charging

        Returns:
            float: the value of `maximum_power_for_charging` or None if not set
        """
        return self._data["Maximum Power for Charging"]

    @maximum_power_for_charging.setter
    def maximum_power_for_charging(self, value=None):
        """  Corresponds to IDD Field `Maximum Power for Charging`

        Args:
            value (float): value for IDD Field `Maximum Power for Charging`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_power_for_charging`'.format(value))
        self._data["Maximum Power for Charging"] = value

    @property
    def initial_state_of_charge(self):
        """Get initial_state_of_charge

        Returns:
            float: the value of `initial_state_of_charge` or None if not set
        """
        return self._data["Initial State of Charge"]

    @initial_state_of_charge.setter
    def initial_state_of_charge(self, value=None):
        """  Corresponds to IDD Field `Initial State of Charge`

        Args:
            value (float): value for IDD Field `Initial State of Charge`
                Units: J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `initial_state_of_charge`'.format(value))
        self._data["Initial State of Charge"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterStorageBattery(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Storage:Battery`
        Uses the kinetic battery model (KiBaM) to simulate rechargeable battery banks in an
        electrical load center. The battery bank is a collection of one or more individual
        battery modules. Given the surplus or deficit power from the electrical system and
        the state of charge from the previous time step, this object can model the voltage,
        current, and energy losses with charging and discharging during each time step.
        The cumulative battery damage can be also modeled and reported at the end of
        each simulation run.
    """
    internal_name = "ElectricLoadCenter:Storage:Battery"
    field_count = 21
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Storage:Battery`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Number of Battery Modules in Parallel"] = None
        self._data["Number of Battery Modules in Series"] = None
        self._data["Maximum Module Capacity"] = None
        self._data["Initial Fractional State of Charge"] = None
        self._data["Fraction of Available Charge Capacity"] = None
        self._data["Change Rate from Bound Charge to Available Charge"] = None
        self._data["Fully Charged Module Open Circuit Voltage"] = None
        self._data["Fully Discharged Module Open Circuit Voltage"] = None
        self._data["Voltage Change Curve Name for Charging"] = None
        self._data["Voltage Change Curve Name for Discharging"] = None
        self._data["Module Internal Electrical Resistance"] = None
        self._data["Maximum Module Discharging Current"] = None
        self._data["Module Cut-off Voltage"] = None
        self._data["Module Charge Rate Limit"] = None
        self._data["Battery Life Calculation"] = None
        self._data["Number of Cycle Bins"] = None
        self._data["Battery Life Curve Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_battery_modules_in_parallel = None
        else:
            self.number_of_battery_modules_in_parallel = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_battery_modules_in_series = None
        else:
            self.number_of_battery_modules_in_series = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_module_capacity = None
        else:
            self.maximum_module_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.initial_fractional_state_of_charge = None
        else:
            self.initial_fractional_state_of_charge = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_available_charge_capacity = None
        else:
            self.fraction_of_available_charge_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.change_rate_from_bound_charge_to_available_charge = None
        else:
            self.change_rate_from_bound_charge_to_available_charge = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fully_charged_module_open_circuit_voltage = None
        else:
            self.fully_charged_module_open_circuit_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fully_discharged_module_open_circuit_voltage = None
        else:
            self.fully_discharged_module_open_circuit_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.voltage_change_curve_name_for_charging = None
        else:
            self.voltage_change_curve_name_for_charging = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.voltage_change_curve_name_for_discharging = None
        else:
            self.voltage_change_curve_name_for_discharging = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_internal_electrical_resistance = None
        else:
            self.module_internal_electrical_resistance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_module_discharging_current = None
        else:
            self.maximum_module_discharging_current = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_cutoff_voltage = None
        else:
            self.module_cutoff_voltage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.module_charge_rate_limit = None
        else:
            self.module_charge_rate_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.battery_life_calculation = None
        else:
            self.battery_life_calculation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_cycle_bins = None
        else:
            self.number_of_cycle_bins = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.battery_life_curve_name = None
        else:
            self.battery_life_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Enter name of zone to receive electrical storage losses as heat
        if blank then electrical storage losses are dissipated to outdoors

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=0.0):
        """  Corresponds to IDD Field `Radiative Fraction`

        Args:
            value (float): value for IDD Field `Radiative Fraction`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')
        self._data["Radiative Fraction"] = value

    @property
    def number_of_battery_modules_in_parallel(self):
        """Get number_of_battery_modules_in_parallel

        Returns:
            int: the value of `number_of_battery_modules_in_parallel` or None if not set
        """
        return self._data["Number of Battery Modules in Parallel"]

    @number_of_battery_modules_in_parallel.setter
    def number_of_battery_modules_in_parallel(self, value=1):
        """  Corresponds to IDD Field `Number of Battery Modules in Parallel`
        A module usually consists of several cells.
        The total number of modules in the battery bank
        is equal to number of modules in parallel times
        number of modules in series.

        Args:
            value (int): value for IDD Field `Number of Battery Modules in Parallel`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_battery_modules_in_parallel`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_battery_modules_in_parallel`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_battery_modules_in_parallel`')
        self._data["Number of Battery Modules in Parallel"] = value

    @property
    def number_of_battery_modules_in_series(self):
        """Get number_of_battery_modules_in_series

        Returns:
            int: the value of `number_of_battery_modules_in_series` or None if not set
        """
        return self._data["Number of Battery Modules in Series"]

    @number_of_battery_modules_in_series.setter
    def number_of_battery_modules_in_series(self, value=1):
        """  Corresponds to IDD Field `Number of Battery Modules in Series`
        A module usually consists of several cells.
        The total number of modules in the battery bank
        is equal to number of modules in parallel times
        number of modules in series.

        Args:
            value (int): value for IDD Field `Number of Battery Modules in Series`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_battery_modules_in_series`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_battery_modules_in_series`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_battery_modules_in_series`')
        self._data["Number of Battery Modules in Series"] = value

    @property
    def maximum_module_capacity(self):
        """Get maximum_module_capacity

        Returns:
            float: the value of `maximum_module_capacity` or None if not set
        """
        return self._data["Maximum Module Capacity"]

    @maximum_module_capacity.setter
    def maximum_module_capacity(self, value=None):
        """  Corresponds to IDD Field `Maximum Module Capacity`
        The capacity is for each module.
        A model parameter from manufactures data or test data.

        Args:
            value (float): value for IDD Field `Maximum Module Capacity`
                Units: Ah
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_module_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_module_capacity`')
        self._data["Maximum Module Capacity"] = value

    @property
    def initial_fractional_state_of_charge(self):
        """Get initial_fractional_state_of_charge

        Returns:
            float: the value of `initial_fractional_state_of_charge` or None if not set
        """
        return self._data["Initial Fractional State of Charge"]

    @initial_fractional_state_of_charge.setter
    def initial_fractional_state_of_charge(self, value=1.0):
        """  Corresponds to IDD Field `Initial Fractional State of Charge`
        The state of charge is evaluated based on the
        maximum capacity defined in the next field.

        Args:
            value (float): value for IDD Field `Initial Fractional State of Charge`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `initial_fractional_state_of_charge`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `initial_fractional_state_of_charge`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `initial_fractional_state_of_charge`')
        self._data["Initial Fractional State of Charge"] = value

    @property
    def fraction_of_available_charge_capacity(self):
        """Get fraction_of_available_charge_capacity

        Returns:
            float: the value of `fraction_of_available_charge_capacity` or None if not set
        """
        return self._data["Fraction of Available Charge Capacity"]

    @fraction_of_available_charge_capacity.setter
    def fraction_of_available_charge_capacity(self, value=None):
        """  Corresponds to IDD Field `Fraction of Available Charge Capacity`
        A model parameter usually derived from test data by curve fitting.

        Args:
            value (float): value for IDD Field `Fraction of Available Charge Capacity`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_available_charge_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_available_charge_capacity`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_available_charge_capacity`')
        self._data["Fraction of Available Charge Capacity"] = value

    @property
    def change_rate_from_bound_charge_to_available_charge(self):
        """Get change_rate_from_bound_charge_to_available_charge

        Returns:
            float: the value of `change_rate_from_bound_charge_to_available_charge` or None if not set
        """
        return self._data["Change Rate from Bound Charge to Available Charge"]

    @change_rate_from_bound_charge_to_available_charge.setter
    def change_rate_from_bound_charge_to_available_charge(self, value=None):
        """  Corresponds to IDD Field `Change Rate from Bound Charge to Available Charge`
        A model parameter usually derived from test data by curve fitting.

        Args:
            value (float): value for IDD Field `Change Rate from Bound Charge to Available Charge`
                Units: 1/hr
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `change_rate_from_bound_charge_to_available_charge`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `change_rate_from_bound_charge_to_available_charge`')
        self._data["Change Rate from Bound Charge to Available Charge"] = value

    @property
    def fully_charged_module_open_circuit_voltage(self):
        """Get fully_charged_module_open_circuit_voltage

        Returns:
            float: the value of `fully_charged_module_open_circuit_voltage` or None if not set
        """
        return self._data["Fully Charged Module Open Circuit Voltage"]

    @fully_charged_module_open_circuit_voltage.setter
    def fully_charged_module_open_circuit_voltage(self, value=None):
        """  Corresponds to IDD Field `Fully Charged Module Open Circuit Voltage`
        The voltage is for each battery module.

        Args:
            value (float): value for IDD Field `Fully Charged Module Open Circuit Voltage`
                Units: V
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fully_charged_module_open_circuit_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fully_charged_module_open_circuit_voltage`')
        self._data["Fully Charged Module Open Circuit Voltage"] = value

    @property
    def fully_discharged_module_open_circuit_voltage(self):
        """Get fully_discharged_module_open_circuit_voltage

        Returns:
            float: the value of `fully_discharged_module_open_circuit_voltage` or None if not set
        """
        return self._data["Fully Discharged Module Open Circuit Voltage"]

    @fully_discharged_module_open_circuit_voltage.setter
    def fully_discharged_module_open_circuit_voltage(self, value=None):
        """  Corresponds to IDD Field `Fully Discharged Module Open Circuit Voltage`
        The voltage is for each battery module.

        Args:
            value (float): value for IDD Field `Fully Discharged Module Open Circuit Voltage`
                Units: V
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fully_discharged_module_open_circuit_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fully_discharged_module_open_circuit_voltage`')
        self._data["Fully Discharged Module Open Circuit Voltage"] = value

    @property
    def voltage_change_curve_name_for_charging(self):
        """Get voltage_change_curve_name_for_charging

        Returns:
            str: the value of `voltage_change_curve_name_for_charging` or None if not set
        """
        return self._data["Voltage Change Curve Name for Charging"]

    @voltage_change_curve_name_for_charging.setter
    def voltage_change_curve_name_for_charging(self, value=None):
        """  Corresponds to IDD Field `Voltage Change Curve Name for Charging`
        Table:OneIndependentVariable object can also be used
        Determines how the open circuit voltage change with state of charge relative to the fully discharged state.

        Args:
            value (str): value for IDD Field `Voltage Change Curve Name for Charging`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `voltage_change_curve_name_for_charging`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `voltage_change_curve_name_for_charging`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `voltage_change_curve_name_for_charging`')
        self._data["Voltage Change Curve Name for Charging"] = value

    @property
    def voltage_change_curve_name_for_discharging(self):
        """Get voltage_change_curve_name_for_discharging

        Returns:
            str: the value of `voltage_change_curve_name_for_discharging` or None if not set
        """
        return self._data["Voltage Change Curve Name for Discharging"]

    @voltage_change_curve_name_for_discharging.setter
    def voltage_change_curve_name_for_discharging(self, value=None):
        """  Corresponds to IDD Field `Voltage Change Curve Name for Discharging`
        Table:OneIndependentVariable object can also be used
        Determines how the open circuit voltage change with state of charge relative to the fully charged state.

        Args:
            value (str): value for IDD Field `Voltage Change Curve Name for Discharging`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `voltage_change_curve_name_for_discharging`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `voltage_change_curve_name_for_discharging`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `voltage_change_curve_name_for_discharging`')
        self._data["Voltage Change Curve Name for Discharging"] = value

    @property
    def module_internal_electrical_resistance(self):
        """Get module_internal_electrical_resistance

        Returns:
            float: the value of `module_internal_electrical_resistance` or None if not set
        """
        return self._data["Module Internal Electrical Resistance"]

    @module_internal_electrical_resistance.setter
    def module_internal_electrical_resistance(self, value=None):
        """  Corresponds to IDD Field `Module Internal Electrical Resistance`
        A model parameter from manufacture or derived from test data.
        Internal resistance is assumed to be constant.
        The internal resistance is for each battery module.

        Args:
            value (float): value for IDD Field `Module Internal Electrical Resistance`
                Units: ohms
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `module_internal_electrical_resistance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_internal_electrical_resistance`')
        self._data["Module Internal Electrical Resistance"] = value

    @property
    def maximum_module_discharging_current(self):
        """Get maximum_module_discharging_current

        Returns:
            float: the value of `maximum_module_discharging_current` or None if not set
        """
        return self._data["Maximum Module Discharging Current"]

    @maximum_module_discharging_current.setter
    def maximum_module_discharging_current(self, value=None):
        """  Corresponds to IDD Field `Maximum Module Discharging Current`
        The constraint on discharging current is for each battery module.

        Args:
            value (float): value for IDD Field `Maximum Module Discharging Current`
                Units: A
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_module_discharging_current`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_module_discharging_current`')
        self._data["Maximum Module Discharging Current"] = value

    @property
    def module_cutoff_voltage(self):
        """Get module_cutoff_voltage

        Returns:
            float: the value of `module_cutoff_voltage` or None if not set
        """
        return self._data["Module Cut-off Voltage"]

    @module_cutoff_voltage.setter
    def module_cutoff_voltage(self, value=None):
        """  Corresponds to IDD Field `Module Cut-off Voltage`
        The voltage constraint is for each battery module.

        Args:
            value (float): value for IDD Field `Module Cut-off Voltage`
                Units: V
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `module_cutoff_voltage`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_cutoff_voltage`')
        self._data["Module Cut-off Voltage"] = value

    @property
    def module_charge_rate_limit(self):
        """Get module_charge_rate_limit

        Returns:
            float: the value of `module_charge_rate_limit` or None if not set
        """
        return self._data["Module Charge Rate Limit"]

    @module_charge_rate_limit.setter
    def module_charge_rate_limit(self, value=1.0):
        """  Corresponds to IDD Field `Module Charge Rate Limit`
        units 1/hr
        Charge rate limit is the division between charging current the remaining capacity.
        The constraint on charging current is for each module.

        Args:
            value (float): value for IDD Field `Module Charge Rate Limit`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `module_charge_rate_limit`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `module_charge_rate_limit`')
        self._data["Module Charge Rate Limit"] = value

    @property
    def battery_life_calculation(self):
        """Get battery_life_calculation

        Returns:
            str: the value of `battery_life_calculation` or None if not set
        """
        return self._data["Battery Life Calculation"]

    @battery_life_calculation.setter
    def battery_life_calculation(self, value="No"):
        """  Corresponds to IDD Field `Battery Life Calculation`

        Args:
            value (str): value for IDD Field `Battery Life Calculation`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `battery_life_calculation`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `battery_life_calculation`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `battery_life_calculation`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `battery_life_calculation`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `battery_life_calculation`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Battery Life Calculation"] = value

    @property
    def number_of_cycle_bins(self):
        """Get number_of_cycle_bins

        Returns:
            int: the value of `number_of_cycle_bins` or None if not set
        """
        return self._data["Number of Cycle Bins"]

    @number_of_cycle_bins.setter
    def number_of_cycle_bins(self, value=10):
        """  Corresponds to IDD Field `Number of Cycle Bins`
        Only required when battery life calculation is activated

        Args:
            value (int): value for IDD Field `Number of Cycle Bins`
                Default value: 10
                value >= 5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_cycle_bins`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_cycle_bins`'.format(value))
            if value < 5:
                raise ValueError('value need to be greater or equal 5 '
                                 'for field `number_of_cycle_bins`')
        self._data["Number of Cycle Bins"] = value

    @property
    def battery_life_curve_name(self):
        """Get battery_life_curve_name

        Returns:
            str: the value of `battery_life_curve_name` or None if not set
        """
        return self._data["Battery Life Curve Name"]

    @battery_life_curve_name.setter
    def battery_life_curve_name(self, value=None):
        """  Corresponds to IDD Field `Battery Life Curve Name`
        Table:OneIndependentVariable object can also be used
        Determines the number of cycles to failure in relation to cycle range.
        Only required when battery life calculation is activated.

        Args:
            value (str): value for IDD Field `Battery Life Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `battery_life_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `battery_life_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `battery_life_curve_name`')
        self._data["Battery Life Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterTransformer(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Transformer`
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "ElectricLoadCenter:Transformer"
    field_count = 28
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Transformer`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Transformer Usage"] = None
        self._data["Zone Name"] = None
        self._data["Radiative Fraction"] = None
        self._data["Rated Capacity"] = None
        self._data["Phase"] = None
        self._data["Conductor Material"] = None
        self._data["Full Load Temperature Rise"] = None
        self._data["Fraction of Eddy Current Losses"] = None
        self._data["Performance Input Method"] = None
        self._data["Rated No Load Loss"] = None
        self._data["Rated Load Loss"] = None
        self._data["Nameplate Efficiency"] = None
        self._data["Per Unit Load for Nameplate Efficiency"] = None
        self._data["Reference Temperature for Nameplate Efficiency"] = None
        self._data["Per Unit Load for Maximum Efficiency"] = None
        self._data["Consider Transformer Loss for Utility Cost"] = None
        self._data["Meter 1 Name"] = None
        self._data["Meter 2 Name"] = None
        self._data["Meter 3 Name"] = None
        self._data["Meter 4 Name"] = None
        self._data["Meter 5 Name"] = None
        self._data["Meter 6 Name"] = None
        self._data["Meter 7 Name"] = None
        self._data["Meter 8 Name"] = None
        self._data["Meter 9 Name"] = None
        self._data["Meter 10 Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.transformer_usage = None
        else:
            self.transformer_usage = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.radiative_fraction = None
        else:
            self.radiative_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_capacity = None
        else:
            self.rated_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.phase = None
        else:
            self.phase = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.conductor_material = None
        else:
            self.conductor_material = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.full_load_temperature_rise = None
        else:
            self.full_load_temperature_rise = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_eddy_current_losses = None
        else:
            self.fraction_of_eddy_current_losses = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.performance_input_method = None
        else:
            self.performance_input_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_no_load_loss = None
        else:
            self.rated_no_load_loss = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_load_loss = None
        else:
            self.rated_load_loss = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nameplate_efficiency = None
        else:
            self.nameplate_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.per_unit_load_for_nameplate_efficiency = None
        else:
            self.per_unit_load_for_nameplate_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_temperature_for_nameplate_efficiency = None
        else:
            self.reference_temperature_for_nameplate_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.per_unit_load_for_maximum_efficiency = None
        else:
            self.per_unit_load_for_maximum_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.consider_transformer_loss_for_utility_cost = None
        else:
            self.consider_transformer_loss_for_utility_cost = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_1_name = None
        else:
            self.meter_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_2_name = None
        else:
            self.meter_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_3_name = None
        else:
            self.meter_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_4_name = None
        else:
            self.meter_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_5_name = None
        else:
            self.meter_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_6_name = None
        else:
            self.meter_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_7_name = None
        else:
            self.meter_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_8_name = None
        else:
            self.meter_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_9_name = None
        else:
            self.meter_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.meter_10_name = None
        else:
            self.meter_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def transformer_usage(self):
        """Get transformer_usage

        Returns:
            str: the value of `transformer_usage` or None if not set
        """
        return self._data["Transformer Usage"]

    @transformer_usage.setter
    def transformer_usage(self, value="PowerInFromGrid"):
        """  Corresponds to IDD Field `Transformer Usage`
        A transformer can be used to transfer electric energy from utility grid to
        building (PowerInFromGrid)or from building onsite generation to
        the grid (PowerOutFromOnsiteGeneration)

        Args:
            value (str): value for IDD Field `Transformer Usage`
                Accepted values are:
                      - PowerInFromGrid
                      - PowerOutFromOnsiteGeneration
                Default value: PowerInFromGrid
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `transformer_usage`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transformer_usage`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `transformer_usage`')
            vals = {}
            vals["powerinfromgrid"] = "PowerInFromGrid"
            vals["poweroutfromonsitegeneration"] = "PowerOutFromOnsiteGeneration"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `transformer_usage`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `transformer_usage`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Transformer Usage"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Enter name of zone to receive transformer losses as heat
        if blank then transformer losses are dissipated to outdoors

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def radiative_fraction(self):
        """Get radiative_fraction

        Returns:
            float: the value of `radiative_fraction` or None if not set
        """
        return self._data["Radiative Fraction"]

    @radiative_fraction.setter
    def radiative_fraction(self, value=0.0):
        """  Corresponds to IDD Field `Radiative Fraction`

        Args:
            value (float): value for IDD Field `Radiative Fraction`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `radiative_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `radiative_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `radiative_fraction`')
        self._data["Radiative Fraction"] = value

    @property
    def rated_capacity(self):
        """Get rated_capacity

        Returns:
            float: the value of `rated_capacity` or None if not set
        """
        return self._data["Rated Capacity"]

    @rated_capacity.setter
    def rated_capacity(self, value=None):
        """  Corresponds to IDD Field `Rated Capacity`
        the unit is VA, instead of kVA as usually shown on transformer nameplates.

        Args:
            value (float): value for IDD Field `Rated Capacity`
                Units: VA
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_capacity`')
        self._data["Rated Capacity"] = value

    @property
    def phase(self):
        """Get phase

        Returns:
            str: the value of `phase` or None if not set
        """
        return self._data["Phase"]

    @phase.setter
    def phase(self, value="3"):
        """  Corresponds to IDD Field `Phase`
        Must be single or three phase transformer.
        NOT used in the current model.

        Args:
            value (str): value for IDD Field `Phase`
                Accepted values are:
                      - 1
                      - 3
                Default value: 3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `phase`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `phase`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `phase`')
            vals = {}
            vals["1"] = "1"
            vals["3"] = "3"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `phase`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `phase`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Phase"] = value

    @property
    def conductor_material(self):
        """Get conductor_material

        Returns:
            str: the value of `conductor_material` or None if not set
        """
        return self._data["Conductor Material"]

    @conductor_material.setter
    def conductor_material(self, value="Aluminum"):
        """  Corresponds to IDD Field `Conductor Material`
        Winding material used by the transformer.

        Args:
            value (str): value for IDD Field `Conductor Material`
                Accepted values are:
                      - Copper
                      - Aluminum
                Default value: Aluminum
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `conductor_material`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `conductor_material`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `conductor_material`')
            vals = {}
            vals["copper"] = "Copper"
            vals["aluminum"] = "Aluminum"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `conductor_material`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `conductor_material`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Conductor Material"] = value

    @property
    def full_load_temperature_rise(self):
        """Get full_load_temperature_rise

        Returns:
            float: the value of `full_load_temperature_rise` or None if not set
        """
        return self._data["Full Load Temperature Rise"]

    @full_load_temperature_rise.setter
    def full_load_temperature_rise(self, value=150.0):
        """  Corresponds to IDD Field `Full Load Temperature Rise`

        Args:
            value (float): value for IDD Field `Full Load Temperature Rise`
                Units: C
                Default value: 150.0
                value >= 50.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `full_load_temperature_rise`'.format(value))
            if value < 50.0:
                raise ValueError('value need to be greater or equal 50.0 '
                                 'for field `full_load_temperature_rise`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `full_load_temperature_rise`')
        self._data["Full Load Temperature Rise"] = value

    @property
    def fraction_of_eddy_current_losses(self):
        """Get fraction_of_eddy_current_losses

        Returns:
            float: the value of `fraction_of_eddy_current_losses` or None if not set
        """
        return self._data["Fraction of Eddy Current Losses"]

    @fraction_of_eddy_current_losses.setter
    def fraction_of_eddy_current_losses(self, value=0.1):
        """  Corresponds to IDD Field `Fraction of Eddy Current Losses`

        Args:
            value (float): value for IDD Field `Fraction of Eddy Current Losses`
                Default value: 0.1
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_eddy_current_losses`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_eddy_current_losses`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_eddy_current_losses`')
        self._data["Fraction of Eddy Current Losses"] = value

    @property
    def performance_input_method(self):
        """Get performance_input_method

        Returns:
            str: the value of `performance_input_method` or None if not set
        """
        return self._data["Performance Input Method"]

    @performance_input_method.setter
    def performance_input_method(self, value="RatedLosses"):
        """  Corresponds to IDD Field `Performance Input Method`
        User can define transformer performance by specifying
        load and no load losses at rated conditions or
        nameplate efficiency and maximum efficiency

        Args:
            value (str): value for IDD Field `Performance Input Method`
                Accepted values are:
                      - RatedLosses
                      - NominalEfficiency
                Default value: RatedLosses
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `performance_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_input_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `performance_input_method`')
            vals = {}
            vals["ratedlosses"] = "RatedLosses"
            vals["nominalefficiency"] = "NominalEfficiency"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `performance_input_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `performance_input_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Performance Input Method"] = value

    @property
    def rated_no_load_loss(self):
        """Get rated_no_load_loss

        Returns:
            float: the value of `rated_no_load_loss` or None if not set
        """
        return self._data["Rated No Load Loss"]

    @rated_no_load_loss.setter
    def rated_no_load_loss(self, value=None):
        """  Corresponds to IDD Field `Rated No Load Loss`
        Only required when RatedLosses is the performance input method

        Args:
            value (float): value for IDD Field `Rated No Load Loss`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_no_load_loss`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_no_load_loss`')
        self._data["Rated No Load Loss"] = value

    @property
    def rated_load_loss(self):
        """Get rated_load_loss

        Returns:
            float: the value of `rated_load_loss` or None if not set
        """
        return self._data["Rated Load Loss"]

    @rated_load_loss.setter
    def rated_load_loss(self, value=None):
        """  Corresponds to IDD Field `Rated Load Loss`
        Only required when RatedLosses is the performance input method

        Args:
            value (float): value for IDD Field `Rated Load Loss`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_load_loss`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_load_loss`')
        self._data["Rated Load Loss"] = value

    @property
    def nameplate_efficiency(self):
        """Get nameplate_efficiency

        Returns:
            float: the value of `nameplate_efficiency` or None if not set
        """
        return self._data["Nameplate Efficiency"]

    @nameplate_efficiency.setter
    def nameplate_efficiency(self, value=0.98):
        """  Corresponds to IDD Field `Nameplate Efficiency`
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `Nameplate Efficiency`
                Default value: 0.98
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nameplate_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nameplate_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nameplate_efficiency`')
        self._data["Nameplate Efficiency"] = value

    @property
    def per_unit_load_for_nameplate_efficiency(self):
        """Get per_unit_load_for_nameplate_efficiency

        Returns:
            float: the value of `per_unit_load_for_nameplate_efficiency` or None if not set
        """
        return self._data["Per Unit Load for Nameplate Efficiency"]

    @per_unit_load_for_nameplate_efficiency.setter
    def per_unit_load_for_nameplate_efficiency(self, value=0.35):
        """  Corresponds to IDD Field `Per Unit Load for Nameplate Efficiency`
        Percentage of the rated capacity at which the nameplate efficiency is defined
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `Per Unit Load for Nameplate Efficiency`
                Default value: 0.35
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `per_unit_load_for_nameplate_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `per_unit_load_for_nameplate_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `per_unit_load_for_nameplate_efficiency`')
        self._data["Per Unit Load for Nameplate Efficiency"] = value

    @property
    def reference_temperature_for_nameplate_efficiency(self):
        """Get reference_temperature_for_nameplate_efficiency

        Returns:
            float: the value of `reference_temperature_for_nameplate_efficiency` or None if not set
        """
        return self._data["Reference Temperature for Nameplate Efficiency"]

    @reference_temperature_for_nameplate_efficiency.setter
    def reference_temperature_for_nameplate_efficiency(self, value=75.0):
        """  Corresponds to IDD Field `Reference Temperature for Nameplate Efficiency`
        Conductor operating temperature at which the nameplate efficiency is defined
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `Reference Temperature for Nameplate Efficiency`
                Units: C
                Default value: 75.0
                value >= 20.0
                value <= 150.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_temperature_for_nameplate_efficiency`'.format(value))
            if value < 20.0:
                raise ValueError('value need to be greater or equal 20.0 '
                                 'for field `reference_temperature_for_nameplate_efficiency`')
            if value > 150.0:
                raise ValueError('value need to be smaller 150.0 '
                                 'for field `reference_temperature_for_nameplate_efficiency`')
        self._data["Reference Temperature for Nameplate Efficiency"] = value

    @property
    def per_unit_load_for_maximum_efficiency(self):
        """Get per_unit_load_for_maximum_efficiency

        Returns:
            float: the value of `per_unit_load_for_maximum_efficiency` or None if not set
        """
        return self._data["Per Unit Load for Maximum Efficiency"]

    @per_unit_load_for_maximum_efficiency.setter
    def per_unit_load_for_maximum_efficiency(self, value=None):
        """  Corresponds to IDD Field `Per Unit Load for Maximum Efficiency`
        Percentage of the rate capacity at which the maximum efficiency is obtained
        Only required when NominalEfficiency is the performance input method

        Args:
            value (float): value for IDD Field `Per Unit Load for Maximum Efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `per_unit_load_for_maximum_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `per_unit_load_for_maximum_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `per_unit_load_for_maximum_efficiency`')
        self._data["Per Unit Load for Maximum Efficiency"] = value

    @property
    def consider_transformer_loss_for_utility_cost(self):
        """Get consider_transformer_loss_for_utility_cost

        Returns:
            str: the value of `consider_transformer_loss_for_utility_cost` or None if not set
        """
        return self._data["Consider Transformer Loss for Utility Cost"]

    @consider_transformer_loss_for_utility_cost.setter
    def consider_transformer_loss_for_utility_cost(self, value="Yes"):
        """  Corresponds to IDD Field `Consider Transformer Loss for Utility Cost`
        Only required when the transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Consider Transformer Loss for Utility Cost`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `consider_transformer_loss_for_utility_cost`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `consider_transformer_loss_for_utility_cost`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `consider_transformer_loss_for_utility_cost`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `consider_transformer_loss_for_utility_cost`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `consider_transformer_loss_for_utility_cost`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Consider Transformer Loss for Utility Cost"] = value

    @property
    def meter_1_name(self):
        """Get meter_1_name

        Returns:
            str: the value of `meter_1_name` or None if not set
        """
        return self._data["Meter 1 Name"]

    @meter_1_name.setter
    def meter_1_name(self, value=None):
        """  Corresponds to IDD Field `Meter 1 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_1_name`')
        self._data["Meter 1 Name"] = value

    @property
    def meter_2_name(self):
        """Get meter_2_name

        Returns:
            str: the value of `meter_2_name` or None if not set
        """
        return self._data["Meter 2 Name"]

    @meter_2_name.setter
    def meter_2_name(self, value=None):
        """  Corresponds to IDD Field `Meter 2 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_2_name`')
        self._data["Meter 2 Name"] = value

    @property
    def meter_3_name(self):
        """Get meter_3_name

        Returns:
            str: the value of `meter_3_name` or None if not set
        """
        return self._data["Meter 3 Name"]

    @meter_3_name.setter
    def meter_3_name(self, value=None):
        """  Corresponds to IDD Field `Meter 3 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_3_name`')
        self._data["Meter 3 Name"] = value

    @property
    def meter_4_name(self):
        """Get meter_4_name

        Returns:
            str: the value of `meter_4_name` or None if not set
        """
        return self._data["Meter 4 Name"]

    @meter_4_name.setter
    def meter_4_name(self, value=None):
        """  Corresponds to IDD Field `Meter 4 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_4_name`')
        self._data["Meter 4 Name"] = value

    @property
    def meter_5_name(self):
        """Get meter_5_name

        Returns:
            str: the value of `meter_5_name` or None if not set
        """
        return self._data["Meter 5 Name"]

    @meter_5_name.setter
    def meter_5_name(self, value=None):
        """  Corresponds to IDD Field `Meter 5 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_5_name`')
        self._data["Meter 5 Name"] = value

    @property
    def meter_6_name(self):
        """Get meter_6_name

        Returns:
            str: the value of `meter_6_name` or None if not set
        """
        return self._data["Meter 6 Name"]

    @meter_6_name.setter
    def meter_6_name(self, value=None):
        """  Corresponds to IDD Field `Meter 6 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_6_name`')
        self._data["Meter 6 Name"] = value

    @property
    def meter_7_name(self):
        """Get meter_7_name

        Returns:
            str: the value of `meter_7_name` or None if not set
        """
        return self._data["Meter 7 Name"]

    @meter_7_name.setter
    def meter_7_name(self, value=None):
        """  Corresponds to IDD Field `Meter 7 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_7_name`')
        self._data["Meter 7 Name"] = value

    @property
    def meter_8_name(self):
        """Get meter_8_name

        Returns:
            str: the value of `meter_8_name` or None if not set
        """
        return self._data["Meter 8 Name"]

    @meter_8_name.setter
    def meter_8_name(self, value=None):
        """  Corresponds to IDD Field `Meter 8 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_8_name`')
        self._data["Meter 8 Name"] = value

    @property
    def meter_9_name(self):
        """Get meter_9_name

        Returns:
            str: the value of `meter_9_name` or None if not set
        """
        return self._data["Meter 9 Name"]

    @meter_9_name.setter
    def meter_9_name(self, value=None):
        """  Corresponds to IDD Field `Meter 9 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_9_name`')
        self._data["Meter 9 Name"] = value

    @property
    def meter_10_name(self):
        """Get meter_10_name

        Returns:
            str: the value of `meter_10_name` or None if not set
        """
        return self._data["Meter 10 Name"]

    @meter_10_name.setter
    def meter_10_name(self, value=None):
        """  Corresponds to IDD Field `Meter 10 Name`
        Must be an electric meter (with electricity as the resource type)
        Only required when transformer is used for power in from the utility grid

        Args:
            value (str): value for IDD Field `Meter 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `meter_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `meter_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `meter_10_name`')
        self._data["Meter 10 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ElectricLoadCenterDistribution(object):
    """ Corresponds to IDD object `ElectricLoadCenter:Distribution`
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    """
    internal_name = "ElectricLoadCenter:Distribution"
    field_count = 10
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ElectricLoadCenter:Distribution`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Generator List Name"] = None
        self._data["Generator Operation Scheme Type"] = None
        self._data["Demand Limit Scheme Purchased Electric Demand Limit"] = None
        self._data["Track Schedule Name Scheme Schedule Name"] = None
        self._data["Track Meter Scheme Meter Name"] = None
        self._data["Electrical Buss Type"] = None
        self._data["Inverter Object Name"] = None
        self._data["Electrical Storage Object Name"] = None
        self._data["Transformer Object Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_list_name = None
        else:
            self.generator_list_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_operation_scheme_type = None
        else:
            self.generator_operation_scheme_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.demand_limit_scheme_purchased_electric_demand_limit = None
        else:
            self.demand_limit_scheme_purchased_electric_demand_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.track_schedule_name_scheme_schedule_name = None
        else:
            self.track_schedule_name_scheme_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.track_meter_scheme_meter_name = None
        else:
            self.track_meter_scheme_meter_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_buss_type = None
        else:
            self.electrical_buss_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inverter_object_name = None
        else:
            self.inverter_object_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electrical_storage_object_name = None
        else:
            self.electrical_storage_object_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.transformer_object_name = None
        else:
            self.transformer_object_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def generator_list_name(self):
        """Get generator_list_name

        Returns:
            str: the value of `generator_list_name` or None if not set
        """
        return self._data["Generator List Name"]

    @generator_list_name.setter
    def generator_list_name(self, value=None):
        """  Corresponds to IDD Field `Generator List Name`

        Args:
            value (str): value for IDD Field `Generator List Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_list_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_list_name`')
        self._data["Generator List Name"] = value

    @property
    def generator_operation_scheme_type(self):
        """Get generator_operation_scheme_type

        Returns:
            str: the value of `generator_operation_scheme_type` or None if not set
        """
        return self._data["Generator Operation Scheme Type"]

    @generator_operation_scheme_type.setter
    def generator_operation_scheme_type(self, value=None):
        """  Corresponds to IDD Field `Generator Operation Scheme Type`
        required if Generator List is entered.

        Args:
            value (str): value for IDD Field `Generator Operation Scheme Type`
                Accepted values are:
                      - Baseload
                      - DemandLimit
                      - TrackElectrical
                      - TrackSchedule
                      - TrackMeter
                      - FollowThermal
                      - FollowThermalLimitElectrical
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_operation_scheme_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_operation_scheme_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_operation_scheme_type`')
            vals = {}
            vals["baseload"] = "Baseload"
            vals["demandlimit"] = "DemandLimit"
            vals["trackelectrical"] = "TrackElectrical"
            vals["trackschedule"] = "TrackSchedule"
            vals["trackmeter"] = "TrackMeter"
            vals["followthermal"] = "FollowThermal"
            vals["followthermallimitelectrical"] = "FollowThermalLimitElectrical"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_operation_scheme_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_operation_scheme_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator Operation Scheme Type"] = value

    @property
    def demand_limit_scheme_purchased_electric_demand_limit(self):
        """Get demand_limit_scheme_purchased_electric_demand_limit

        Returns:
            float: the value of `demand_limit_scheme_purchased_electric_demand_limit` or None if not set
        """
        return self._data["Demand Limit Scheme Purchased Electric Demand Limit"]

    @demand_limit_scheme_purchased_electric_demand_limit.setter
    def demand_limit_scheme_purchased_electric_demand_limit(self, value=None):
        """  Corresponds to IDD Field `Demand Limit Scheme Purchased Electric Demand Limit`

        Args:
            value (float): value for IDD Field `Demand Limit Scheme Purchased Electric Demand Limit`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `demand_limit_scheme_purchased_electric_demand_limit`'.format(value))
        self._data["Demand Limit Scheme Purchased Electric Demand Limit"] = value

    @property
    def track_schedule_name_scheme_schedule_name(self):
        """Get track_schedule_name_scheme_schedule_name

        Returns:
            str: the value of `track_schedule_name_scheme_schedule_name` or None if not set
        """
        return self._data["Track Schedule Name Scheme Schedule Name"]

    @track_schedule_name_scheme_schedule_name.setter
    def track_schedule_name_scheme_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Track Schedule Name Scheme Schedule Name`
        required when Generator Operation Scheme Type=TrackSchedule

        Args:
            value (str): value for IDD Field `Track Schedule Name Scheme Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `track_schedule_name_scheme_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `track_schedule_name_scheme_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `track_schedule_name_scheme_schedule_name`')
        self._data["Track Schedule Name Scheme Schedule Name"] = value

    @property
    def track_meter_scheme_meter_name(self):
        """Get track_meter_scheme_meter_name

        Returns:
            str: the value of `track_meter_scheme_meter_name` or None if not set
        """
        return self._data["Track Meter Scheme Meter Name"]

    @track_meter_scheme_meter_name.setter
    def track_meter_scheme_meter_name(self, value=None):
        """  Corresponds to IDD Field `Track Meter Scheme Meter Name`
        required when Generator Operation Scheme Type=TrackMeter

        Args:
            value (str): value for IDD Field `Track Meter Scheme Meter Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `track_meter_scheme_meter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `track_meter_scheme_meter_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `track_meter_scheme_meter_name`')
        self._data["Track Meter Scheme Meter Name"] = value

    @property
    def electrical_buss_type(self):
        """Get electrical_buss_type

        Returns:
            str: the value of `electrical_buss_type` or None if not set
        """
        return self._data["Electrical Buss Type"]

    @electrical_buss_type.setter
    def electrical_buss_type(self, value="AlternatingCurrent"):
        """  Corresponds to IDD Field `Electrical Buss Type`

        Args:
            value (str): value for IDD Field `Electrical Buss Type`
                Accepted values are:
                      - AlternatingCurrent
                      - AlternatingCurrentWithStorage
                      - DirectCurrentWithInverter
                      - DirectCurrentWithInverterDCStorage
                      - DirectCurrentWithInverterACStorage
                Default value: AlternatingCurrent
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_buss_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_buss_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_buss_type`')
            vals = {}
            vals["alternatingcurrent"] = "AlternatingCurrent"
            vals["alternatingcurrentwithstorage"] = "AlternatingCurrentWithStorage"
            vals["directcurrentwithinverter"] = "DirectCurrentWithInverter"
            vals["directcurrentwithinverterdcstorage"] = "DirectCurrentWithInverterDCStorage"
            vals["directcurrentwithinverteracstorage"] = "DirectCurrentWithInverterACStorage"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `electrical_buss_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `electrical_buss_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Electrical Buss Type"] = value

    @property
    def inverter_object_name(self):
        """Get inverter_object_name

        Returns:
            str: the value of `inverter_object_name` or None if not set
        """
        return self._data["Inverter Object Name"]

    @inverter_object_name.setter
    def inverter_object_name(self, value=None):
        """  Corresponds to IDD Field `Inverter Object Name`
        required when Electrical Buss Type=DirectCurrentWithInverter, DirectCurrentWithInverterDCStorage,
        or DirectCurrentWithInverterACStorage

        Args:
            value (str): value for IDD Field `Inverter Object Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inverter_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inverter_object_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inverter_object_name`')
        self._data["Inverter Object Name"] = value

    @property
    def electrical_storage_object_name(self):
        """Get electrical_storage_object_name

        Returns:
            str: the value of `electrical_storage_object_name` or None if not set
        """
        return self._data["Electrical Storage Object Name"]

    @electrical_storage_object_name.setter
    def electrical_storage_object_name(self, value=None):
        """  Corresponds to IDD Field `Electrical Storage Object Name`
        required when Electrical Buss Type=AlternatingCurrentWithStorage, DirectCurrentWithInverterDCStorage,
        or DirectCurrentWithInverterACStorage

        Args:
            value (str): value for IDD Field `Electrical Storage Object Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electrical_storage_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electrical_storage_object_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electrical_storage_object_name`')
        self._data["Electrical Storage Object Name"] = value

    @property
    def transformer_object_name(self):
        """Get transformer_object_name

        Returns:
            str: the value of `transformer_object_name` or None if not set
        """
        return self._data["Transformer Object Name"]

    @transformer_object_name.setter
    def transformer_object_name(self, value=None):
        """  Corresponds to IDD Field `Transformer Object Name`
        required when power needs to be output from onsite generation to the grid via transformer

        Args:
            value (str): value for IDD Field `Transformer Object Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `transformer_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transformer_object_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `transformer_object_name`')
        self._data["Transformer Object Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])