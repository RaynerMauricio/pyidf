from collections import OrderedDict
import logging
import re

class BoilerHotWater(object):
    """ Corresponds to IDD object `Boiler:HotWater`
        This boiler model is an adaptation of the empirical model from the Building
        Loads and System Thermodynamics (BLAST) program.  Boiler performance
        curves are generated by fitting catalog data to polynomial equations.
        A constant efficiency boiler may be modeled by leaving the normalized
        boiler efficiency curve name input blank.
    """
    internal_name = "Boiler:HotWater"
    field_count = 17
    required_fields = ["Name", "Fuel Type", "Nominal Thermal Efficiency", "Boiler Water Inlet Node Name", "Boiler Water Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Boiler:HotWater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Thermal Efficiency"] = None
        self._data["Efficiency Curve Temperature Evaluation Variable"] = None
        self._data["Normalized Boiler Efficiency Curve Name"] = None
        self._data["Design Water Outlet Temperature"] = None
        self._data["Design Water Flow Rate"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Boiler Water Inlet Node Name"] = None
        self._data["Boiler Water Outlet Node Name"] = None
        self._data["Water Outlet Upper Temperature Limit"] = None
        self._data["Boiler Flow Mode"] = None
        self._data["Parasitic Electric Load"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_thermal_efficiency = None
        else:
            self.nominal_thermal_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency_curve_temperature_evaluation_variable = None
        else:
            self.efficiency_curve_temperature_evaluation_variable = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_boiler_efficiency_curve_name = None
        else:
            self.normalized_boiler_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_water_outlet_temperature = None
        else:
            self.design_water_outlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_water_flow_rate = None
        else:
            self.design_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.boiler_water_inlet_node_name = None
        else:
            self.boiler_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.boiler_water_outlet_node_name = None
        else:
            self.boiler_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_upper_temperature_limit = None
        else:
            self.water_outlet_upper_temperature_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.boiler_flow_mode = None
        else:
            self.boiler_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.parasitic_electric_load = None
        else:
            self.parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["coal"] = "Coal"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_thermal_efficiency(self):
        """Get nominal_thermal_efficiency

        Returns:
            float: the value of `nominal_thermal_efficiency` or None if not set
        """
        return self._data["Nominal Thermal Efficiency"]

    @nominal_thermal_efficiency.setter
    def nominal_thermal_efficiency(self, value=None):
        """  Corresponds to IDD Field `Nominal Thermal Efficiency`
        Based on the higher heating value of fuel.

        Args:
            value (float): value for IDD Field `Nominal Thermal Efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_thermal_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_thermal_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `nominal_thermal_efficiency`')
        self._data["Nominal Thermal Efficiency"] = value

    @property
    def efficiency_curve_temperature_evaluation_variable(self):
        """Get efficiency_curve_temperature_evaluation_variable

        Returns:
            str: the value of `efficiency_curve_temperature_evaluation_variable` or None if not set
        """
        return self._data["Efficiency Curve Temperature Evaluation Variable"]

    @efficiency_curve_temperature_evaluation_variable.setter
    def efficiency_curve_temperature_evaluation_variable(self, value=None):
        """  Corresponds to IDD Field `Efficiency Curve Temperature Evaluation Variable`

        Args:
            value (str): value for IDD Field `Efficiency Curve Temperature Evaluation Variable`
                Accepted values are:
                      - EnteringBoiler
                      - LeavingBoiler
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `efficiency_curve_temperature_evaluation_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `efficiency_curve_temperature_evaluation_variable`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `efficiency_curve_temperature_evaluation_variable`')
            vals = {}
            vals["enteringboiler"] = "EnteringBoiler"
            vals["leavingboiler"] = "LeavingBoiler"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `efficiency_curve_temperature_evaluation_variable`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `efficiency_curve_temperature_evaluation_variable`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Efficiency Curve Temperature Evaluation Variable"] = value

    @property
    def normalized_boiler_efficiency_curve_name(self):
        """Get normalized_boiler_efficiency_curve_name

        Returns:
            str: the value of `normalized_boiler_efficiency_curve_name` or None if not set
        """
        return self._data["Normalized Boiler Efficiency Curve Name"]

    @normalized_boiler_efficiency_curve_name.setter
    def normalized_boiler_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Normalized Boiler Efficiency Curve Name`
        Linear, Quadratic and Cubic efficiency curves are solely a function of PLR.
        All other efficiency curve types are a function of PLR and boiler water temperature.
        Linear = C1 + C2*PLR
        Quadratic = C1 + C2*PLR + C3*PLR^2
        Cubic = C1 + C2*PLR + C3*PLR^2 + C4*PLR^3
        Biquadratic = C1 + C2*PLR + C3*PLR^2 + C4*T + C5*T^2 + C6*PLR*T
        QuadraticLinear = C1 + C2*PLR + C3*PLR^2 + (C4 + C5*PLR + C6*PLR^2)*T
        BiCubic = C1+C2*PLR+C3*PLR^2+C4*T+C5*T^2+C6*PLR*T+C7*PLR^3+C8*T^3+C9*PLR^2*T+C10*PLR*T^2
        TriQuadratic curves are not allowed.
        Table:OneIndependentVariable Table:TwoIndependentVariables
        PLR = part-load ratio
        T = boiler water temperature (either entering or leaving).

        Args:
            value (str): value for IDD Field `Normalized Boiler Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `normalized_boiler_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_boiler_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_boiler_efficiency_curve_name`')
        self._data["Normalized Boiler Efficiency Curve Name"] = value

    @property
    def design_water_outlet_temperature(self):
        """Get design_water_outlet_temperature

        Returns:
            float: the value of `design_water_outlet_temperature` or None if not set
        """
        return self._data["Design Water Outlet Temperature"]

    @design_water_outlet_temperature.setter
    def design_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Water Outlet Temperature`

        Args:
            value (float): value for IDD Field `Design Water Outlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_water_outlet_temperature`'.format(value))
        self._data["Design Water Outlet Temperature"] = value

    @property
    def design_water_flow_rate(self):
        """Get design_water_flow_rate

        Returns:
            float: the value of `design_water_flow_rate` or None if not set
        """
        return self._data["Design Water Flow Rate"]

    @design_water_flow_rate.setter
    def design_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_water_flow_rate`'.format(value))
                    self._data["Design Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_water_flow_rate`')
        self._data["Design Water Flow Rate"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.0):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def boiler_water_inlet_node_name(self):
        """Get boiler_water_inlet_node_name

        Returns:
            str: the value of `boiler_water_inlet_node_name` or None if not set
        """
        return self._data["Boiler Water Inlet Node Name"]

    @boiler_water_inlet_node_name.setter
    def boiler_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Boiler Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Boiler Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `boiler_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `boiler_water_inlet_node_name`')
        self._data["Boiler Water Inlet Node Name"] = value

    @property
    def boiler_water_outlet_node_name(self):
        """Get boiler_water_outlet_node_name

        Returns:
            str: the value of `boiler_water_outlet_node_name` or None if not set
        """
        return self._data["Boiler Water Outlet Node Name"]

    @boiler_water_outlet_node_name.setter
    def boiler_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Boiler Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Boiler Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `boiler_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `boiler_water_outlet_node_name`')
        self._data["Boiler Water Outlet Node Name"] = value

    @property
    def water_outlet_upper_temperature_limit(self):
        """Get water_outlet_upper_temperature_limit

        Returns:
            float: the value of `water_outlet_upper_temperature_limit` or None if not set
        """
        return self._data["Water Outlet Upper Temperature Limit"]

    @water_outlet_upper_temperature_limit.setter
    def water_outlet_upper_temperature_limit(self, value=99.9):
        """  Corresponds to IDD Field `Water Outlet Upper Temperature Limit`

        Args:
            value (float): value for IDD Field `Water Outlet Upper Temperature Limit`
                Units: C
                Default value: 99.9
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `water_outlet_upper_temperature_limit`'.format(value))
        self._data["Water Outlet Upper Temperature Limit"] = value

    @property
    def boiler_flow_mode(self):
        """Get boiler_flow_mode

        Returns:
            str: the value of `boiler_flow_mode` or None if not set
        """
        return self._data["Boiler Flow Mode"]

    @boiler_flow_mode.setter
    def boiler_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Boiler Flow Mode`
        Select operating mode for fluid flow through the boiler. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by boiler to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by boiler to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Boiler Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `boiler_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `boiler_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `boiler_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `boiler_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `boiler_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Boiler Flow Mode"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load

        Returns:
            float: the value of `parasitic_electric_load` or None if not set
        """
        return self._data["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Parasitic Electric Load`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `parasitic_electric_load`')
        self._data["Parasitic Electric Load"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class BoilerSteam(object):
    """ Corresponds to IDD object `Boiler:Steam`
        This boiler model is an adaptation of the empirical model from the Building
        Loads and System Thermodynamics (BLAST) program.  Boiler performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  A constant efficiency boiler is modeled by setting
        the fuel use coefficients as follows: N9=1, N10=0, N11=0
    """
    internal_name = "Boiler:Steam"
    field_count = 15
    required_fields = ["Name", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Boiler:Steam`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Maximum Operating Pressure"] = None
        self._data["Theoretical Efficiency"] = None
        self._data["Design Outlet Steam Temperature"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Steam Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_operating_pressure = None
        else:
            self.maximum_operating_pressure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.theoretical_efficiency = None
        else:
            self.theoretical_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_outlet_steam_temperature = None
        else:
            self.design_outlet_steam_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_fuel_use_function_of_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.steam_outlet_node_name = None
        else:
            self.steam_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["coal"] = "Coal"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def maximum_operating_pressure(self):
        """Get maximum_operating_pressure

        Returns:
            float: the value of `maximum_operating_pressure` or None if not set
        """
        return self._data["Maximum Operating Pressure"]

    @maximum_operating_pressure.setter
    def maximum_operating_pressure(self, value=None):
        """  Corresponds to IDD Field `Maximum Operating Pressure`

        Args:
            value (float): value for IDD Field `Maximum Operating Pressure`
                Units: Kpa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_operating_pressure`'.format(value))
        self._data["Maximum Operating Pressure"] = value

    @property
    def theoretical_efficiency(self):
        """Get theoretical_efficiency

        Returns:
            float: the value of `theoretical_efficiency` or None if not set
        """
        return self._data["Theoretical Efficiency"]

    @theoretical_efficiency.setter
    def theoretical_efficiency(self, value=None):
        """  Corresponds to IDD Field `Theoretical Efficiency`

        Args:
            value (float): value for IDD Field `Theoretical Efficiency`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `theoretical_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `theoretical_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `theoretical_efficiency`')
        self._data["Theoretical Efficiency"] = value

    @property
    def design_outlet_steam_temperature(self):
        """Get design_outlet_steam_temperature

        Returns:
            float: the value of `design_outlet_steam_temperature` or None if not set
        """
        return self._data["Design Outlet Steam Temperature"]

    @design_outlet_steam_temperature.setter
    def design_outlet_steam_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Outlet Steam Temperature`

        Args:
            value (float): value for IDD Field `Design Outlet Steam Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_outlet_steam_temperature`'.format(value))
        self._data["Design Outlet Steam Temperature"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def coefficient_1_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_1_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_1_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_1_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Fuel Use Function of Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Fuel Use Function of Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_2_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_2_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_2_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Fuel Use Function of Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Fuel Use Function of Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_fuel_use_function_of_part_load_ratio_curve(self):
        """Get coefficient_3_of_fuel_use_function_of_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"]

    @coefficient_3_of_fuel_use_function_of_part_load_ratio_curve.setter
    def coefficient_3_of_fuel_use_function_of_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Fuel Use Function of Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Fuel Use Function of Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_fuel_use_function_of_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Fuel Use Function of Part Load Ratio Curve"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def steam_outlet_node_name(self):
        """Get steam_outlet_node_name

        Returns:
            str: the value of `steam_outlet_node_name` or None if not set
        """
        return self._data["Steam Outlet Node Name"]

    @steam_outlet_node_name.setter
    def steam_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Steam Outlet Node Name`

        Args:
            value (str): value for IDD Field `Steam Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `steam_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `steam_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `steam_outlet_node_name`')
        self._data["Steam Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerElectricEir(object):
    """ Corresponds to IDD object `Chiller:Electric:EIR`
        This chiller model is the empirical model from the DOE-2 building Energy
        simulation program. Chiller performance at off-reference conditions is modeled
        using three polynomial equations. Three curves objects are required.
    """
    internal_name = "Chiller:Electric:EIR"
    field_count = 33
    required_fields = ["Name", "Reference Capacity", "Reference COP", "Cooling Capacity Function of Temperature Curve Name", "Electric Input to Cooling Output Ratio Function of Temperature Curve Name", "Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Electric:EIR`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Capacity"] = None
        self._data["Reference COP"] = None
        self._data["Reference Leaving Chilled Water Temperature"] = None
        self._data["Reference Entering Condenser Fluid Temperature"] = None
        self._data["Reference Chilled Water Flow Rate"] = None
        self._data["Reference Condenser Fluid Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Minimum Unloading Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Condenser Fan Power Ratio"] = None
        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = None
        self._data["Leaving Chilled Water Lower Temperature Limit"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = None
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = None
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_capacity = None
        else:
            self.reference_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cop = None
        else:
            self.reference_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_leaving_chilled_water_temperature = None
        else:
            self.reference_leaving_chilled_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_entering_condenser_fluid_temperature = None
        else:
            self.reference_entering_condenser_fluid_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_chilled_water_flow_rate = None
        else:
            self.reference_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_condenser_fluid_flow_rate = None
        else:
            self.reference_condenser_fluid_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_unloading_ratio = None
        else:
            self.minimum_unloading_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_fan_power_ratio = None
        else:
            self.condenser_fan_power_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = None
        else:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_chilled_water_lower_temperature_limit = None
        else:
            self.leaving_chilled_water_lower_temperature_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_heat_recovery_relative_capacity_fraction = None
        else:
            self.condenser_heat_recovery_relative_capacity_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = None
        else:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_leaving_temperature_setpoint_node_name = None
        else:
            self.heat_recovery_leaving_temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reference_capacity(self):
        """Get reference_capacity

        Returns:
            float: the value of `reference_capacity` or None if not set
        """
        return self._data["Reference Capacity"]

    @reference_capacity.setter
    def reference_capacity(self, value=None):
        """  Corresponds to IDD Field `Reference Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_capacity`'.format(value))
                    self._data["Reference Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_capacity`')
        self._data["Reference Capacity"] = value

    @property
    def reference_cop(self):
        """Get reference_cop

        Returns:
            float: the value of `reference_cop` or None if not set
        """
        return self._data["Reference COP"]

    @reference_cop.setter
    def reference_cop(self, value=None):
        """  Corresponds to IDD Field `Reference COP`
        Efficiency of the chiller compressor (cooling output/compressor energy input).
        Condenser fan power should not be included here.

        Args:
            value (float): value for IDD Field `Reference COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cop`')
        self._data["Reference COP"] = value

    @property
    def reference_leaving_chilled_water_temperature(self):
        """Get reference_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Leaving Chilled Water Temperature"]

    @reference_leaving_chilled_water_temperature.setter
    def reference_leaving_chilled_water_temperature(self, value=6.67):
        """  Corresponds to IDD Field `Reference Leaving Chilled Water Temperature`

        Args:
            value (float): value for IDD Field `Reference Leaving Chilled Water Temperature`
                Units: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_leaving_chilled_water_temperature`'.format(value))
        self._data["Reference Leaving Chilled Water Temperature"] = value

    @property
    def reference_entering_condenser_fluid_temperature(self):
        """Get reference_entering_condenser_fluid_temperature

        Returns:
            float: the value of `reference_entering_condenser_fluid_temperature` or None if not set
        """
        return self._data["Reference Entering Condenser Fluid Temperature"]

    @reference_entering_condenser_fluid_temperature.setter
    def reference_entering_condenser_fluid_temperature(self, value=29.4):
        """  Corresponds to IDD Field `Reference Entering Condenser Fluid Temperature`

        Args:
            value (float): value for IDD Field `Reference Entering Condenser Fluid Temperature`
                Units: C
                Default value: 29.4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_entering_condenser_fluid_temperature`'.format(value))
        self._data["Reference Entering Condenser Fluid Temperature"] = value

    @property
    def reference_chilled_water_flow_rate(self):
        """Get reference_chilled_water_flow_rate

        Returns:
            float: the value of `reference_chilled_water_flow_rate` or None if not set
        """
        return self._data["Reference Chilled Water Flow Rate"]

    @reference_chilled_water_flow_rate.setter
    def reference_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Reference Chilled Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_chilled_water_flow_rate`'.format(value))
                    self._data["Reference Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_chilled_water_flow_rate`')
        self._data["Reference Chilled Water Flow Rate"] = value

    @property
    def reference_condenser_fluid_flow_rate(self):
        """Get reference_condenser_fluid_flow_rate

        Returns:
            float: the value of `reference_condenser_fluid_flow_rate` or None if not set
        """
        return self._data["Reference Condenser Fluid Flow Rate"]

    @reference_condenser_fluid_flow_rate.setter
    def reference_condenser_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Reference Condenser Fluid Flow Rate`
        This field is only used for Condenser Type = AirCooled or EvaporativelyCooled
        when Heat Recovery is specified

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Condenser Fluid Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Condenser Fluid Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_condenser_fluid_flow_rate`'.format(value))
                    self._data["Reference Condenser Fluid Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_condenser_fluid_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `reference_condenser_fluid_flow_rate`')
        self._data["Reference Condenser Fluid Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Function of Temperature Curve Name`
        Cooling capacity as a function of CW supply temp and entering condenser temp
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT
        CWS = supply (leaving) chilled water temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
        Electric Input Ratio (EIR) as a function of temperature
        EIR = 1/COP
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*ECT + e*ECT**2 + f*CWS*ECT
        CWS = supply (leaving) chilled water temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR)
        EIR = 1/COP
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`
        Part load ratio below which the chiller starts cycling on/off to meet the load.
        Must be less than or equal to Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                Default value: 0.1
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`
        Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def minimum_unloading_ratio(self):
        """Get minimum_unloading_ratio

        Returns:
            float: the value of `minimum_unloading_ratio` or None if not set
        """
        return self._data["Minimum Unloading Ratio"]

    @minimum_unloading_ratio.setter
    def minimum_unloading_ratio(self, value=0.2):
        """  Corresponds to IDD Field `Minimum Unloading Ratio`
        Part load ratio where the chiller can no longer unload and false loading begins.
        Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Minimum Unloading Ratio`
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_unloading_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_unloading_ratio`')
        self._data["Minimum Unloading Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`
        Not required if air-cooled or evaporativly-cooled

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`
        Not required if air-cooled or evaporatively-cooled

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def condenser_fan_power_ratio(self):
        """Get condenser_fan_power_ratio

        Returns:
            float: the value of `condenser_fan_power_ratio` or None if not set
        """
        return self._data["Condenser Fan Power Ratio"]

    @condenser_fan_power_ratio.setter
    def condenser_fan_power_ratio(self, value=0.0):
        """  Corresponds to IDD Field `Condenser Fan Power Ratio`
        Use for air-cooled or evaporatively-cooled condensers.
        Ratio of condenser fan power to reference chiller capacity

        Args:
            value (float): value for IDD Field `Condenser Fan Power Ratio`
                Units: W/W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condenser_fan_power_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_fan_power_ratio`')
        self._data["Condenser Fan Power Ratio"] = value

    @property
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self):
        """Get fraction_of_compressor_electric_consumption_rejected_by_condenser

        Returns:
            float: the value of `fraction_of_compressor_electric_consumption_rejected_by_condenser` or None if not set
        """
        return self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"]

    @fraction_of_compressor_electric_consumption_rejected_by_condenser.setter
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Compressor Electric Consumption Rejected by Condenser`
        Fraction of compressor electrical energy that must be rejected by the condenser.
        Enter a value of 1.0 when modeling hermetic chillers.
        For open chillers, enter the compressor motor efficiency.
        This value should be greater than 0.6 for praticle applications.

        Args:
            value (float): value for IDD Field `Fraction of Compressor Electric Consumption Rejected by Condenser`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')
        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = value

    @property
    def leaving_chilled_water_lower_temperature_limit(self):
        """Get leaving_chilled_water_lower_temperature_limit

        Returns:
            float: the value of `leaving_chilled_water_lower_temperature_limit` or None if not set
        """
        return self._data["Leaving Chilled Water Lower Temperature Limit"]

    @leaving_chilled_water_lower_temperature_limit.setter
    def leaving_chilled_water_lower_temperature_limit(self, value=2.0):
        """  Corresponds to IDD Field `Leaving Chilled Water Lower Temperature Limit`

        Args:
            value (float): value for IDD Field `Leaving Chilled Water Lower Temperature Limit`
                Units: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `leaving_chilled_water_lower_temperature_limit`'.format(value))
        self._data["Leaving Chilled Water Lower Temperature Limit"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Heat Recovery Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
                    self._data["Design Heat Recovery Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def condenser_heat_recovery_relative_capacity_fraction(self):
        """Get condenser_heat_recovery_relative_capacity_fraction

        Returns:
            float: the value of `condenser_heat_recovery_relative_capacity_fraction` or None if not set
        """
        return self._data["Condenser Heat Recovery Relative Capacity Fraction"]

    @condenser_heat_recovery_relative_capacity_fraction.setter
    def condenser_heat_recovery_relative_capacity_fraction(self, value=None):
        """  Corresponds to IDD Field `Condenser Heat Recovery Relative Capacity Fraction`
        This optional field is the fraction of total rejected heat that can be recovered at full load

        Args:
            value (float): value for IDD Field `Condenser Heat Recovery Relative Capacity Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = value

    @property
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self):
        """Get heat_recovery_inlet_high_temperature_limit_schedule_name

        Returns:
            str: the value of `heat_recovery_inlet_high_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"]

    @heat_recovery_inlet_high_temperature_limit_schedule_name.setter
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet High Temperature Limit Schedule Name`
        This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet High Temperature Limit Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = value

    @property
    def heat_recovery_leaving_temperature_setpoint_node_name(self):
        """Get heat_recovery_leaving_temperature_setpoint_node_name

        Returns:
            str: the value of `heat_recovery_leaving_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Heat Recovery Leaving Temperature Setpoint Node Name"]

    @heat_recovery_leaving_temperature_setpoint_node_name.setter
    def heat_recovery_leaving_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Leaving Temperature Setpoint Node Name`
        This optional field provides control over the heat recovery
        Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery
        If this field is not used, the bundles are modeled as being in parallel

        Args:
            value (str): value for IDD Field `Heat Recovery Leaving Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerElectricReformulatedEir(object):
    """ Corresponds to IDD object `Chiller:Electric:ReformulatedEIR`
        This chiller model is an empirical model, a reformulated version of Chiller:Electric:EIR
        where the performance is a function of condenser leaving fluid Temperature instead of
        condenser entering fluid Temperature. Chiller performance at off-reference conditions is
        modeled using three polynomial equations. Three curve objects are required.
    """
    internal_name = "Chiller:Electric:ReformulatedEIR"
    field_count = 28
    required_fields = ["Name", "Reference Capacity", "Reference COP", "Cooling Capacity Function of Temperature Curve Name", "Electric Input to Cooling Output Ratio Function of Temperature Curve Name", "Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Condenser Inlet Node Name", "Condenser Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Electric:ReformulatedEIR`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Capacity"] = None
        self._data["Reference COP"] = None
        self._data["Reference Leaving Chilled Water Temperature"] = None
        self._data["Reference Leaving Condenser Water Temperature"] = None
        self._data["Reference Chilled Water Flow Rate"] = None
        self._data["Reference Condenser Water Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Minimum Unloading Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = None
        self._data["Leaving Chilled Water Lower Temperature Limit"] = None
        self._data["Chiller Flow Mode Type"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = None
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = None
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_capacity = None
        else:
            self.reference_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cop = None
        else:
            self.reference_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_leaving_chilled_water_temperature = None
        else:
            self.reference_leaving_chilled_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_leaving_condenser_water_temperature = None
        else:
            self.reference_leaving_condenser_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_chilled_water_flow_rate = None
        else:
            self.reference_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_condenser_water_flow_rate = None
        else:
            self.reference_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_unloading_ratio = None
        else:
            self.minimum_unloading_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = None
        else:
            self.fraction_of_compressor_electric_consumption_rejected_by_condenser = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_chilled_water_lower_temperature_limit = None
        else:
            self.leaving_chilled_water_lower_temperature_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode_type = None
        else:
            self.chiller_flow_mode_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_heat_recovery_relative_capacity_fraction = None
        else:
            self.condenser_heat_recovery_relative_capacity_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = None
        else:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_leaving_temperature_setpoint_node_name = None
        else:
            self.heat_recovery_leaving_temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reference_capacity(self):
        """Get reference_capacity

        Returns:
            float: the value of `reference_capacity` or None if not set
        """
        return self._data["Reference Capacity"]

    @reference_capacity.setter
    def reference_capacity(self, value=None):
        """  Corresponds to IDD Field `Reference Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_capacity`'.format(value))
                    self._data["Reference Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_capacity`')
        self._data["Reference Capacity"] = value

    @property
    def reference_cop(self):
        """Get reference_cop

        Returns:
            float: the value of `reference_cop` or None if not set
        """
        return self._data["Reference COP"]

    @reference_cop.setter
    def reference_cop(self, value=None):
        """  Corresponds to IDD Field `Reference COP`
        Efficiency of the chiller compressor (cooling output/compressor energy input).
        Condenser fan power should not be included here.

        Args:
            value (float): value for IDD Field `Reference COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cop`')
        self._data["Reference COP"] = value

    @property
    def reference_leaving_chilled_water_temperature(self):
        """Get reference_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Leaving Chilled Water Temperature"]

    @reference_leaving_chilled_water_temperature.setter
    def reference_leaving_chilled_water_temperature(self, value=6.67):
        """  Corresponds to IDD Field `Reference Leaving Chilled Water Temperature`

        Args:
            value (float): value for IDD Field `Reference Leaving Chilled Water Temperature`
                Units: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_leaving_chilled_water_temperature`'.format(value))
        self._data["Reference Leaving Chilled Water Temperature"] = value

    @property
    def reference_leaving_condenser_water_temperature(self):
        """Get reference_leaving_condenser_water_temperature

        Returns:
            float: the value of `reference_leaving_condenser_water_temperature` or None if not set
        """
        return self._data["Reference Leaving Condenser Water Temperature"]

    @reference_leaving_condenser_water_temperature.setter
    def reference_leaving_condenser_water_temperature(self, value=35.0):
        """  Corresponds to IDD Field `Reference Leaving Condenser Water Temperature`

        Args:
            value (float): value for IDD Field `Reference Leaving Condenser Water Temperature`
                Units: C
                Default value: 35.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_leaving_condenser_water_temperature`'.format(value))
        self._data["Reference Leaving Condenser Water Temperature"] = value

    @property
    def reference_chilled_water_flow_rate(self):
        """Get reference_chilled_water_flow_rate

        Returns:
            float: the value of `reference_chilled_water_flow_rate` or None if not set
        """
        return self._data["Reference Chilled Water Flow Rate"]

    @reference_chilled_water_flow_rate.setter
    def reference_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Reference Chilled Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_chilled_water_flow_rate`'.format(value))
                    self._data["Reference Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_chilled_water_flow_rate`')
        self._data["Reference Chilled Water Flow Rate"] = value

    @property
    def reference_condenser_water_flow_rate(self):
        """Get reference_condenser_water_flow_rate

        Returns:
            float: the value of `reference_condenser_water_flow_rate` or None if not set
        """
        return self._data["Reference Condenser Water Flow Rate"]

    @reference_condenser_water_flow_rate.setter
    def reference_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Reference Condenser Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_condenser_water_flow_rate`'.format(value))
                    self._data["Reference Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_condenser_water_flow_rate`')
        self._data["Reference Condenser Water Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Function of Temperature Curve Name`
        Cooling capacity as a function of supply (leaving) chilled water temperature
        and leaving condenser fluid temperature
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
        Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature
        and leaving condenser fluid temperature.   EIR = 1/COP.
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*LCT + e*LCT**2 + f*CWS*LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR)
        EIR = 1/COP
        Table:TwoIndependentVariables object can also be used
        curve = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3
        + i*0 + j*0
        PLR = part load ratio (cooling load/steady state capacity)
        LCT = leaving condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`
        Part load ratio below which the chiller starts cycling on/off to meet the load.
        Must be less than or equal to Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                Default value: 0.1
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`
        Maximum allowable part load ratio. Must be greater than or equal to Minimum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def minimum_unloading_ratio(self):
        """Get minimum_unloading_ratio

        Returns:
            float: the value of `minimum_unloading_ratio` or None if not set
        """
        return self._data["Minimum Unloading Ratio"]

    @minimum_unloading_ratio.setter
    def minimum_unloading_ratio(self, value=0.2):
        """  Corresponds to IDD Field `Minimum Unloading Ratio`
        Part load ratio where the chiller can no longer unload and false loading begins.
        Minimum unloading ratio must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Minimum Unloading Ratio`
                Default value: 0.2
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_unloading_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_unloading_ratio`')
        self._data["Minimum Unloading Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self):
        """Get fraction_of_compressor_electric_consumption_rejected_by_condenser

        Returns:
            float: the value of `fraction_of_compressor_electric_consumption_rejected_by_condenser` or None if not set
        """
        return self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"]

    @fraction_of_compressor_electric_consumption_rejected_by_condenser.setter
    def fraction_of_compressor_electric_consumption_rejected_by_condenser(self, value=1.0):
        """  Corresponds to IDD Field `Fraction of Compressor Electric Consumption Rejected by Condenser`
        Fraction of compressor electrical energy that must be rejected by the condenser.
        Enter a value of 1.0 when modeling hermetic chillers.
        For open chillers, enter the compressor motor efficiency.
        This value should be greater than 0.6 for praticle applications.

        Args:
            value (float): value for IDD Field `Fraction of Compressor Electric Consumption Rejected by Condenser`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_compressor_electric_consumption_rejected_by_condenser`')
        self._data["Fraction of Compressor Electric Consumption Rejected by Condenser"] = value

    @property
    def leaving_chilled_water_lower_temperature_limit(self):
        """Get leaving_chilled_water_lower_temperature_limit

        Returns:
            float: the value of `leaving_chilled_water_lower_temperature_limit` or None if not set
        """
        return self._data["Leaving Chilled Water Lower Temperature Limit"]

    @leaving_chilled_water_lower_temperature_limit.setter
    def leaving_chilled_water_lower_temperature_limit(self, value=2.0):
        """  Corresponds to IDD Field `Leaving Chilled Water Lower Temperature Limit`

        Args:
            value (float): value for IDD Field `Leaving Chilled Water Lower Temperature Limit`
                Units: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `leaving_chilled_water_lower_temperature_limit`'.format(value))
        self._data["Leaving Chilled Water Lower Temperature Limit"] = value

    @property
    def chiller_flow_mode_type(self):
        """Get chiller_flow_mode_type

        Returns:
            str: the value of `chiller_flow_mode_type` or None if not set
        """
        return self._data["Chiller Flow Mode Type"]

    @chiller_flow_mode_type.setter
    def chiller_flow_mode_type(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode Type`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode Type`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode_type`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode Type"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Heat Recovery Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
                    self._data["Design Heat Recovery Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    @property
    def condenser_heat_recovery_relative_capacity_fraction(self):
        """Get condenser_heat_recovery_relative_capacity_fraction

        Returns:
            float: the value of `condenser_heat_recovery_relative_capacity_fraction` or None if not set
        """
        return self._data["Condenser Heat Recovery Relative Capacity Fraction"]

    @condenser_heat_recovery_relative_capacity_fraction.setter
    def condenser_heat_recovery_relative_capacity_fraction(self, value=None):
        """  Corresponds to IDD Field `Condenser Heat Recovery Relative Capacity Fraction`
        This optional field is the fraction of total rejected heat that can be recovered at full load

        Args:
            value (float): value for IDD Field `Condenser Heat Recovery Relative Capacity Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = value

    @property
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self):
        """Get heat_recovery_inlet_high_temperature_limit_schedule_name

        Returns:
            str: the value of `heat_recovery_inlet_high_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"]

    @heat_recovery_inlet_high_temperature_limit_schedule_name.setter
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet High Temperature Limit Schedule Name`
        This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet High Temperature Limit Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = value

    @property
    def heat_recovery_leaving_temperature_setpoint_node_name(self):
        """Get heat_recovery_leaving_temperature_setpoint_node_name

        Returns:
            str: the value of `heat_recovery_leaving_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Heat Recovery Leaving Temperature Setpoint Node Name"]

    @heat_recovery_leaving_temperature_setpoint_node_name.setter
    def heat_recovery_leaving_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Leaving Temperature Setpoint Node Name`
        This optional field provides control over the heat recovery
        Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery
        If this field is not used, the bundles are modeled as being in parallel

        Args:
            value (str): value for IDD Field `Heat Recovery Leaving Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerElectric(object):
    """ Corresponds to IDD object `Chiller:Electric`
        This chiller model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Chiller performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Chiller:Electric"
    field_count = 37
    required_fields = ["Name", "Nominal Capacity", "Nominal COP", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Temperature Rise Coefficient"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Condenser Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Temperature Rise Coefficient"] = None
        self._data["Design Chilled Water Outlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Fluid Flow Rate"] = None
        self._data["Coefficient 1 of Capacity Ratio Curve"] = None
        self._data["Coefficient 2 of Capacity Ratio Curve"] = None
        self._data["Coefficient 3 of Capacity Ratio Curve"] = None
        self._data["Coefficient 1 of Power Ratio Curve"] = None
        self._data["Coefficient 2 of Power Ratio Curve"] = None
        self._data["Coefficient 3 of Power Ratio Curve"] = None
        self._data["Coefficient 1 of Full Load Ratio Curve"] = None
        self._data["Coefficient 2 of Full Load Ratio Curve"] = None
        self._data["Coefficient 3 of Full Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = None
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = None
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_rise_coefficient = None
        else:
            self.temperature_rise_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_outlet_temperature = None
        else:
            self.design_chilled_water_outlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_fluid_flow_rate = None
        else:
            self.design_condenser_fluid_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_capacity_ratio_curve = None
        else:
            self.coefficient_1_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_capacity_ratio_curve = None
        else:
            self.coefficient_2_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_capacity_ratio_curve = None
        else:
            self.coefficient_3_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_power_ratio_curve = None
        else:
            self.coefficient_1_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_power_ratio_curve = None
        else:
            self.coefficient_2_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_power_ratio_curve = None
        else:
            self.coefficient_3_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_full_load_ratio_curve = None
        else:
            self.coefficient_1_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_full_load_ratio_curve = None
        else:
            self.coefficient_2_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_full_load_ratio_curve = None
        else:
            self.coefficient_3_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_heat_recovery_relative_capacity_fraction = None
        else:
            self.condenser_heat_recovery_relative_capacity_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = None
        else:
            self.heat_recovery_inlet_high_temperature_limit_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_leaving_temperature_setpoint_node_name = None
        else:
            self.heat_recovery_leaving_temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `Nominal COP`

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')
        self._data["Nominal COP"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Inlet Temperature`

        Args:
            value (float): value for IDD Field `Design Condenser Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_condenser_inlet_temperature`'.format(value))
        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def temperature_rise_coefficient(self):
        """Get temperature_rise_coefficient

        Returns:
            float: the value of `temperature_rise_coefficient` or None if not set
        """
        return self._data["Temperature Rise Coefficient"]

    @temperature_rise_coefficient.setter
    def temperature_rise_coefficient(self, value=None):
        """  Corresponds to IDD Field `Temperature Rise Coefficient`

        Args:
            value (float): value for IDD Field `Temperature Rise Coefficient`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `temperature_rise_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_rise_coefficient`')
        self._data["Temperature Rise Coefficient"] = value

    @property
    def design_chilled_water_outlet_temperature(self):
        """Get design_chilled_water_outlet_temperature

        Returns:
            float: the value of `design_chilled_water_outlet_temperature` or None if not set
        """
        return self._data["Design Chilled Water Outlet Temperature"]

    @design_chilled_water_outlet_temperature.setter
    def design_chilled_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Outlet Temperature`

        Args:
            value (float): value for IDD Field `Design Chilled Water Outlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_chilled_water_outlet_temperature`'.format(value))
        self._data["Design Chilled Water Outlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the maximum flow & for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_fluid_flow_rate(self):
        """Get design_condenser_fluid_flow_rate

        Returns:
            float: the value of `design_condenser_fluid_flow_rate` or None if not set
        """
        return self._data["Design Condenser Fluid Flow Rate"]

    @design_condenser_fluid_flow_rate.setter
    def design_condenser_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Fluid Flow Rate`
        This field is only used for Condenser Type = AirCooled or EvaporativelyCooled
        when Heat Recovery is specified

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Fluid Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Fluid Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_fluid_flow_rate`'.format(value))
                    self._data["Design Condenser Fluid Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_fluid_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_fluid_flow_rate`')
        self._data["Design Condenser Fluid Flow Rate"] = value

    @property
    def coefficient_1_of_capacity_ratio_curve(self):
        """Get coefficient_1_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Capacity Ratio Curve"]

    @coefficient_1_of_capacity_ratio_curve.setter
    def coefficient_1_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Capacity Ratio Curve"] = value

    @property
    def coefficient_2_of_capacity_ratio_curve(self):
        """Get coefficient_2_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Capacity Ratio Curve"]

    @coefficient_2_of_capacity_ratio_curve.setter
    def coefficient_2_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Capacity Ratio Curve"] = value

    @property
    def coefficient_3_of_capacity_ratio_curve(self):
        """Get coefficient_3_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Capacity Ratio Curve"]

    @coefficient_3_of_capacity_ratio_curve.setter
    def coefficient_3_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Capacity Ratio Curve"] = value

    @property
    def coefficient_1_of_power_ratio_curve(self):
        """Get coefficient_1_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Power Ratio Curve"]

    @coefficient_1_of_power_ratio_curve.setter
    def coefficient_1_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Power Ratio Curve"] = value

    @property
    def coefficient_2_of_power_ratio_curve(self):
        """Get coefficient_2_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Power Ratio Curve"]

    @coefficient_2_of_power_ratio_curve.setter
    def coefficient_2_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Power Ratio Curve"] = value

    @property
    def coefficient_3_of_power_ratio_curve(self):
        """Get coefficient_3_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Power Ratio Curve"]

    @coefficient_3_of_power_ratio_curve.setter
    def coefficient_3_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Power Ratio Curve"] = value

    @property
    def coefficient_1_of_full_load_ratio_curve(self):
        """Get coefficient_1_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Full Load Ratio Curve"]

    @coefficient_1_of_full_load_ratio_curve.setter
    def coefficient_1_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Full Load Ratio Curve"] = value

    @property
    def coefficient_2_of_full_load_ratio_curve(self):
        """Get coefficient_2_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Full Load Ratio Curve"]

    @coefficient_2_of_full_load_ratio_curve.setter
    def coefficient_2_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Full Load Ratio Curve"] = value

    @property
    def coefficient_3_of_full_load_ratio_curve(self):
        """Get coefficient_3_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Full Load Ratio Curve"]

    @coefficient_3_of_full_load_ratio_curve.setter
    def coefficient_3_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Full Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Temperature Lower Limit`

        Args:
            value (float): value for IDD Field `Chilled Water Outlet Temperature Lower Limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Heat Recovery Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
                    self._data["Design Heat Recovery Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def condenser_heat_recovery_relative_capacity_fraction(self):
        """Get condenser_heat_recovery_relative_capacity_fraction

        Returns:
            float: the value of `condenser_heat_recovery_relative_capacity_fraction` or None if not set
        """
        return self._data["Condenser Heat Recovery Relative Capacity Fraction"]

    @condenser_heat_recovery_relative_capacity_fraction.setter
    def condenser_heat_recovery_relative_capacity_fraction(self, value=None):
        """  Corresponds to IDD Field `Condenser Heat Recovery Relative Capacity Fraction`
        This optional field is the fraction of total rejected heat that can be recovered at full load

        Args:
            value (float): value for IDD Field `Condenser Heat Recovery Relative Capacity Fraction`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `condenser_heat_recovery_relative_capacity_fraction`')
        self._data["Condenser Heat Recovery Relative Capacity Fraction"] = value

    @property
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self):
        """Get heat_recovery_inlet_high_temperature_limit_schedule_name

        Returns:
            str: the value of `heat_recovery_inlet_high_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"]

    @heat_recovery_inlet_high_temperature_limit_schedule_name.setter
    def heat_recovery_inlet_high_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet High Temperature Limit Schedule Name`
        This optional schedule of temperatures will turn off heat recovery if inlet exceeds the value

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet High Temperature Limit Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_high_temperature_limit_schedule_name`')
        self._data["Heat Recovery Inlet High Temperature Limit Schedule Name"] = value

    @property
    def heat_recovery_leaving_temperature_setpoint_node_name(self):
        """Get heat_recovery_leaving_temperature_setpoint_node_name

        Returns:
            str: the value of `heat_recovery_leaving_temperature_setpoint_node_name` or None if not set
        """
        return self._data["Heat Recovery Leaving Temperature Setpoint Node Name"]

    @heat_recovery_leaving_temperature_setpoint_node_name.setter
    def heat_recovery_leaving_temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Leaving Temperature Setpoint Node Name`
        This optional field provides control over the heat recovery
        Using this triggers a model more suited to series bundle and chillers with higher temperature heat recovery
        If this field is not used, the bundles are modeled as being in parallel

        Args:
            value (str): value for IDD Field `Heat Recovery Leaving Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_leaving_temperature_setpoint_node_name`')
        self._data["Heat Recovery Leaving Temperature Setpoint Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerAbsorptionIndirect(object):
    """ Corresponds to IDD object `Chiller:Absorption:Indirect`
        This indirect absorption chiller model is an enhanced model from the
        Building Loads and System Thermodynamics (BLAST) program.  Chiller
        performance curves are generated by fitting catalog data to third order
        polynomial equations. The chiller capacity is a function of condenser,
        chilled water, and generator temperatures. The heat input is a function
        of part-load ratio, condenser temperature, and chilled water temperature.
    """
    internal_name = "Chiller:Absorption:Indirect"
    field_count = 31
    required_fields = ["Name", "Nominal Capacity", "Nominal Pumping Power", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Condenser Inlet Node Name", "Condenser Outlet Node Name", "Generator Heat Input Function of Part Load Ratio Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Absorption:Indirect`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Pumping Power"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Condenser Inlet Temperature Lower Limit"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Generator Heat Input Function of Part Load Ratio Curve Name"] = None
        self._data["Pump Electric Input Function of Part Load Ratio Curve Name"] = None
        self._data["Generator Inlet Node Name"] = None
        self._data["Generator Outlet Node Name"] = None
        self._data["Capacity Correction Function of Condenser Temperature Curve Name"] = None
        self._data["Capacity Correction Function of Chilled Water Temperature Curve Name"] = None
        self._data["Capacity Correction Function of Generator Temperature Curve Name"] = None
        self._data["Generator Heat Input Correction Function of Condenser Temperature Curve Name"] = None
        self._data["Generator Heat Input Correction Function of Chilled Water Temperature Curve Name"] = None
        self._data["Generator Heat Source Type"] = None
        self._data["Design Generator Fluid Flow Rate"] = None
        self._data["Temperature Lower Limit Generator Inlet"] = None
        self._data["Degree of Subcooling in Steam Generator"] = None
        self._data["Degree of Subcooling in Steam Condensate Loop"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_pumping_power = None
        else:
            self.nominal_pumping_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_temperature_lower_limit = None
        else:
            self.condenser_inlet_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_heat_input_function_of_part_load_ratio_curve_name = None
        else:
            self.generator_heat_input_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pump_electric_input_function_of_part_load_ratio_curve_name = None
        else:
            self.pump_electric_input_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_inlet_node_name = None
        else:
            self.generator_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_outlet_node_name = None
        else:
            self.generator_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.capacity_correction_function_of_condenser_temperature_curve_name = None
        else:
            self.capacity_correction_function_of_condenser_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.capacity_correction_function_of_chilled_water_temperature_curve_name = None
        else:
            self.capacity_correction_function_of_chilled_water_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.capacity_correction_function_of_generator_temperature_curve_name = None
        else:
            self.capacity_correction_function_of_generator_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_heat_input_correction_function_of_condenser_temperature_curve_name = None
        else:
            self.generator_heat_input_correction_function_of_condenser_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_heat_input_correction_function_of_chilled_water_temperature_curve_name = None
        else:
            self.generator_heat_input_correction_function_of_chilled_water_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_heat_source_type = None
        else:
            self.generator_heat_source_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_generator_fluid_flow_rate = None
        else:
            self.design_generator_fluid_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_lower_limit_generator_inlet = None
        else:
            self.temperature_lower_limit_generator_inlet = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.degree_of_subcooling_in_steam_generator = None
        else:
            self.degree_of_subcooling_in_steam_generator = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.degree_of_subcooling_in_steam_condensate_loop = None
        else:
            self.degree_of_subcooling_in_steam_condensate_loop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_pumping_power(self):
        """Get nominal_pumping_power

        Returns:
            float: the value of `nominal_pumping_power` or None if not set
        """
        return self._data["Nominal Pumping Power"]

    @nominal_pumping_power.setter
    def nominal_pumping_power(self, value=None):
        """  Corresponds to IDD Field `Nominal Pumping Power`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Pumping Power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Pumping Power"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_pumping_power`'.format(value))
                    self._data["Nominal Pumping Power"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_pumping_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_pumping_power`')
        self._data["Nominal Pumping Power"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=30.0):
        """  Corresponds to IDD Field `Design Condenser Inlet Temperature`
        Used only when condenser flow rate is autosized.

        Args:
            value (float): value for IDD Field `Design Condenser Inlet Temperature`
                Units: C
                Default value: 30.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_condenser_inlet_temperature`'.format(value))
        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def condenser_inlet_temperature_lower_limit(self):
        """Get condenser_inlet_temperature_lower_limit

        Returns:
            float: the value of `condenser_inlet_temperature_lower_limit` or None if not set
        """
        return self._data["Condenser Inlet Temperature Lower Limit"]

    @condenser_inlet_temperature_lower_limit.setter
    def condenser_inlet_temperature_lower_limit(self, value=15.0):
        """  Corresponds to IDD Field `Condenser Inlet Temperature Lower Limit`
        Provides warnings when entering condenser temperature is below minimum.
        Capacity is not adjusted when entering condenser temperature is below minimum.

        Args:
            value (float): value for IDD Field `Condenser Inlet Temperature Lower Limit`
                Units: C
                Default value: 15.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `condenser_inlet_temperature_lower_limit`'.format(value))
        self._data["Condenser Inlet Temperature Lower Limit"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=5.0):
        """  Corresponds to IDD Field `Chilled Water Outlet Temperature Lower Limit`
        Capacity is adjusted when leaving chilled water temperature is below minimum.

        Args:
            value (float): value for IDD Field `Chilled Water Outlet Temperature Lower Limit`
                Units: C
                Default value: 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable flow this is the max flow & for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_condenser_water_flow_rate`')
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def generator_heat_input_function_of_part_load_ratio_curve_name(self):
        """Get generator_heat_input_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `generator_heat_input_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Generator Heat Input Function of Part Load Ratio Curve Name"]

    @generator_heat_input_function_of_part_load_ratio_curve_name.setter
    def generator_heat_input_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Generator Heat Input Function of Part Load Ratio Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Generator Heat Input Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_heat_input_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_input_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_heat_input_function_of_part_load_ratio_curve_name`')
        self._data["Generator Heat Input Function of Part Load Ratio Curve Name"] = value

    @property
    def pump_electric_input_function_of_part_load_ratio_curve_name(self):
        """Get pump_electric_input_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `pump_electric_input_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Pump Electric Input Function of Part Load Ratio Curve Name"]

    @pump_electric_input_function_of_part_load_ratio_curve_name.setter
    def pump_electric_input_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Pump Electric Input Function of Part Load Ratio Curve Name`
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Pump Electric Input Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `pump_electric_input_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pump_electric_input_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `pump_electric_input_function_of_part_load_ratio_curve_name`')
        self._data["Pump Electric Input Function of Part Load Ratio Curve Name"] = value

    @property
    def generator_inlet_node_name(self):
        """Get generator_inlet_node_name

        Returns:
            str: the value of `generator_inlet_node_name` or None if not set
        """
        return self._data["Generator Inlet Node Name"]

    @generator_inlet_node_name.setter
    def generator_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Generator Inlet Node Name`
        Enter the generator inlet node name which connects this chiller to a
        steam or hot water plant, otherwise leave this field blank.
        Generator nodes are used to model heat input to the chiller.

        Args:
            value (str): value for IDD Field `Generator Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_inlet_node_name`')
        self._data["Generator Inlet Node Name"] = value

    @property
    def generator_outlet_node_name(self):
        """Get generator_outlet_node_name

        Returns:
            str: the value of `generator_outlet_node_name` or None if not set
        """
        return self._data["Generator Outlet Node Name"]

    @generator_outlet_node_name.setter
    def generator_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Generator Outlet Node Name`
        Enter the generator outlet node name which connects this chiller to a
        steam or hot water plant, otherwise leave this field blank.
        Generator nodes are used to model heat input to the chiller.

        Args:
            value (str): value for IDD Field `Generator Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_outlet_node_name`')
        self._data["Generator Outlet Node Name"] = value

    @property
    def capacity_correction_function_of_condenser_temperature_curve_name(self):
        """Get capacity_correction_function_of_condenser_temperature_curve_name

        Returns:
            str: the value of `capacity_correction_function_of_condenser_temperature_curve_name` or None if not set
        """
        return self._data["Capacity Correction Function of Condenser Temperature Curve Name"]

    @capacity_correction_function_of_condenser_temperature_curve_name.setter
    def capacity_correction_function_of_condenser_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Capacity Correction Function of Condenser Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized capacity to changes in condenser temperature.

        Args:
            value (str): value for IDD Field `Capacity Correction Function of Condenser Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `capacity_correction_function_of_condenser_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_function_of_condenser_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `capacity_correction_function_of_condenser_temperature_curve_name`')
        self._data["Capacity Correction Function of Condenser Temperature Curve Name"] = value

    @property
    def capacity_correction_function_of_chilled_water_temperature_curve_name(self):
        """Get capacity_correction_function_of_chilled_water_temperature_curve_name

        Returns:
            str: the value of `capacity_correction_function_of_chilled_water_temperature_curve_name` or None if not set
        """
        return self._data["Capacity Correction Function of Chilled Water Temperature Curve Name"]

    @capacity_correction_function_of_chilled_water_temperature_curve_name.setter
    def capacity_correction_function_of_chilled_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Capacity Correction Function of Chilled Water Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized capacity to changes in leaving chilled water temperature.

        Args:
            value (str): value for IDD Field `Capacity Correction Function of Chilled Water Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `capacity_correction_function_of_chilled_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_function_of_chilled_water_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `capacity_correction_function_of_chilled_water_temperature_curve_name`')
        self._data["Capacity Correction Function of Chilled Water Temperature Curve Name"] = value

    @property
    def capacity_correction_function_of_generator_temperature_curve_name(self):
        """Get capacity_correction_function_of_generator_temperature_curve_name

        Returns:
            str: the value of `capacity_correction_function_of_generator_temperature_curve_name` or None if not set
        """
        return self._data["Capacity Correction Function of Generator Temperature Curve Name"]

    @capacity_correction_function_of_generator_temperature_curve_name.setter
    def capacity_correction_function_of_generator_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Capacity Correction Function of Generator Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Used when generator fluid type is hot water
        Curve which shows the change in normailized capacity to changes in generator temperature.

        Args:
            value (str): value for IDD Field `Capacity Correction Function of Generator Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `capacity_correction_function_of_generator_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_correction_function_of_generator_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `capacity_correction_function_of_generator_temperature_curve_name`')
        self._data["Capacity Correction Function of Generator Temperature Curve Name"] = value

    @property
    def generator_heat_input_correction_function_of_condenser_temperature_curve_name(self):
        """Get generator_heat_input_correction_function_of_condenser_temperature_curve_name

        Returns:
            str: the value of `generator_heat_input_correction_function_of_condenser_temperature_curve_name` or None if not set
        """
        return self._data["Generator Heat Input Correction Function of Condenser Temperature Curve Name"]

    @generator_heat_input_correction_function_of_condenser_temperature_curve_name.setter
    def generator_heat_input_correction_function_of_condenser_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Generator Heat Input Correction Function of Condenser Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized heat input to changes in condenser temperature.

        Args:
            value (str): value for IDD Field `Generator Heat Input Correction Function of Condenser Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_heat_input_correction_function_of_condenser_temperature_curve_name`')
        self._data["Generator Heat Input Correction Function of Condenser Temperature Curve Name"] = value

    @property
    def generator_heat_input_correction_function_of_chilled_water_temperature_curve_name(self):
        """Get generator_heat_input_correction_function_of_chilled_water_temperature_curve_name

        Returns:
            str: the value of `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name` or None if not set
        """
        return self._data["Generator Heat Input Correction Function of Chilled Water Temperature Curve Name"]

    @generator_heat_input_correction_function_of_chilled_water_temperature_curve_name.setter
    def generator_heat_input_correction_function_of_chilled_water_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Generator Heat Input Correction Function of Chilled Water Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Curve which shows the change in normailized heat input to changes in leaving chilled water temperature.

        Args:
            value (str): value for IDD Field `Generator Heat Input Correction Function of Chilled Water Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_heat_input_correction_function_of_chilled_water_temperature_curve_name`')
        self._data["Generator Heat Input Correction Function of Chilled Water Temperature Curve Name"] = value

    @property
    def generator_heat_source_type(self):
        """Get generator_heat_source_type

        Returns:
            str: the value of `generator_heat_source_type` or None if not set
        """
        return self._data["Generator Heat Source Type"]

    @generator_heat_source_type.setter
    def generator_heat_source_type(self, value="Steam"):
        """  Corresponds to IDD Field `Generator Heat Source Type`
        The Generator side of the chiller can be connected to a hot water or steam plant where the
        generator inlet and outlet nodes are connected to a plant loop. If the generator is not
        connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be
        specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.

        Args:
            value (str): value for IDD Field `Generator Heat Source Type`
                Accepted values are:
                      - HotWater
                      - Steam
                Default value: Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_heat_source_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_source_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_heat_source_type`')
            vals = {}
            vals["hotwater"] = "HotWater"
            vals["steam"] = "Steam"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_heat_source_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_heat_source_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator Heat Source Type"] = value

    @property
    def design_generator_fluid_flow_rate(self):
        """Get design_generator_fluid_flow_rate

        Returns:
            float: the value of `design_generator_fluid_flow_rate` or None if not set
        """
        return self._data["Design Generator Fluid Flow Rate"]

    @design_generator_fluid_flow_rate.setter
    def design_generator_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Generator Fluid Flow Rate`
        For variable flow this is the max flow and for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Generator Fluid Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Generator Fluid Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_generator_fluid_flow_rate`'.format(value))
                    self._data["Design Generator Fluid Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_generator_fluid_flow_rate`'.format(value))
        self._data["Design Generator Fluid Flow Rate"] = value

    @property
    def temperature_lower_limit_generator_inlet(self):
        """Get temperature_lower_limit_generator_inlet

        Returns:
            float: the value of `temperature_lower_limit_generator_inlet` or None if not set
        """
        return self._data["Temperature Lower Limit Generator Inlet"]

    @temperature_lower_limit_generator_inlet.setter
    def temperature_lower_limit_generator_inlet(self, value=0.0):
        """  Corresponds to IDD Field `Temperature Lower Limit Generator Inlet`
        Provides warnings when entering generator temperature is below minimum.
        Capacity is not adjusted when entering generator temperature is below minimum.

        Args:
            value (float): value for IDD Field `Temperature Lower Limit Generator Inlet`
                Units: C
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `temperature_lower_limit_generator_inlet`'.format(value))
        self._data["Temperature Lower Limit Generator Inlet"] = value

    @property
    def degree_of_subcooling_in_steam_generator(self):
        """Get degree_of_subcooling_in_steam_generator

        Returns:
            float: the value of `degree_of_subcooling_in_steam_generator` or None if not set
        """
        return self._data["Degree of Subcooling in Steam Generator"]

    @degree_of_subcooling_in_steam_generator.setter
    def degree_of_subcooling_in_steam_generator(self, value=1.0):
        """  Corresponds to IDD Field `Degree of Subcooling in Steam Generator`
        This field is not used when the generator inlet/outlet nodes are not specified or
        the generator is connected to a hot water loop.

        Args:
            value (float): value for IDD Field `Degree of Subcooling in Steam Generator`
                Units: C
                Default value: 1.0
                value >= 0.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `degree_of_subcooling_in_steam_generator`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `degree_of_subcooling_in_steam_generator`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `degree_of_subcooling_in_steam_generator`')
        self._data["Degree of Subcooling in Steam Generator"] = value

    @property
    def degree_of_subcooling_in_steam_condensate_loop(self):
        """Get degree_of_subcooling_in_steam_condensate_loop

        Returns:
            float: the value of `degree_of_subcooling_in_steam_condensate_loop` or None if not set
        """
        return self._data["Degree of Subcooling in Steam Condensate Loop"]

    @degree_of_subcooling_in_steam_condensate_loop.setter
    def degree_of_subcooling_in_steam_condensate_loop(self, value=0.0):
        """  Corresponds to IDD Field `Degree of Subcooling in Steam Condensate Loop`
        This field is not used when the generator inlet/outlet nodes are not specified or
        the generator is connected to a hot water loop.

        Args:
            value (float): value for IDD Field `Degree of Subcooling in Steam Condensate Loop`
                Units: C
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `degree_of_subcooling_in_steam_condensate_loop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `degree_of_subcooling_in_steam_condensate_loop`')
        self._data["Degree of Subcooling in Steam Condensate Loop"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerAbsorption(object):
    """ Corresponds to IDD object `Chiller:Absorption`
        This indirect absorption chiller model is the empirical model from the
        Building Loads and System Thermodynamics (BLAST) program.  Chiller
        performance curves are generated by fitting catalog data to third order
        polynomial equations.  Two sets of coefficients are required.
    """
    internal_name = "Chiller:Absorption"
    field_count = 27
    required_fields = ["Name", "Nominal Capacity", "Nominal Pumping Power", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Condenser Inlet Node Name", "Condenser Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:Absorption`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal Pumping Power"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve"] = None
        self._data["Coefficient 1 of the Pump Electric Use Part Load Ratio Curve"] = None
        self._data["Coefficient 2 of the Pump Electric Use Part Load Ratio Curve"] = None
        self._data["Coefficient 3 of the Pump Electric Use Part Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Generator Inlet Node Name"] = None
        self._data["Generator Outlet Node Name"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Generator Heat Source Type"] = None
        self._data["Design Generator Fluid Flow Rate"] = None
        self._data["Degree of Subcooling in Steam Generator"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_pumping_power = None
        else:
            self.nominal_pumping_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_the_pump_electric_use_part_load_ratio_curve = None
        else:
            self.coefficient_1_of_the_pump_electric_use_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_the_pump_electric_use_part_load_ratio_curve = None
        else:
            self.coefficient_2_of_the_pump_electric_use_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_the_pump_electric_use_part_load_ratio_curve = None
        else:
            self.coefficient_3_of_the_pump_electric_use_part_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_inlet_node_name = None
        else:
            self.generator_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_outlet_node_name = None
        else:
            self.generator_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.generator_heat_source_type = None
        else:
            self.generator_heat_source_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_generator_fluid_flow_rate = None
        else:
            self.design_generator_fluid_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.degree_of_subcooling_in_steam_generator = None
        else:
            self.degree_of_subcooling_in_steam_generator = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_pumping_power(self):
        """Get nominal_pumping_power

        Returns:
            float: the value of `nominal_pumping_power` or None if not set
        """
        return self._data["Nominal Pumping Power"]

    @nominal_pumping_power.setter
    def nominal_pumping_power(self, value=None):
        """  Corresponds to IDD Field `Nominal Pumping Power`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Pumping Power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Pumping Power"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_pumping_power`'.format(value))
                    self._data["Nominal Pumping Power"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_pumping_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_pumping_power`')
        self._data["Nominal Pumping Power"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Inlet Temperature`

        Args:
            value (float): value for IDD Field `Design Condenser Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_condenser_inlet_temperature`'.format(value))
        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`
        The steam use coefficients below specify the
        steam use as a fraction of chiller operating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_condenser_water_flow_rate`')
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve(self):
        """Get coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve"]

    @coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve.setter
    def coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_the_hot_water_or_steam_use_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 1 of the Hot Water or Steam Use Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve(self):
        """Get coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve"]

    @coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve.setter
    def coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_the_hot_water_or_steam_use_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 2 of the Hot Water or Steam Use Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve(self):
        """Get coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve"]

    @coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve.setter
    def coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_the_hot_water_or_steam_use_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 3 of the Hot Water or Steam Use Part Load Ratio Curve"] = value

    @property
    def coefficient_1_of_the_pump_electric_use_part_load_ratio_curve(self):
        """Get coefficient_1_of_the_pump_electric_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_the_pump_electric_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of the Pump Electric Use Part Load Ratio Curve"]

    @coefficient_1_of_the_pump_electric_use_part_load_ratio_curve.setter
    def coefficient_1_of_the_pump_electric_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of the Pump Electric Use Part Load Ratio Curve`
        The pump electric use coefficients specify the
        pumping power as a Fraction of Nominal pumping power

        Args:
            value (float): value for IDD Field `Coefficient 1 of the Pump Electric Use Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_the_pump_electric_use_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 1 of the Pump Electric Use Part Load Ratio Curve"] = value

    @property
    def coefficient_2_of_the_pump_electric_use_part_load_ratio_curve(self):
        """Get coefficient_2_of_the_pump_electric_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_the_pump_electric_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of the Pump Electric Use Part Load Ratio Curve"]

    @coefficient_2_of_the_pump_electric_use_part_load_ratio_curve.setter
    def coefficient_2_of_the_pump_electric_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of the Pump Electric Use Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of the Pump Electric Use Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_the_pump_electric_use_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 2 of the Pump Electric Use Part Load Ratio Curve"] = value

    @property
    def coefficient_3_of_the_pump_electric_use_part_load_ratio_curve(self):
        """Get coefficient_3_of_the_pump_electric_use_part_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_the_pump_electric_use_part_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of the Pump Electric Use Part Load Ratio Curve"]

    @coefficient_3_of_the_pump_electric_use_part_load_ratio_curve.setter
    def coefficient_3_of_the_pump_electric_use_part_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of the Pump Electric Use Part Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of the Pump Electric Use Part Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_the_pump_electric_use_part_load_ratio_curve`'.format(value))
        self._data["Coefficient 3 of the Pump Electric Use Part Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Temperature Lower Limit`

        Args:
            value (float): value for IDD Field `Chilled Water Outlet Temperature Lower Limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def generator_inlet_node_name(self):
        """Get generator_inlet_node_name

        Returns:
            str: the value of `generator_inlet_node_name` or None if not set
        """
        return self._data["Generator Inlet Node Name"]

    @generator_inlet_node_name.setter
    def generator_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Generator Inlet Node Name`

        Args:
            value (str): value for IDD Field `Generator Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_inlet_node_name`')
        self._data["Generator Inlet Node Name"] = value

    @property
    def generator_outlet_node_name(self):
        """Get generator_outlet_node_name

        Returns:
            str: the value of `generator_outlet_node_name` or None if not set
        """
        return self._data["Generator Outlet Node Name"]

    @generator_outlet_node_name.setter
    def generator_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Generator Outlet Node Name`

        Args:
            value (str): value for IDD Field `Generator Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_outlet_node_name`')
        self._data["Generator Outlet Node Name"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def generator_heat_source_type(self):
        """Get generator_heat_source_type

        Returns:
            str: the value of `generator_heat_source_type` or None if not set
        """
        return self._data["Generator Heat Source Type"]

    @generator_heat_source_type.setter
    def generator_heat_source_type(self, value="Steam"):
        """  Corresponds to IDD Field `Generator Heat Source Type`
        The Generator side of the chiller can be connected to a hot water or steam plant where the
        generator inlet and outlet nodes are connected to a plant loop. If the generator is not
        connected to a plant loop, and the generator inlet/outlet nodes are not used, this field should be
        specified as steam or left blank. When a plant is not used, the model assumes steam as the heat source.

        Args:
            value (str): value for IDD Field `Generator Heat Source Type`
                Accepted values are:
                      - Steam
                      - HotWater
                Default value: Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `generator_heat_source_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `generator_heat_source_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `generator_heat_source_type`')
            vals = {}
            vals["steam"] = "Steam"
            vals["hotwater"] = "HotWater"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `generator_heat_source_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `generator_heat_source_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Generator Heat Source Type"] = value

    @property
    def design_generator_fluid_flow_rate(self):
        """Get design_generator_fluid_flow_rate

        Returns:
            float: the value of `design_generator_fluid_flow_rate` or None if not set
        """
        return self._data["Design Generator Fluid Flow Rate"]

    @design_generator_fluid_flow_rate.setter
    def design_generator_fluid_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Generator Fluid Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Generator Fluid Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Generator Fluid Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_generator_fluid_flow_rate`'.format(value))
                    self._data["Design Generator Fluid Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_generator_fluid_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_generator_fluid_flow_rate`')
        self._data["Design Generator Fluid Flow Rate"] = value

    @property
    def degree_of_subcooling_in_steam_generator(self):
        """Get degree_of_subcooling_in_steam_generator

        Returns:
            float: the value of `degree_of_subcooling_in_steam_generator` or None if not set
        """
        return self._data["Degree of Subcooling in Steam Generator"]

    @degree_of_subcooling_in_steam_generator.setter
    def degree_of_subcooling_in_steam_generator(self, value=1.0):
        """  Corresponds to IDD Field `Degree of Subcooling in Steam Generator`
        This field is not used when the generator inlet/outlet nodes are not specified or
        the generator is connected to a hot water loop.

        Args:
            value (float): value for IDD Field `Degree of Subcooling in Steam Generator`
                Units: C
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `degree_of_subcooling_in_steam_generator`'.format(value))
        self._data["Degree of Subcooling in Steam Generator"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerConstantCop(object):
    """ Corresponds to IDD object `Chiller:ConstantCOP`
        This constant COP chiller model provides a means of quickly specifying a
        Chiller where performance data is not available.
    """
    internal_name = "Chiller:ConstantCOP"
    field_count = 15
    required_fields = ["Name", "Nominal Capacity", "Nominal COP", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:ConstantCOP`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `Nominal COP`

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')
        self._data["Nominal COP"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the maximum flow and for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`
        This field is not used for Condenser Type = AirCooled or EvaporativelyCooled

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_water_flow_rate`')
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerEngineDriven(object):
    """ Corresponds to IDD object `Chiller:EngineDriven`
        This chiller model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Chiller performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Chiller:EngineDriven"
    field_count = 46
    required_fields = ["Name", "Condenser Type", "Nominal Capacity", "Nominal COP", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Temperature Rise Coefficient", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:EngineDriven`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Condenser Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Temperature Rise Coefficient"] = None
        self._data["Design Chilled Water Outlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Coefficient 1 of Capacity Ratio Curve"] = None
        self._data["Coefficient 2 of Capacity Ratio Curve"] = None
        self._data["Coefficient 3 of Capacity Ratio Curve"] = None
        self._data["Coefficient 1 of Power Ratio Curve"] = None
        self._data["Coefficient 2 of Power Ratio Curve"] = None
        self._data["Coefficient 3 of Power Ratio Curve"] = None
        self._data["Coefficient 1 of Full Load Ratio Curve"] = None
        self._data["Coefficient 2 of Full Load Ratio Curve"] = None
        self._data["Coefficient 3 of Full Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Fuel Use Curve Name"] = None
        self._data["Jacket Heat Recovery Curve Name"] = None
        self._data["Lube Heat Recovery Curve Name"] = None
        self._data["Total Exhaust Energy Curve Name"] = None
        self._data["Exhaust Temperature Curve Name"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Minimum Exhaust Temperature"] = None
        self._data["Fuel Type"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_rise_coefficient = None
        else:
            self.temperature_rise_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_outlet_temperature = None
        else:
            self.design_chilled_water_outlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_capacity_ratio_curve = None
        else:
            self.coefficient_1_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_capacity_ratio_curve = None
        else:
            self.coefficient_2_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_capacity_ratio_curve = None
        else:
            self.coefficient_3_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_power_ratio_curve = None
        else:
            self.coefficient_1_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_power_ratio_curve = None
        else:
            self.coefficient_2_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_power_ratio_curve = None
        else:
            self.coefficient_3_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_full_load_ratio_curve = None
        else:
            self.coefficient_1_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_full_load_ratio_curve = None
        else:
            self.coefficient_2_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_full_load_ratio_curve = None
        else:
            self.coefficient_3_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_use_curve_name = None
        else:
            self.fuel_use_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.jacket_heat_recovery_curve_name = None
        else:
            self.jacket_heat_recovery_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.lube_heat_recovery_curve_name = None
        else:
            self.lube_heat_recovery_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_exhaust_energy_curve_name = None
        else:
            self.total_exhaust_energy_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_temperature_curve_name = None
        else:
            self.exhaust_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_minimum_exhaust_temperature = None
        else:
            self.design_minimum_exhaust_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node = None
        else:
            self.maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `Nominal COP`
        Nominal Refrigeration Cycle COP

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')
        self._data["Nominal COP"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Inlet Temperature`

        Args:
            value (float): value for IDD Field `Design Condenser Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_condenser_inlet_temperature`'.format(value))
        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def temperature_rise_coefficient(self):
        """Get temperature_rise_coefficient

        Returns:
            float: the value of `temperature_rise_coefficient` or None if not set
        """
        return self._data["Temperature Rise Coefficient"]

    @temperature_rise_coefficient.setter
    def temperature_rise_coefficient(self, value=None):
        """  Corresponds to IDD Field `Temperature Rise Coefficient`

        Args:
            value (float): value for IDD Field `Temperature Rise Coefficient`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `temperature_rise_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_rise_coefficient`')
        self._data["Temperature Rise Coefficient"] = value

    @property
    def design_chilled_water_outlet_temperature(self):
        """Get design_chilled_water_outlet_temperature

        Returns:
            float: the value of `design_chilled_water_outlet_temperature` or None if not set
        """
        return self._data["Design Chilled Water Outlet Temperature"]

    @design_chilled_water_outlet_temperature.setter
    def design_chilled_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Outlet Temperature`

        Args:
            value (float): value for IDD Field `Design Chilled Water Outlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_chilled_water_outlet_temperature`'.format(value))
        self._data["Design Chilled Water Outlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the maximum flow and for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`
        This field is not used for Condenser Type = AirCooled or EvaporativelyCooled

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_water_flow_rate`')
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def coefficient_1_of_capacity_ratio_curve(self):
        """Get coefficient_1_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Capacity Ratio Curve"]

    @coefficient_1_of_capacity_ratio_curve.setter
    def coefficient_1_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Capacity Ratio Curve"] = value

    @property
    def coefficient_2_of_capacity_ratio_curve(self):
        """Get coefficient_2_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Capacity Ratio Curve"]

    @coefficient_2_of_capacity_ratio_curve.setter
    def coefficient_2_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Capacity Ratio Curve"] = value

    @property
    def coefficient_3_of_capacity_ratio_curve(self):
        """Get coefficient_3_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Capacity Ratio Curve"]

    @coefficient_3_of_capacity_ratio_curve.setter
    def coefficient_3_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Capacity Ratio Curve"] = value

    @property
    def coefficient_1_of_power_ratio_curve(self):
        """Get coefficient_1_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Power Ratio Curve"]

    @coefficient_1_of_power_ratio_curve.setter
    def coefficient_1_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Power Ratio Curve"] = value

    @property
    def coefficient_2_of_power_ratio_curve(self):
        """Get coefficient_2_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Power Ratio Curve"]

    @coefficient_2_of_power_ratio_curve.setter
    def coefficient_2_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Power Ratio Curve"] = value

    @property
    def coefficient_3_of_power_ratio_curve(self):
        """Get coefficient_3_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Power Ratio Curve"]

    @coefficient_3_of_power_ratio_curve.setter
    def coefficient_3_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Power Ratio Curve"] = value

    @property
    def coefficient_1_of_full_load_ratio_curve(self):
        """Get coefficient_1_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Full Load Ratio Curve"]

    @coefficient_1_of_full_load_ratio_curve.setter
    def coefficient_1_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Full Load Ratio Curve"] = value

    @property
    def coefficient_2_of_full_load_ratio_curve(self):
        """Get coefficient_2_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Full Load Ratio Curve"]

    @coefficient_2_of_full_load_ratio_curve.setter
    def coefficient_2_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Full Load Ratio Curve"] = value

    @property
    def coefficient_3_of_full_load_ratio_curve(self):
        """Get coefficient_3_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Full Load Ratio Curve"]

    @coefficient_3_of_full_load_ratio_curve.setter
    def coefficient_3_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Full Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Temperature Lower Limit`
        Special EngineDriven Chiller Parameters Below

        Args:
            value (float): value for IDD Field `Chilled Water Outlet Temperature Lower Limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def fuel_use_curve_name(self):
        """Get fuel_use_curve_name

        Returns:
            str: the value of `fuel_use_curve_name` or None if not set
        """
        return self._data["Fuel Use Curve Name"]

    @fuel_use_curve_name.setter
    def fuel_use_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Use Curve Name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `Fuel Use Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_use_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_use_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_use_curve_name`')
        self._data["Fuel Use Curve Name"] = value

    @property
    def jacket_heat_recovery_curve_name(self):
        """Get jacket_heat_recovery_curve_name

        Returns:
            str: the value of `jacket_heat_recovery_curve_name` or None if not set
        """
        return self._data["Jacket Heat Recovery Curve Name"]

    @jacket_heat_recovery_curve_name.setter
    def jacket_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `Jacket Heat Recovery Curve Name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `Jacket Heat Recovery Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `jacket_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `jacket_heat_recovery_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `jacket_heat_recovery_curve_name`')
        self._data["Jacket Heat Recovery Curve Name"] = value

    @property
    def lube_heat_recovery_curve_name(self):
        """Get lube_heat_recovery_curve_name

        Returns:
            str: the value of `lube_heat_recovery_curve_name` or None if not set
        """
        return self._data["Lube Heat Recovery Curve Name"]

    @lube_heat_recovery_curve_name.setter
    def lube_heat_recovery_curve_name(self, value=None):
        """  Corresponds to IDD Field `Lube Heat Recovery Curve Name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `Lube Heat Recovery Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `lube_heat_recovery_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `lube_heat_recovery_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `lube_heat_recovery_curve_name`')
        self._data["Lube Heat Recovery Curve Name"] = value

    @property
    def total_exhaust_energy_curve_name(self):
        """Get total_exhaust_energy_curve_name

        Returns:
            str: the value of `total_exhaust_energy_curve_name` or None if not set
        """
        return self._data["Total Exhaust Energy Curve Name"]

    @total_exhaust_energy_curve_name.setter
    def total_exhaust_energy_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Exhaust Energy Curve Name`
        Curve is a function of Part Load Ratio (PLR)
        Table:OneIndependentVariable object can also be used
        curve = a + b*PLR + c*PLR**2
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `Total Exhaust Energy Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `total_exhaust_energy_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_exhaust_energy_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_exhaust_energy_curve_name`')
        self._data["Total Exhaust Energy Curve Name"] = value

    @property
    def exhaust_temperature_curve_name(self):
        """Get exhaust_temperature_curve_name

        Returns:
            str: the value of `exhaust_temperature_curve_name` or None if not set
        """
        return self._data["Exhaust Temperature Curve Name"]

    @exhaust_temperature_curve_name.setter
    def exhaust_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Temperature Curve Name`
        Curve is a function of Part Load Ratio (PLR)
        curve = a + b*PLR + c*PLR**2
        Table:OneIndependentVariable object can also be used
        PLR = Ratio of evaporator heat transfer rate to nominal capacity

        Args:
            value (str): value for IDD Field `Exhaust Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_temperature_curve_name`')
        self._data["Exhaust Temperature Curve Name"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of U-Factor Times Area Curve`
        curve = C1 * (nominal capacity)**C2

        Args:
            value (float): value for IDD Field `Coefficient 1 of U-Factor Times Area Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of U-Factor Times Area Curve`
        curve = C1 * (nominal capacity)**C2
        typical value .9

        Args:
            value (float): value for IDD Field `Coefficient 2 of U-Factor Times Area Curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `Maximum Exhaust Flow per Unit of Power Output`

        Args:
            value (float): value for IDD Field `Maximum Exhaust Flow per Unit of Power Output`
                Units: (kg/s)/W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`')
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_minimum_exhaust_temperature(self):
        """Get design_minimum_exhaust_temperature

        Returns:
            float: the value of `design_minimum_exhaust_temperature` or None if not set
        """
        return self._data["Design Minimum Exhaust Temperature"]

    @design_minimum_exhaust_temperature.setter
    def design_minimum_exhaust_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Minimum Exhaust Temperature`

        Args:
            value (float): value for IDD Field `Design Minimum Exhaust Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_minimum_exhaust_temperature`'.format(value))
        self._data["Design Minimum Exhaust Temperature"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `Fuel Higher Heating Value`

        Args:
            value (float): value for IDD Field `Fuel Higher Heating Value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_higher_heating_value`'.format(value))
        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node(self):
        """Get maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node

        Returns:
            float: the value of `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node` or None if not set
        """
        return self._data["Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node"]

    @maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node.setter
    def maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node(self, value=60.0):
        """  Corresponds to IDD Field `Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node`

        Args:
            value (float): value for IDD Field `Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node`
                Units: C
                Default value: 60.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_temperature_for_heat_recovery_at_heat_recovery_outlet_node`')
        self._data["Maximum Temperature for Heat Recovery at Heat Recovery Outlet Node"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerCombustionTurbine(object):
    """ Corresponds to IDD object `Chiller:CombustionTurbine`
        This chiller model is the empirical model from the Building Loads
        and System Thermodynamics (BLAST) program.  Chiller performance
        curves are generated by fitting catalog data to third order
        polynomial equations.  Three sets of coefficients are required.
    """
    internal_name = "Chiller:CombustionTurbine"
    field_count = 60
    required_fields = ["Name", "Nominal Capacity", "Nominal COP", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Temperature Rise Coefficient", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Chiller:CombustionTurbine`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Condenser Type"] = None
        self._data["Nominal Capacity"] = None
        self._data["Nominal COP"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Condenser Inlet Temperature"] = None
        self._data["Temperature Rise Coefficient"] = None
        self._data["Design Chilled Water Outlet Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Coefficient 1 of Capacity Ratio Curve"] = None
        self._data["Coefficient 2 of Capacity Ratio Curve"] = None
        self._data["Coefficient 3 of Capacity Ratio Curve"] = None
        self._data["Coefficient 1 of Power Ratio Curve"] = None
        self._data["Coefficient 2 of Power Ratio Curve"] = None
        self._data["Coefficient 3 of Power Ratio Curve"] = None
        self._data["Coefficient 1 of Full Load Ratio Curve"] = None
        self._data["Coefficient 2 of Full Load Ratio Curve"] = None
        self._data["Coefficient 3 of Full Load Ratio Curve"] = None
        self._data["Chilled Water Outlet Temperature Lower Limit"] = None
        self._data["Coefficient 1 of Fuel Input Curve"] = None
        self._data["Coefficient 2 of Fuel Input Curve"] = None
        self._data["Coefficient 3 of Fuel Input Curve"] = None
        self._data["Coefficient 1 of Temperature Based Fuel Input Curve"] = None
        self._data["Coefficient 2 of Temperature Based Fuel Input Curve"] = None
        self._data["Coefficient 3 of Temperature Based Fuel Input Curve"] = None
        self._data["Coefficient 1 of Exhaust Flow Curve"] = None
        self._data["Coefficient 2 of Exhaust Flow Curve"] = None
        self._data["Coefficient 3 of Exhaust Flow Curve"] = None
        self._data["Coefficient 1 of Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 2 of Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 3 of Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve"] = None
        self._data["Coefficient 1 of Recovery Lube Heat Curve"] = None
        self._data["Coefficient 2 of Recovery Lube Heat Curve"] = None
        self._data["Coefficient 3 of Recovery Lube Heat Curve"] = None
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = None
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = None
        self._data["Gas Turbine Engine Capacity"] = None
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = None
        self._data["Design Steam Saturation Temperature"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Design Heat Recovery Water Flow Rate"] = None
        self._data["Heat Recovery Inlet Node Name"] = None
        self._data["Heat Recovery Outlet Node Name"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Fuel Type"] = None
        self._data["Heat Recovery Maximum Temperature"] = None
        self._data["Sizing Factor"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_inlet_temperature = None
        else:
            self.design_condenser_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_rise_coefficient = None
        else:
            self.temperature_rise_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_outlet_temperature = None
        else:
            self.design_chilled_water_outlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_capacity_ratio_curve = None
        else:
            self.coefficient_1_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_capacity_ratio_curve = None
        else:
            self.coefficient_2_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_capacity_ratio_curve = None
        else:
            self.coefficient_3_of_capacity_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_power_ratio_curve = None
        else:
            self.coefficient_1_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_power_ratio_curve = None
        else:
            self.coefficient_2_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_power_ratio_curve = None
        else:
            self.coefficient_3_of_power_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_full_load_ratio_curve = None
        else:
            self.coefficient_1_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_full_load_ratio_curve = None
        else:
            self.coefficient_2_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_full_load_ratio_curve = None
        else:
            self.coefficient_3_of_full_load_ratio_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_temperature_lower_limit = None
        else:
            self.chilled_water_outlet_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_fuel_input_curve = None
        else:
            self.coefficient_1_of_fuel_input_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_fuel_input_curve = None
        else:
            self.coefficient_2_of_fuel_input_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_fuel_input_curve = None
        else:
            self.coefficient_3_of_fuel_input_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_temperature_based_fuel_input_curve = None
        else:
            self.coefficient_1_of_temperature_based_fuel_input_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_temperature_based_fuel_input_curve = None
        else:
            self.coefficient_2_of_temperature_based_fuel_input_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_temperature_based_fuel_input_curve = None
        else:
            self.coefficient_3_of_temperature_based_fuel_input_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_exhaust_flow_curve = None
        else:
            self.coefficient_1_of_exhaust_flow_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_exhaust_flow_curve = None
        else:
            self.coefficient_2_of_exhaust_flow_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_exhaust_flow_curve = None
        else:
            self.coefficient_3_of_exhaust_flow_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_1_of_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_2_of_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_3_of_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_temperature_based_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_1_of_temperature_based_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_temperature_based_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_2_of_temperature_based_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_temperature_based_exhaust_gas_temperature_curve = None
        else:
            self.coefficient_3_of_temperature_based_exhaust_gas_temperature_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_recovery_lube_heat_curve = None
        else:
            self.coefficient_1_of_recovery_lube_heat_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_recovery_lube_heat_curve = None
        else:
            self.coefficient_2_of_recovery_lube_heat_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_3_of_recovery_lube_heat_curve = None
        else:
            self.coefficient_3_of_recovery_lube_heat_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_1_of_ufactor_times_area_curve = None
        else:
            self.coefficient_1_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coefficient_2_of_ufactor_times_area_curve = None
        else:
            self.coefficient_2_of_ufactor_times_area_curve = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gas_turbine_engine_capacity = None
        else:
            self.gas_turbine_engine_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_exhaust_flow_per_unit_of_power_output = None
        else:
            self.maximum_exhaust_flow_per_unit_of_power_output = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_steam_saturation_temperature = None
        else:
            self.design_steam_saturation_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_heat_recovery_water_flow_rate = None
        else:
            self.design_heat_recovery_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_inlet_node_name = None
        else:
            self.heat_recovery_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_outlet_node_name = None
        else:
            self.heat_recovery_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_recovery_maximum_temperature = None
        else:
            self.heat_recovery_maximum_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_capacity`'.format(value))
                    self._data["Nominal Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `Nominal COP`

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')
        self._data["Nominal COP"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_condenser_inlet_temperature(self):
        """Get design_condenser_inlet_temperature

        Returns:
            float: the value of `design_condenser_inlet_temperature` or None if not set
        """
        return self._data["Design Condenser Inlet Temperature"]

    @design_condenser_inlet_temperature.setter
    def design_condenser_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Inlet Temperature`

        Args:
            value (float): value for IDD Field `Design Condenser Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_condenser_inlet_temperature`'.format(value))
        self._data["Design Condenser Inlet Temperature"] = value

    @property
    def temperature_rise_coefficient(self):
        """Get temperature_rise_coefficient

        Returns:
            float: the value of `temperature_rise_coefficient` or None if not set
        """
        return self._data["Temperature Rise Coefficient"]

    @temperature_rise_coefficient.setter
    def temperature_rise_coefficient(self, value=None):
        """  Corresponds to IDD Field `Temperature Rise Coefficient`

        Args:
            value (float): value for IDD Field `Temperature Rise Coefficient`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `temperature_rise_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `temperature_rise_coefficient`')
        self._data["Temperature Rise Coefficient"] = value

    @property
    def design_chilled_water_outlet_temperature(self):
        """Get design_chilled_water_outlet_temperature

        Returns:
            float: the value of `design_chilled_water_outlet_temperature` or None if not set
        """
        return self._data["Design Chilled Water Outlet Temperature"]

    @design_chilled_water_outlet_temperature.setter
    def design_chilled_water_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Outlet Temperature`

        Args:
            value (float): value for IDD Field `Design Chilled Water Outlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_chilled_water_outlet_temperature`'.format(value))
        self._data["Design Chilled Water Outlet Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`
        This field is not used for Condenser Type = AirCooled or EvaporativelyCooled

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_condenser_water_flow_rate`')
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def coefficient_1_of_capacity_ratio_curve(self):
        """Get coefficient_1_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Capacity Ratio Curve"]

    @coefficient_1_of_capacity_ratio_curve.setter
    def coefficient_1_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Capacity Ratio Curve"] = value

    @property
    def coefficient_2_of_capacity_ratio_curve(self):
        """Get coefficient_2_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Capacity Ratio Curve"]

    @coefficient_2_of_capacity_ratio_curve.setter
    def coefficient_2_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Capacity Ratio Curve"] = value

    @property
    def coefficient_3_of_capacity_ratio_curve(self):
        """Get coefficient_3_of_capacity_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_capacity_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Capacity Ratio Curve"]

    @coefficient_3_of_capacity_ratio_curve.setter
    def coefficient_3_of_capacity_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Capacity Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Capacity Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_capacity_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Capacity Ratio Curve"] = value

    @property
    def coefficient_1_of_power_ratio_curve(self):
        """Get coefficient_1_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Power Ratio Curve"]

    @coefficient_1_of_power_ratio_curve.setter
    def coefficient_1_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Power Ratio Curve"] = value

    @property
    def coefficient_2_of_power_ratio_curve(self):
        """Get coefficient_2_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Power Ratio Curve"]

    @coefficient_2_of_power_ratio_curve.setter
    def coefficient_2_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Power Ratio Curve"] = value

    @property
    def coefficient_3_of_power_ratio_curve(self):
        """Get coefficient_3_of_power_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_power_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Power Ratio Curve"]

    @coefficient_3_of_power_ratio_curve.setter
    def coefficient_3_of_power_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Power Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Power Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_power_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Power Ratio Curve"] = value

    @property
    def coefficient_1_of_full_load_ratio_curve(self):
        """Get coefficient_1_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_1_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 1 of Full Load Ratio Curve"]

    @coefficient_1_of_full_load_ratio_curve.setter
    def coefficient_1_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 1 of Full Load Ratio Curve"] = value

    @property
    def coefficient_2_of_full_load_ratio_curve(self):
        """Get coefficient_2_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_2_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 2 of Full Load Ratio Curve"]

    @coefficient_2_of_full_load_ratio_curve.setter
    def coefficient_2_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 2 of Full Load Ratio Curve"] = value

    @property
    def coefficient_3_of_full_load_ratio_curve(self):
        """Get coefficient_3_of_full_load_ratio_curve

        Returns:
            float: the value of `coefficient_3_of_full_load_ratio_curve` or None if not set
        """
        return self._data["Coefficient 3 of Full Load Ratio Curve"]

    @coefficient_3_of_full_load_ratio_curve.setter
    def coefficient_3_of_full_load_ratio_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Full Load Ratio Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Full Load Ratio Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_full_load_ratio_curve`'.format(value))
        self._data["Coefficient 3 of Full Load Ratio Curve"] = value

    @property
    def chilled_water_outlet_temperature_lower_limit(self):
        """Get chilled_water_outlet_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_outlet_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Outlet Temperature Lower Limit"]

    @chilled_water_outlet_temperature_lower_limit.setter
    def chilled_water_outlet_temperature_lower_limit(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Temperature Lower Limit`
        Special Gas Turbine Chiller Parameters Below

        Args:
            value (float): value for IDD Field `Chilled Water Outlet Temperature Lower Limit`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_outlet_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Outlet Temperature Lower Limit"] = value

    @property
    def coefficient_1_of_fuel_input_curve(self):
        """Get coefficient_1_of_fuel_input_curve

        Returns:
            float: the value of `coefficient_1_of_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 1 of Fuel Input Curve"]

    @coefficient_1_of_fuel_input_curve.setter
    def coefficient_1_of_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Fuel Input Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Fuel Input Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_fuel_input_curve`'.format(value))
        self._data["Coefficient 1 of Fuel Input Curve"] = value

    @property
    def coefficient_2_of_fuel_input_curve(self):
        """Get coefficient_2_of_fuel_input_curve

        Returns:
            float: the value of `coefficient_2_of_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 2 of Fuel Input Curve"]

    @coefficient_2_of_fuel_input_curve.setter
    def coefficient_2_of_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Fuel Input Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Fuel Input Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_fuel_input_curve`'.format(value))
        self._data["Coefficient 2 of Fuel Input Curve"] = value

    @property
    def coefficient_3_of_fuel_input_curve(self):
        """Get coefficient_3_of_fuel_input_curve

        Returns:
            float: the value of `coefficient_3_of_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 3 of Fuel Input Curve"]

    @coefficient_3_of_fuel_input_curve.setter
    def coefficient_3_of_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Fuel Input Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Fuel Input Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_fuel_input_curve`'.format(value))
        self._data["Coefficient 3 of Fuel Input Curve"] = value

    @property
    def coefficient_1_of_temperature_based_fuel_input_curve(self):
        """Get coefficient_1_of_temperature_based_fuel_input_curve

        Returns:
            float: the value of `coefficient_1_of_temperature_based_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 1 of Temperature Based Fuel Input Curve"]

    @coefficient_1_of_temperature_based_fuel_input_curve.setter
    def coefficient_1_of_temperature_based_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Temperature Based Fuel Input Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Temperature Based Fuel Input Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_temperature_based_fuel_input_curve`'.format(value))
        self._data["Coefficient 1 of Temperature Based Fuel Input Curve"] = value

    @property
    def coefficient_2_of_temperature_based_fuel_input_curve(self):
        """Get coefficient_2_of_temperature_based_fuel_input_curve

        Returns:
            float: the value of `coefficient_2_of_temperature_based_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 2 of Temperature Based Fuel Input Curve"]

    @coefficient_2_of_temperature_based_fuel_input_curve.setter
    def coefficient_2_of_temperature_based_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Temperature Based Fuel Input Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Temperature Based Fuel Input Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_temperature_based_fuel_input_curve`'.format(value))
        self._data["Coefficient 2 of Temperature Based Fuel Input Curve"] = value

    @property
    def coefficient_3_of_temperature_based_fuel_input_curve(self):
        """Get coefficient_3_of_temperature_based_fuel_input_curve

        Returns:
            float: the value of `coefficient_3_of_temperature_based_fuel_input_curve` or None if not set
        """
        return self._data["Coefficient 3 of Temperature Based Fuel Input Curve"]

    @coefficient_3_of_temperature_based_fuel_input_curve.setter
    def coefficient_3_of_temperature_based_fuel_input_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Temperature Based Fuel Input Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Temperature Based Fuel Input Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_temperature_based_fuel_input_curve`'.format(value))
        self._data["Coefficient 3 of Temperature Based Fuel Input Curve"] = value

    @property
    def coefficient_1_of_exhaust_flow_curve(self):
        """Get coefficient_1_of_exhaust_flow_curve

        Returns:
            float: the value of `coefficient_1_of_exhaust_flow_curve` or None if not set
        """
        return self._data["Coefficient 1 of Exhaust Flow Curve"]

    @coefficient_1_of_exhaust_flow_curve.setter
    def coefficient_1_of_exhaust_flow_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Exhaust Flow Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Exhaust Flow Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_exhaust_flow_curve`'.format(value))
        self._data["Coefficient 1 of Exhaust Flow Curve"] = value

    @property
    def coefficient_2_of_exhaust_flow_curve(self):
        """Get coefficient_2_of_exhaust_flow_curve

        Returns:
            float: the value of `coefficient_2_of_exhaust_flow_curve` or None if not set
        """
        return self._data["Coefficient 2 of Exhaust Flow Curve"]

    @coefficient_2_of_exhaust_flow_curve.setter
    def coefficient_2_of_exhaust_flow_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Exhaust Flow Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Exhaust Flow Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_exhaust_flow_curve`'.format(value))
        self._data["Coefficient 2 of Exhaust Flow Curve"] = value

    @property
    def coefficient_3_of_exhaust_flow_curve(self):
        """Get coefficient_3_of_exhaust_flow_curve

        Returns:
            float: the value of `coefficient_3_of_exhaust_flow_curve` or None if not set
        """
        return self._data["Coefficient 3 of Exhaust Flow Curve"]

    @coefficient_3_of_exhaust_flow_curve.setter
    def coefficient_3_of_exhaust_flow_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Exhaust Flow Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Exhaust Flow Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_exhaust_flow_curve`'.format(value))
        self._data["Coefficient 3 of Exhaust Flow Curve"] = value

    @property
    def coefficient_1_of_exhaust_gas_temperature_curve(self):
        """Get coefficient_1_of_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_1_of_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 1 of Exhaust Gas Temperature Curve"]

    @coefficient_1_of_exhaust_gas_temperature_curve.setter
    def coefficient_1_of_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Exhaust Gas Temperature Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Exhaust Gas Temperature Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_exhaust_gas_temperature_curve`'.format(value))
        self._data["Coefficient 1 of Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_2_of_exhaust_gas_temperature_curve(self):
        """Get coefficient_2_of_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_2_of_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 2 of Exhaust Gas Temperature Curve"]

    @coefficient_2_of_exhaust_gas_temperature_curve.setter
    def coefficient_2_of_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Exhaust Gas Temperature Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Exhaust Gas Temperature Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_exhaust_gas_temperature_curve`'.format(value))
        self._data["Coefficient 2 of Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_3_of_exhaust_gas_temperature_curve(self):
        """Get coefficient_3_of_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_3_of_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 3 of Exhaust Gas Temperature Curve"]

    @coefficient_3_of_exhaust_gas_temperature_curve.setter
    def coefficient_3_of_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Exhaust Gas Temperature Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Exhaust Gas Temperature Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_exhaust_gas_temperature_curve`'.format(value))
        self._data["Coefficient 3 of Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_1_of_temperature_based_exhaust_gas_temperature_curve(self):
        """Get coefficient_1_of_temperature_based_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_1_of_temperature_based_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve"]

    @coefficient_1_of_temperature_based_exhaust_gas_temperature_curve.setter
    def coefficient_1_of_temperature_based_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_temperature_based_exhaust_gas_temperature_curve`'.format(value))
        self._data["Coefficient 1 of Temperature Based Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_2_of_temperature_based_exhaust_gas_temperature_curve(self):
        """Get coefficient_2_of_temperature_based_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_2_of_temperature_based_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve"]

    @coefficient_2_of_temperature_based_exhaust_gas_temperature_curve.setter
    def coefficient_2_of_temperature_based_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_temperature_based_exhaust_gas_temperature_curve`'.format(value))
        self._data["Coefficient 2 of Temperature Based Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_3_of_temperature_based_exhaust_gas_temperature_curve(self):
        """Get coefficient_3_of_temperature_based_exhaust_gas_temperature_curve

        Returns:
            float: the value of `coefficient_3_of_temperature_based_exhaust_gas_temperature_curve` or None if not set
        """
        return self._data["Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve"]

    @coefficient_3_of_temperature_based_exhaust_gas_temperature_curve.setter
    def coefficient_3_of_temperature_based_exhaust_gas_temperature_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_temperature_based_exhaust_gas_temperature_curve`'.format(value))
        self._data["Coefficient 3 of Temperature Based Exhaust Gas Temperature Curve"] = value

    @property
    def coefficient_1_of_recovery_lube_heat_curve(self):
        """Get coefficient_1_of_recovery_lube_heat_curve

        Returns:
            float: the value of `coefficient_1_of_recovery_lube_heat_curve` or None if not set
        """
        return self._data["Coefficient 1 of Recovery Lube Heat Curve"]

    @coefficient_1_of_recovery_lube_heat_curve.setter
    def coefficient_1_of_recovery_lube_heat_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of Recovery Lube Heat Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of Recovery Lube Heat Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_recovery_lube_heat_curve`'.format(value))
        self._data["Coefficient 1 of Recovery Lube Heat Curve"] = value

    @property
    def coefficient_2_of_recovery_lube_heat_curve(self):
        """Get coefficient_2_of_recovery_lube_heat_curve

        Returns:
            float: the value of `coefficient_2_of_recovery_lube_heat_curve` or None if not set
        """
        return self._data["Coefficient 2 of Recovery Lube Heat Curve"]

    @coefficient_2_of_recovery_lube_heat_curve.setter
    def coefficient_2_of_recovery_lube_heat_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of Recovery Lube Heat Curve`

        Args:
            value (float): value for IDD Field `Coefficient 2 of Recovery Lube Heat Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_recovery_lube_heat_curve`'.format(value))
        self._data["Coefficient 2 of Recovery Lube Heat Curve"] = value

    @property
    def coefficient_3_of_recovery_lube_heat_curve(self):
        """Get coefficient_3_of_recovery_lube_heat_curve

        Returns:
            float: the value of `coefficient_3_of_recovery_lube_heat_curve` or None if not set
        """
        return self._data["Coefficient 3 of Recovery Lube Heat Curve"]

    @coefficient_3_of_recovery_lube_heat_curve.setter
    def coefficient_3_of_recovery_lube_heat_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 3 of Recovery Lube Heat Curve`

        Args:
            value (float): value for IDD Field `Coefficient 3 of Recovery Lube Heat Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_3_of_recovery_lube_heat_curve`'.format(value))
        self._data["Coefficient 3 of Recovery Lube Heat Curve"] = value

    @property
    def coefficient_1_of_ufactor_times_area_curve(self):
        """Get coefficient_1_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_1_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 1 of U-Factor Times Area Curve"]

    @coefficient_1_of_ufactor_times_area_curve.setter
    def coefficient_1_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 1 of U-Factor Times Area Curve`

        Args:
            value (float): value for IDD Field `Coefficient 1 of U-Factor Times Area Curve`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_1_of_ufactor_times_area_curve`'.format(value))
        self._data["Coefficient 1 of U-Factor Times Area Curve"] = value

    @property
    def coefficient_2_of_ufactor_times_area_curve(self):
        """Get coefficient_2_of_ufactor_times_area_curve

        Returns:
            float: the value of `coefficient_2_of_ufactor_times_area_curve` or None if not set
        """
        return self._data["Coefficient 2 of U-Factor Times Area Curve"]

    @coefficient_2_of_ufactor_times_area_curve.setter
    def coefficient_2_of_ufactor_times_area_curve(self, value=None):
        """  Corresponds to IDD Field `Coefficient 2 of U-Factor Times Area Curve`
        typical value .9

        Args:
            value (float): value for IDD Field `Coefficient 2 of U-Factor Times Area Curve`
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `coefficient_2_of_ufactor_times_area_curve`'.format(value))
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `coefficient_2_of_ufactor_times_area_curve`')
        self._data["Coefficient 2 of U-Factor Times Area Curve"] = value

    @property
    def gas_turbine_engine_capacity(self):
        """Get gas_turbine_engine_capacity

        Returns:
            float: the value of `gas_turbine_engine_capacity` or None if not set
        """
        return self._data["Gas Turbine Engine Capacity"]

    @gas_turbine_engine_capacity.setter
    def gas_turbine_engine_capacity(self, value=None):
        """  Corresponds to IDD Field `Gas Turbine Engine Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Gas Turbine Engine Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Gas Turbine Engine Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `gas_turbine_engine_capacity`'.format(value))
                    self._data["Gas Turbine Engine Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `gas_turbine_engine_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gas_turbine_engine_capacity`')
        self._data["Gas Turbine Engine Capacity"] = value

    @property
    def maximum_exhaust_flow_per_unit_of_power_output(self):
        """Get maximum_exhaust_flow_per_unit_of_power_output

        Returns:
            float: the value of `maximum_exhaust_flow_per_unit_of_power_output` or None if not set
        """
        return self._data["Maximum Exhaust Flow per Unit of Power Output"]

    @maximum_exhaust_flow_per_unit_of_power_output.setter
    def maximum_exhaust_flow_per_unit_of_power_output(self, value=None):
        """  Corresponds to IDD Field `Maximum Exhaust Flow per Unit of Power Output`

        Args:
            value (float): value for IDD Field `Maximum Exhaust Flow per Unit of Power Output`
                Units: (kg/s)/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_exhaust_flow_per_unit_of_power_output`'.format(value))
        self._data["Maximum Exhaust Flow per Unit of Power Output"] = value

    @property
    def design_steam_saturation_temperature(self):
        """Get design_steam_saturation_temperature

        Returns:
            float: the value of `design_steam_saturation_temperature` or None if not set
        """
        return self._data["Design Steam Saturation Temperature"]

    @design_steam_saturation_temperature.setter
    def design_steam_saturation_temperature(self, value=None):
        """  Corresponds to IDD Field `Design Steam Saturation Temperature`

        Args:
            value (float): value for IDD Field `Design Steam Saturation Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_steam_saturation_temperature`'.format(value))
        self._data["Design Steam Saturation Temperature"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=None):
        """  Corresponds to IDD Field `Fuel Higher Heating Value`

        Args:
            value (float): value for IDD Field `Fuel Higher Heating Value`
                Units: kJ/kg
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_higher_heating_value`'.format(value))
        self._data["Fuel Higher Heating Value"] = value

    @property
    def design_heat_recovery_water_flow_rate(self):
        """Get design_heat_recovery_water_flow_rate

        Returns:
            float: the value of `design_heat_recovery_water_flow_rate` or None if not set
        """
        return self._data["Design Heat Recovery Water Flow Rate"]

    @design_heat_recovery_water_flow_rate.setter
    def design_heat_recovery_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Heat Recovery Water Flow Rate`
        If non-zero, then the heat recovery inlet and outlet node names must be entered.

        Args:
            value (float): value for IDD Field `Design Heat Recovery Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_heat_recovery_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_heat_recovery_water_flow_rate`')
        self._data["Design Heat Recovery Water Flow Rate"] = value

    @property
    def heat_recovery_inlet_node_name(self):
        """Get heat_recovery_inlet_node_name

        Returns:
            str: the value of `heat_recovery_inlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Inlet Node Name"]

    @heat_recovery_inlet_node_name.setter
    def heat_recovery_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_inlet_node_name`')
        self._data["Heat Recovery Inlet Node Name"] = value

    @property
    def heat_recovery_outlet_node_name(self):
        """Get heat_recovery_outlet_node_name

        Returns:
            str: the value of `heat_recovery_outlet_node_name` or None if not set
        """
        return self._data["Heat Recovery Outlet Node Name"]

    @heat_recovery_outlet_node_name.setter
    def heat_recovery_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heat Recovery Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heat Recovery Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heat_recovery_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_recovery_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_recovery_outlet_node_name`')
        self._data["Heat Recovery Outlet Node Name"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value="NotModulated"):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        Select operating mode for fluid flow through the chiller. "NotModulated" is for
        either variable or constant pumping with flow controlled by the external plant system.
        "ConstantFlow" is for constant pumping with flow controlled by chiller to operate at
        full design flow rate.  "LeavingSetpointModulated" is for variable pumping with flow
        controlled by chiller to vary flow to target a leaving temperature setpoint.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                Accepted values are:
                      - ConstantFlow
                      - LeavingSetpointModulated
                      - NotModulated
                Default value: NotModulated
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["leavingsetpointmodulated"] = "LeavingSetpointModulated"
            vals["notmodulated"] = "NotModulated"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_flow_mode`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_flow_mode`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Flow Mode"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def heat_recovery_maximum_temperature(self):
        """Get heat_recovery_maximum_temperature

        Returns:
            float: the value of `heat_recovery_maximum_temperature` or None if not set
        """
        return self._data["Heat Recovery Maximum Temperature"]

    @heat_recovery_maximum_temperature.setter
    def heat_recovery_maximum_temperature(self, value=80.0):
        """  Corresponds to IDD Field `Heat Recovery Maximum Temperature`

        Args:
            value (float): value for IDD Field `Heat Recovery Maximum Temperature`
                Units: C
                Default value: 80.0
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heat_recovery_maximum_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_recovery_maximum_temperature`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `heat_recovery_maximum_temperature`')
        self._data["Heat Recovery Maximum Temperature"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, The heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the chiller is not operating.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerHeaterAbsorptionDirectFired(object):
    """ Corresponds to IDD object `ChillerHeater:Absorption:DirectFired`
        Direct fired gas absorption chiller-heater using performance curves similar to DOE-2
    """
    internal_name = "ChillerHeater:Absorption:DirectFired"
    field_count = 35
    required_fields = ["Name", "Nominal Cooling Capacity", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Condenser Inlet Node Name", "Condenser Outlet Node Name", "Hot Water Inlet Node Name", "Hot Water Outlet Node Name", "Design Condenser Water Flow Rate", "Fuel Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ChillerHeater:Absorption:DirectFired`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Cooling Capacity"] = None
        self._data["Heating to Cooling Capacity Ratio"] = None
        self._data["Fuel Input to Cooling Output Ratio"] = None
        self._data["Fuel Input to Heating Output Ratio"] = None
        self._data["Electric Input to Cooling Output Ratio"] = None
        self._data["Electric Input to Heating Output Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Hot Water Inlet Node Name"] = None
        self._data["Hot Water Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Entering Condenser Water Temperature"] = None
        self._data["Design Leaving Chilled Water Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Design Hot Water Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = None
        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = None
        self._data["Temperature Curve Input Variable"] = None
        self._data["Condenser Type"] = None
        self._data["Chilled Water Temperature Lower Limit"] = None
        self._data["Fuel Higher Heating Value"] = None
        self._data["Chiller Flow Mode"] = None
        self._data["Fuel Type"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cooling_capacity = None
        else:
            self.nominal_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_to_cooling_capacity_ratio = None
        else:
            self.heating_to_cooling_capacity_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio = None
        else:
            self.fuel_input_to_cooling_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_heating_output_ratio = None
        else:
            self.fuel_input_to_heating_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio = None
        else:
            self.electric_input_to_cooling_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_heating_output_ratio = None
        else:
            self.electric_input_to_heating_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_inlet_node_name = None
        else:
            self.hot_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_outlet_node_name = None
        else:
            self.hot_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_entering_condenser_water_temperature = None
        else:
            self.design_entering_condenser_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_leaving_chilled_water_temperature = None
        else:
            self.design_leaving_chilled_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_hot_water_flow_rate = None
        else:
            self.design_hot_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_cooling_capacity_curve_name = None
        else:
            self.heating_capacity_function_of_cooling_capacity_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = None
        else:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_curve_input_variable = None
        else:
            self.temperature_curve_input_variable = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_temperature_lower_limit = None
        else:
            self.chilled_water_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_higher_heating_value = None
        else:
            self.fuel_higher_heating_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_flow_mode = None
        else:
            self.chiller_flow_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def nominal_cooling_capacity(self):
        """Get nominal_cooling_capacity

        Returns:
            float: the value of `nominal_cooling_capacity` or None if not set
        """
        return self._data["Nominal Cooling Capacity"]

    @nominal_cooling_capacity.setter
    def nominal_cooling_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Nominal Cooling Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Cooling Capacity`
                Units: W
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Cooling Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_cooling_capacity`'.format(value))
                    self._data["Nominal Cooling Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_cooling_capacity`'.format(value))
        self._data["Nominal Cooling Capacity"] = value

    @property
    def heating_to_cooling_capacity_ratio(self):
        """Get heating_to_cooling_capacity_ratio

        Returns:
            float: the value of `heating_to_cooling_capacity_ratio` or None if not set
        """
        return self._data["Heating to Cooling Capacity Ratio"]

    @heating_to_cooling_capacity_ratio.setter
    def heating_to_cooling_capacity_ratio(self, value=0.8):
        """  Corresponds to IDD Field `Heating to Cooling Capacity Ratio`
        A positive fraction that represents the ratio of the
        heating capacity divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `Heating to Cooling Capacity Ratio`
                Default value: 0.8
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_to_cooling_capacity_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_to_cooling_capacity_ratio`')
        self._data["Heating to Cooling Capacity Ratio"] = value

    @property
    def fuel_input_to_cooling_output_ratio(self):
        """Get fuel_input_to_cooling_output_ratio

        Returns:
            float: the value of `fuel_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio"]

    @fuel_input_to_cooling_output_ratio.setter
    def fuel_input_to_cooling_output_ratio(self, value=0.97):
        """  Corresponds to IDD Field `Fuel Input to Cooling Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `Fuel Input to Cooling Output Ratio`
                Default value: 0.97
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_input_to_cooling_output_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fuel_input_to_cooling_output_ratio`')
        self._data["Fuel Input to Cooling Output Ratio"] = value

    @property
    def fuel_input_to_heating_output_ratio(self):
        """Get fuel_input_to_heating_output_ratio

        Returns:
            float: the value of `fuel_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Fuel Input to Heating Output Ratio"]

    @fuel_input_to_heating_output_ratio.setter
    def fuel_input_to_heating_output_ratio(self, value=1.25):
        """  Corresponds to IDD Field `Fuel Input to Heating Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the nominal heating capacity.

        Args:
            value (float): value for IDD Field `Fuel Input to Heating Output Ratio`
                Default value: 1.25
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fuel_input_to_heating_output_ratio`')
        self._data["Fuel Input to Heating Output Ratio"] = value

    @property
    def electric_input_to_cooling_output_ratio(self):
        """Get electric_input_to_cooling_output_ratio

        Returns:
            float: the value of `electric_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio"]

    @electric_input_to_cooling_output_ratio.setter
    def electric_input_to_cooling_output_ratio(self, value=0.01):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the cooling capacity at rated conditions.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `Electric Input to Cooling Output Ratio`
                Default value: 0.01
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `electric_input_to_cooling_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_cooling_output_ratio`')
        self._data["Electric Input to Cooling Output Ratio"] = value

    @property
    def electric_input_to_heating_output_ratio(self):
        """Get electric_input_to_heating_output_ratio

        Returns:
            float: the value of `electric_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Electric Input to Heating Output Ratio"]

    @electric_input_to_heating_output_ratio.setter
    def electric_input_to_heating_output_ratio(self, value=0.0):
        """  Corresponds to IDD Field `Electric Input to Heating Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the nominal heating capacity.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `Electric Input to Heating Output Ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `electric_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_heating_output_ratio`')
        self._data["Electric Input to Heating Output Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def hot_water_inlet_node_name(self):
        """Get hot_water_inlet_node_name

        Returns:
            str: the value of `hot_water_inlet_node_name` or None if not set
        """
        return self._data["Hot Water Inlet Node Name"]

    @hot_water_inlet_node_name.setter
    def hot_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_inlet_node_name`')
        self._data["Hot Water Inlet Node Name"] = value

    @property
    def hot_water_outlet_node_name(self):
        """Get hot_water_outlet_node_name

        Returns:
            str: the value of `hot_water_outlet_node_name` or None if not set
        """
        return self._data["Hot Water Outlet Node Name"]

    @hot_water_outlet_node_name.setter
    def hot_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_outlet_node_name`')
        self._data["Hot Water Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`
        The positive fraction that represents the minimum cooling output possible when
        operated continually at rated temperature conditions divided by the nominal
        cooling capacity at those same conditions.  If the load on the chiller is below
        this fraction the chiller will cycle.

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                Default value: 0.1
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`
        The positive fraction that represents the maximum cooling output possible at
        rated temperature conditions divided by the nominal cooling capacity at those
        same conditions.  If greater than 1.0, the chiller is typically thought of as
        capable of being overloaded.

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.0
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`
        The positive fraction that represents the optimal cooling output at rated
        temperature conditions divided by the nominal cooling capacity at those same
        conditions.  It represents the most desirable operating point for the chiller.

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_entering_condenser_water_temperature(self):
        """Get design_entering_condenser_water_temperature

        Returns:
            float: the value of `design_entering_condenser_water_temperature` or None if not set
        """
        return self._data["Design Entering Condenser Water Temperature"]

    @design_entering_condenser_water_temperature.setter
    def design_entering_condenser_water_temperature(self, value=29.0):
        """  Corresponds to IDD Field `Design Entering Condenser Water Temperature`
        The temperature of the water entering the condenser of the chiller when
        operating at design conditions.  This is usually based on the temperature
        delivered by the cooling tower in a water cooled application.

        Args:
            value (float): value for IDD Field `Design Entering Condenser Water Temperature`
                Units: C
                Default value: 29.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_entering_condenser_water_temperature`'.format(value))
        self._data["Design Entering Condenser Water Temperature"] = value

    @property
    def design_leaving_chilled_water_temperature(self):
        """Get design_leaving_chilled_water_temperature

        Returns:
            float: the value of `design_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Design Leaving Chilled Water Temperature"]

    @design_leaving_chilled_water_temperature.setter
    def design_leaving_chilled_water_temperature(self, value=7.0):
        """  Corresponds to IDD Field `Design Leaving Chilled Water Temperature`
        The temperature of the water leaving the evaporator of the chiller when
        operating at design conditions also called the chilled water supply temperature
        or leaving chilled water temperature.

        Args:
            value (float): value for IDD Field `Design Leaving Chilled Water Temperature`
                Units: C
                Default value: 7.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_leaving_chilled_water_temperature`'.format(value))
        self._data["Design Leaving Chilled Water Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value="autosize"):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value="autosize"):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`
        The water flow rate at design conditions through the condenser.
        This field is not used for Condenser Type = AirCooled

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def design_hot_water_flow_rate(self):
        """Get design_hot_water_flow_rate

        Returns:
            float: the value of `design_hot_water_flow_rate` or None if not set
        """
        return self._data["Design Hot Water Flow Rate"]

    @design_hot_water_flow_rate.setter
    def design_hot_water_flow_rate(self, value="autosize"):
        """  Corresponds to IDD Field `Design Hot Water Flow Rate`
        The water flow rate at design conditions through the heater side.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Hot Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Hot Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_hot_water_flow_rate`'.format(value))
                    self._data["Design Hot Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_hot_water_flow_rate`'.format(value))
        self._data["Design Hot Water Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Function of Temperature Curve Name`
        The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it
        varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Input to Cooling Output Ratio Function of Temperature Curve Name`
        The curve represents the fraction of the fuel input to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Fuel Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        The curve represents the fraction of the fuel input to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
        The curve represents the fraction of the electricity to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        The curve represents the fraction of the electricity to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def heating_capacity_function_of_cooling_capacity_curve_name(self):
        """Get heating_capacity_function_of_cooling_capacity_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_cooling_capacity_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Cooling Capacity Curve Name"]

    @heating_capacity_function_of_cooling_capacity_curve_name.setter
    def heating_capacity_function_of_cooling_capacity_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Cooling Capacity Curve Name`
        The curve represents how the heating capacity of the chiller varies with cooling
        capacity when the chiller is simultaeous heating and cooling.  The curve is normalized
        so an input of 1.0 represents the nominal cooling capacity and an output of 1.0
        represents the full heating capacity (see the Heating to cooling capacity ratio input)
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Cooling Capacity Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`')
        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = value

    @property
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self):
        """Get fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name

        Returns:
            str: the value of `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name` or None if not set
        """
        return self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"]

    @fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name.setter
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name`
        When the chiller is operating as only a heater, this curve is used to represent the
        fraction of fuel used as the heating load varies.  It is normalized so that a value
        of 1.0 is the full heating capacity.  The curve is usually linear or quadratic and
        will probably be similar to a boiler curve for most chillers.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`')
        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = value

    @property
    def temperature_curve_input_variable(self):
        """Get temperature_curve_input_variable

        Returns:
            str: the value of `temperature_curve_input_variable` or None if not set
        """
        return self._data["Temperature Curve Input Variable"]

    @temperature_curve_input_variable.setter
    def temperature_curve_input_variable(self, value="EnteringCondenser"):
        """  Corresponds to IDD Field `Temperature Curve Input Variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature.  Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).

        Args:
            value (str): value for IDD Field `Temperature Curve Input Variable`
                Accepted values are:
                      - LeavingCondenser
                      - EnteringCondenser
                Default value: EnteringCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_curve_input_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_curve_input_variable`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_curve_input_variable`')
            vals = {}
            vals["leavingcondenser"] = "LeavingCondenser"
            vals["enteringcondenser"] = "EnteringCondenser"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_curve_input_variable`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_curve_input_variable`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Curve Input Variable"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        The condenser can either be air cooled or connected to a cooling tower.

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def chilled_water_temperature_lower_limit(self):
        """Get chilled_water_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Temperature Lower Limit"]

    @chilled_water_temperature_lower_limit.setter
    def chilled_water_temperature_lower_limit(self, value=2.0):
        """  Corresponds to IDD Field `Chilled Water Temperature Lower Limit`
        The chilled water supply temperature below which the chiller
        will shut off.

        Args:
            value (float): value for IDD Field `Chilled Water Temperature Lower Limit`
                Units: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Temperature Lower Limit"] = value

    @property
    def fuel_higher_heating_value(self):
        """Get fuel_higher_heating_value

        Returns:
            float: the value of `fuel_higher_heating_value` or None if not set
        """
        return self._data["Fuel Higher Heating Value"]

    @fuel_higher_heating_value.setter
    def fuel_higher_heating_value(self, value=0.0):
        """  Corresponds to IDD Field `Fuel Higher Heating Value`
        Not currently used.

        Args:
            value (float): value for IDD Field `Fuel Higher Heating Value`
                Units: kJ/kg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `fuel_higher_heating_value`'.format(value))
        self._data["Fuel Higher Heating Value"] = value

    @property
    def chiller_flow_mode(self):
        """Get chiller_flow_mode

        Returns:
            str: the value of `chiller_flow_mode` or None if not set
        """
        return self._data["Chiller Flow Mode"]

    @chiller_flow_mode.setter
    def chiller_flow_mode(self, value=None):
        """  Corresponds to IDD Field `Chiller Flow Mode`
        This field is not really used and will be deleted from the object.
        The required information is gotten internally or
        not needed by the program.

        Args:
            value (str): value for IDD Field `Chiller Flow Mode`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_flow_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_flow_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_flow_mode`')
        self._data["Chiller Flow Mode"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `fuel_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerHeaterAbsorptionDoubleEffect(object):
    """ Corresponds to IDD object `ChillerHeater:Absorption:DoubleEffect`
        Exhaust fired absorption chiller-heater using performance curves similar to DOE-2
    """
    internal_name = "ChillerHeater:Absorption:DoubleEffect"
    field_count = 34
    required_fields = ["Name", "Nominal Cooling Capacity", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Condenser Inlet Node Name", "Condenser Outlet Node Name", "Hot Water Inlet Node Name", "Hot Water Outlet Node Name", "Design Condenser Water Flow Rate", "Exhaust Source Object Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ChillerHeater:Absorption:DoubleEffect`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Cooling Capacity"] = None
        self._data["Heating to Cooling Capacity Ratio"] = None
        self._data["Thermal Energy Input to Cooling Output Ratio"] = None
        self._data["Thermal Energy Input to Heating Output Ratio"] = None
        self._data["Electric Input to Cooling Output Ratio"] = None
        self._data["Electric Input to Heating Output Ratio"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Condenser Inlet Node Name"] = None
        self._data["Condenser Outlet Node Name"] = None
        self._data["Hot Water Inlet Node Name"] = None
        self._data["Hot Water Outlet Node Name"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Design Entering Condenser Water Temperature"] = None
        self._data["Design Leaving Chilled Water Temperature"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Design Hot Water Flow Rate"] = None
        self._data["Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = None
        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = None
        self._data["Temperature Curve Input Variable"] = None
        self._data["Condenser Type"] = None
        self._data["Chilled Water Temperature Lower Limit"] = None
        self._data["Exhaust Source Object Type"] = None
        self._data["Exhaust Source Object Name"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cooling_capacity = None
        else:
            self.nominal_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_to_cooling_capacity_ratio = None
        else:
            self.heating_to_cooling_capacity_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.thermal_energy_input_to_cooling_output_ratio = None
        else:
            self.thermal_energy_input_to_cooling_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.thermal_energy_input_to_heating_output_ratio = None
        else:
            self.thermal_energy_input_to_heating_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio = None
        else:
            self.electric_input_to_cooling_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_heating_output_ratio = None
        else:
            self.electric_input_to_heating_output_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_inlet_node_name = None
        else:
            self.condenser_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_outlet_node_name = None
        else:
            self.condenser_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_inlet_node_name = None
        else:
            self.hot_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_outlet_node_name = None
        else:
            self.hot_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_entering_condenser_water_temperature = None
        else:
            self.design_entering_condenser_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_leaving_chilled_water_temperature = None
        else:
            self.design_leaving_chilled_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_hot_water_flow_rate = None
        else:
            self.design_hot_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_cooling_capacity_curve_name = None
        else:
            self.heating_capacity_function_of_cooling_capacity_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = None
        else:
            self.fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_curve_input_variable = None
        else:
            self.temperature_curve_input_variable = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_temperature_lower_limit = None
        else:
            self.chilled_water_temperature_lower_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_source_object_type = None
        else:
            self.exhaust_source_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_source_object_name = None
        else:
            self.exhaust_source_object_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def nominal_cooling_capacity(self):
        """Get nominal_cooling_capacity

        Returns:
            float: the value of `nominal_cooling_capacity` or None if not set
        """
        return self._data["Nominal Cooling Capacity"]

    @nominal_cooling_capacity.setter
    def nominal_cooling_capacity(self, value="autosize"):
        """  Corresponds to IDD Field `Nominal Cooling Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Cooling Capacity`
                Units: W
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Nominal Cooling Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `nominal_cooling_capacity`'.format(value))
                    self._data["Nominal Cooling Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `nominal_cooling_capacity`'.format(value))
        self._data["Nominal Cooling Capacity"] = value

    @property
    def heating_to_cooling_capacity_ratio(self):
        """Get heating_to_cooling_capacity_ratio

        Returns:
            float: the value of `heating_to_cooling_capacity_ratio` or None if not set
        """
        return self._data["Heating to Cooling Capacity Ratio"]

    @heating_to_cooling_capacity_ratio.setter
    def heating_to_cooling_capacity_ratio(self, value=0.8):
        """  Corresponds to IDD Field `Heating to Cooling Capacity Ratio`
        A positive fraction that represents the ratio of the
        heating capacity divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `Heating to Cooling Capacity Ratio`
                Default value: 0.8
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_to_cooling_capacity_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heating_to_cooling_capacity_ratio`')
        self._data["Heating to Cooling Capacity Ratio"] = value

    @property
    def thermal_energy_input_to_cooling_output_ratio(self):
        """Get thermal_energy_input_to_cooling_output_ratio

        Returns:
            float: the value of `thermal_energy_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Thermal Energy Input to Cooling Output Ratio"]

    @thermal_energy_input_to_cooling_output_ratio.setter
    def thermal_energy_input_to_cooling_output_ratio(self, value=0.97):
        """  Corresponds to IDD Field `Thermal Energy Input to Cooling Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the cooling capacity at rated conditions.

        Args:
            value (float): value for IDD Field `Thermal Energy Input to Cooling Output Ratio`
                Default value: 0.97
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `thermal_energy_input_to_cooling_output_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `thermal_energy_input_to_cooling_output_ratio`')
        self._data["Thermal Energy Input to Cooling Output Ratio"] = value

    @property
    def thermal_energy_input_to_heating_output_ratio(self):
        """Get thermal_energy_input_to_heating_output_ratio

        Returns:
            float: the value of `thermal_energy_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Thermal Energy Input to Heating Output Ratio"]

    @thermal_energy_input_to_heating_output_ratio.setter
    def thermal_energy_input_to_heating_output_ratio(self, value=1.25):
        """  Corresponds to IDD Field `Thermal Energy Input to Heating Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous fuel used divided by the nominal heating capacity.

        Args:
            value (float): value for IDD Field `Thermal Energy Input to Heating Output Ratio`
                Default value: 1.25
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `thermal_energy_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `thermal_energy_input_to_heating_output_ratio`')
        self._data["Thermal Energy Input to Heating Output Ratio"] = value

    @property
    def electric_input_to_cooling_output_ratio(self):
        """Get electric_input_to_cooling_output_ratio

        Returns:
            float: the value of `electric_input_to_cooling_output_ratio` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio"]

    @electric_input_to_cooling_output_ratio.setter
    def electric_input_to_cooling_output_ratio(self, value=0.01):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the cooling capacity at rated conditions.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `Electric Input to Cooling Output Ratio`
                Default value: 0.01
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `electric_input_to_cooling_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_cooling_output_ratio`')
        self._data["Electric Input to Cooling Output Ratio"] = value

    @property
    def electric_input_to_heating_output_ratio(self):
        """Get electric_input_to_heating_output_ratio

        Returns:
            float: the value of `electric_input_to_heating_output_ratio` or None if not set
        """
        return self._data["Electric Input to Heating Output Ratio"]

    @electric_input_to_heating_output_ratio.setter
    def electric_input_to_heating_output_ratio(self, value=0.0):
        """  Corresponds to IDD Field `Electric Input to Heating Output Ratio`
        The positive fraction that represents the ratio of the
        instantaneous electricity used divided by the nominal heating capacity.
        If the chiller is both heating and cooling only the cooling electricity is used.

        Args:
            value (float): value for IDD Field `Electric Input to Heating Output Ratio`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `electric_input_to_heating_output_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `electric_input_to_heating_output_ratio`')
        self._data["Electric Input to Heating Output Ratio"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def condenser_inlet_node_name(self):
        """Get condenser_inlet_node_name

        Returns:
            str: the value of `condenser_inlet_node_name` or None if not set
        """
        return self._data["Condenser Inlet Node Name"]

    @condenser_inlet_node_name.setter
    def condenser_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Inlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_inlet_node_name`')
        self._data["Condenser Inlet Node Name"] = value

    @property
    def condenser_outlet_node_name(self):
        """Get condenser_outlet_node_name

        Returns:
            str: the value of `condenser_outlet_node_name` or None if not set
        """
        return self._data["Condenser Outlet Node Name"]

    @condenser_outlet_node_name.setter
    def condenser_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_outlet_node_name`')
        self._data["Condenser Outlet Node Name"] = value

    @property
    def hot_water_inlet_node_name(self):
        """Get hot_water_inlet_node_name

        Returns:
            str: the value of `hot_water_inlet_node_name` or None if not set
        """
        return self._data["Hot Water Inlet Node Name"]

    @hot_water_inlet_node_name.setter
    def hot_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_inlet_node_name`')
        self._data["Hot Water Inlet Node Name"] = value

    @property
    def hot_water_outlet_node_name(self):
        """Get hot_water_outlet_node_name

        Returns:
            str: the value of `hot_water_outlet_node_name` or None if not set
        """
        return self._data["Hot Water Outlet Node Name"]

    @hot_water_outlet_node_name.setter
    def hot_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_outlet_node_name`')
        self._data["Hot Water Outlet Node Name"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=0.1):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`
        The positive fraction that represents the minimum cooling output possible when
        operated continually at rated temperature conditions divided by the nominal
        cooling capacity at those same conditions.  If the load on the chiller is below
        this fraction the chiller will cycle.

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                Default value: 0.1
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`
        The positive fraction that represents the maximum cooling output possible at
        rated temperature conditions divided by the nominal cooling capacity at those
        same conditions.  If greater than 1.0, the chiller is typically thought of as
        capable of being overloaded.

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.0
                value >= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`
        The positive fraction that represents the optimal cooling output at rated
        temperature conditions divided by the nominal cooling capacity at those same
        conditions.  It represents the most desirable operating point for the chiller.

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def design_entering_condenser_water_temperature(self):
        """Get design_entering_condenser_water_temperature

        Returns:
            float: the value of `design_entering_condenser_water_temperature` or None if not set
        """
        return self._data["Design Entering Condenser Water Temperature"]

    @design_entering_condenser_water_temperature.setter
    def design_entering_condenser_water_temperature(self, value=29.0):
        """  Corresponds to IDD Field `Design Entering Condenser Water Temperature`
        The temperature of the water entering the condenser of the chiller when
        operating at design conditions.  This is usually based on the temperature
        delivered by the cooling tower in a water cooled application.

        Args:
            value (float): value for IDD Field `Design Entering Condenser Water Temperature`
                Units: C
                Default value: 29.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_entering_condenser_water_temperature`'.format(value))
        self._data["Design Entering Condenser Water Temperature"] = value

    @property
    def design_leaving_chilled_water_temperature(self):
        """Get design_leaving_chilled_water_temperature

        Returns:
            float: the value of `design_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Design Leaving Chilled Water Temperature"]

    @design_leaving_chilled_water_temperature.setter
    def design_leaving_chilled_water_temperature(self, value=7.0):
        """  Corresponds to IDD Field `Design Leaving Chilled Water Temperature`
        The temperature of the water leaving the evaporator of the chiller when
        operating at design conditions also called the chilled water supply temperature
        or leaving chilled water temperature.

        Args:
            value (float): value for IDD Field `Design Leaving Chilled Water Temperature`
                Units: C
                Default value: 7.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_leaving_chilled_water_temperature`'.format(value))
        self._data["Design Leaving Chilled Water Temperature"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value="autosize"):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`
        For variable volume this is the max flow & for constant flow this is the flow.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value="autosize"):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`
        The water flow rate at design conditions through the condenser.
        This field is not used for Condenser Type = AirCooled

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def design_hot_water_flow_rate(self):
        """Get design_hot_water_flow_rate

        Returns:
            float: the value of `design_hot_water_flow_rate` or None if not set
        """
        return self._data["Design Hot Water Flow Rate"]

    @design_hot_water_flow_rate.setter
    def design_hot_water_flow_rate(self, value="autosize"):
        """  Corresponds to IDD Field `Design Hot Water Flow Rate`
        The water flow rate at design conditions through the heater side.

        Args:
            value (float or "Autosize"): value for IDD Field `Design Hot Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Hot Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_hot_water_flow_rate`'.format(value))
                    self._data["Design Hot Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_hot_water_flow_rate`'.format(value))
        self._data["Design Hot Water Flow Rate"] = value

    @property
    def cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Function of Temperature Curve Name"]

    @cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Function of Temperature Curve Name`
        The CoolCapFT curve represents the fraction of the cooling capacity of the chiller as it
        varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Input to Cooling Output Ratio Function of Temperature Curve Name`
        The curve represents the fraction of the fuel input to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Fuel Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Fuel Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        The curve represents the fraction of the fuel input to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Fuel Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
        The curve represents the fraction of the electricity to the chiller at full load as
        it varies by temperature.  The curve is normalized so that at design conditions the
        value of the curve should be 1.0.  This is a biquadratic curve with the
        input variables being the leaving chilled water temperature and either
        the entering or leaving condenser water temperature.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        The curve represents the fraction of the electricity to the chiller as the load on
        the chiller varies but the operating temperatures remain at the design values.
        The curve is normalized so that at full load the value of the curve should be 1.0.
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def heating_capacity_function_of_cooling_capacity_curve_name(self):
        """Get heating_capacity_function_of_cooling_capacity_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_cooling_capacity_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Cooling Capacity Curve Name"]

    @heating_capacity_function_of_cooling_capacity_curve_name.setter
    def heating_capacity_function_of_cooling_capacity_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Cooling Capacity Curve Name`
        The curve represents how the heating capacity of the chiller varies with cooling
        capacity when the chiller is simultaeous heating and cooling.  The curve is normalized
        so an input of 1.0 represents the nominal cooling capacity and an output of 1.0
        represents the full heating capacity (see the Heating to cooling capacity ratio input)
        The curve is usually linear or quadratic.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Cooling Capacity Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_cooling_capacity_curve_name`')
        self._data["Heating Capacity Function of Cooling Capacity Curve Name"] = value

    @property
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self):
        """Get fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name

        Returns:
            str: the value of `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name` or None if not set
        """
        return self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"]

    @fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name.setter
    def fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name`
        When the chiller is operating as only a heater, this curve is used to represent the
        fraction of fuel used as the heating load varies.  It is normalized so that a value
        of 1.0 is the full heating capacity.  The curve is usually linear or quadratic and
        will probably be similar to a boiler curve for most chillers.
        Table:OneIndependentVariable object can also be used

        Args:
            value (str): value for IDD Field `Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_input_to_heat_output_ratio_during_heating_only_operation_curve_name`')
        self._data["Fuel Input to Heat Output Ratio During Heating Only Operation Curve Name"] = value

    @property
    def temperature_curve_input_variable(self):
        """Get temperature_curve_input_variable

        Returns:
            str: the value of `temperature_curve_input_variable` or None if not set
        """
        return self._data["Temperature Curve Input Variable"]

    @temperature_curve_input_variable.setter
    def temperature_curve_input_variable(self, value="EnteringCondenser"):
        """  Corresponds to IDD Field `Temperature Curve Input Variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature.  Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).

        Args:
            value (str): value for IDD Field `Temperature Curve Input Variable`
                Accepted values are:
                      - LeavingCondenser
                      - EnteringCondenser
                Default value: EnteringCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_curve_input_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_curve_input_variable`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_curve_input_variable`')
            vals = {}
            vals["leavingcondenser"] = "LeavingCondenser"
            vals["enteringcondenser"] = "EnteringCondenser"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_curve_input_variable`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_curve_input_variable`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Curve Input Variable"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        The condenser can either be air cooled or connected to a cooling tower.

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def chilled_water_temperature_lower_limit(self):
        """Get chilled_water_temperature_lower_limit

        Returns:
            float: the value of `chilled_water_temperature_lower_limit` or None if not set
        """
        return self._data["Chilled Water Temperature Lower Limit"]

    @chilled_water_temperature_lower_limit.setter
    def chilled_water_temperature_lower_limit(self, value=2.0):
        """  Corresponds to IDD Field `Chilled Water Temperature Lower Limit`
        The chilled water supply temperature below which the chiller
        will shut off.

        Args:
            value (float): value for IDD Field `Chilled Water Temperature Lower Limit`
                Units: C
                Default value: 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `chilled_water_temperature_lower_limit`'.format(value))
        self._data["Chilled Water Temperature Lower Limit"] = value

    @property
    def exhaust_source_object_type(self):
        """Get exhaust_source_object_type

        Returns:
            str: the value of `exhaust_source_object_type` or None if not set
        """
        return self._data["Exhaust Source Object Type"]

    @exhaust_source_object_type.setter
    def exhaust_source_object_type(self, value=None):
        """  Corresponds to IDD Field `Exhaust Source Object Type`

        Args:
            value (str): value for IDD Field `Exhaust Source Object Type`
                Accepted values are:
                      - Generator:MicroTurbine
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_source_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_source_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_source_object_type`')
            vals = {}
            vals["generator:microturbine"] = "Generator:MicroTurbine"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `exhaust_source_object_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `exhaust_source_object_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Exhaust Source Object Type"] = value

    @property
    def exhaust_source_object_name(self):
        """Get exhaust_source_object_name

        Returns:
            str: the value of `exhaust_source_object_name` or None if not set
        """
        return self._data["Exhaust Source Object Name"]

    @exhaust_source_object_name.setter
    def exhaust_source_object_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Source Object Name`

        Args:
            value (str): value for IDD Field `Exhaust Source Object Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `exhaust_source_object_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_source_object_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_source_object_name`')
        self._data["Exhaust Source Object Name"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatPumpWaterToWaterEquationFitHeating(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:EquationFit:Heating`
        simple water-water hp curve-fit model
    """
    internal_name = "HeatPump:WaterToWater:EquationFit:Heating"
    field_count = 19
    required_fields = ["Name", "Source Side Inlet Node Name", "Source Side Outlet Node Name", "Load Side Inlet Node Name", "Load Side Outlet Node Name", "Rated Load Side Flow Rate", "Rated Source Side Flow Rate", "Rated Heating Capacity", "Rated Heating Power Consumption", "Heating Capacity Coefficient 1", "Heating Capacity Coefficient 2", "Heating Capacity Coefficient 3", "Heating Capacity Coefficient 4", "Heating Capacity Coefficient 5", "Heating Compressor Power Coefficient 1", "Heating Compressor Power Coefficient 2", "Heating Compressor Power Coefficient 3", "Heating Compressor Power Coefficient 4", "Heating Compressor Power Coefficient 5"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:EquationFit:Heating`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Rated Load Side Flow Rate"] = None
        self._data["Rated Source Side Flow Rate"] = None
        self._data["Rated Heating Capacity"] = None
        self._data["Rated Heating Power Consumption"] = None
        self._data["Heating Capacity Coefficient 1"] = None
        self._data["Heating Capacity Coefficient 2"] = None
        self._data["Heating Capacity Coefficient 3"] = None
        self._data["Heating Capacity Coefficient 4"] = None
        self._data["Heating Capacity Coefficient 5"] = None
        self._data["Heating Compressor Power Coefficient 1"] = None
        self._data["Heating Compressor Power Coefficient 2"] = None
        self._data["Heating Compressor Power Coefficient 3"] = None
        self._data["Heating Compressor Power Coefficient 4"] = None
        self._data["Heating Compressor Power Coefficient 5"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_load_side_flow_rate = None
        else:
            self.rated_load_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_source_side_flow_rate = None
        else:
            self.rated_source_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_heating_capacity = None
        else:
            self.rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_heating_power_consumption = None
        else:
            self.rated_heating_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_1 = None
        else:
            self.heating_capacity_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_2 = None
        else:
            self.heating_capacity_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_3 = None
        else:
            self.heating_capacity_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_4 = None
        else:
            self.heating_capacity_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_5 = None
        else:
            self.heating_capacity_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_1 = None
        else:
            self.heating_compressor_power_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_2 = None
        else:
            self.heating_compressor_power_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_3 = None
        else:
            self.heating_compressor_power_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_4 = None
        else:
            self.heating_compressor_power_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_compressor_power_coefficient_5 = None
        else:
            self.heating_compressor_power_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_inlet_node_name`')
        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_outlet_node_name`')
        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_inlet_node_name`')
        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_outlet_node_name`')
        self._data["Load Side Outlet Node Name"] = value

    @property
    def rated_load_side_flow_rate(self):
        """Get rated_load_side_flow_rate

        Returns:
            float: the value of `rated_load_side_flow_rate` or None if not set
        """
        return self._data["Rated Load Side Flow Rate"]

    @rated_load_side_flow_rate.setter
    def rated_load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Load Side Flow Rate`

        Args:
            value (float): value for IDD Field `Rated Load Side Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_load_side_flow_rate`')
        self._data["Rated Load Side Flow Rate"] = value

    @property
    def rated_source_side_flow_rate(self):
        """Get rated_source_side_flow_rate

        Returns:
            float: the value of `rated_source_side_flow_rate` or None if not set
        """
        return self._data["Rated Source Side Flow Rate"]

    @rated_source_side_flow_rate.setter
    def rated_source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Source Side Flow Rate`

        Args:
            value (float): value for IDD Field `Rated Source Side Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_source_side_flow_rate`')
        self._data["Rated Source Side Flow Rate"] = value

    @property
    def rated_heating_capacity(self):
        """Get rated_heating_capacity

        Returns:
            float: the value of `rated_heating_capacity` or None if not set
        """
        return self._data["Rated Heating Capacity"]

    @rated_heating_capacity.setter
    def rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Rated Heating Capacity`

        Args:
            value (float): value for IDD Field `Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_heating_capacity`')
        self._data["Rated Heating Capacity"] = value

    @property
    def rated_heating_power_consumption(self):
        """Get rated_heating_power_consumption

        Returns:
            float: the value of `rated_heating_power_consumption` or None if not set
        """
        return self._data["Rated Heating Power Consumption"]

    @rated_heating_power_consumption.setter
    def rated_heating_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Rated Heating Power Consumption`

        Args:
            value (float): value for IDD Field `Rated Heating Power Consumption`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_heating_power_consumption`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_heating_power_consumption`')
        self._data["Rated Heating Power Consumption"] = value

    @property
    def heating_capacity_coefficient_1(self):
        """Get heating_capacity_coefficient_1

        Returns:
            float: the value of `heating_capacity_coefficient_1` or None if not set
        """
        return self._data["Heating Capacity Coefficient 1"]

    @heating_capacity_coefficient_1.setter
    def heating_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 1`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_capacity_coefficient_1`'.format(value))
        self._data["Heating Capacity Coefficient 1"] = value

    @property
    def heating_capacity_coefficient_2(self):
        """Get heating_capacity_coefficient_2

        Returns:
            float: the value of `heating_capacity_coefficient_2` or None if not set
        """
        return self._data["Heating Capacity Coefficient 2"]

    @heating_capacity_coefficient_2.setter
    def heating_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 2`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_capacity_coefficient_2`'.format(value))
        self._data["Heating Capacity Coefficient 2"] = value

    @property
    def heating_capacity_coefficient_3(self):
        """Get heating_capacity_coefficient_3

        Returns:
            float: the value of `heating_capacity_coefficient_3` or None if not set
        """
        return self._data["Heating Capacity Coefficient 3"]

    @heating_capacity_coefficient_3.setter
    def heating_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 3`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_capacity_coefficient_3`'.format(value))
        self._data["Heating Capacity Coefficient 3"] = value

    @property
    def heating_capacity_coefficient_4(self):
        """Get heating_capacity_coefficient_4

        Returns:
            float: the value of `heating_capacity_coefficient_4` or None if not set
        """
        return self._data["Heating Capacity Coefficient 4"]

    @heating_capacity_coefficient_4.setter
    def heating_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 4`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_capacity_coefficient_4`'.format(value))
        self._data["Heating Capacity Coefficient 4"] = value

    @property
    def heating_capacity_coefficient_5(self):
        """Get heating_capacity_coefficient_5

        Returns:
            float: the value of `heating_capacity_coefficient_5` or None if not set
        """
        return self._data["Heating Capacity Coefficient 5"]

    @heating_capacity_coefficient_5.setter
    def heating_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 5`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_capacity_coefficient_5`'.format(value))
        self._data["Heating Capacity Coefficient 5"] = value

    @property
    def heating_compressor_power_coefficient_1(self):
        """Get heating_compressor_power_coefficient_1

        Returns:
            float: the value of `heating_compressor_power_coefficient_1` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 1"]

    @heating_compressor_power_coefficient_1.setter
    def heating_compressor_power_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Heating Compressor Power Coefficient 1`

        Args:
            value (float): value for IDD Field `Heating Compressor Power Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_compressor_power_coefficient_1`'.format(value))
        self._data["Heating Compressor Power Coefficient 1"] = value

    @property
    def heating_compressor_power_coefficient_2(self):
        """Get heating_compressor_power_coefficient_2

        Returns:
            float: the value of `heating_compressor_power_coefficient_2` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 2"]

    @heating_compressor_power_coefficient_2.setter
    def heating_compressor_power_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Heating Compressor Power Coefficient 2`

        Args:
            value (float): value for IDD Field `Heating Compressor Power Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_compressor_power_coefficient_2`'.format(value))
        self._data["Heating Compressor Power Coefficient 2"] = value

    @property
    def heating_compressor_power_coefficient_3(self):
        """Get heating_compressor_power_coefficient_3

        Returns:
            float: the value of `heating_compressor_power_coefficient_3` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 3"]

    @heating_compressor_power_coefficient_3.setter
    def heating_compressor_power_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Heating Compressor Power Coefficient 3`

        Args:
            value (float): value for IDD Field `Heating Compressor Power Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_compressor_power_coefficient_3`'.format(value))
        self._data["Heating Compressor Power Coefficient 3"] = value

    @property
    def heating_compressor_power_coefficient_4(self):
        """Get heating_compressor_power_coefficient_4

        Returns:
            float: the value of `heating_compressor_power_coefficient_4` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 4"]

    @heating_compressor_power_coefficient_4.setter
    def heating_compressor_power_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Heating Compressor Power Coefficient 4`

        Args:
            value (float): value for IDD Field `Heating Compressor Power Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_compressor_power_coefficient_4`'.format(value))
        self._data["Heating Compressor Power Coefficient 4"] = value

    @property
    def heating_compressor_power_coefficient_5(self):
        """Get heating_compressor_power_coefficient_5

        Returns:
            float: the value of `heating_compressor_power_coefficient_5` or None if not set
        """
        return self._data["Heating Compressor Power Coefficient 5"]

    @heating_compressor_power_coefficient_5.setter
    def heating_compressor_power_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Heating Compressor Power Coefficient 5`

        Args:
            value (float): value for IDD Field `Heating Compressor Power Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_compressor_power_coefficient_5`'.format(value))
        self._data["Heating Compressor Power Coefficient 5"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatPumpWaterToWaterEquationFitCooling(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:EquationFit:Cooling`
        simple water-water heatpump curve-fit model
    """
    internal_name = "HeatPump:WaterToWater:EquationFit:Cooling"
    field_count = 19
    required_fields = ["Name", "Source Side Inlet Node Name", "Source Side Outlet Node Name", "Load Side Inlet Node Name", "Load Side Outlet Node Name", "Rated Load Side Flow Rate", "Rated Source Side Flow Rate", "Rated Cooling Capacity", "Rated Cooling Power Consumption", "Cooling Capacity Coefficient 1", "Cooling Capacity Coefficient 2", "Cooling Capacity Coefficient 3", "Cooling Capacity Coefficient 4", "Cooling Capacity Coefficient 5", "Cooling Compressor Power Coefficient 1", "Cooling Compressor Power Coefficient 2", "Cooling Compressor Power Coefficient 3", "Cooling Compressor Power Coefficient 4", "Cooling Compressor Power Coefficient 5"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:EquationFit:Cooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Rated Load Side Flow Rate"] = None
        self._data["Rated Source Side Flow Rate"] = None
        self._data["Rated Cooling Capacity"] = None
        self._data["Rated Cooling Power Consumption"] = None
        self._data["Cooling Capacity Coefficient 1"] = None
        self._data["Cooling Capacity Coefficient 2"] = None
        self._data["Cooling Capacity Coefficient 3"] = None
        self._data["Cooling Capacity Coefficient 4"] = None
        self._data["Cooling Capacity Coefficient 5"] = None
        self._data["Cooling Compressor Power Coefficient 1"] = None
        self._data["Cooling Compressor Power Coefficient 2"] = None
        self._data["Cooling Compressor Power Coefficient 3"] = None
        self._data["Cooling Compressor Power Coefficient 4"] = None
        self._data["Cooling Compressor Power Coefficient 5"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_load_side_flow_rate = None
        else:
            self.rated_load_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_source_side_flow_rate = None
        else:
            self.rated_source_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_cooling_capacity = None
        else:
            self.rated_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_cooling_power_consumption = None
        else:
            self.rated_cooling_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_1 = None
        else:
            self.cooling_capacity_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_2 = None
        else:
            self.cooling_capacity_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_3 = None
        else:
            self.cooling_capacity_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_4 = None
        else:
            self.cooling_capacity_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_coefficient_5 = None
        else:
            self.cooling_capacity_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_1 = None
        else:
            self.cooling_compressor_power_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_2 = None
        else:
            self.cooling_compressor_power_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_3 = None
        else:
            self.cooling_compressor_power_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_4 = None
        else:
            self.cooling_compressor_power_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_compressor_power_coefficient_5 = None
        else:
            self.cooling_compressor_power_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_inlet_node_name`')
        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_outlet_node_name`')
        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_inlet_node_name`')
        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_outlet_node_name`')
        self._data["Load Side Outlet Node Name"] = value

    @property
    def rated_load_side_flow_rate(self):
        """Get rated_load_side_flow_rate

        Returns:
            float: the value of `rated_load_side_flow_rate` or None if not set
        """
        return self._data["Rated Load Side Flow Rate"]

    @rated_load_side_flow_rate.setter
    def rated_load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Load Side Flow Rate`

        Args:
            value (float): value for IDD Field `Rated Load Side Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_load_side_flow_rate`')
        self._data["Rated Load Side Flow Rate"] = value

    @property
    def rated_source_side_flow_rate(self):
        """Get rated_source_side_flow_rate

        Returns:
            float: the value of `rated_source_side_flow_rate` or None if not set
        """
        return self._data["Rated Source Side Flow Rate"]

    @rated_source_side_flow_rate.setter
    def rated_source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Source Side Flow Rate`

        Args:
            value (float): value for IDD Field `Rated Source Side Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_source_side_flow_rate`')
        self._data["Rated Source Side Flow Rate"] = value

    @property
    def rated_cooling_capacity(self):
        """Get rated_cooling_capacity

        Returns:
            float: the value of `rated_cooling_capacity` or None if not set
        """
        return self._data["Rated Cooling Capacity"]

    @rated_cooling_capacity.setter
    def rated_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Rated Cooling Capacity`

        Args:
            value (float): value for IDD Field `Rated Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_cooling_capacity`')
        self._data["Rated Cooling Capacity"] = value

    @property
    def rated_cooling_power_consumption(self):
        """Get rated_cooling_power_consumption

        Returns:
            float: the value of `rated_cooling_power_consumption` or None if not set
        """
        return self._data["Rated Cooling Power Consumption"]

    @rated_cooling_power_consumption.setter
    def rated_cooling_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Rated Cooling Power Consumption`

        Args:
            value (float): value for IDD Field `Rated Cooling Power Consumption`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `rated_cooling_power_consumption`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_cooling_power_consumption`')
        self._data["Rated Cooling Power Consumption"] = value

    @property
    def cooling_capacity_coefficient_1(self):
        """Get cooling_capacity_coefficient_1

        Returns:
            float: the value of `cooling_capacity_coefficient_1` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 1"]

    @cooling_capacity_coefficient_1.setter
    def cooling_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Coefficient 1`

        Args:
            value (float): value for IDD Field `Cooling Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_capacity_coefficient_1`'.format(value))
        self._data["Cooling Capacity Coefficient 1"] = value

    @property
    def cooling_capacity_coefficient_2(self):
        """Get cooling_capacity_coefficient_2

        Returns:
            float: the value of `cooling_capacity_coefficient_2` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 2"]

    @cooling_capacity_coefficient_2.setter
    def cooling_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Coefficient 2`

        Args:
            value (float): value for IDD Field `Cooling Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_capacity_coefficient_2`'.format(value))
        self._data["Cooling Capacity Coefficient 2"] = value

    @property
    def cooling_capacity_coefficient_3(self):
        """Get cooling_capacity_coefficient_3

        Returns:
            float: the value of `cooling_capacity_coefficient_3` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 3"]

    @cooling_capacity_coefficient_3.setter
    def cooling_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Coefficient 3`

        Args:
            value (float): value for IDD Field `Cooling Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_capacity_coefficient_3`'.format(value))
        self._data["Cooling Capacity Coefficient 3"] = value

    @property
    def cooling_capacity_coefficient_4(self):
        """Get cooling_capacity_coefficient_4

        Returns:
            float: the value of `cooling_capacity_coefficient_4` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 4"]

    @cooling_capacity_coefficient_4.setter
    def cooling_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Coefficient 4`

        Args:
            value (float): value for IDD Field `Cooling Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_capacity_coefficient_4`'.format(value))
        self._data["Cooling Capacity Coefficient 4"] = value

    @property
    def cooling_capacity_coefficient_5(self):
        """Get cooling_capacity_coefficient_5

        Returns:
            float: the value of `cooling_capacity_coefficient_5` or None if not set
        """
        return self._data["Cooling Capacity Coefficient 5"]

    @cooling_capacity_coefficient_5.setter
    def cooling_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Coefficient 5`

        Args:
            value (float): value for IDD Field `Cooling Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_capacity_coefficient_5`'.format(value))
        self._data["Cooling Capacity Coefficient 5"] = value

    @property
    def cooling_compressor_power_coefficient_1(self):
        """Get cooling_compressor_power_coefficient_1

        Returns:
            float: the value of `cooling_compressor_power_coefficient_1` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 1"]

    @cooling_compressor_power_coefficient_1.setter
    def cooling_compressor_power_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Cooling Compressor Power Coefficient 1`

        Args:
            value (float): value for IDD Field `Cooling Compressor Power Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_compressor_power_coefficient_1`'.format(value))
        self._data["Cooling Compressor Power Coefficient 1"] = value

    @property
    def cooling_compressor_power_coefficient_2(self):
        """Get cooling_compressor_power_coefficient_2

        Returns:
            float: the value of `cooling_compressor_power_coefficient_2` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 2"]

    @cooling_compressor_power_coefficient_2.setter
    def cooling_compressor_power_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Cooling Compressor Power Coefficient 2`

        Args:
            value (float): value for IDD Field `Cooling Compressor Power Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_compressor_power_coefficient_2`'.format(value))
        self._data["Cooling Compressor Power Coefficient 2"] = value

    @property
    def cooling_compressor_power_coefficient_3(self):
        """Get cooling_compressor_power_coefficient_3

        Returns:
            float: the value of `cooling_compressor_power_coefficient_3` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 3"]

    @cooling_compressor_power_coefficient_3.setter
    def cooling_compressor_power_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Cooling Compressor Power Coefficient 3`

        Args:
            value (float): value for IDD Field `Cooling Compressor Power Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_compressor_power_coefficient_3`'.format(value))
        self._data["Cooling Compressor Power Coefficient 3"] = value

    @property
    def cooling_compressor_power_coefficient_4(self):
        """Get cooling_compressor_power_coefficient_4

        Returns:
            float: the value of `cooling_compressor_power_coefficient_4` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 4"]

    @cooling_compressor_power_coefficient_4.setter
    def cooling_compressor_power_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Cooling Compressor Power Coefficient 4`

        Args:
            value (float): value for IDD Field `Cooling Compressor Power Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_compressor_power_coefficient_4`'.format(value))
        self._data["Cooling Compressor Power Coefficient 4"] = value

    @property
    def cooling_compressor_power_coefficient_5(self):
        """Get cooling_compressor_power_coefficient_5

        Returns:
            float: the value of `cooling_compressor_power_coefficient_5` or None if not set
        """
        return self._data["Cooling Compressor Power Coefficient 5"]

    @cooling_compressor_power_coefficient_5.setter
    def cooling_compressor_power_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Cooling Compressor Power Coefficient 5`

        Args:
            value (float): value for IDD Field `Cooling Compressor Power Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_compressor_power_coefficient_5`'.format(value))
        self._data["Cooling Compressor Power Coefficient 5"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatPumpWaterToWaterParameterEstimationCooling(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:ParameterEstimation:Cooling`
        OSU parameter estimation model
    """
    internal_name = "HeatPump:WaterToWater:ParameterEstimation:Cooling"
    field_count = 22
    required_fields = ["Name", "Source Side Inlet Node Name", "Source Side Outlet Node Name", "Load Side Inlet Node Name", "Load Side Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:ParameterEstimation:Cooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Nominal COP"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Load Side Flow Rate"] = None
        self._data["Source Side Flow Rate"] = None
        self._data["Load Side Heat Transfer Coefficient"] = None
        self._data["Source Side Heat Transfer Coefficient"] = None
        self._data["Piston Displacement"] = None
        self._data["Compressor Clearance Factor"] = None
        self._data["Compressor Suction and Discharge Pressure Drop"] = None
        self._data["Superheating"] = None
        self._data["Constant Part of Electromechanical Power Losses"] = None
        self._data["Loss Factor"] = None
        self._data["High Pressure Cut Off"] = None
        self._data["Low Pressure Cut Off"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_flow_rate = None
        else:
            self.load_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_flow_rate = None
        else:
            self.source_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_heat_transfer_coefficient = None
        else:
            self.load_side_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_coefficient = None
        else:
            self.source_side_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.piston_displacement = None
        else:
            self.piston_displacement = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_clearance_factor = None
        else:
            self.compressor_clearance_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_suction_and_discharge_pressure_drop = None
        else:
            self.compressor_suction_and_discharge_pressure_drop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.superheating = None
        else:
            self.superheating = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constant_part_of_electromechanical_power_losses = None
        else:
            self.constant_part_of_electromechanical_power_losses = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.loss_factor = None
        else:
            self.loss_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_pressure_cut_off = None
        else:
            self.high_pressure_cut_off = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_pressure_cut_off = None
        else:
            self.low_pressure_cut_off = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_inlet_node_name`')
        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_outlet_node_name`')
        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_inlet_node_name`')
        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_outlet_node_name`')
        self._data["Load Side Outlet Node Name"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `Nominal COP`

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')
        self._data["Nominal COP"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float): value for IDD Field `Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def load_side_flow_rate(self):
        """Get load_side_flow_rate

        Returns:
            float: the value of `load_side_flow_rate` or None if not set
        """
        return self._data["Load Side Flow Rate"]

    @load_side_flow_rate.setter
    def load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Load Side Flow Rate`

        Args:
            value (float): value for IDD Field `Load Side Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_flow_rate`')
        self._data["Load Side Flow Rate"] = value

    @property
    def source_side_flow_rate(self):
        """Get source_side_flow_rate

        Returns:
            float: the value of `source_side_flow_rate` or None if not set
        """
        return self._data["Source Side Flow Rate"]

    @source_side_flow_rate.setter
    def source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Source Side Flow Rate`

        Args:
            value (float): value for IDD Field `Source Side Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_flow_rate`')
        self._data["Source Side Flow Rate"] = value

    @property
    def load_side_heat_transfer_coefficient(self):
        """Get load_side_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Heat Transfer Coefficient"]

    @load_side_heat_transfer_coefficient.setter
    def load_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Load Side Heat Transfer Coefficient`

        Args:
            value (float): value for IDD Field `Load Side Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `load_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_heat_transfer_coefficient`')
        self._data["Load Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Coefficient`

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `source_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_heat_transfer_coefficient`')
        self._data["Source Side Heat Transfer Coefficient"] = value

    @property
    def piston_displacement(self):
        """Get piston_displacement

        Returns:
            float: the value of `piston_displacement` or None if not set
        """
        return self._data["Piston Displacement"]

    @piston_displacement.setter
    def piston_displacement(self, value=None):
        """  Corresponds to IDD Field `Piston Displacement`

        Args:
            value (float): value for IDD Field `Piston Displacement`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `piston_displacement`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `piston_displacement`')
        self._data["Piston Displacement"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set
        """
        return self._data["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """  Corresponds to IDD Field `Compressor Clearance Factor`

        Args:
            value (float): value for IDD Field `Compressor Clearance Factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `compressor_clearance_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_clearance_factor`')
        self._data["Compressor Clearance Factor"] = value

    @property
    def compressor_suction_and_discharge_pressure_drop(self):
        """Get compressor_suction_and_discharge_pressure_drop

        Returns:
            float: the value of `compressor_suction_and_discharge_pressure_drop` or None if not set
        """
        return self._data["Compressor Suction and Discharge Pressure Drop"]

    @compressor_suction_and_discharge_pressure_drop.setter
    def compressor_suction_and_discharge_pressure_drop(self, value=None):
        """  Corresponds to IDD Field `Compressor Suction and Discharge Pressure Drop`

        Args:
            value (float): value for IDD Field `Compressor Suction and Discharge Pressure Drop`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `compressor_suction_and_discharge_pressure_drop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_suction_and_discharge_pressure_drop`')
        self._data["Compressor Suction and Discharge Pressure Drop"] = value

    @property
    def superheating(self):
        """Get superheating

        Returns:
            float: the value of `superheating` or None if not set
        """
        return self._data["Superheating"]

    @superheating.setter
    def superheating(self, value=None):
        """  Corresponds to IDD Field `Superheating`

        Args:
            value (float): value for IDD Field `Superheating`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `superheating`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `superheating`')
        self._data["Superheating"] = value

    @property
    def constant_part_of_electromechanical_power_losses(self):
        """Get constant_part_of_electromechanical_power_losses

        Returns:
            float: the value of `constant_part_of_electromechanical_power_losses` or None if not set
        """
        return self._data["Constant Part of Electromechanical Power Losses"]

    @constant_part_of_electromechanical_power_losses.setter
    def constant_part_of_electromechanical_power_losses(self, value=None):
        """  Corresponds to IDD Field `Constant Part of Electromechanical Power Losses`

        Args:
            value (float): value for IDD Field `Constant Part of Electromechanical Power Losses`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constant_part_of_electromechanical_power_losses`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `constant_part_of_electromechanical_power_losses`')
        self._data["Constant Part of Electromechanical Power Losses"] = value

    @property
    def loss_factor(self):
        """Get loss_factor

        Returns:
            float: the value of `loss_factor` or None if not set
        """
        return self._data["Loss Factor"]

    @loss_factor.setter
    def loss_factor(self, value=None):
        """  Corresponds to IDD Field `Loss Factor`
        Used to define electromechanical loss that is proportional
        to the theoretical power %

        Args:
            value (float): value for IDD Field `Loss Factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `loss_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `loss_factor`')
        self._data["Loss Factor"] = value

    @property
    def high_pressure_cut_off(self):
        """Get high_pressure_cut_off

        Returns:
            float: the value of `high_pressure_cut_off` or None if not set
        """
        return self._data["High Pressure Cut Off"]

    @high_pressure_cut_off.setter
    def high_pressure_cut_off(self, value=500000000.0):
        """  Corresponds to IDD Field `High Pressure Cut Off`

        Args:
            value (float): value for IDD Field `High Pressure Cut Off`
                Units: Pa
                Default value: 500000000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `high_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `high_pressure_cut_off`')
        self._data["High Pressure Cut Off"] = value

    @property
    def low_pressure_cut_off(self):
        """Get low_pressure_cut_off

        Returns:
            float: the value of `low_pressure_cut_off` or None if not set
        """
        return self._data["Low Pressure Cut Off"]

    @low_pressure_cut_off.setter
    def low_pressure_cut_off(self, value=0.0):
        """  Corresponds to IDD Field `Low Pressure Cut Off`

        Args:
            value (float): value for IDD Field `Low Pressure Cut Off`
                Units: Pa
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `low_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_pressure_cut_off`')
        self._data["Low Pressure Cut Off"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatPumpWaterToWaterParameterEstimationHeating(object):
    """ Corresponds to IDD object `HeatPump:WaterToWater:ParameterEstimation:Heating`
        OSU parameter estimation model
    """
    internal_name = "HeatPump:WaterToWater:ParameterEstimation:Heating"
    field_count = 22
    required_fields = ["Name", "Source Side Inlet Node Name", "Source Side Outlet Node Name", "Load Side Inlet Node Name", "Load Side Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatPump:WaterToWater:ParameterEstimation:Heating`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Source Side Inlet Node Name"] = None
        self._data["Source Side Outlet Node Name"] = None
        self._data["Load Side Inlet Node Name"] = None
        self._data["Load Side Outlet Node Name"] = None
        self._data["Nominal COP"] = None
        self._data["Nominal Capacity"] = None
        self._data["Minimum Part Load Ratio"] = None
        self._data["Maximum Part Load Ratio"] = None
        self._data["Optimum Part Load Ratio"] = None
        self._data["Load Side Flow Rate"] = None
        self._data["Source Side Flow Rate"] = None
        self._data["Load Side Heat Transfer Coefficient"] = None
        self._data["Source Side Heat Transfer Coefficient"] = None
        self._data["Piston Displacement"] = None
        self._data["Compressor Clearance Factor"] = None
        self._data["Compressor Suction and Discharge Pressure Drop"] = None
        self._data["Superheating"] = None
        self._data["Constant Part of Electromechanical Power Losses"] = None
        self._data["Loss Factor"] = None
        self._data["High Pressure Cut Off"] = None
        self._data["Low Pressure Cut Off"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_inlet_node_name = None
        else:
            self.source_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_outlet_node_name = None
        else:
            self.source_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_inlet_node_name = None
        else:
            self.load_side_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_outlet_node_name = None
        else:
            self.load_side_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cop = None
        else:
            self.nominal_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_part_load_ratio = None
        else:
            self.minimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_part_load_ratio = None
        else:
            self.maximum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.optimum_part_load_ratio = None
        else:
            self.optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_flow_rate = None
        else:
            self.load_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_flow_rate = None
        else:
            self.source_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_heat_transfer_coefficient = None
        else:
            self.load_side_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_coefficient = None
        else:
            self.source_side_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.piston_displacement = None
        else:
            self.piston_displacement = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_clearance_factor = None
        else:
            self.compressor_clearance_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_suction_and_discharge_pressure_drop = None
        else:
            self.compressor_suction_and_discharge_pressure_drop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.superheating = None
        else:
            self.superheating = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.constant_part_of_electromechanical_power_losses = None
        else:
            self.constant_part_of_electromechanical_power_losses = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.loss_factor = None
        else:
            self.loss_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_pressure_cut_off = None
        else:
            self.high_pressure_cut_off = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_pressure_cut_off = None
        else:
            self.low_pressure_cut_off = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def source_side_inlet_node_name(self):
        """Get source_side_inlet_node_name

        Returns:
            str: the value of `source_side_inlet_node_name` or None if not set
        """
        return self._data["Source Side Inlet Node Name"]

    @source_side_inlet_node_name.setter
    def source_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_inlet_node_name`')
        self._data["Source Side Inlet Node Name"] = value

    @property
    def source_side_outlet_node_name(self):
        """Get source_side_outlet_node_name

        Returns:
            str: the value of `source_side_outlet_node_name` or None if not set
        """
        return self._data["Source Side Outlet Node Name"]

    @source_side_outlet_node_name.setter
    def source_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Source Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_side_outlet_node_name`')
        self._data["Source Side Outlet Node Name"] = value

    @property
    def load_side_inlet_node_name(self):
        """Get load_side_inlet_node_name

        Returns:
            str: the value of `load_side_inlet_node_name` or None if not set
        """
        return self._data["Load Side Inlet Node Name"]

    @load_side_inlet_node_name.setter
    def load_side_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Inlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_inlet_node_name`')
        self._data["Load Side Inlet Node Name"] = value

    @property
    def load_side_outlet_node_name(self):
        """Get load_side_outlet_node_name

        Returns:
            str: the value of `load_side_outlet_node_name` or None if not set
        """
        return self._data["Load Side Outlet Node Name"]

    @load_side_outlet_node_name.setter
    def load_side_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Load Side Outlet Node Name`

        Args:
            value (str): value for IDD Field `Load Side Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `load_side_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `load_side_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `load_side_outlet_node_name`')
        self._data["Load Side Outlet Node Name"] = value

    @property
    def nominal_cop(self):
        """Get nominal_cop

        Returns:
            float: the value of `nominal_cop` or None if not set
        """
        return self._data["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """  Corresponds to IDD Field `Nominal COP`

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cop`')
        self._data["Nominal COP"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float): value for IDD Field `Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def minimum_part_load_ratio(self):
        """Get minimum_part_load_ratio

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set
        """
        return self._data["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `minimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_part_load_ratio`')
        self._data["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """Get maximum_part_load_ratio

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set
        """
        return self._data["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `maximum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_part_load_ratio`')
        self._data["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """Get optimum_part_load_ratio

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set
        """
        return self._data["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=None):
        """  Corresponds to IDD Field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `optimum_part_load_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `optimum_part_load_ratio`')
        self._data["Optimum Part Load Ratio"] = value

    @property
    def load_side_flow_rate(self):
        """Get load_side_flow_rate

        Returns:
            float: the value of `load_side_flow_rate` or None if not set
        """
        return self._data["Load Side Flow Rate"]

    @load_side_flow_rate.setter
    def load_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Load Side Flow Rate`

        Args:
            value (float): value for IDD Field `Load Side Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `load_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_flow_rate`')
        self._data["Load Side Flow Rate"] = value

    @property
    def source_side_flow_rate(self):
        """Get source_side_flow_rate

        Returns:
            float: the value of `source_side_flow_rate` or None if not set
        """
        return self._data["Source Side Flow Rate"]

    @source_side_flow_rate.setter
    def source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Source Side Flow Rate`

        Args:
            value (float): value for IDD Field `Source Side Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_flow_rate`')
        self._data["Source Side Flow Rate"] = value

    @property
    def load_side_heat_transfer_coefficient(self):
        """Get load_side_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Heat Transfer Coefficient"]

    @load_side_heat_transfer_coefficient.setter
    def load_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Load Side Heat Transfer Coefficient`

        Args:
            value (float): value for IDD Field `Load Side Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `load_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_heat_transfer_coefficient`')
        self._data["Load Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Coefficient`

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `source_side_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `source_side_heat_transfer_coefficient`')
        self._data["Source Side Heat Transfer Coefficient"] = value

    @property
    def piston_displacement(self):
        """Get piston_displacement

        Returns:
            float: the value of `piston_displacement` or None if not set
        """
        return self._data["Piston Displacement"]

    @piston_displacement.setter
    def piston_displacement(self, value=None):
        """  Corresponds to IDD Field `Piston Displacement`

        Args:
            value (float): value for IDD Field `Piston Displacement`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `piston_displacement`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `piston_displacement`')
        self._data["Piston Displacement"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set
        """
        return self._data["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """  Corresponds to IDD Field `Compressor Clearance Factor`

        Args:
            value (float): value for IDD Field `Compressor Clearance Factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `compressor_clearance_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_clearance_factor`')
        self._data["Compressor Clearance Factor"] = value

    @property
    def compressor_suction_and_discharge_pressure_drop(self):
        """Get compressor_suction_and_discharge_pressure_drop

        Returns:
            float: the value of `compressor_suction_and_discharge_pressure_drop` or None if not set
        """
        return self._data["Compressor Suction and Discharge Pressure Drop"]

    @compressor_suction_and_discharge_pressure_drop.setter
    def compressor_suction_and_discharge_pressure_drop(self, value=None):
        """  Corresponds to IDD Field `Compressor Suction and Discharge Pressure Drop`

        Args:
            value (float): value for IDD Field `Compressor Suction and Discharge Pressure Drop`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `compressor_suction_and_discharge_pressure_drop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_suction_and_discharge_pressure_drop`')
        self._data["Compressor Suction and Discharge Pressure Drop"] = value

    @property
    def superheating(self):
        """Get superheating

        Returns:
            float: the value of `superheating` or None if not set
        """
        return self._data["Superheating"]

    @superheating.setter
    def superheating(self, value=None):
        """  Corresponds to IDD Field `Superheating`

        Args:
            value (float): value for IDD Field `Superheating`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `superheating`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `superheating`')
        self._data["Superheating"] = value

    @property
    def constant_part_of_electromechanical_power_losses(self):
        """Get constant_part_of_electromechanical_power_losses

        Returns:
            float: the value of `constant_part_of_electromechanical_power_losses` or None if not set
        """
        return self._data["Constant Part of Electromechanical Power Losses"]

    @constant_part_of_electromechanical_power_losses.setter
    def constant_part_of_electromechanical_power_losses(self, value=None):
        """  Corresponds to IDD Field `Constant Part of Electromechanical Power Losses`

        Args:
            value (float): value for IDD Field `Constant Part of Electromechanical Power Losses`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `constant_part_of_electromechanical_power_losses`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `constant_part_of_electromechanical_power_losses`')
        self._data["Constant Part of Electromechanical Power Losses"] = value

    @property
    def loss_factor(self):
        """Get loss_factor

        Returns:
            float: the value of `loss_factor` or None if not set
        """
        return self._data["Loss Factor"]

    @loss_factor.setter
    def loss_factor(self, value=None):
        """  Corresponds to IDD Field `Loss Factor`
        Used to define electromechanical loss that is proportional
        to the theoretical power %

        Args:
            value (float): value for IDD Field `Loss Factor`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `loss_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `loss_factor`')
        self._data["Loss Factor"] = value

    @property
    def high_pressure_cut_off(self):
        """Get high_pressure_cut_off

        Returns:
            float: the value of `high_pressure_cut_off` or None if not set
        """
        return self._data["High Pressure Cut Off"]

    @high_pressure_cut_off.setter
    def high_pressure_cut_off(self, value=500000000.0):
        """  Corresponds to IDD Field `High Pressure Cut Off`

        Args:
            value (float): value for IDD Field `High Pressure Cut Off`
                Units: Pa
                Default value: 500000000.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `high_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `high_pressure_cut_off`')
        self._data["High Pressure Cut Off"] = value

    @property
    def low_pressure_cut_off(self):
        """Get low_pressure_cut_off

        Returns:
            float: the value of `low_pressure_cut_off` or None if not set
        """
        return self._data["Low Pressure Cut Off"]

    @low_pressure_cut_off.setter
    def low_pressure_cut_off(self, value=0.0):
        """  Corresponds to IDD Field `Low Pressure Cut Off`

        Args:
            value (float): value for IDD Field `Low Pressure Cut Off`
                Units: Pa
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `low_pressure_cut_off`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_pressure_cut_off`')
        self._data["Low Pressure Cut Off"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class DistrictCooling(object):
    """ Corresponds to IDD object `DistrictCooling`
        Centralized source of chilled water, such as a district cooling system.
    """
    internal_name = "DistrictCooling"
    field_count = 5
    required_fields = ["Name", "Chilled Water Inlet Node Name", "Chilled Water Outlet Node Name", "Nominal Capacity"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DistrictCooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Chilled Water Inlet Node Name"] = None
        self._data["Chilled Water Outlet Node Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Capacity Fraction Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_inlet_node_name = None
        else:
            self.chilled_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_outlet_node_name = None
        else:
            self.chilled_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.capacity_fraction_schedule_name = None
        else:
            self.capacity_fraction_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def chilled_water_inlet_node_name(self):
        """Get chilled_water_inlet_node_name

        Returns:
            str: the value of `chilled_water_inlet_node_name` or None if not set
        """
        return self._data["Chilled Water Inlet Node Name"]

    @chilled_water_inlet_node_name.setter
    def chilled_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_inlet_node_name`')
        self._data["Chilled Water Inlet Node Name"] = value

    @property
    def chilled_water_outlet_node_name(self):
        """Get chilled_water_outlet_node_name

        Returns:
            str: the value of `chilled_water_outlet_node_name` or None if not set
        """
        return self._data["Chilled Water Outlet Node Name"]

    @chilled_water_outlet_node_name.setter
    def chilled_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Chilled Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Chilled Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_outlet_node_name`')
        self._data["Chilled Water Outlet Node Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def capacity_fraction_schedule_name(self):
        """Get capacity_fraction_schedule_name

        Returns:
            str: the value of `capacity_fraction_schedule_name` or None if not set
        """
        return self._data["Capacity Fraction Schedule Name"]

    @capacity_fraction_schedule_name.setter
    def capacity_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Capacity Fraction Schedule Name`
        Schedule values are multiplied by Nominal Capacity for current capacity

        Args:
            value (str): value for IDD Field `Capacity Fraction Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `capacity_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_fraction_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `capacity_fraction_schedule_name`')
        self._data["Capacity Fraction Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class DistrictHeating(object):
    """ Corresponds to IDD object `DistrictHeating`
        Centralized source of hot water, such as a district heating system.
    """
    internal_name = "DistrictHeating"
    field_count = 5
    required_fields = ["Name", "Hot Water Inlet Node Name", "Hot Water Outlet Node Name", "Nominal Capacity"]

    def __init__(self):
        """ Init data dictionary object for IDD  `DistrictHeating`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Hot Water Inlet Node Name"] = None
        self._data["Hot Water Outlet Node Name"] = None
        self._data["Nominal Capacity"] = None
        self._data["Capacity Fraction Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_inlet_node_name = None
        else:
            self.hot_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hot_water_outlet_node_name = None
        else:
            self.hot_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.capacity_fraction_schedule_name = None
        else:
            self.capacity_fraction_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def hot_water_inlet_node_name(self):
        """Get hot_water_inlet_node_name

        Returns:
            str: the value of `hot_water_inlet_node_name` or None if not set
        """
        return self._data["Hot Water Inlet Node Name"]

    @hot_water_inlet_node_name.setter
    def hot_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_inlet_node_name`')
        self._data["Hot Water Inlet Node Name"] = value

    @property
    def hot_water_outlet_node_name(self):
        """Get hot_water_outlet_node_name

        Returns:
            str: the value of `hot_water_outlet_node_name` or None if not set
        """
        return self._data["Hot Water Outlet Node Name"]

    @hot_water_outlet_node_name.setter
    def hot_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Hot Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Hot Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `hot_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hot_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hot_water_outlet_node_name`')
        self._data["Hot Water Outlet Node Name"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`

        Args:
            value (float): value for IDD Field `Nominal Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `nominal_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_capacity`')
        self._data["Nominal Capacity"] = value

    @property
    def capacity_fraction_schedule_name(self):
        """Get capacity_fraction_schedule_name

        Returns:
            str: the value of `capacity_fraction_schedule_name` or None if not set
        """
        return self._data["Capacity Fraction Schedule Name"]

    @capacity_fraction_schedule_name.setter
    def capacity_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Capacity Fraction Schedule Name`
        Schedule values are multiplied by Nominal Capacity for current capacity

        Args:
            value (str): value for IDD Field `Capacity Fraction Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `capacity_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `capacity_fraction_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `capacity_fraction_schedule_name`')
        self._data["Capacity Fraction Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class PlantComponentTemperatureSource(object):
    """ Corresponds to IDD object `PlantComponent:TemperatureSource`
        Simulates an object of pre-determined (constant or scheduled) source temperature
        The object introduces fluid into the plant loop at the specified temperature and
        at the same flow rate as the fluid enters the component
        Fluid entering the component vanishes equivalent to the relief air in an air system
    """
    internal_name = "PlantComponent:TemperatureSource"
    field_count = 7
    required_fields = ["Name", "Inlet Node", "Outlet Node", "Design Volume Flow Rate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `PlantComponent:TemperatureSource`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Inlet Node"] = None
        self._data["Outlet Node"] = None
        self._data["Design Volume Flow Rate"] = None
        self._data["Temperature Specification Type"] = None
        self._data["Source Temperature"] = None
        self._data["Source Temperature Schedule Name"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inlet_node = None
        else:
            self.inlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outlet_node = None
        else:
            self.outlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_volume_flow_rate = None
        else:
            self.design_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_specification_type = None
        else:
            self.temperature_specification_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_temperature = None
        else:
            self.source_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_temperature_schedule_name = None
        else:
            self.source_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Component Name

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def inlet_node(self):
        """Get inlet_node

        Returns:
            str: the value of `inlet_node` or None if not set
        """
        return self._data["Inlet Node"]

    @inlet_node.setter
    def inlet_node(self, value=None):
        """  Corresponds to IDD Field `Inlet Node`
        Name of the source inlet node

        Args:
            value (str): value for IDD Field `Inlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `inlet_node`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `inlet_node`')
        self._data["Inlet Node"] = value

    @property
    def outlet_node(self):
        """Get outlet_node

        Returns:
            str: the value of `outlet_node` or None if not set
        """
        return self._data["Outlet Node"]

    @outlet_node.setter
    def outlet_node(self, value=None):
        """  Corresponds to IDD Field `Outlet Node`
        Name of the source outlet node

        Args:
            value (str): value for IDD Field `Outlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outlet_node`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outlet_node`')
        self._data["Outlet Node"] = value

    @property
    def design_volume_flow_rate(self):
        """Get design_volume_flow_rate

        Returns:
            float: the value of `design_volume_flow_rate` or None if not set
        """
        return self._data["Design Volume Flow Rate"]

    @design_volume_flow_rate.setter
    def design_volume_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Volume Flow Rate`
        The design volumetric flow rate for this source

        Args:
            value (float or "Autosize"): value for IDD Field `Design Volume Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Volume Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_volume_flow_rate`'.format(value))
                    self._data["Design Volume Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_volume_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_volume_flow_rate`')
        self._data["Design Volume Flow Rate"] = value

    @property
    def temperature_specification_type(self):
        """Get temperature_specification_type

        Returns:
            str: the value of `temperature_specification_type` or None if not set
        """
        return self._data["Temperature Specification Type"]

    @temperature_specification_type.setter
    def temperature_specification_type(self, value=None):
        """  Corresponds to IDD Field `Temperature Specification Type`

        Args:
            value (str): value for IDD Field `Temperature Specification Type`
                Accepted values are:
                      - Constant
                      - Scheduled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `temperature_specification_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_specification_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_specification_type`')
            vals = {}
            vals["constant"] = "Constant"
            vals["scheduled"] = "Scheduled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `temperature_specification_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `temperature_specification_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Temperature Specification Type"] = value

    @property
    def source_temperature(self):
        """Get source_temperature

        Returns:
            float: the value of `source_temperature` or None if not set
        """
        return self._data["Source Temperature"]

    @source_temperature.setter
    def source_temperature(self, value=None):
        """  Corresponds to IDD Field `Source Temperature`
        Used if Temperature Specification Type = Constant

        Args:
            value (float): value for IDD Field `Source Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `source_temperature`'.format(value))
        self._data["Source Temperature"] = value

    @property
    def source_temperature_schedule_name(self):
        """Get source_temperature_schedule_name

        Returns:
            str: the value of `source_temperature_schedule_name` or None if not set
        """
        return self._data["Source Temperature Schedule Name"]

    @source_temperature_schedule_name.setter
    def source_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Source Temperature Schedule Name`
        Used if Temperature Specification Type = Scheduled

        Args:
            value (str): value for IDD Field `Source Temperature Schedule Name`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_temperature_schedule_name`')
        self._data["Source Temperature Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CentralHeatPumpSystem(object):
    """ Corresponds to IDD object `CentralHeatPumpSystem`
        This chiller bank can contain multiple chiller heaters and heat pump performance objects.
        Its function is to encapsulate the extra controls needed to turn individual modules on/off
        and whether they are to operate in cooling-only, heating-only or simultaneous cooling/heating
        mode and whether to connect the source water to the evaporator or condenser side.
    """
    internal_name = "CentralHeatPumpSystem"
    field_count = 90
    required_fields = ["Name", "Cooling Loop Inlet Node Name", "Cooling Loop Outlet Node Name", "Source Loop Inlet Node Name", "Source Loop Outlet Node Name", "Heating Loop Inlet Node Name", "Heating Loop Outlet Node Name", "Chiller Heater Modules Performance Component Object Type 1", "Chiller Heater Modules Performance Component Name 1", "Chiller Heater Modules Control Schedule Name 1", "Number of Chiller Heater Modules 1"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CentralHeatPumpSystem`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Control Method"] = None
        self._data["Cooling Loop Inlet Node Name"] = None
        self._data["Cooling Loop Outlet Node Name"] = None
        self._data["Source Loop Inlet Node Name"] = None
        self._data["Source Loop Outlet Node Name"] = None
        self._data["Heating Loop Inlet Node Name"] = None
        self._data["Heating Loop Outlet Node Name"] = None
        self._data["Ancillary Power"] = None
        self._data["Ancillary Operation Schedule Name"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 1"] = None
        self._data["Chiller Heater Modules Performance Component Name 1"] = None
        self._data["Chiller Heater Modules Control Schedule Name 1"] = None
        self._data["Number of Chiller Heater Modules 1"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 2"] = None
        self._data["Chiller Heater Modules Performance Component Name 2"] = None
        self._data["Chiller Heater Modules Control Schedule Name 2"] = None
        self._data["Number of Chiller Heater Modules 2"] = None
        self._data["Chiller Heater Performance Component Object Type 3"] = None
        self._data["Chiller Heater Performance Component Name 3"] = None
        self._data["Chiller Heater Modules Control Schedule Name 3"] = None
        self._data["Number of Chiller Heater Modules 3"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 4"] = None
        self._data["Chiller Heater Modules Performance Component Name 4"] = None
        self._data["Chiller Heater Modules Control Schedule Name 4"] = None
        self._data["Number of Chiller Heater Modules 4"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 5"] = None
        self._data["Chiller Heater Models Performance Component Name 5"] = None
        self._data["Chiller Heater Modules Control Schedule Name 5"] = None
        self._data["Number of Chiller Heater Modules 5"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 6"] = None
        self._data["Chiller Heater Modules Performance Component Name 6"] = None
        self._data["Chiller Heater Modules Control Schedule Name 6"] = None
        self._data["Number of Chiller Heater Modules 6"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 7"] = None
        self._data["Chiller Heater Modules Performance Component Name 7"] = None
        self._data["Chiller Heater Modules Control Schedule Name 7"] = None
        self._data["Number of Chiller Heater Modules 7"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 8"] = None
        self._data["Chiller Heater Modules Performance Component Name 8"] = None
        self._data["Chiller Heater Modules Control Schedule Name 8"] = None
        self._data["Number of Chiller Heater Modules 8"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 9"] = None
        self._data["Chiller Heater Modules Performance Component Name 9"] = None
        self._data["Chiller Heater Modules Control Schedule Name 9"] = None
        self._data["Number of Chiller Heater Modules 9"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 10"] = None
        self._data["Chiller Heater Modules Performance Component Name 10"] = None
        self._data["Chiller Heater Modules Control Schedule Name 10"] = None
        self._data["Number of Chiller Heater Modules 10"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 11"] = None
        self._data["Chiller Heater Modules Performance Component Name 11"] = None
        self._data["Chiller Heater Module Control Schedule Name 11"] = None
        self._data["Number of Chiller Heater Modules 11"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 12"] = None
        self._data["Chiller Heater Modules Performance Component Name 12"] = None
        self._data["Chiller Heater Modules Control Schedule Name 12"] = None
        self._data["Number of Chiller Heater Modules 12"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 13"] = None
        self._data["Chiller Heater Modules Performance Component Name 13"] = None
        self._data["Chiller Heater Modules Control Schedule Name 13"] = None
        self._data["Number of Chiller Heater Modules 13"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 14"] = None
        self._data["Chiller Heater Modules Performance Component Name 14"] = None
        self._data["Chiller Heater Modules Control Schedule Name 14"] = None
        self._data["Number of Chiller Heater Modules 14"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 15"] = None
        self._data["Chiller Heater Modules Performance Component Name 15"] = None
        self._data["Chiller Heater Modules Control Schedule Name 15"] = None
        self._data["Number of Chiller Heater Modules 15"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 16"] = None
        self._data["Chiller Heater Modules Performance Component Name 16"] = None
        self._data["Chiller Heater Modules Control Schedule Name 16"] = None
        self._data["Number of Chiller Heater Modules 16"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 17"] = None
        self._data["Chiller Heater Modules Performance Component Name 17"] = None
        self._data["Chiller Heater Modules Control Schedule Name 17"] = None
        self._data["Number of Chiller Heater Modules 17"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 18"] = None
        self._data["Chiller Heater Modules Performance Component Name 18"] = None
        self._data["Chiller Heater Modules Control Control Schedule Name 18"] = None
        self._data["Number of Chiller Heater Modules 18"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 19"] = None
        self._data["Chiller Heater Modules Performance Component Name 19"] = None
        self._data["Chiller Heater Modules Control Schedule Name 19"] = None
        self._data["Number of Chiller Heater Modules 19"] = None
        self._data["Chiller Heater Modules Performance Component Object Type 20"] = None
        self._data["Chiller Heater Modules Performance Component Name 20"] = None
        self._data["Chiller Heater Modules Control Schedule Name 20"] = None
        self._data["Number of Chiller Heater Modules 20"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.control_method = None
        else:
            self.control_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_loop_inlet_node_name = None
        else:
            self.cooling_loop_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_loop_outlet_node_name = None
        else:
            self.cooling_loop_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_loop_inlet_node_name = None
        else:
            self.source_loop_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_loop_outlet_node_name = None
        else:
            self.source_loop_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_loop_inlet_node_name = None
        else:
            self.heating_loop_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_loop_outlet_node_name = None
        else:
            self.heating_loop_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancillary_power = None
        else:
            self.ancillary_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancillary_operation_schedule_name = None
        else:
            self.ancillary_operation_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_1 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_1 = None
        else:
            self.chiller_heater_modules_performance_component_name_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_1 = None
        else:
            self.chiller_heater_modules_control_schedule_name_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_1 = None
        else:
            self.number_of_chiller_heater_modules_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_2 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_2 = None
        else:
            self.chiller_heater_modules_performance_component_name_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_2 = None
        else:
            self.chiller_heater_modules_control_schedule_name_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_2 = None
        else:
            self.number_of_chiller_heater_modules_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_performance_component_object_type_3 = None
        else:
            self.chiller_heater_performance_component_object_type_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_performance_component_name_3 = None
        else:
            self.chiller_heater_performance_component_name_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_3 = None
        else:
            self.chiller_heater_modules_control_schedule_name_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_3 = None
        else:
            self.number_of_chiller_heater_modules_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_4 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_4 = None
        else:
            self.chiller_heater_modules_performance_component_name_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_4 = None
        else:
            self.chiller_heater_modules_control_schedule_name_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_4 = None
        else:
            self.number_of_chiller_heater_modules_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_5 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_models_performance_component_name_5 = None
        else:
            self.chiller_heater_models_performance_component_name_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_5 = None
        else:
            self.chiller_heater_modules_control_schedule_name_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_5 = None
        else:
            self.number_of_chiller_heater_modules_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_6 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_6 = None
        else:
            self.chiller_heater_modules_performance_component_name_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_6 = None
        else:
            self.chiller_heater_modules_control_schedule_name_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_6 = None
        else:
            self.number_of_chiller_heater_modules_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_7 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_7 = None
        else:
            self.chiller_heater_modules_performance_component_name_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_7 = None
        else:
            self.chiller_heater_modules_control_schedule_name_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_7 = None
        else:
            self.number_of_chiller_heater_modules_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_8 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_8 = None
        else:
            self.chiller_heater_modules_performance_component_name_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_8 = None
        else:
            self.chiller_heater_modules_control_schedule_name_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_8 = None
        else:
            self.number_of_chiller_heater_modules_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_9 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_9 = None
        else:
            self.chiller_heater_modules_performance_component_name_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_9 = None
        else:
            self.chiller_heater_modules_control_schedule_name_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_9 = None
        else:
            self.number_of_chiller_heater_modules_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_10 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_10 = None
        else:
            self.chiller_heater_modules_performance_component_name_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_10 = None
        else:
            self.chiller_heater_modules_control_schedule_name_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_10 = None
        else:
            self.number_of_chiller_heater_modules_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_11 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_11 = None
        else:
            self.chiller_heater_modules_performance_component_name_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_module_control_schedule_name_11 = None
        else:
            self.chiller_heater_module_control_schedule_name_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_11 = None
        else:
            self.number_of_chiller_heater_modules_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_12 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_12 = None
        else:
            self.chiller_heater_modules_performance_component_name_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_12 = None
        else:
            self.chiller_heater_modules_control_schedule_name_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_12 = None
        else:
            self.number_of_chiller_heater_modules_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_13 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_13 = None
        else:
            self.chiller_heater_modules_performance_component_name_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_13 = None
        else:
            self.chiller_heater_modules_control_schedule_name_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_13 = None
        else:
            self.number_of_chiller_heater_modules_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_14 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_14 = None
        else:
            self.chiller_heater_modules_performance_component_name_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_14 = None
        else:
            self.chiller_heater_modules_control_schedule_name_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_14 = None
        else:
            self.number_of_chiller_heater_modules_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_15 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_15 = None
        else:
            self.chiller_heater_modules_performance_component_name_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_15 = None
        else:
            self.chiller_heater_modules_control_schedule_name_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_15 = None
        else:
            self.number_of_chiller_heater_modules_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_16 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_16 = None
        else:
            self.chiller_heater_modules_performance_component_name_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_16 = None
        else:
            self.chiller_heater_modules_control_schedule_name_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_16 = None
        else:
            self.number_of_chiller_heater_modules_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_17 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_17 = None
        else:
            self.chiller_heater_modules_performance_component_name_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_17 = None
        else:
            self.chiller_heater_modules_control_schedule_name_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_17 = None
        else:
            self.number_of_chiller_heater_modules_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_18 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_18 = None
        else:
            self.chiller_heater_modules_performance_component_name_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_control_schedule_name_18 = None
        else:
            self.chiller_heater_modules_control_control_schedule_name_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_18 = None
        else:
            self.number_of_chiller_heater_modules_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_19 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_19 = None
        else:
            self.chiller_heater_modules_performance_component_name_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_19 = None
        else:
            self.chiller_heater_modules_control_schedule_name_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_19 = None
        else:
            self.number_of_chiller_heater_modules_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_object_type_20 = None
        else:
            self.chiller_heater_modules_performance_component_object_type_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_performance_component_name_20 = None
        else:
            self.chiller_heater_modules_performance_component_name_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chiller_heater_modules_control_schedule_name_20 = None
        else:
            self.chiller_heater_modules_control_schedule_name_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_chiller_heater_modules_20 = None
        else:
            self.number_of_chiller_heater_modules_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def control_method(self):
        """Get control_method

        Returns:
            str: the value of `control_method` or None if not set
        """
        return self._data["Control Method"]

    @control_method.setter
    def control_method(self, value="SmartMixing"):
        """  Corresponds to IDD Field `Control Method`

        Args:
            value (str): value for IDD Field `Control Method`
                Accepted values are:
                      - SmartMixing
                Default value: SmartMixing
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `control_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `control_method`')
            vals = {}
            vals["smartmixing"] = "SmartMixing"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `control_method`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `control_method`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Control Method"] = value

    @property
    def cooling_loop_inlet_node_name(self):
        """Get cooling_loop_inlet_node_name

        Returns:
            str: the value of `cooling_loop_inlet_node_name` or None if not set
        """
        return self._data["Cooling Loop Inlet Node Name"]

    @cooling_loop_inlet_node_name.setter
    def cooling_loop_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Loop Inlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Loop Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_loop_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_loop_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_loop_inlet_node_name`')
        self._data["Cooling Loop Inlet Node Name"] = value

    @property
    def cooling_loop_outlet_node_name(self):
        """Get cooling_loop_outlet_node_name

        Returns:
            str: the value of `cooling_loop_outlet_node_name` or None if not set
        """
        return self._data["Cooling Loop Outlet Node Name"]

    @cooling_loop_outlet_node_name.setter
    def cooling_loop_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Loop Outlet Node Name`

        Args:
            value (str): value for IDD Field `Cooling Loop Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_loop_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_loop_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_loop_outlet_node_name`')
        self._data["Cooling Loop Outlet Node Name"] = value

    @property
    def source_loop_inlet_node_name(self):
        """Get source_loop_inlet_node_name

        Returns:
            str: the value of `source_loop_inlet_node_name` or None if not set
        """
        return self._data["Source Loop Inlet Node Name"]

    @source_loop_inlet_node_name.setter
    def source_loop_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Loop Inlet Node Name`

        Args:
            value (str): value for IDD Field `Source Loop Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_loop_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_loop_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_loop_inlet_node_name`')
        self._data["Source Loop Inlet Node Name"] = value

    @property
    def source_loop_outlet_node_name(self):
        """Get source_loop_outlet_node_name

        Returns:
            str: the value of `source_loop_outlet_node_name` or None if not set
        """
        return self._data["Source Loop Outlet Node Name"]

    @source_loop_outlet_node_name.setter
    def source_loop_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Source Loop Outlet Node Name`

        Args:
            value (str): value for IDD Field `Source Loop Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `source_loop_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_loop_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_loop_outlet_node_name`')
        self._data["Source Loop Outlet Node Name"] = value

    @property
    def heating_loop_inlet_node_name(self):
        """Get heating_loop_inlet_node_name

        Returns:
            str: the value of `heating_loop_inlet_node_name` or None if not set
        """
        return self._data["Heating Loop Inlet Node Name"]

    @heating_loop_inlet_node_name.setter
    def heating_loop_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heating Loop Inlet Node Name`

        Args:
            value (str): value for IDD Field `Heating Loop Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_loop_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_loop_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_loop_inlet_node_name`')
        self._data["Heating Loop Inlet Node Name"] = value

    @property
    def heating_loop_outlet_node_name(self):
        """Get heating_loop_outlet_node_name

        Returns:
            str: the value of `heating_loop_outlet_node_name` or None if not set
        """
        return self._data["Heating Loop Outlet Node Name"]

    @heating_loop_outlet_node_name.setter
    def heating_loop_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Heating Loop Outlet Node Name`

        Args:
            value (str): value for IDD Field `Heating Loop Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_loop_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_loop_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_loop_outlet_node_name`')
        self._data["Heating Loop Outlet Node Name"] = value

    @property
    def ancillary_power(self):
        """Get ancillary_power

        Returns:
            float: the value of `ancillary_power` or None if not set
        """
        return self._data["Ancillary Power"]

    @ancillary_power.setter
    def ancillary_power(self, value=0.0):
        """  Corresponds to IDD Field `Ancillary Power`
        Power as demanded from any auxiliary controls

        Args:
            value (float): value for IDD Field `Ancillary Power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `ancillary_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancillary_power`')
        self._data["Ancillary Power"] = value

    @property
    def ancillary_operation_schedule_name(self):
        """Get ancillary_operation_schedule_name

        Returns:
            str: the value of `ancillary_operation_schedule_name` or None if not set
        """
        return self._data["Ancillary Operation Schedule Name"]

    @ancillary_operation_schedule_name.setter
    def ancillary_operation_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Ancillary Operation Schedule Name`
        This value from this schedule is multiplied times the Ancilliary Power

        Args:
            value (str): value for IDD Field `Ancillary Operation Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `ancillary_operation_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ancillary_operation_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `ancillary_operation_schedule_name`')
        self._data["Ancillary Operation Schedule Name"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_1(self):
        """Get chiller_heater_modules_performance_component_object_type_1

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_1` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 1"]

    @chiller_heater_modules_performance_component_object_type_1.setter
    def chiller_heater_modules_performance_component_object_type_1(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 1`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 1`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_1`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_1`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_1`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 1"] = value

    @property
    def chiller_heater_modules_performance_component_name_1(self):
        """Get chiller_heater_modules_performance_component_name_1

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_1` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 1"]

    @chiller_heater_modules_performance_component_name_1.setter
    def chiller_heater_modules_performance_component_name_1(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 1`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_1`')
        self._data["Chiller Heater Modules Performance Component Name 1"] = value

    @property
    def chiller_heater_modules_control_schedule_name_1(self):
        """Get chiller_heater_modules_control_schedule_name_1

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_1` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 1"]

    @chiller_heater_modules_control_schedule_name_1.setter
    def chiller_heater_modules_control_schedule_name_1(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 1`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_1`')
        self._data["Chiller Heater Modules Control Schedule Name 1"] = value

    @property
    def number_of_chiller_heater_modules_1(self):
        """Get number_of_chiller_heater_modules_1

        Returns:
            int: the value of `number_of_chiller_heater_modules_1` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 1"]

    @number_of_chiller_heater_modules_1.setter
    def number_of_chiller_heater_modules_1(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 1`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 1`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_1`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_1`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_1`')
        self._data["Number of Chiller Heater Modules 1"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_2(self):
        """Get chiller_heater_modules_performance_component_object_type_2

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_2` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 2"]

    @chiller_heater_modules_performance_component_object_type_2.setter
    def chiller_heater_modules_performance_component_object_type_2(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 2`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 2`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_2`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_2`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_2`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 2"] = value

    @property
    def chiller_heater_modules_performance_component_name_2(self):
        """Get chiller_heater_modules_performance_component_name_2

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_2` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 2"]

    @chiller_heater_modules_performance_component_name_2.setter
    def chiller_heater_modules_performance_component_name_2(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 2`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_2`')
        self._data["Chiller Heater Modules Performance Component Name 2"] = value

    @property
    def chiller_heater_modules_control_schedule_name_2(self):
        """Get chiller_heater_modules_control_schedule_name_2

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_2` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 2"]

    @chiller_heater_modules_control_schedule_name_2.setter
    def chiller_heater_modules_control_schedule_name_2(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 2`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_2`')
        self._data["Chiller Heater Modules Control Schedule Name 2"] = value

    @property
    def number_of_chiller_heater_modules_2(self):
        """Get number_of_chiller_heater_modules_2

        Returns:
            int: the value of `number_of_chiller_heater_modules_2` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 2"]

    @number_of_chiller_heater_modules_2.setter
    def number_of_chiller_heater_modules_2(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 2`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 2`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_2`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_2`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_2`')
        self._data["Number of Chiller Heater Modules 2"] = value

    @property
    def chiller_heater_performance_component_object_type_3(self):
        """Get chiller_heater_performance_component_object_type_3

        Returns:
            str: the value of `chiller_heater_performance_component_object_type_3` or None if not set
        """
        return self._data["Chiller Heater Performance Component Object Type 3"]

    @chiller_heater_performance_component_object_type_3.setter
    def chiller_heater_performance_component_object_type_3(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Performance Component Object Type 3`

        Args:
            value (str): value for IDD Field `Chiller Heater Performance Component Object Type 3`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_performance_component_object_type_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_performance_component_object_type_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_performance_component_object_type_3`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_performance_component_object_type_3`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_performance_component_object_type_3`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Performance Component Object Type 3"] = value

    @property
    def chiller_heater_performance_component_name_3(self):
        """Get chiller_heater_performance_component_name_3

        Returns:
            str: the value of `chiller_heater_performance_component_name_3` or None if not set
        """
        return self._data["Chiller Heater Performance Component Name 3"]

    @chiller_heater_performance_component_name_3.setter
    def chiller_heater_performance_component_name_3(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Performance Component Name 3`

        Args:
            value (str): value for IDD Field `Chiller Heater Performance Component Name 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_performance_component_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_performance_component_name_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_performance_component_name_3`')
        self._data["Chiller Heater Performance Component Name 3"] = value

    @property
    def chiller_heater_modules_control_schedule_name_3(self):
        """Get chiller_heater_modules_control_schedule_name_3

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_3` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 3"]

    @chiller_heater_modules_control_schedule_name_3.setter
    def chiller_heater_modules_control_schedule_name_3(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 3`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_3`')
        self._data["Chiller Heater Modules Control Schedule Name 3"] = value

    @property
    def number_of_chiller_heater_modules_3(self):
        """Get number_of_chiller_heater_modules_3

        Returns:
            int: the value of `number_of_chiller_heater_modules_3` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 3"]

    @number_of_chiller_heater_modules_3.setter
    def number_of_chiller_heater_modules_3(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 3`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 3`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_3`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_3`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_3`')
        self._data["Number of Chiller Heater Modules 3"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_4(self):
        """Get chiller_heater_modules_performance_component_object_type_4

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_4` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 4"]

    @chiller_heater_modules_performance_component_object_type_4.setter
    def chiller_heater_modules_performance_component_object_type_4(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 4`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 4`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_4`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_4`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_4`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 4"] = value

    @property
    def chiller_heater_modules_performance_component_name_4(self):
        """Get chiller_heater_modules_performance_component_name_4

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_4` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 4"]

    @chiller_heater_modules_performance_component_name_4.setter
    def chiller_heater_modules_performance_component_name_4(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 4`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_4`')
        self._data["Chiller Heater Modules Performance Component Name 4"] = value

    @property
    def chiller_heater_modules_control_schedule_name_4(self):
        """Get chiller_heater_modules_control_schedule_name_4

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_4` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 4"]

    @chiller_heater_modules_control_schedule_name_4.setter
    def chiller_heater_modules_control_schedule_name_4(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 4`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_4`')
        self._data["Chiller Heater Modules Control Schedule Name 4"] = value

    @property
    def number_of_chiller_heater_modules_4(self):
        """Get number_of_chiller_heater_modules_4

        Returns:
            int: the value of `number_of_chiller_heater_modules_4` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 4"]

    @number_of_chiller_heater_modules_4.setter
    def number_of_chiller_heater_modules_4(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 4`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 4`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_4`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_4`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_4`')
        self._data["Number of Chiller Heater Modules 4"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_5(self):
        """Get chiller_heater_modules_performance_component_object_type_5

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_5` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 5"]

    @chiller_heater_modules_performance_component_object_type_5.setter
    def chiller_heater_modules_performance_component_object_type_5(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 5`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 5`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_5`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_5`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_5`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 5"] = value

    @property
    def chiller_heater_models_performance_component_name_5(self):
        """Get chiller_heater_models_performance_component_name_5

        Returns:
            str: the value of `chiller_heater_models_performance_component_name_5` or None if not set
        """
        return self._data["Chiller Heater Models Performance Component Name 5"]

    @chiller_heater_models_performance_component_name_5.setter
    def chiller_heater_models_performance_component_name_5(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Models Performance Component Name 5`

        Args:
            value (str): value for IDD Field `Chiller Heater Models Performance Component Name 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_models_performance_component_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_models_performance_component_name_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_models_performance_component_name_5`')
        self._data["Chiller Heater Models Performance Component Name 5"] = value

    @property
    def chiller_heater_modules_control_schedule_name_5(self):
        """Get chiller_heater_modules_control_schedule_name_5

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_5` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 5"]

    @chiller_heater_modules_control_schedule_name_5.setter
    def chiller_heater_modules_control_schedule_name_5(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 5`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_5`')
        self._data["Chiller Heater Modules Control Schedule Name 5"] = value

    @property
    def number_of_chiller_heater_modules_5(self):
        """Get number_of_chiller_heater_modules_5

        Returns:
            int: the value of `number_of_chiller_heater_modules_5` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 5"]

    @number_of_chiller_heater_modules_5.setter
    def number_of_chiller_heater_modules_5(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 5`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 5`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_5`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_5`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_5`')
        self._data["Number of Chiller Heater Modules 5"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_6(self):
        """Get chiller_heater_modules_performance_component_object_type_6

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_6` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 6"]

    @chiller_heater_modules_performance_component_object_type_6.setter
    def chiller_heater_modules_performance_component_object_type_6(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 6`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 6`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_6`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_6`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_6`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 6"] = value

    @property
    def chiller_heater_modules_performance_component_name_6(self):
        """Get chiller_heater_modules_performance_component_name_6

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_6` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 6"]

    @chiller_heater_modules_performance_component_name_6.setter
    def chiller_heater_modules_performance_component_name_6(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 6`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_6`')
        self._data["Chiller Heater Modules Performance Component Name 6"] = value

    @property
    def chiller_heater_modules_control_schedule_name_6(self):
        """Get chiller_heater_modules_control_schedule_name_6

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_6` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 6"]

    @chiller_heater_modules_control_schedule_name_6.setter
    def chiller_heater_modules_control_schedule_name_6(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 6`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_6`')
        self._data["Chiller Heater Modules Control Schedule Name 6"] = value

    @property
    def number_of_chiller_heater_modules_6(self):
        """Get number_of_chiller_heater_modules_6

        Returns:
            int: the value of `number_of_chiller_heater_modules_6` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 6"]

    @number_of_chiller_heater_modules_6.setter
    def number_of_chiller_heater_modules_6(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 6`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 6`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_6`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_6`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_6`')
        self._data["Number of Chiller Heater Modules 6"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_7(self):
        """Get chiller_heater_modules_performance_component_object_type_7

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_7` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 7"]

    @chiller_heater_modules_performance_component_object_type_7.setter
    def chiller_heater_modules_performance_component_object_type_7(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 7`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 7`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_7`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_7`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_7`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 7"] = value

    @property
    def chiller_heater_modules_performance_component_name_7(self):
        """Get chiller_heater_modules_performance_component_name_7

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_7` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 7"]

    @chiller_heater_modules_performance_component_name_7.setter
    def chiller_heater_modules_performance_component_name_7(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 7`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_7`')
        self._data["Chiller Heater Modules Performance Component Name 7"] = value

    @property
    def chiller_heater_modules_control_schedule_name_7(self):
        """Get chiller_heater_modules_control_schedule_name_7

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_7` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 7"]

    @chiller_heater_modules_control_schedule_name_7.setter
    def chiller_heater_modules_control_schedule_name_7(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 7`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_7`')
        self._data["Chiller Heater Modules Control Schedule Name 7"] = value

    @property
    def number_of_chiller_heater_modules_7(self):
        """Get number_of_chiller_heater_modules_7

        Returns:
            int: the value of `number_of_chiller_heater_modules_7` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 7"]

    @number_of_chiller_heater_modules_7.setter
    def number_of_chiller_heater_modules_7(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 7`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 7`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_7`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_7`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_7`')
        self._data["Number of Chiller Heater Modules 7"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_8(self):
        """Get chiller_heater_modules_performance_component_object_type_8

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_8` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 8"]

    @chiller_heater_modules_performance_component_object_type_8.setter
    def chiller_heater_modules_performance_component_object_type_8(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 8`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 8`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_8`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_8`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_8`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 8"] = value

    @property
    def chiller_heater_modules_performance_component_name_8(self):
        """Get chiller_heater_modules_performance_component_name_8

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_8` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 8"]

    @chiller_heater_modules_performance_component_name_8.setter
    def chiller_heater_modules_performance_component_name_8(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 8`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_8`')
        self._data["Chiller Heater Modules Performance Component Name 8"] = value

    @property
    def chiller_heater_modules_control_schedule_name_8(self):
        """Get chiller_heater_modules_control_schedule_name_8

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_8` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 8"]

    @chiller_heater_modules_control_schedule_name_8.setter
    def chiller_heater_modules_control_schedule_name_8(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 8`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_8`')
        self._data["Chiller Heater Modules Control Schedule Name 8"] = value

    @property
    def number_of_chiller_heater_modules_8(self):
        """Get number_of_chiller_heater_modules_8

        Returns:
            int: the value of `number_of_chiller_heater_modules_8` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 8"]

    @number_of_chiller_heater_modules_8.setter
    def number_of_chiller_heater_modules_8(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 8`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 8`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_8`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_8`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_8`')
        self._data["Number of Chiller Heater Modules 8"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_9(self):
        """Get chiller_heater_modules_performance_component_object_type_9

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_9` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 9"]

    @chiller_heater_modules_performance_component_object_type_9.setter
    def chiller_heater_modules_performance_component_object_type_9(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 9`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 9`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_9`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_9`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_9`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 9"] = value

    @property
    def chiller_heater_modules_performance_component_name_9(self):
        """Get chiller_heater_modules_performance_component_name_9

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_9` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 9"]

    @chiller_heater_modules_performance_component_name_9.setter
    def chiller_heater_modules_performance_component_name_9(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 9`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_9`')
        self._data["Chiller Heater Modules Performance Component Name 9"] = value

    @property
    def chiller_heater_modules_control_schedule_name_9(self):
        """Get chiller_heater_modules_control_schedule_name_9

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_9` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 9"]

    @chiller_heater_modules_control_schedule_name_9.setter
    def chiller_heater_modules_control_schedule_name_9(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 9`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_9`')
        self._data["Chiller Heater Modules Control Schedule Name 9"] = value

    @property
    def number_of_chiller_heater_modules_9(self):
        """Get number_of_chiller_heater_modules_9

        Returns:
            int: the value of `number_of_chiller_heater_modules_9` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 9"]

    @number_of_chiller_heater_modules_9.setter
    def number_of_chiller_heater_modules_9(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 9`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 9`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_9`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_9`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_9`')
        self._data["Number of Chiller Heater Modules 9"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_10(self):
        """Get chiller_heater_modules_performance_component_object_type_10

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_10` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 10"]

    @chiller_heater_modules_performance_component_object_type_10.setter
    def chiller_heater_modules_performance_component_object_type_10(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 10`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 10`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_10`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_10`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_10`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 10"] = value

    @property
    def chiller_heater_modules_performance_component_name_10(self):
        """Get chiller_heater_modules_performance_component_name_10

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_10` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 10"]

    @chiller_heater_modules_performance_component_name_10.setter
    def chiller_heater_modules_performance_component_name_10(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 10`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_10`')
        self._data["Chiller Heater Modules Performance Component Name 10"] = value

    @property
    def chiller_heater_modules_control_schedule_name_10(self):
        """Get chiller_heater_modules_control_schedule_name_10

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_10` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 10"]

    @chiller_heater_modules_control_schedule_name_10.setter
    def chiller_heater_modules_control_schedule_name_10(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 10`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_10`')
        self._data["Chiller Heater Modules Control Schedule Name 10"] = value

    @property
    def number_of_chiller_heater_modules_10(self):
        """Get number_of_chiller_heater_modules_10

        Returns:
            int: the value of `number_of_chiller_heater_modules_10` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 10"]

    @number_of_chiller_heater_modules_10.setter
    def number_of_chiller_heater_modules_10(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 10`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 10`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_10`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_10`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_10`')
        self._data["Number of Chiller Heater Modules 10"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_11(self):
        """Get chiller_heater_modules_performance_component_object_type_11

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_11` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 11"]

    @chiller_heater_modules_performance_component_object_type_11.setter
    def chiller_heater_modules_performance_component_object_type_11(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 11`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 11`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_11`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_11`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_11`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 11"] = value

    @property
    def chiller_heater_modules_performance_component_name_11(self):
        """Get chiller_heater_modules_performance_component_name_11

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_11` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 11"]

    @chiller_heater_modules_performance_component_name_11.setter
    def chiller_heater_modules_performance_component_name_11(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 11`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_11`')
        self._data["Chiller Heater Modules Performance Component Name 11"] = value

    @property
    def chiller_heater_module_control_schedule_name_11(self):
        """Get chiller_heater_module_control_schedule_name_11

        Returns:
            str: the value of `chiller_heater_module_control_schedule_name_11` or None if not set
        """
        return self._data["Chiller Heater Module Control Schedule Name 11"]

    @chiller_heater_module_control_schedule_name_11.setter
    def chiller_heater_module_control_schedule_name_11(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Module Control Schedule Name 11`

        Args:
            value (str): value for IDD Field `Chiller Heater Module Control Schedule Name 11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_module_control_schedule_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_module_control_schedule_name_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_module_control_schedule_name_11`')
        self._data["Chiller Heater Module Control Schedule Name 11"] = value

    @property
    def number_of_chiller_heater_modules_11(self):
        """Get number_of_chiller_heater_modules_11

        Returns:
            int: the value of `number_of_chiller_heater_modules_11` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 11"]

    @number_of_chiller_heater_modules_11.setter
    def number_of_chiller_heater_modules_11(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 11`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 11`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_11`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_11`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_11`')
        self._data["Number of Chiller Heater Modules 11"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_12(self):
        """Get chiller_heater_modules_performance_component_object_type_12

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_12` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 12"]

    @chiller_heater_modules_performance_component_object_type_12.setter
    def chiller_heater_modules_performance_component_object_type_12(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 12`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 12`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_12`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_12`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_12`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 12"] = value

    @property
    def chiller_heater_modules_performance_component_name_12(self):
        """Get chiller_heater_modules_performance_component_name_12

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_12` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 12"]

    @chiller_heater_modules_performance_component_name_12.setter
    def chiller_heater_modules_performance_component_name_12(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 12`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_12`')
        self._data["Chiller Heater Modules Performance Component Name 12"] = value

    @property
    def chiller_heater_modules_control_schedule_name_12(self):
        """Get chiller_heater_modules_control_schedule_name_12

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_12` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 12"]

    @chiller_heater_modules_control_schedule_name_12.setter
    def chiller_heater_modules_control_schedule_name_12(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 12`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_12`')
        self._data["Chiller Heater Modules Control Schedule Name 12"] = value

    @property
    def number_of_chiller_heater_modules_12(self):
        """Get number_of_chiller_heater_modules_12

        Returns:
            int: the value of `number_of_chiller_heater_modules_12` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 12"]

    @number_of_chiller_heater_modules_12.setter
    def number_of_chiller_heater_modules_12(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 12`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 12`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_12`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_12`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_12`')
        self._data["Number of Chiller Heater Modules 12"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_13(self):
        """Get chiller_heater_modules_performance_component_object_type_13

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_13` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 13"]

    @chiller_heater_modules_performance_component_object_type_13.setter
    def chiller_heater_modules_performance_component_object_type_13(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 13`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 13`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_13`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_13`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_13`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 13"] = value

    @property
    def chiller_heater_modules_performance_component_name_13(self):
        """Get chiller_heater_modules_performance_component_name_13

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_13` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 13"]

    @chiller_heater_modules_performance_component_name_13.setter
    def chiller_heater_modules_performance_component_name_13(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 13`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_13`')
        self._data["Chiller Heater Modules Performance Component Name 13"] = value

    @property
    def chiller_heater_modules_control_schedule_name_13(self):
        """Get chiller_heater_modules_control_schedule_name_13

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_13` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 13"]

    @chiller_heater_modules_control_schedule_name_13.setter
    def chiller_heater_modules_control_schedule_name_13(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 13`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_13`')
        self._data["Chiller Heater Modules Control Schedule Name 13"] = value

    @property
    def number_of_chiller_heater_modules_13(self):
        """Get number_of_chiller_heater_modules_13

        Returns:
            int: the value of `number_of_chiller_heater_modules_13` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 13"]

    @number_of_chiller_heater_modules_13.setter
    def number_of_chiller_heater_modules_13(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 13`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 13`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_13`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_13`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_13`')
        self._data["Number of Chiller Heater Modules 13"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_14(self):
        """Get chiller_heater_modules_performance_component_object_type_14

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_14` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 14"]

    @chiller_heater_modules_performance_component_object_type_14.setter
    def chiller_heater_modules_performance_component_object_type_14(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 14`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 14`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_14`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_14`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_14`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 14"] = value

    @property
    def chiller_heater_modules_performance_component_name_14(self):
        """Get chiller_heater_modules_performance_component_name_14

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_14` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 14"]

    @chiller_heater_modules_performance_component_name_14.setter
    def chiller_heater_modules_performance_component_name_14(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 14`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_14`')
        self._data["Chiller Heater Modules Performance Component Name 14"] = value

    @property
    def chiller_heater_modules_control_schedule_name_14(self):
        """Get chiller_heater_modules_control_schedule_name_14

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_14` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 14"]

    @chiller_heater_modules_control_schedule_name_14.setter
    def chiller_heater_modules_control_schedule_name_14(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 14`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_14`')
        self._data["Chiller Heater Modules Control Schedule Name 14"] = value

    @property
    def number_of_chiller_heater_modules_14(self):
        """Get number_of_chiller_heater_modules_14

        Returns:
            int: the value of `number_of_chiller_heater_modules_14` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 14"]

    @number_of_chiller_heater_modules_14.setter
    def number_of_chiller_heater_modules_14(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 14`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 14`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_14`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_14`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_14`')
        self._data["Number of Chiller Heater Modules 14"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_15(self):
        """Get chiller_heater_modules_performance_component_object_type_15

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_15` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 15"]

    @chiller_heater_modules_performance_component_object_type_15.setter
    def chiller_heater_modules_performance_component_object_type_15(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 15`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 15`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_15`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_15`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_15`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 15"] = value

    @property
    def chiller_heater_modules_performance_component_name_15(self):
        """Get chiller_heater_modules_performance_component_name_15

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_15` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 15"]

    @chiller_heater_modules_performance_component_name_15.setter
    def chiller_heater_modules_performance_component_name_15(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 15`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_15`')
        self._data["Chiller Heater Modules Performance Component Name 15"] = value

    @property
    def chiller_heater_modules_control_schedule_name_15(self):
        """Get chiller_heater_modules_control_schedule_name_15

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_15` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 15"]

    @chiller_heater_modules_control_schedule_name_15.setter
    def chiller_heater_modules_control_schedule_name_15(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 15`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_15`')
        self._data["Chiller Heater Modules Control Schedule Name 15"] = value

    @property
    def number_of_chiller_heater_modules_15(self):
        """Get number_of_chiller_heater_modules_15

        Returns:
            int: the value of `number_of_chiller_heater_modules_15` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 15"]

    @number_of_chiller_heater_modules_15.setter
    def number_of_chiller_heater_modules_15(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 15`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 15`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_15`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_15`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_15`')
        self._data["Number of Chiller Heater Modules 15"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_16(self):
        """Get chiller_heater_modules_performance_component_object_type_16

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_16` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 16"]

    @chiller_heater_modules_performance_component_object_type_16.setter
    def chiller_heater_modules_performance_component_object_type_16(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 16`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 16`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_16`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_16`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_16`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 16"] = value

    @property
    def chiller_heater_modules_performance_component_name_16(self):
        """Get chiller_heater_modules_performance_component_name_16

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_16` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 16"]

    @chiller_heater_modules_performance_component_name_16.setter
    def chiller_heater_modules_performance_component_name_16(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 16`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_16`')
        self._data["Chiller Heater Modules Performance Component Name 16"] = value

    @property
    def chiller_heater_modules_control_schedule_name_16(self):
        """Get chiller_heater_modules_control_schedule_name_16

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_16` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 16"]

    @chiller_heater_modules_control_schedule_name_16.setter
    def chiller_heater_modules_control_schedule_name_16(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 16`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_16`')
        self._data["Chiller Heater Modules Control Schedule Name 16"] = value

    @property
    def number_of_chiller_heater_modules_16(self):
        """Get number_of_chiller_heater_modules_16

        Returns:
            int: the value of `number_of_chiller_heater_modules_16` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 16"]

    @number_of_chiller_heater_modules_16.setter
    def number_of_chiller_heater_modules_16(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 16`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 16`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_16`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_16`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_16`')
        self._data["Number of Chiller Heater Modules 16"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_17(self):
        """Get chiller_heater_modules_performance_component_object_type_17

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_17` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 17"]

    @chiller_heater_modules_performance_component_object_type_17.setter
    def chiller_heater_modules_performance_component_object_type_17(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 17`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 17`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_17`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_17`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_17`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 17"] = value

    @property
    def chiller_heater_modules_performance_component_name_17(self):
        """Get chiller_heater_modules_performance_component_name_17

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_17` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 17"]

    @chiller_heater_modules_performance_component_name_17.setter
    def chiller_heater_modules_performance_component_name_17(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 17`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_17`')
        self._data["Chiller Heater Modules Performance Component Name 17"] = value

    @property
    def chiller_heater_modules_control_schedule_name_17(self):
        """Get chiller_heater_modules_control_schedule_name_17

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_17` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 17"]

    @chiller_heater_modules_control_schedule_name_17.setter
    def chiller_heater_modules_control_schedule_name_17(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 17`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_17`')
        self._data["Chiller Heater Modules Control Schedule Name 17"] = value

    @property
    def number_of_chiller_heater_modules_17(self):
        """Get number_of_chiller_heater_modules_17

        Returns:
            int: the value of `number_of_chiller_heater_modules_17` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 17"]

    @number_of_chiller_heater_modules_17.setter
    def number_of_chiller_heater_modules_17(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 17`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 17`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_17`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_17`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_17`')
        self._data["Number of Chiller Heater Modules 17"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_18(self):
        """Get chiller_heater_modules_performance_component_object_type_18

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_18` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 18"]

    @chiller_heater_modules_performance_component_object_type_18.setter
    def chiller_heater_modules_performance_component_object_type_18(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 18`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 18`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_18`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_18`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_18`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 18"] = value

    @property
    def chiller_heater_modules_performance_component_name_18(self):
        """Get chiller_heater_modules_performance_component_name_18

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_18` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 18"]

    @chiller_heater_modules_performance_component_name_18.setter
    def chiller_heater_modules_performance_component_name_18(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 18`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_18`')
        self._data["Chiller Heater Modules Performance Component Name 18"] = value

    @property
    def chiller_heater_modules_control_control_schedule_name_18(self):
        """Get chiller_heater_modules_control_control_schedule_name_18

        Returns:
            str: the value of `chiller_heater_modules_control_control_schedule_name_18` or None if not set
        """
        return self._data["Chiller Heater Modules Control Control Schedule Name 18"]

    @chiller_heater_modules_control_control_schedule_name_18.setter
    def chiller_heater_modules_control_control_schedule_name_18(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Control Schedule Name 18`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Control Schedule Name 18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_control_schedule_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_control_schedule_name_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_control_schedule_name_18`')
        self._data["Chiller Heater Modules Control Control Schedule Name 18"] = value

    @property
    def number_of_chiller_heater_modules_18(self):
        """Get number_of_chiller_heater_modules_18

        Returns:
            int: the value of `number_of_chiller_heater_modules_18` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 18"]

    @number_of_chiller_heater_modules_18.setter
    def number_of_chiller_heater_modules_18(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 18`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 18`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_18`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_18`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_18`')
        self._data["Number of Chiller Heater Modules 18"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_19(self):
        """Get chiller_heater_modules_performance_component_object_type_19

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_19` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 19"]

    @chiller_heater_modules_performance_component_object_type_19.setter
    def chiller_heater_modules_performance_component_object_type_19(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 19`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 19`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_19`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_19`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_19`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 19"] = value

    @property
    def chiller_heater_modules_performance_component_name_19(self):
        """Get chiller_heater_modules_performance_component_name_19

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_19` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 19"]

    @chiller_heater_modules_performance_component_name_19.setter
    def chiller_heater_modules_performance_component_name_19(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 19`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_19`')
        self._data["Chiller Heater Modules Performance Component Name 19"] = value

    @property
    def chiller_heater_modules_control_schedule_name_19(self):
        """Get chiller_heater_modules_control_schedule_name_19

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_19` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 19"]

    @chiller_heater_modules_control_schedule_name_19.setter
    def chiller_heater_modules_control_schedule_name_19(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 19`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_19`')
        self._data["Chiller Heater Modules Control Schedule Name 19"] = value

    @property
    def number_of_chiller_heater_modules_19(self):
        """Get number_of_chiller_heater_modules_19

        Returns:
            int: the value of `number_of_chiller_heater_modules_19` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 19"]

    @number_of_chiller_heater_modules_19.setter
    def number_of_chiller_heater_modules_19(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 19`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 19`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_19`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_19`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_19`')
        self._data["Number of Chiller Heater Modules 19"] = value

    @property
    def chiller_heater_modules_performance_component_object_type_20(self):
        """Get chiller_heater_modules_performance_component_object_type_20

        Returns:
            str: the value of `chiller_heater_modules_performance_component_object_type_20` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Object Type 20"]

    @chiller_heater_modules_performance_component_object_type_20.setter
    def chiller_heater_modules_performance_component_object_type_20(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Object Type 20`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Object Type 20`
                Accepted values are:
                      - ChillerHeaterPerformance:Electric:EIR
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_object_type_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_object_type_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_object_type_20`')
            vals = {}
            vals["chillerheaterperformance:electric:eir"] = "ChillerHeaterPerformance:Electric:EIR"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chiller_heater_modules_performance_component_object_type_20`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chiller_heater_modules_performance_component_object_type_20`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chiller Heater Modules Performance Component Object Type 20"] = value

    @property
    def chiller_heater_modules_performance_component_name_20(self):
        """Get chiller_heater_modules_performance_component_name_20

        Returns:
            str: the value of `chiller_heater_modules_performance_component_name_20` or None if not set
        """
        return self._data["Chiller Heater Modules Performance Component Name 20"]

    @chiller_heater_modules_performance_component_name_20.setter
    def chiller_heater_modules_performance_component_name_20(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Performance Component Name 20`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Performance Component Name 20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_performance_component_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_performance_component_name_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_performance_component_name_20`')
        self._data["Chiller Heater Modules Performance Component Name 20"] = value

    @property
    def chiller_heater_modules_control_schedule_name_20(self):
        """Get chiller_heater_modules_control_schedule_name_20

        Returns:
            str: the value of `chiller_heater_modules_control_schedule_name_20` or None if not set
        """
        return self._data["Chiller Heater Modules Control Schedule Name 20"]

    @chiller_heater_modules_control_schedule_name_20.setter
    def chiller_heater_modules_control_schedule_name_20(self, value=None):
        """  Corresponds to IDD Field `Chiller Heater Modules Control Schedule Name 20`

        Args:
            value (str): value for IDD Field `Chiller Heater Modules Control Schedule Name 20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chiller_heater_modules_control_schedule_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chiller_heater_modules_control_schedule_name_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chiller_heater_modules_control_schedule_name_20`')
        self._data["Chiller Heater Modules Control Schedule Name 20"] = value

    @property
    def number_of_chiller_heater_modules_20(self):
        """Get number_of_chiller_heater_modules_20

        Returns:
            int: the value of `number_of_chiller_heater_modules_20` or None if not set
        """
        return self._data["Number of Chiller Heater Modules 20"]

    @number_of_chiller_heater_modules_20.setter
    def number_of_chiller_heater_modules_20(self, value=1):
        """  Corresponds to IDD Field `Number of Chiller Heater Modules 20`

        Args:
            value (int): value for IDD Field `Number of Chiller Heater Modules 20`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                if not self.strict:
                    try:
                        conv_value = int(float(value))
                        logging.warn('Cast float {} to int {}, precision may be lost '
                                     'for field `number_of_chiller_heater_modules_20`'.format(value, conv_value))
                        value = conv_value
                    except ValueError:
                        raise ValueError('value {} need to be of type int '
                                         'for field `number_of_chiller_heater_modules_20`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_chiller_heater_modules_20`')
        self._data["Number of Chiller Heater Modules 20"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ChillerHeaterPerformanceElectricEir(object):
    """ Corresponds to IDD object `ChillerHeaterPerformance:Electric:EIR`
        This chiller model is a generic chiller-heater where the cooling mode performance is a
        function of condenser entering or leaving fluid temperature and the heating mode performance
        is typically a function of condenser leaving fluid temperature. Performance at off-reference
        conditions is modeled using three polynomial equations per mode. Six curve objects are required.
    """
    internal_name = "ChillerHeaterPerformance:Electric:EIR"
    field_count = 29
    required_fields = ["Name", "Reference Cooling Mode Evaporator Capacity", "Reference Cooling Mode COP", "Cooling Mode Cooling Capacity Function of Temperature Curve Name", "Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name", "Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name", "Heating Mode Cooling Capacity Function of Temperature Curve Name", "Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name", "Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ChillerHeaterPerformance:Electric:EIR`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reference Cooling Mode Evaporator Capacity"] = None
        self._data["Reference Cooling Mode COP"] = None
        self._data["Reference Cooling Mode Leaving Chilled Water Temperature"] = None
        self._data["Reference Cooling Mode Entering Condenser Fluid Temperature"] = None
        self._data["Reference Cooling Mode Leaving Condenser Water Temperature"] = None
        self._data["Reference Heating Mode Cooling Capacity Ratio"] = None
        self._data["Reference Heating Mode Cooling Power Input Ratio"] = None
        self._data["Reference Heating Mode Leaving Chilled Water Temperature"] = None
        self._data["Reference Heating Mode Leaving Condenser Water Temperature"] = None
        self._data["Reference Heating Mode Entering Condenser Fluid Temperature"] = None
        self._data["Heating Mode Entering Chilled Water Temperature Low Limit"] = None
        self._data["Chilled Water Flow Mode Type"] = None
        self._data["Design Chilled Water Flow Rate"] = None
        self._data["Design Condenser Water Flow Rate"] = None
        self._data["Design Hot Water Flow Rate"] = None
        self._data["Compressor Motor Efficiency"] = None
        self._data["Condenser Type"] = None
        self._data["Cooling Mode Temperature Curve Condenser Water Independent Variable"] = None
        self._data["Cooling Mode Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Cooling Mode Cooling Capacity Optimum Part Load Ratio"] = None
        self._data["Heating Mode Temperature Curve Condenser Water Independent Variable"] = None
        self._data["Heating Mode Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = None
        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = None
        self._data["Heating Mode Cooling Capacity Optimum Part Load Ratio"] = None
        self._data["Sizing Factor"] = None
        self.strict = True

    def read(self, vals, strict=False):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        old_strict = self.strict
        self.strict = strict
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cooling_mode_evaporator_capacity = None
        else:
            self.reference_cooling_mode_evaporator_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cooling_mode_cop = None
        else:
            self.reference_cooling_mode_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cooling_mode_leaving_chilled_water_temperature = None
        else:
            self.reference_cooling_mode_leaving_chilled_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cooling_mode_entering_condenser_fluid_temperature = None
        else:
            self.reference_cooling_mode_entering_condenser_fluid_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_cooling_mode_leaving_condenser_water_temperature = None
        else:
            self.reference_cooling_mode_leaving_condenser_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_heating_mode_cooling_capacity_ratio = None
        else:
            self.reference_heating_mode_cooling_capacity_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_heating_mode_cooling_power_input_ratio = None
        else:
            self.reference_heating_mode_cooling_power_input_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_heating_mode_leaving_chilled_water_temperature = None
        else:
            self.reference_heating_mode_leaving_chilled_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_heating_mode_leaving_condenser_water_temperature = None
        else:
            self.reference_heating_mode_leaving_condenser_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reference_heating_mode_entering_condenser_fluid_temperature = None
        else:
            self.reference_heating_mode_entering_condenser_fluid_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_mode_entering_chilled_water_temperature_low_limit = None
        else:
            self.heating_mode_entering_chilled_water_temperature_low_limit = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.chilled_water_flow_mode_type = None
        else:
            self.chilled_water_flow_mode_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_chilled_water_flow_rate = None
        else:
            self.design_chilled_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_condenser_water_flow_rate = None
        else:
            self.design_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_hot_water_flow_rate = None
        else:
            self.design_hot_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_motor_efficiency = None
        else:
            self.compressor_motor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_mode_temperature_curve_condenser_water_independent_variable = None
        else:
            self.cooling_mode_temperature_curve_condenser_water_independent_variable = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_mode_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_mode_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_mode_cooling_capacity_optimum_part_load_ratio = None
        else:
            self.cooling_mode_cooling_capacity_optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_mode_temperature_curve_condenser_water_independent_variable = None
        else:
            self.heating_mode_temperature_curve_condenser_water_independent_variable = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_mode_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.heating_mode_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = None
        else:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = None
        else:
            self.heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_mode_cooling_capacity_optimum_part_load_ratio = None
        else:
            self.heating_mode_cooling_capacity_optimum_part_load_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sizing_factor = None
        else:
            self.sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        self.strict = old_strict

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reference_cooling_mode_evaporator_capacity(self):
        """Get reference_cooling_mode_evaporator_capacity

        Returns:
            float: the value of `reference_cooling_mode_evaporator_capacity` or None if not set
        """
        return self._data["Reference Cooling Mode Evaporator Capacity"]

    @reference_cooling_mode_evaporator_capacity.setter
    def reference_cooling_mode_evaporator_capacity(self, value=None):
        """  Corresponds to IDD Field `Reference Cooling Mode Evaporator Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Reference Cooling Mode Evaporator Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Reference Cooling Mode Evaporator Capacity"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `reference_cooling_mode_evaporator_capacity`'.format(value))
                    self._data["Reference Cooling Mode Evaporator Capacity"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `reference_cooling_mode_evaporator_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cooling_mode_evaporator_capacity`')
        self._data["Reference Cooling Mode Evaporator Capacity"] = value

    @property
    def reference_cooling_mode_cop(self):
        """Get reference_cooling_mode_cop

        Returns:
            float: the value of `reference_cooling_mode_cop` or None if not set
        """
        return self._data["Reference Cooling Mode COP"]

    @reference_cooling_mode_cop.setter
    def reference_cooling_mode_cop(self, value=None):
        """  Corresponds to IDD Field `Reference Cooling Mode COP`
        Efficiency of the chiller compressor (cooling output/compressor energy input).

        Args:
            value (float): value for IDD Field `Reference Cooling Mode COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_cooling_mode_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_cooling_mode_cop`')
        self._data["Reference Cooling Mode COP"] = value

    @property
    def reference_cooling_mode_leaving_chilled_water_temperature(self):
        """Get reference_cooling_mode_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_cooling_mode_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Cooling Mode Leaving Chilled Water Temperature"]

    @reference_cooling_mode_leaving_chilled_water_temperature.setter
    def reference_cooling_mode_leaving_chilled_water_temperature(self, value=6.67):
        """  Corresponds to IDD Field `Reference Cooling Mode Leaving Chilled Water Temperature`

        Args:
            value (float): value for IDD Field `Reference Cooling Mode Leaving Chilled Water Temperature`
                Units: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_cooling_mode_leaving_chilled_water_temperature`'.format(value))
        self._data["Reference Cooling Mode Leaving Chilled Water Temperature"] = value

    @property
    def reference_cooling_mode_entering_condenser_fluid_temperature(self):
        """Get reference_cooling_mode_entering_condenser_fluid_temperature

        Returns:
            float: the value of `reference_cooling_mode_entering_condenser_fluid_temperature` or None if not set
        """
        return self._data["Reference Cooling Mode Entering Condenser Fluid Temperature"]

    @reference_cooling_mode_entering_condenser_fluid_temperature.setter
    def reference_cooling_mode_entering_condenser_fluid_temperature(self, value=29.44):
        """  Corresponds to IDD Field `Reference Cooling Mode Entering Condenser Fluid Temperature`

        Args:
            value (float): value for IDD Field `Reference Cooling Mode Entering Condenser Fluid Temperature`
                Units: C
                Default value: 29.44
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_cooling_mode_entering_condenser_fluid_temperature`'.format(value))
        self._data["Reference Cooling Mode Entering Condenser Fluid Temperature"] = value

    @property
    def reference_cooling_mode_leaving_condenser_water_temperature(self):
        """Get reference_cooling_mode_leaving_condenser_water_temperature

        Returns:
            float: the value of `reference_cooling_mode_leaving_condenser_water_temperature` or None if not set
        """
        return self._data["Reference Cooling Mode Leaving Condenser Water Temperature"]

    @reference_cooling_mode_leaving_condenser_water_temperature.setter
    def reference_cooling_mode_leaving_condenser_water_temperature(self, value=35.0):
        """  Corresponds to IDD Field `Reference Cooling Mode Leaving Condenser Water Temperature`

        Args:
            value (float): value for IDD Field `Reference Cooling Mode Leaving Condenser Water Temperature`
                Units: C
                Default value: 35.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_cooling_mode_leaving_condenser_water_temperature`'.format(value))
        self._data["Reference Cooling Mode Leaving Condenser Water Temperature"] = value

    @property
    def reference_heating_mode_cooling_capacity_ratio(self):
        """Get reference_heating_mode_cooling_capacity_ratio

        Returns:
            float: the value of `reference_heating_mode_cooling_capacity_ratio` or None if not set
        """
        return self._data["Reference Heating Mode Cooling Capacity Ratio"]

    @reference_heating_mode_cooling_capacity_ratio.setter
    def reference_heating_mode_cooling_capacity_ratio(self, value=0.75):
        """  Corresponds to IDD Field `Reference Heating Mode Cooling Capacity Ratio`
        During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode Cooling Capacity
        (Evaporator capacity at simul clg-htg mode ref condition)/ (Evaporator capacity at cooling mode ref condition)

        Args:
            value (float): value for IDD Field `Reference Heating Mode Cooling Capacity Ratio`
                Default value: 0.75
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_heating_mode_cooling_capacity_ratio`'.format(value))
        self._data["Reference Heating Mode Cooling Capacity Ratio"] = value

    @property
    def reference_heating_mode_cooling_power_input_ratio(self):
        """Get reference_heating_mode_cooling_power_input_ratio

        Returns:
            float: the value of `reference_heating_mode_cooling_power_input_ratio` or None if not set
        """
        return self._data["Reference Heating Mode Cooling Power Input Ratio"]

    @reference_heating_mode_cooling_power_input_ratio.setter
    def reference_heating_mode_cooling_power_input_ratio(self, value=1.38):
        """  Corresponds to IDD Field `Reference Heating Mode Cooling Power Input Ratio`
        During simultaneous cooling-heating mode, this ratio is relative to the Reference Cooling Mode COP
        (Power at simultaneous clg-htg mode reference condition)/ (Power at cooling mode reference condition)

        Args:
            value (float): value for IDD Field `Reference Heating Mode Cooling Power Input Ratio`
                Default value: 1.38
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_heating_mode_cooling_power_input_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `reference_heating_mode_cooling_power_input_ratio`')
        self._data["Reference Heating Mode Cooling Power Input Ratio"] = value

    @property
    def reference_heating_mode_leaving_chilled_water_temperature(self):
        """Get reference_heating_mode_leaving_chilled_water_temperature

        Returns:
            float: the value of `reference_heating_mode_leaving_chilled_water_temperature` or None if not set
        """
        return self._data["Reference Heating Mode Leaving Chilled Water Temperature"]

    @reference_heating_mode_leaving_chilled_water_temperature.setter
    def reference_heating_mode_leaving_chilled_water_temperature(self, value=6.67):
        """  Corresponds to IDD Field `Reference Heating Mode Leaving Chilled Water Temperature`
        During simultaneous cooling-heating mode

        Args:
            value (float): value for IDD Field `Reference Heating Mode Leaving Chilled Water Temperature`
                Units: C
                Default value: 6.67
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_heating_mode_leaving_chilled_water_temperature`'.format(value))
        self._data["Reference Heating Mode Leaving Chilled Water Temperature"] = value

    @property
    def reference_heating_mode_leaving_condenser_water_temperature(self):
        """Get reference_heating_mode_leaving_condenser_water_temperature

        Returns:
            float: the value of `reference_heating_mode_leaving_condenser_water_temperature` or None if not set
        """
        return self._data["Reference Heating Mode Leaving Condenser Water Temperature"]

    @reference_heating_mode_leaving_condenser_water_temperature.setter
    def reference_heating_mode_leaving_condenser_water_temperature(self, value=49.0):
        """  Corresponds to IDD Field `Reference Heating Mode Leaving Condenser Water Temperature`
        During simultaneous cooling-heating mode

        Args:
            value (float): value for IDD Field `Reference Heating Mode Leaving Condenser Water Temperature`
                Units: C
                Default value: 49.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_heating_mode_leaving_condenser_water_temperature`'.format(value))
        self._data["Reference Heating Mode Leaving Condenser Water Temperature"] = value

    @property
    def reference_heating_mode_entering_condenser_fluid_temperature(self):
        """Get reference_heating_mode_entering_condenser_fluid_temperature

        Returns:
            float: the value of `reference_heating_mode_entering_condenser_fluid_temperature` or None if not set
        """
        return self._data["Reference Heating Mode Entering Condenser Fluid Temperature"]

    @reference_heating_mode_entering_condenser_fluid_temperature.setter
    def reference_heating_mode_entering_condenser_fluid_temperature(self, value=29.44):
        """  Corresponds to IDD Field `Reference Heating Mode Entering Condenser Fluid Temperature`

        Args:
            value (float): value for IDD Field `Reference Heating Mode Entering Condenser Fluid Temperature`
                Units: C
                Default value: 29.44
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `reference_heating_mode_entering_condenser_fluid_temperature`'.format(value))
        self._data["Reference Heating Mode Entering Condenser Fluid Temperature"] = value

    @property
    def heating_mode_entering_chilled_water_temperature_low_limit(self):
        """Get heating_mode_entering_chilled_water_temperature_low_limit

        Returns:
            float: the value of `heating_mode_entering_chilled_water_temperature_low_limit` or None if not set
        """
        return self._data["Heating Mode Entering Chilled Water Temperature Low Limit"]

    @heating_mode_entering_chilled_water_temperature_low_limit.setter
    def heating_mode_entering_chilled_water_temperature_low_limit(self, value=12.22):
        """  Corresponds to IDD Field `Heating Mode Entering Chilled Water Temperature Low Limit`
        During simultaneous cooling-heating mode

        Args:
            value (float): value for IDD Field `Heating Mode Entering Chilled Water Temperature Low Limit`
                Units: C
                Default value: 12.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_mode_entering_chilled_water_temperature_low_limit`'.format(value))
        self._data["Heating Mode Entering Chilled Water Temperature Low Limit"] = value

    @property
    def chilled_water_flow_mode_type(self):
        """Get chilled_water_flow_mode_type

        Returns:
            str: the value of `chilled_water_flow_mode_type` or None if not set
        """
        return self._data["Chilled Water Flow Mode Type"]

    @chilled_water_flow_mode_type.setter
    def chilled_water_flow_mode_type(self, value="ConstantFlow"):
        """  Corresponds to IDD Field `Chilled Water Flow Mode Type`
        Sets chilled water flow rate to either constant or variable.

        Args:
            value (str): value for IDD Field `Chilled Water Flow Mode Type`
                Accepted values are:
                      - ConstantFlow
                      - VariableFlow
                Default value: ConstantFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `chilled_water_flow_mode_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `chilled_water_flow_mode_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `chilled_water_flow_mode_type`')
            vals = {}
            vals["constantflow"] = "ConstantFlow"
            vals["variableflow"] = "VariableFlow"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `chilled_water_flow_mode_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `chilled_water_flow_mode_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Chilled Water Flow Mode Type"] = value

    @property
    def design_chilled_water_flow_rate(self):
        """Get design_chilled_water_flow_rate

        Returns:
            float: the value of `design_chilled_water_flow_rate` or None if not set
        """
        return self._data["Design Chilled Water Flow Rate"]

    @design_chilled_water_flow_rate.setter
    def design_chilled_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Chilled Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Chilled Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_chilled_water_flow_rate`'.format(value))
                    self._data["Design Chilled Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_chilled_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_chilled_water_flow_rate`')
        self._data["Design Chilled Water Flow Rate"] = value

    @property
    def design_condenser_water_flow_rate(self):
        """Get design_condenser_water_flow_rate

        Returns:
            float: the value of `design_condenser_water_flow_rate` or None if not set
        """
        return self._data["Design Condenser Water Flow Rate"]

    @design_condenser_water_flow_rate.setter
    def design_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Condenser Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Condenser Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autosize":
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
                if not self.strict and "auto" in value_lower:
                    logging.warn('Accept value {} as "Autosize" '
                                 'for field `design_condenser_water_flow_rate`'.format(value))
                    self._data["Design Condenser Water Flow Rate"] = "Autosize"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float or "Autosize"'
                                 'for field `design_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_condenser_water_flow_rate`')
        self._data["Design Condenser Water Flow Rate"] = value

    @property
    def design_hot_water_flow_rate(self):
        """Get design_hot_water_flow_rate

        Returns:
            float: the value of `design_hot_water_flow_rate` or None if not set
        """
        return self._data["Design Hot Water Flow Rate"]

    @design_hot_water_flow_rate.setter
    def design_hot_water_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Design Hot Water Flow Rate`

        Args:
            value (float): value for IDD Field `Design Hot Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `design_hot_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_hot_water_flow_rate`')
        self._data["Design Hot Water Flow Rate"] = value

    @property
    def compressor_motor_efficiency(self):
        """Get compressor_motor_efficiency

        Returns:
            float: the value of `compressor_motor_efficiency` or None if not set
        """
        return self._data["Compressor Motor Efficiency"]

    @compressor_motor_efficiency.setter
    def compressor_motor_efficiency(self, value=1.0):
        """  Corresponds to IDD Field `Compressor Motor Efficiency`
        Fraction of compressor electrical energy that must be rejected by the condenser.
        Enter 1.0 or leave this field blank for a hermetic compressor.

        Args:
            value (float): value for IDD Field `Compressor Motor Efficiency`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `compressor_motor_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `compressor_motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `compressor_motor_efficiency`')
        self._data["Compressor Motor Efficiency"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """  Corresponds to IDD Field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - WaterCooled
                Default value: WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["watercooled"] = "WaterCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `condenser_type`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def cooling_mode_temperature_curve_condenser_water_independent_variable(self):
        """Get cooling_mode_temperature_curve_condenser_water_independent_variable

        Returns:
            str: the value of `cooling_mode_temperature_curve_condenser_water_independent_variable` or None if not set
        """
        return self._data["Cooling Mode Temperature Curve Condenser Water Independent Variable"]

    @cooling_mode_temperature_curve_condenser_water_independent_variable.setter
    def cooling_mode_temperature_curve_condenser_water_independent_variable(self, value="EnteringCondenser"):
        """  Corresponds to IDD Field `Cooling Mode Temperature Curve Condenser Water Independent Variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature. Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).
        Cooling mode is generally a stronger function of Entering Condenser Fluid Temperature

        Args:
            value (str): value for IDD Field `Cooling Mode Temperature Curve Condenser Water Independent Variable`
                Accepted values are:
                      - EnteringCondenser
                      - LeavingCondenser
                Default value: EnteringCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_mode_temperature_curve_condenser_water_independent_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_temperature_curve_condenser_water_independent_variable`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_mode_temperature_curve_condenser_water_independent_variable`')
            vals = {}
            vals["enteringcondenser"] = "EnteringCondenser"
            vals["leavingcondenser"] = "LeavingCondenser"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_mode_temperature_curve_condenser_water_independent_variable`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `cooling_mode_temperature_curve_condenser_water_independent_variable`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Cooling Mode Temperature Curve Condenser Water Independent Variable"] = value

    @property
    def cooling_mode_cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_mode_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_mode_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Mode Cooling Capacity Function of Temperature Curve Name"]

    @cooling_mode_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_mode_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Mode Cooling Capacity Function of Temperature Curve Name`
        Cooling capacity as a function of leaving chilled water temperature
        and either entering or leaving condenser fluid temperature
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT
        If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Cooling Mode Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_mode_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling Mode Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
        Electric Input Ratio (EIR) as a function of supply (leaving) chilled water temperature
        and leaving condenser fluid temperature.   EIR = 1/COP.
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT
        If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR)
        EIR = 1/COP
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used
        Bicubic = a + b*TCond + c*TCond**2 + d*PLR + e*PLR**2 + f*TCond*PLR +g*0 + h*PLR**3+i*0+j*0
        If ClgModeCondWaterCurveInputVariable = EnteringCondenser, TCond = ECT
        If ClgModeCondWaterCurveInputVariable = LeavingCondenser, TCond = LCT
        Normally, a bicubic curve here should be in terms of LCT rather than ECT
        Also, a bicubic curve is more applicable for variable-speed compressor motor drives
        or
        Quadratic = a + b*PLR + c*PLR**2
        PLR = part load ratio (cooling load/steady-state capacity)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Cooling Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def cooling_mode_cooling_capacity_optimum_part_load_ratio(self):
        """Get cooling_mode_cooling_capacity_optimum_part_load_ratio

        Returns:
            float: the value of `cooling_mode_cooling_capacity_optimum_part_load_ratio` or None if not set
        """
        return self._data["Cooling Mode Cooling Capacity Optimum Part Load Ratio"]

    @cooling_mode_cooling_capacity_optimum_part_load_ratio.setter
    def cooling_mode_cooling_capacity_optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Cooling Mode Cooling Capacity Optimum Part Load Ratio`
        Optimum part load ratio where the chiller is most efficient.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.
        The Min/Max PLR are taken from their assoicated EIR-FPLR curve references.

        Args:
            value (float): value for IDD Field `Cooling Mode Cooling Capacity Optimum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `cooling_mode_cooling_capacity_optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `cooling_mode_cooling_capacity_optimum_part_load_ratio`')
        self._data["Cooling Mode Cooling Capacity Optimum Part Load Ratio"] = value

    @property
    def heating_mode_temperature_curve_condenser_water_independent_variable(self):
        """Get heating_mode_temperature_curve_condenser_water_independent_variable

        Returns:
            str: the value of `heating_mode_temperature_curve_condenser_water_independent_variable` or None if not set
        """
        return self._data["Heating Mode Temperature Curve Condenser Water Independent Variable"]

    @heating_mode_temperature_curve_condenser_water_independent_variable.setter
    def heating_mode_temperature_curve_condenser_water_independent_variable(self, value="LeavingCondenser"):
        """  Corresponds to IDD Field `Heating Mode Temperature Curve Condenser Water Independent Variable`
        Sets the second independent variable in the three temperature dependent performance
        curves to either the leaving or entering condenser water temperature. Manufacturers
        express the performance of their chillers using either the leaving condenser water
        temperature (to the tower) or the entering condenser water temperature (from the tower).
        Heating mode (or Simul Clg/Htg Load) should be a function of Leaving Condenser Fluid Temperature
        Only use EnteringCondenser as a last resort in case no performance data exists for LeavingCondenser

        Args:
            value (str): value for IDD Field `Heating Mode Temperature Curve Condenser Water Independent Variable`
                Accepted values are:
                      - EnteringCondenser
                      - LeavingCondenser
                Default value: LeavingCondenser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_mode_temperature_curve_condenser_water_independent_variable`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_temperature_curve_condenser_water_independent_variable`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_mode_temperature_curve_condenser_water_independent_variable`')
            vals = {}
            vals["enteringcondenser"] = "EnteringCondenser"
            vals["leavingcondenser"] = "LeavingCondenser"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if not self.strict:
                    for key in vals:
                        if key in value_lower or value_lower in key:
                            value_lower = key
                            found = True
                            break
                    if not found:
                        value_stripped = re.sub(r'[^a-zA-Z0-9]', '', value_lower)
                        for key in vals:
                            key_stripped = re.sub(r'[^a-zA-Z0-9]', '', key)
                            if key_stripped == value_stripped:
                                value_lower = key
                                found = True
                                break
                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_mode_temperature_curve_condenser_water_independent_variable`'.format(value))
                else:
                    logging.warn('change value {} to accepted value {} for '
                                 'field `heating_mode_temperature_curve_condenser_water_independent_variable`'.format(value, vals[value_lower]))
            value = vals[value_lower]
        self._data["Heating Mode Temperature Curve Condenser Water Independent Variable"] = value

    @property
    def heating_mode_cooling_capacity_function_of_temperature_curve_name(self):
        """Get heating_mode_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_mode_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Mode Cooling Capacity Function of Temperature Curve Name"]

    @heating_mode_cooling_capacity_function_of_temperature_curve_name.setter
    def heating_mode_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Mode Cooling Capacity Function of Temperature Curve Name`
        Evaporator (cooling) capacity as a function of leaving chilled water temperature
        and leaving condenser fluid temperature when in heating or simultaneous cool/heat mode
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If independent variable = EnteringCondenser, TCond = ECT
        If independent variable = LeavingCondenser, TCond = LCT
        CWS = supply (leaving) chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Heating Mode Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_mode_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_mode_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Heating Mode Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self):
        """Get heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"]

    @heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name.setter
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
        Electric Input Ratio (EIR) as a function of leaving chilled water temperature when in heating or simultaneous cool/heat mode
        and leaving condenser fluid temperature.   EIR = 1/COP.
        Table:TwoIndependentVariables object can also be used
        curve = a + b*CWS + c*CWS**2 + d*TCond + e*TCond**2 + f*CWS*TCond
        If independent variable = EnteringCondenser, TCond = ECT
        If independent variable = LeavingCondenser, TCond = LCT
        CWS = leaving chilled water temperature(C)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_temperature_curve_name`')
        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Temperature Curve Name"] = value

    @property
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self):
        """Get heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name

        Returns:
            str: the value of `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name` or None if not set
        """
        return self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"]

    @heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name.setter
    def heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
        Electric Input Ratio (EIR) as a function of Part Load Ratio (PLR) when in heating or simultaneous cool/heat mode
        EIR = 1/COP
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used
        Bicubic = a + b*LCT + c*LCT**2 + d*PLR + e*PLR**2 + f*LCT*PLR + g*0 + h*PLR**3 + i*0 + j*0
        Normally, a bicubic curve here should be in terms of LCT rather than ECT
        Also, a bicubic curve is more applicable for variable-speed compressor motor drives
        or
        Quadratic = a + b*PLR + c*PLR**2
        PLR = part load ratio (cooling load/steady-state capacity)
        LCT = leaving condenser fluid temperature(C)
        ECT = entering condenser fluid temperature(C)

        Args:
            value (str): value for IDD Field `Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str'
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_mode_electric_input_to_cooling_output_ratio_function_of_part_load_ratio_curve_name`')
        self._data["Heating Mode Electric Input to Cooling Output Ratio Function of Part Load Ratio Curve Name"] = value

    @property
    def heating_mode_cooling_capacity_optimum_part_load_ratio(self):
        """Get heating_mode_cooling_capacity_optimum_part_load_ratio

        Returns:
            float: the value of `heating_mode_cooling_capacity_optimum_part_load_ratio` or None if not set
        """
        return self._data["Heating Mode Cooling Capacity Optimum Part Load Ratio"]

    @heating_mode_cooling_capacity_optimum_part_load_ratio.setter
    def heating_mode_cooling_capacity_optimum_part_load_ratio(self, value=1.0):
        """  Corresponds to IDD Field `Heating Mode Cooling Capacity Optimum Part Load Ratio`
        Optimum part load ratio where the chiller is most efficient when in heating or simultaneous cool/heat mode.
        Must be greater than or equal to the Minimum Part Load Ratio
        and less than or equal to the Maximum Part Load Ratio.
        The Min/Max PLR are taken from their assoicated EIR-FPLR curve references.

        Args:
            value (float): value for IDD Field `Heating Mode Cooling Capacity Optimum Part Load Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `heating_mode_cooling_capacity_optimum_part_load_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `heating_mode_cooling_capacity_optimum_part_load_ratio`')
        self._data["Heating Mode Cooling Capacity Optimum Part Load Ratio"] = value

    @property
    def sizing_factor(self):
        """Get sizing_factor

        Returns:
            float: the value of `sizing_factor` or None if not set
        """
        return self._data["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """  Corresponds to IDD Field `Sizing Factor`
        Multiplies the autosized capacity and flow rates

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float'
                                 'for field `sizing_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `sizing_factor`')
        self._data["Sizing Factor"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])