from collections import OrderedDict

class MatrixTwoDimension(object):
    """ Corresponds to IDD object `Matrix:TwoDimension`
        matrix data in row-major order
        list each row keeping the columns in order
        number of values must equal N1 x N2
    """
    internal_name = "Matrix:TwoDimension"
    field_count = 1059

    def __init__(self):
        """ Init data dictionary object for EPW IDD  `Matrix:TwoDimension`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Number of Rows"] = None
        self._data["Number of Columns"] = None
        self._data["Value 1"] = None
        self._data["Value 2"] = None
        self._data["Value 3"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None
        self._data["Value 4"] = None

    def read(self, vals):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_rows = None
        else:
            self.number_of_rows = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.number_of_columns = None
        else:
            self.number_of_columns = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_1 = None
        else:
            self.value_1 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_2 = None
        else:
            self.value_2 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_3 = None
        else:
            self.value_3 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1
        if len(vals[i]) == 0:
            self.value_4 = None
        else:
            self.value_4 = vals[i]
        i += 1

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `name`

        Args:
            value (str): value for IDD Field `name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')

        self._data["Name"] = value

    @property
    def number_of_rows(self):
        """Get number_of_rows

        Returns:
            int: the value of `number_of_rows` or None if not set
        """
        return self._data["Number of Rows"]

    @number_of_rows.setter
    def number_of_rows(self, value=None):
        """  Corresponds to IDD Field `number_of_rows`

        Args:
            value (int): value for IDD Field `number_of_rows`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_rows`'.format(value))

        self._data["Number of Rows"] = value

    @property
    def number_of_columns(self):
        """Get number_of_columns

        Returns:
            int: the value of `number_of_columns` or None if not set
        """
        return self._data["Number of Columns"]

    @number_of_columns.setter
    def number_of_columns(self, value=None):
        """  Corresponds to IDD Field `number_of_columns`

        Args:
            value (int): value for IDD Field `number_of_columns`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_columns`'.format(value))

        self._data["Number of Columns"] = value

    @property
    def value_1(self):
        """Get value_1

        Returns:
            float: the value of `value_1` or None if not set
        """
        return self._data["Value 1"]

    @value_1.setter
    def value_1(self, value=None):
        """  Corresponds to IDD Field `value_1`

        Args:
            value (float): value for IDD Field `value_1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_1`'.format(value))

        self._data["Value 1"] = value

    @property
    def value_2(self):
        """Get value_2

        Returns:
            float: the value of `value_2` or None if not set
        """
        return self._data["Value 2"]

    @value_2.setter
    def value_2(self, value=None):
        """  Corresponds to IDD Field `value_2`

        Args:
            value (float): value for IDD Field `value_2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_2`'.format(value))

        self._data["Value 2"] = value

    @property
    def value_3(self):
        """Get value_3

        Returns:
            float: the value of `value_3` or None if not set
        """
        return self._data["Value 3"]

    @value_3.setter
    def value_3(self, value=None):
        """  Corresponds to IDD Field `value_3`

        Args:
            value (float): value for IDD Field `value_3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_3`'.format(value))

        self._data["Value 3"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @property
    def value_4(self):
        """Get value_4

        Returns:
            float: the value of `value_4` or None if not set
        """
        return self._data["Value 4"]

    @value_4.setter
    def value_4(self, value=None):
        """  Corresponds to IDD Field `value_4`

        Args:
            value (float): value for IDD Field `value_4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except:
                raise ValueError('value {} need to be of type float '
                                 'for field `value_4`'.format(value))

        self._data["Value 4"] = value

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def __str__(self):
        out = []
        out.append(self._to_str(self.name))
        out.append(self._to_str(self.number_of_rows))
        out.append(self._to_str(self.number_of_columns))
        out.append(self._to_str(self.value_1))
        out.append(self._to_str(self.value_2))
        out.append(self._to_str(self.value_3))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        out.append(self._to_str(self.value_4))
        return ",".join(out)