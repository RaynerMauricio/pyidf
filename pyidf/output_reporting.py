from collections import OrderedDict

class OutputVariableDictionary(object):
    """ Corresponds to IDD object `Output:VariableDictionary`
        Produces a list summarizing the output variables and meters that are available for
        reporting for the model being simulated (rdd output file). The list varies depending
        on the types of objects present in the idf file.  For example, variables related to
        lights will only appear if a Lights object is present. The IDF option generates
        complete Output:Variable objects to simplify adding the desired output to the idf file.
    
    """
    internal_name = "Output:VariableDictionary"
    field_count = 2
    required_fields = ["Key Field"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:VariableDictionary`
        """
        self._data = OrderedDict()
        self._data["Key Field"] = None
        self._data["Sort Option"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.key_field = None
        else:
            self.key_field = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sort_option = None
        else:
            self.sort_option = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def key_field(self):
        """Get key_field

        Returns:
            str: the value of `key_field` or None if not set
        """
        return self._data["Key Field"]

    @key_field.setter
    def key_field(self, value="regular"):
        """  Corresponds to IDD Field `Key Field`

        Args:
            value (str): value for IDD Field `Key Field`
                Accepted values are:
                      - IDF
                      - regular
                Default value: regular
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_field`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_field`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_field`')
            vals = {}
            vals["idf"] = "IDF"
            vals["regular"] = "regular"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `key_field`'.format(value))
            value = vals[value_lower]
        self._data["Key Field"] = value

    @property
    def sort_option(self):
        """Get sort_option

        Returns:
            str: the value of `sort_option` or None if not set
        """
        return self._data["Sort Option"]

    @sort_option.setter
    def sort_option(self, value=None):
        """  Corresponds to IDD Field `Sort Option`

        Args:
            value (str): value for IDD Field `Sort Option`
                Accepted values are:
                      - Name
                      - Unsorted
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sort_option`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sort_option`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sort_option`')
            vals = {}
            vals["name"] = "Name"
            vals["unsorted"] = "Unsorted"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `sort_option`'.format(value))
            value = vals[value_lower]
        self._data["Sort Option"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputSurfacesList(object):
    """ Corresponds to IDD object `Output:Surfaces:List`
        Produces a report summarizing the details of surfaces in the eio output file.
    
    """
    internal_name = "Output:Surfaces:List"
    field_count = 2
    required_fields = ["Report Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Surfaces:List`
        """
        self._data = OrderedDict()
        self._data["Report Type"] = None
        self._data["Report Specifications"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.report_type = None
        else:
            self.report_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_specifications = None
        else:
            self.report_specifications = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def report_type(self):
        """Get report_type

        Returns:
            str: the value of `report_type` or None if not set
        """
        return self._data["Report Type"]

    @report_type.setter
    def report_type(self, value=None):
        """  Corresponds to IDD Field `Report Type`

        Args:
            value (str): value for IDD Field `Report Type`
                Accepted values are:
                      - Details
                      - Vertices
                      - DetailsWithVertices
                      - ViewFactorInfo
                      - Lines
                      - CostInfo
                      - DecayCurvesfromZoneComponentLoads
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_type`')
            vals = {}
            vals["details"] = "Details"
            vals["vertices"] = "Vertices"
            vals["detailswithvertices"] = "DetailsWithVertices"
            vals["viewfactorinfo"] = "ViewFactorInfo"
            vals["lines"] = "Lines"
            vals["costinfo"] = "CostInfo"
            vals["decaycurvesfromzonecomponentloads"] = "DecayCurvesfromZoneComponentLoads"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_type`'.format(value))
            value = vals[value_lower]
        self._data["Report Type"] = value

    @property
    def report_specifications(self):
        """Get report_specifications

        Returns:
            str: the value of `report_specifications` or None if not set
        """
        return self._data["Report Specifications"]

    @report_specifications.setter
    def report_specifications(self, value=None):
        """  Corresponds to IDD Field `Report Specifications`
        (IDF, only for Output:Surfaces:List, Lines report --
        will print transformed coordinates in IDF style)

        Args:
            value (str): value for IDD Field `Report Specifications`
                Accepted values are:
                      - IDF
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_specifications`')
            vals = {}
            vals["idf"] = "IDF"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_specifications`'.format(value))
            value = vals[value_lower]
        self._data["Report Specifications"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputSurfacesDrawing(object):
    """ Corresponds to IDD object `Output:Surfaces:Drawing`
        Produces reports/files that are capable of rendering graphically or
        being imported into other programs. Rendering does not alter the
        actual inputs/surfaces.
    
    """
    internal_name = "Output:Surfaces:Drawing"
    field_count = 3
    required_fields = ["Report Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Surfaces:Drawing`
        """
        self._data = OrderedDict()
        self._data["Report Type"] = None
        self._data["Report Specifications 1"] = None
        self._data["Report Specifications 2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.report_type = None
        else:
            self.report_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_specifications_1 = None
        else:
            self.report_specifications_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_specifications_2 = None
        else:
            self.report_specifications_2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def report_type(self):
        """Get report_type

        Returns:
            str: the value of `report_type` or None if not set
        """
        return self._data["Report Type"]

    @report_type.setter
    def report_type(self, value=None):
        """  Corresponds to IDD Field `Report Type`

        Args:
            value (str): value for IDD Field `Report Type`
                Accepted values are:
                      - DXF
                      - DXF:WireFrame
                      - VRML
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_type`')
            vals = {}
            vals["dxf"] = "DXF"
            vals["dxf:wireframe"] = "DXF:WireFrame"
            vals["vrml"] = "VRML"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_type`'.format(value))
            value = vals[value_lower]
        self._data["Report Type"] = value

    @property
    def report_specifications_1(self):
        """Get report_specifications_1

        Returns:
            str: the value of `report_specifications_1` or None if not set
        """
        return self._data["Report Specifications 1"]

    @report_specifications_1.setter
    def report_specifications_1(self, value="Triangulate3DFace"):
        """  Corresponds to IDD Field `Report Specifications 1`
        Triangulate3DFace (default), ThickPolyline, RegularPolyline apply to DXF
        This field is ignored for DXF:WireFrame and VRML

        Args:
            value (str): value for IDD Field `Report Specifications 1`
                Accepted values are:
                      - Triangulate3DFace
                      - ThickPolyline
                      - RegularPolyline
                Default value: Triangulate3DFace
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_specifications_1`')
            vals = {}
            vals["triangulate3dface"] = "Triangulate3DFace"
            vals["thickpolyline"] = "ThickPolyline"
            vals["regularpolyline"] = "RegularPolyline"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_specifications_1`'.format(value))
            value = vals[value_lower]
        self._data["Report Specifications 1"] = value

    @property
    def report_specifications_2(self):
        """Get report_specifications_2

        Returns:
            str: the value of `report_specifications_2` or None if not set
        """
        return self._data["Report Specifications 2"]

    @report_specifications_2.setter
    def report_specifications_2(self, value=None):
        """  Corresponds to IDD Field `Report Specifications 2`
        Use ColorScheme Name for DXF reports

        Args:
            value (str): value for IDD Field `Report Specifications 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_specifications_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_specifications_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_specifications_2`')
        self._data["Report Specifications 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputSchedules(object):
    """ Corresponds to IDD object `Output:Schedules`
        Produces a condensed reporting that illustrates the full range of schedule values in
        the eio output file. In the style of input: DaySchedule,  WeekSchedule, and
        Annual Schedule.
    
    """
    internal_name = "Output:Schedules"
    field_count = 1
    required_fields = ["Key Field"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Schedules`
        """
        self._data = OrderedDict()
        self._data["Key Field"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.key_field = None
        else:
            self.key_field = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def key_field(self):
        """Get key_field

        Returns:
            str: the value of `key_field` or None if not set
        """
        return self._data["Key Field"]

    @key_field.setter
    def key_field(self, value=None):
        """  Corresponds to IDD Field `Key Field`

        Args:
            value (str): value for IDD Field `Key Field`
                Accepted values are:
                      - Hourly
                      - Timestep
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_field`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_field`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_field`')
            vals = {}
            vals["hourly"] = "Hourly"
            vals["timestep"] = "Timestep"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `key_field`'.format(value))
            value = vals[value_lower]
        self._data["Key Field"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputConstructions(object):
    """ Corresponds to IDD object `Output:Constructions`
        Adds a report to the eio output file which shows details for each construction,
        including overall properties, a list of material layers, and calculated results
        related to conduction transfer functions.
    
    """
    internal_name = "Output:Constructions"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Constructions`
        """
        self._data = OrderedDict()
        self._data["Details Type 1"] = None
        self._data["Details Type 2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.details_type_1 = None
        else:
            self.details_type_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.details_type_2 = None
        else:
            self.details_type_2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def details_type_1(self):
        """Get details_type_1

        Returns:
            str: the value of `details_type_1` or None if not set
        """
        return self._data["Details Type 1"]

    @details_type_1.setter
    def details_type_1(self, value=None):
        """  Corresponds to IDD Field `Details Type 1`

        Args:
            value (str): value for IDD Field `Details Type 1`
                Accepted values are:
                      - Constructions
                      - Materials
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `details_type_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `details_type_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `details_type_1`')
            vals = {}
            vals["constructions"] = "Constructions"
            vals["materials"] = "Materials"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `details_type_1`'.format(value))
            value = vals[value_lower]
        self._data["Details Type 1"] = value

    @property
    def details_type_2(self):
        """Get details_type_2

        Returns:
            str: the value of `details_type_2` or None if not set
        """
        return self._data["Details Type 2"]

    @details_type_2.setter
    def details_type_2(self, value=None):
        """  Corresponds to IDD Field `Details Type 2`

        Args:
            value (str): value for IDD Field `Details Type 2`
                Accepted values are:
                      - Constructions
                      - Materials
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `details_type_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `details_type_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `details_type_2`')
            vals = {}
            vals["constructions"] = "Constructions"
            vals["materials"] = "Materials"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `details_type_2`'.format(value))
            value = vals[value_lower]
        self._data["Details Type 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputEnergyManagementSystem(object):
    """ Corresponds to IDD object `Output:EnergyManagementSystem`
        This object is used to control the output produced by the Energy Management System
    
    """
    internal_name = "Output:EnergyManagementSystem"
    field_count = 3
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:EnergyManagementSystem`
        """
        self._data = OrderedDict()
        self._data["Actuator Availability Dictionary Reporting"] = None
        self._data["Internal Variable Availability Dictionary Reporting"] = None
        self._data["EMS Runtime Language Debug Output Level"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.actuator_availability_dictionary_reporting = None
        else:
            self.actuator_availability_dictionary_reporting = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.internal_variable_availability_dictionary_reporting = None
        else:
            self.internal_variable_availability_dictionary_reporting = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ems_runtime_language_debug_output_level = None
        else:
            self.ems_runtime_language_debug_output_level = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def actuator_availability_dictionary_reporting(self):
        """Get actuator_availability_dictionary_reporting

        Returns:
            str: the value of `actuator_availability_dictionary_reporting` or None if not set
        """
        return self._data["Actuator Availability Dictionary Reporting"]

    @actuator_availability_dictionary_reporting.setter
    def actuator_availability_dictionary_reporting(self, value="None"):
        """  Corresponds to IDD Field `Actuator Availability Dictionary Reporting`

        Args:
            value (str): value for IDD Field `Actuator Availability Dictionary Reporting`
                Accepted values are:
                      - None
                      - NotByUniqueKeyNames
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `actuator_availability_dictionary_reporting`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `actuator_availability_dictionary_reporting`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `actuator_availability_dictionary_reporting`')
            vals = {}
            vals["none"] = "None"
            vals["notbyuniquekeynames"] = "NotByUniqueKeyNames"
            vals["verbose"] = "Verbose"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `actuator_availability_dictionary_reporting`'.format(value))
            value = vals[value_lower]
        self._data["Actuator Availability Dictionary Reporting"] = value

    @property
    def internal_variable_availability_dictionary_reporting(self):
        """Get internal_variable_availability_dictionary_reporting

        Returns:
            str: the value of `internal_variable_availability_dictionary_reporting` or None if not set
        """
        return self._data["Internal Variable Availability Dictionary Reporting"]

    @internal_variable_availability_dictionary_reporting.setter
    def internal_variable_availability_dictionary_reporting(self, value="None"):
        """  Corresponds to IDD Field `Internal Variable Availability Dictionary Reporting`

        Args:
            value (str): value for IDD Field `Internal Variable Availability Dictionary Reporting`
                Accepted values are:
                      - None
                      - NotByUniqueKeyNames
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `internal_variable_availability_dictionary_reporting`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `internal_variable_availability_dictionary_reporting`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `internal_variable_availability_dictionary_reporting`')
            vals = {}
            vals["none"] = "None"
            vals["notbyuniquekeynames"] = "NotByUniqueKeyNames"
            vals["verbose"] = "Verbose"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `internal_variable_availability_dictionary_reporting`'.format(value))
            value = vals[value_lower]
        self._data["Internal Variable Availability Dictionary Reporting"] = value

    @property
    def ems_runtime_language_debug_output_level(self):
        """Get ems_runtime_language_debug_output_level

        Returns:
            str: the value of `ems_runtime_language_debug_output_level` or None if not set
        """
        return self._data["EMS Runtime Language Debug Output Level"]

    @ems_runtime_language_debug_output_level.setter
    def ems_runtime_language_debug_output_level(self, value="None"):
        """  Corresponds to IDD Field `EMS Runtime Language Debug Output Level`

        Args:
            value (str): value for IDD Field `EMS Runtime Language Debug Output Level`
                Accepted values are:
                      - None
                      - ErrorsOnly
                      - Verbose
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `ems_runtime_language_debug_output_level`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ems_runtime_language_debug_output_level`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `ems_runtime_language_debug_output_level`')
            vals = {}
            vals["none"] = "None"
            vals["errorsonly"] = "ErrorsOnly"
            vals["verbose"] = "Verbose"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `ems_runtime_language_debug_output_level`'.format(value))
            value = vals[value_lower]
        self._data["EMS Runtime Language Debug Output Level"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputControlSurfaceColorScheme(object):
    """ Corresponds to IDD object `OutputControl:SurfaceColorScheme`
        This object is used to set colors for reporting on various building elements particularly for the
        DXF reports.  We know the user can enter 0 to 255 and the color map is available in DXF output.
        Therefore, we are limiting the colors in that range.  You can
        extend by editing the IDD but you do so on your own.  Colors not changed in any scheme will
        remain as the default scheme uses.
    
    """
    internal_name = "OutputControl:SurfaceColorScheme"
    field_count = 31
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `OutputControl:SurfaceColorScheme`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Drawing Element 1 Type"] = None
        self._data["Color for Drawing Element 1"] = None
        self._data["Drawing Element 2 Type"] = None
        self._data["Color for Drawing Element 2"] = None
        self._data["Drawing Element 3 Type"] = None
        self._data["Color for Drawing Element 3"] = None
        self._data["Drawing Element 4 Type"] = None
        self._data["Color for Drawing Element 4"] = None
        self._data["Drawing Element 5 Type"] = None
        self._data["Color for Drawing Element 5"] = None
        self._data["Drawing Element 6 Type"] = None
        self._data["Color for Drawing Element 6"] = None
        self._data["Drawing Element 7 Type"] = None
        self._data["Color for Drawing Element 7"] = None
        self._data["Drawing Element 8 Type"] = None
        self._data["Color for Drawing Element 8"] = None
        self._data["Drawing Element 9 Type"] = None
        self._data["Color for Drawing Element 9"] = None
        self._data["Drawing Element 10 Type"] = None
        self._data["Color for Drawing Element 10"] = None
        self._data["Drawing Element 11 Type"] = None
        self._data["Color for Drawing Element 11"] = None
        self._data["Drawing Element 12 Type"] = None
        self._data["Color for Drawing Element 12"] = None
        self._data["Drawing Element 13 Type"] = None
        self._data["Color for Drawing Element 13"] = None
        self._data["Drawing Element 14 Type"] = None
        self._data["Color for Drawing Element 14"] = None
        self._data["Drawing Element 15 Type"] = None
        self._data["Color for Drawing Element 15"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_1_type = None
        else:
            self.drawing_element_1_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_1 = None
        else:
            self.color_for_drawing_element_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_2_type = None
        else:
            self.drawing_element_2_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_2 = None
        else:
            self.color_for_drawing_element_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_3_type = None
        else:
            self.drawing_element_3_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_3 = None
        else:
            self.color_for_drawing_element_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_4_type = None
        else:
            self.drawing_element_4_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_4 = None
        else:
            self.color_for_drawing_element_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_5_type = None
        else:
            self.drawing_element_5_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_5 = None
        else:
            self.color_for_drawing_element_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_6_type = None
        else:
            self.drawing_element_6_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_6 = None
        else:
            self.color_for_drawing_element_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_7_type = None
        else:
            self.drawing_element_7_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_7 = None
        else:
            self.color_for_drawing_element_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_8_type = None
        else:
            self.drawing_element_8_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_8 = None
        else:
            self.color_for_drawing_element_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_9_type = None
        else:
            self.drawing_element_9_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_9 = None
        else:
            self.color_for_drawing_element_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_10_type = None
        else:
            self.drawing_element_10_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_10 = None
        else:
            self.color_for_drawing_element_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_11_type = None
        else:
            self.drawing_element_11_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_11 = None
        else:
            self.color_for_drawing_element_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_12_type = None
        else:
            self.drawing_element_12_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_12 = None
        else:
            self.color_for_drawing_element_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_13_type = None
        else:
            self.drawing_element_13_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_13 = None
        else:
            self.color_for_drawing_element_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_14_type = None
        else:
            self.drawing_element_14_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_14 = None
        else:
            self.color_for_drawing_element_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.drawing_element_15_type = None
        else:
            self.drawing_element_15_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.color_for_drawing_element_15 = None
        else:
            self.color_for_drawing_element_15 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        choose a name or use one of the DataSets

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def drawing_element_1_type(self):
        """Get drawing_element_1_type

        Returns:
            str: the value of `drawing_element_1_type` or None if not set
        """
        return self._data["Drawing Element 1 Type"]

    @drawing_element_1_type.setter
    def drawing_element_1_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 1 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 1 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_1_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_1_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_1_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_1_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 1 Type"] = value

    @property
    def color_for_drawing_element_1(self):
        """Get color_for_drawing_element_1

        Returns:
            int: the value of `color_for_drawing_element_1` or None if not set
        """
        return self._data["Color for Drawing Element 1"]

    @color_for_drawing_element_1.setter
    def color_for_drawing_element_1(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 1`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 1`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_1`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_1`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_1`')
        self._data["Color for Drawing Element 1"] = value

    @property
    def drawing_element_2_type(self):
        """Get drawing_element_2_type

        Returns:
            str: the value of `drawing_element_2_type` or None if not set
        """
        return self._data["Drawing Element 2 Type"]

    @drawing_element_2_type.setter
    def drawing_element_2_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 2 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 2 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_2_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_2_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_2_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_2_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 2 Type"] = value

    @property
    def color_for_drawing_element_2(self):
        """Get color_for_drawing_element_2

        Returns:
            int: the value of `color_for_drawing_element_2` or None if not set
        """
        return self._data["Color for Drawing Element 2"]

    @color_for_drawing_element_2.setter
    def color_for_drawing_element_2(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 2`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 2`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_2`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_2`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_2`')
        self._data["Color for Drawing Element 2"] = value

    @property
    def drawing_element_3_type(self):
        """Get drawing_element_3_type

        Returns:
            str: the value of `drawing_element_3_type` or None if not set
        """
        return self._data["Drawing Element 3 Type"]

    @drawing_element_3_type.setter
    def drawing_element_3_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 3 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 3 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_3_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_3_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_3_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_3_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 3 Type"] = value

    @property
    def color_for_drawing_element_3(self):
        """Get color_for_drawing_element_3

        Returns:
            int: the value of `color_for_drawing_element_3` or None if not set
        """
        return self._data["Color for Drawing Element 3"]

    @color_for_drawing_element_3.setter
    def color_for_drawing_element_3(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 3`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 3`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_3`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_3`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_3`')
        self._data["Color for Drawing Element 3"] = value

    @property
    def drawing_element_4_type(self):
        """Get drawing_element_4_type

        Returns:
            str: the value of `drawing_element_4_type` or None if not set
        """
        return self._data["Drawing Element 4 Type"]

    @drawing_element_4_type.setter
    def drawing_element_4_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 4 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 4 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_4_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_4_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_4_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_4_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 4 Type"] = value

    @property
    def color_for_drawing_element_4(self):
        """Get color_for_drawing_element_4

        Returns:
            int: the value of `color_for_drawing_element_4` or None if not set
        """
        return self._data["Color for Drawing Element 4"]

    @color_for_drawing_element_4.setter
    def color_for_drawing_element_4(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 4`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 4`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_4`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_4`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_4`')
        self._data["Color for Drawing Element 4"] = value

    @property
    def drawing_element_5_type(self):
        """Get drawing_element_5_type

        Returns:
            str: the value of `drawing_element_5_type` or None if not set
        """
        return self._data["Drawing Element 5 Type"]

    @drawing_element_5_type.setter
    def drawing_element_5_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 5 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 5 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_5_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_5_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_5_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_5_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 5 Type"] = value

    @property
    def color_for_drawing_element_5(self):
        """Get color_for_drawing_element_5

        Returns:
            int: the value of `color_for_drawing_element_5` or None if not set
        """
        return self._data["Color for Drawing Element 5"]

    @color_for_drawing_element_5.setter
    def color_for_drawing_element_5(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 5`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 5`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_5`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_5`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_5`')
        self._data["Color for Drawing Element 5"] = value

    @property
    def drawing_element_6_type(self):
        """Get drawing_element_6_type

        Returns:
            str: the value of `drawing_element_6_type` or None if not set
        """
        return self._data["Drawing Element 6 Type"]

    @drawing_element_6_type.setter
    def drawing_element_6_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 6 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 6 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_6_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_6_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_6_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_6_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 6 Type"] = value

    @property
    def color_for_drawing_element_6(self):
        """Get color_for_drawing_element_6

        Returns:
            int: the value of `color_for_drawing_element_6` or None if not set
        """
        return self._data["Color for Drawing Element 6"]

    @color_for_drawing_element_6.setter
    def color_for_drawing_element_6(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 6`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 6`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_6`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_6`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_6`')
        self._data["Color for Drawing Element 6"] = value

    @property
    def drawing_element_7_type(self):
        """Get drawing_element_7_type

        Returns:
            str: the value of `drawing_element_7_type` or None if not set
        """
        return self._data["Drawing Element 7 Type"]

    @drawing_element_7_type.setter
    def drawing_element_7_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 7 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 7 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_7_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_7_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_7_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_7_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 7 Type"] = value

    @property
    def color_for_drawing_element_7(self):
        """Get color_for_drawing_element_7

        Returns:
            int: the value of `color_for_drawing_element_7` or None if not set
        """
        return self._data["Color for Drawing Element 7"]

    @color_for_drawing_element_7.setter
    def color_for_drawing_element_7(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 7`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 7`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_7`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_7`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_7`')
        self._data["Color for Drawing Element 7"] = value

    @property
    def drawing_element_8_type(self):
        """Get drawing_element_8_type

        Returns:
            str: the value of `drawing_element_8_type` or None if not set
        """
        return self._data["Drawing Element 8 Type"]

    @drawing_element_8_type.setter
    def drawing_element_8_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 8 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 8 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_8_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_8_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_8_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_8_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 8 Type"] = value

    @property
    def color_for_drawing_element_8(self):
        """Get color_for_drawing_element_8

        Returns:
            int: the value of `color_for_drawing_element_8` or None if not set
        """
        return self._data["Color for Drawing Element 8"]

    @color_for_drawing_element_8.setter
    def color_for_drawing_element_8(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 8`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 8`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_8`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_8`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_8`')
        self._data["Color for Drawing Element 8"] = value

    @property
    def drawing_element_9_type(self):
        """Get drawing_element_9_type

        Returns:
            str: the value of `drawing_element_9_type` or None if not set
        """
        return self._data["Drawing Element 9 Type"]

    @drawing_element_9_type.setter
    def drawing_element_9_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 9 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 9 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_9_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_9_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_9_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_9_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 9 Type"] = value

    @property
    def color_for_drawing_element_9(self):
        """Get color_for_drawing_element_9

        Returns:
            int: the value of `color_for_drawing_element_9` or None if not set
        """
        return self._data["Color for Drawing Element 9"]

    @color_for_drawing_element_9.setter
    def color_for_drawing_element_9(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 9`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 9`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_9`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_9`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_9`')
        self._data["Color for Drawing Element 9"] = value

    @property
    def drawing_element_10_type(self):
        """Get drawing_element_10_type

        Returns:
            str: the value of `drawing_element_10_type` or None if not set
        """
        return self._data["Drawing Element 10 Type"]

    @drawing_element_10_type.setter
    def drawing_element_10_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 10 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 10 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_10_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_10_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_10_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_10_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 10 Type"] = value

    @property
    def color_for_drawing_element_10(self):
        """Get color_for_drawing_element_10

        Returns:
            int: the value of `color_for_drawing_element_10` or None if not set
        """
        return self._data["Color for Drawing Element 10"]

    @color_for_drawing_element_10.setter
    def color_for_drawing_element_10(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 10`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 10`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_10`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_10`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_10`')
        self._data["Color for Drawing Element 10"] = value

    @property
    def drawing_element_11_type(self):
        """Get drawing_element_11_type

        Returns:
            str: the value of `drawing_element_11_type` or None if not set
        """
        return self._data["Drawing Element 11 Type"]

    @drawing_element_11_type.setter
    def drawing_element_11_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 11 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 11 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_11_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_11_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_11_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_11_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 11 Type"] = value

    @property
    def color_for_drawing_element_11(self):
        """Get color_for_drawing_element_11

        Returns:
            int: the value of `color_for_drawing_element_11` or None if not set
        """
        return self._data["Color for Drawing Element 11"]

    @color_for_drawing_element_11.setter
    def color_for_drawing_element_11(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 11`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 11`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_11`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_11`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_11`')
        self._data["Color for Drawing Element 11"] = value

    @property
    def drawing_element_12_type(self):
        """Get drawing_element_12_type

        Returns:
            str: the value of `drawing_element_12_type` or None if not set
        """
        return self._data["Drawing Element 12 Type"]

    @drawing_element_12_type.setter
    def drawing_element_12_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 12 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 12 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_12_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_12_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_12_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_12_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 12 Type"] = value

    @property
    def color_for_drawing_element_12(self):
        """Get color_for_drawing_element_12

        Returns:
            int: the value of `color_for_drawing_element_12` or None if not set
        """
        return self._data["Color for Drawing Element 12"]

    @color_for_drawing_element_12.setter
    def color_for_drawing_element_12(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 12`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 12`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_12`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_12`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_12`')
        self._data["Color for Drawing Element 12"] = value

    @property
    def drawing_element_13_type(self):
        """Get drawing_element_13_type

        Returns:
            str: the value of `drawing_element_13_type` or None if not set
        """
        return self._data["Drawing Element 13 Type"]

    @drawing_element_13_type.setter
    def drawing_element_13_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 13 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 13 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_13_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_13_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_13_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_13_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 13 Type"] = value

    @property
    def color_for_drawing_element_13(self):
        """Get color_for_drawing_element_13

        Returns:
            int: the value of `color_for_drawing_element_13` or None if not set
        """
        return self._data["Color for Drawing Element 13"]

    @color_for_drawing_element_13.setter
    def color_for_drawing_element_13(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 13`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 13`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_13`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_13`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_13`')
        self._data["Color for Drawing Element 13"] = value

    @property
    def drawing_element_14_type(self):
        """Get drawing_element_14_type

        Returns:
            str: the value of `drawing_element_14_type` or None if not set
        """
        return self._data["Drawing Element 14 Type"]

    @drawing_element_14_type.setter
    def drawing_element_14_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 14 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 14 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_14_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_14_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_14_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_14_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 14 Type"] = value

    @property
    def color_for_drawing_element_14(self):
        """Get color_for_drawing_element_14

        Returns:
            int: the value of `color_for_drawing_element_14` or None if not set
        """
        return self._data["Color for Drawing Element 14"]

    @color_for_drawing_element_14.setter
    def color_for_drawing_element_14(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 14`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 14`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_14`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_14`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_14`')
        self._data["Color for Drawing Element 14"] = value

    @property
    def drawing_element_15_type(self):
        """Get drawing_element_15_type

        Returns:
            str: the value of `drawing_element_15_type` or None if not set
        """
        return self._data["Drawing Element 15 Type"]

    @drawing_element_15_type.setter
    def drawing_element_15_type(self, value=None):
        """  Corresponds to IDD Field `Drawing Element 15 Type`

        Args:
            value (str): value for IDD Field `Drawing Element 15 Type`
                Accepted values are:
                      - Text
                      - Walls
                      - Windows
                      - GlassDoors
                      - Doors
                      - Roofs
                      - Floors
                      - DetachedBuildingShades
                      - DetachedFixedShades
                      - AttachedBuildingShades
                      - Photovoltaics
                      - TubularDaylightDomes
                      - TubularDaylightDiffusers
                      - DaylightReferencePoint1
                      - DaylightReferencePoint2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `drawing_element_15_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `drawing_element_15_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `drawing_element_15_type`')
            vals = {}
            vals["text"] = "Text"
            vals["walls"] = "Walls"
            vals["windows"] = "Windows"
            vals["glassdoors"] = "GlassDoors"
            vals["doors"] = "Doors"
            vals["roofs"] = "Roofs"
            vals["floors"] = "Floors"
            vals["detachedbuildingshades"] = "DetachedBuildingShades"
            vals["detachedfixedshades"] = "DetachedFixedShades"
            vals["attachedbuildingshades"] = "AttachedBuildingShades"
            vals["photovoltaics"] = "Photovoltaics"
            vals["tubulardaylightdomes"] = "TubularDaylightDomes"
            vals["tubulardaylightdiffusers"] = "TubularDaylightDiffusers"
            vals["daylightreferencepoint1"] = "DaylightReferencePoint1"
            vals["daylightreferencepoint2"] = "DaylightReferencePoint2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `drawing_element_15_type`'.format(value))
            value = vals[value_lower]
        self._data["Drawing Element 15 Type"] = value

    @property
    def color_for_drawing_element_15(self):
        """Get color_for_drawing_element_15

        Returns:
            int: the value of `color_for_drawing_element_15` or None if not set
        """
        return self._data["Color for Drawing Element 15"]

    @color_for_drawing_element_15.setter
    def color_for_drawing_element_15(self, value=None):
        """  Corresponds to IDD Field `Color for Drawing Element 15`
        use color number for output assignment (e.g. DXF)

        Args:
            value (int): value for IDD Field `Color for Drawing Element 15`
                value >= 0
                value <= 255
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `color_for_drawing_element_15`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `color_for_drawing_element_15`')
            if value > 255:
                raise ValueError('value need to be smaller 255 '
                                 'for field `color_for_drawing_element_15`')
        self._data["Color for Drawing Element 15"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputTableSummaryReports(object):
    """ Corresponds to IDD object `Output:Table:SummaryReports`
        This object allows the user to call report types that are predefined and will appear with the
        other tabular reports.  These predefined reports are sensitive to the OutputControl:Table:Style object
        and appear in the same files as the tabular reports.  The entries for this object is a list
        of the predefined reports that should appear in the tabular report output file.
        There should be as many fields (A) in this object as there are keys in the following (minus
        AllSummary+AllMonthly+AllSummaryAndMonthly)
    
    """
    internal_name = "Output:Table:SummaryReports"
    field_count = 83
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Table:SummaryReports`
        """
        self._data = OrderedDict()
        self._data["Report 1 Name"] = None
        self._data["Report 2 Name"] = None
        self._data["Report 3 Name"] = None
        self._data["Report 4 Name"] = None
        self._data["Report 5 Name"] = None
        self._data["Report 6 Name"] = None
        self._data["Report 7 Name"] = None
        self._data["Report 8 Name"] = None
        self._data["Report 9 Name"] = None
        self._data["Report 10 Name"] = None
        self._data["Report 11 Name"] = None
        self._data["Report 12 Name"] = None
        self._data["Report 13 Name"] = None
        self._data["Report 14 Name"] = None
        self._data["Report 15 Name"] = None
        self._data["Report 16 Name"] = None
        self._data["Report 17 Name"] = None
        self._data["Report 18 Name"] = None
        self._data["Report 19 Name"] = None
        self._data["Report 20 Name"] = None
        self._data["Report 21 Name"] = None
        self._data["Report 22 Name"] = None
        self._data["Report 23 Name"] = None
        self._data["Report 24 Name"] = None
        self._data["Report 25 Name"] = None
        self._data["Report 26 Name"] = None
        self._data["Report 27 Name"] = None
        self._data["Report 28 Name"] = None
        self._data["Report 29 Name"] = None
        self._data["Report 30 Name"] = None
        self._data["Report 31 Name"] = None
        self._data["Report 32 Name"] = None
        self._data["Report 33 Name"] = None
        self._data["Report 34 Name"] = None
        self._data["Report 35 Name"] = None
        self._data["Report 36 Name"] = None
        self._data["Report 37 Name"] = None
        self._data["Report 38 Name"] = None
        self._data["Report 39 Name"] = None
        self._data["Report 40 Name"] = None
        self._data["Report 41 Name"] = None
        self._data["Report 42 Name"] = None
        self._data["Report 43 Name"] = None
        self._data["Report 44 Name"] = None
        self._data["Report 45 Name"] = None
        self._data["Report 46 Name"] = None
        self._data["Report 47 Name"] = None
        self._data["Report 48 Name"] = None
        self._data["Report 49 Name"] = None
        self._data["Report 50 Name"] = None
        self._data["Report 51 Name"] = None
        self._data["Report 52 Name"] = None
        self._data["Report 53 Name"] = None
        self._data["Report 54 Name"] = None
        self._data["Report 55 Name"] = None
        self._data["Report 56 Name"] = None
        self._data["Report 57 Name"] = None
        self._data["Report 58 Name"] = None
        self._data["Report 59 Name"] = None
        self._data["Report 60 Name"] = None
        self._data["Report 61 Name"] = None
        self._data["Report 62 Name"] = None
        self._data["Report 63 Name"] = None
        self._data["Report 64 Name"] = None
        self._data["Report 65 Name"] = None
        self._data["Report 66 Name"] = None
        self._data["Report 67 Name"] = None
        self._data["Report 68 Name"] = None
        self._data["Report 69 Name"] = None
        self._data["Report 70 Name"] = None
        self._data["Report 71 Name"] = None
        self._data["Report 72 Name"] = None
        self._data["Report 73 Name"] = None
        self._data["Report 74 Name"] = None
        self._data["Report 75 Name"] = None
        self._data["Report 76 Name"] = None
        self._data["Report 77 Name"] = None
        self._data["Report 78 Name"] = None
        self._data["Report 79 Name"] = None
        self._data["Report 80 Name"] = None
        self._data["Report 81 Name"] = None
        self._data["Report 82 Name"] = None
        self._data["Report 83 Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.report_1_name = None
        else:
            self.report_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_2_name = None
        else:
            self.report_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_3_name = None
        else:
            self.report_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_4_name = None
        else:
            self.report_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_5_name = None
        else:
            self.report_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_6_name = None
        else:
            self.report_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_7_name = None
        else:
            self.report_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_8_name = None
        else:
            self.report_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_9_name = None
        else:
            self.report_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_10_name = None
        else:
            self.report_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_11_name = None
        else:
            self.report_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_12_name = None
        else:
            self.report_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_13_name = None
        else:
            self.report_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_14_name = None
        else:
            self.report_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_15_name = None
        else:
            self.report_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_16_name = None
        else:
            self.report_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_17_name = None
        else:
            self.report_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_18_name = None
        else:
            self.report_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_19_name = None
        else:
            self.report_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_20_name = None
        else:
            self.report_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_21_name = None
        else:
            self.report_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_22_name = None
        else:
            self.report_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_23_name = None
        else:
            self.report_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_24_name = None
        else:
            self.report_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_25_name = None
        else:
            self.report_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_26_name = None
        else:
            self.report_26_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_27_name = None
        else:
            self.report_27_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_28_name = None
        else:
            self.report_28_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_29_name = None
        else:
            self.report_29_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_30_name = None
        else:
            self.report_30_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_31_name = None
        else:
            self.report_31_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_32_name = None
        else:
            self.report_32_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_33_name = None
        else:
            self.report_33_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_34_name = None
        else:
            self.report_34_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_35_name = None
        else:
            self.report_35_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_36_name = None
        else:
            self.report_36_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_37_name = None
        else:
            self.report_37_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_38_name = None
        else:
            self.report_38_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_39_name = None
        else:
            self.report_39_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_40_name = None
        else:
            self.report_40_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_41_name = None
        else:
            self.report_41_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_42_name = None
        else:
            self.report_42_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_43_name = None
        else:
            self.report_43_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_44_name = None
        else:
            self.report_44_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_45_name = None
        else:
            self.report_45_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_46_name = None
        else:
            self.report_46_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_47_name = None
        else:
            self.report_47_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_48_name = None
        else:
            self.report_48_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_49_name = None
        else:
            self.report_49_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_50_name = None
        else:
            self.report_50_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_51_name = None
        else:
            self.report_51_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_52_name = None
        else:
            self.report_52_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_53_name = None
        else:
            self.report_53_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_54_name = None
        else:
            self.report_54_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_55_name = None
        else:
            self.report_55_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_56_name = None
        else:
            self.report_56_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_57_name = None
        else:
            self.report_57_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_58_name = None
        else:
            self.report_58_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_59_name = None
        else:
            self.report_59_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_60_name = None
        else:
            self.report_60_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_61_name = None
        else:
            self.report_61_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_62_name = None
        else:
            self.report_62_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_63_name = None
        else:
            self.report_63_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_64_name = None
        else:
            self.report_64_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_65_name = None
        else:
            self.report_65_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_66_name = None
        else:
            self.report_66_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_67_name = None
        else:
            self.report_67_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_68_name = None
        else:
            self.report_68_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_69_name = None
        else:
            self.report_69_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_70_name = None
        else:
            self.report_70_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_71_name = None
        else:
            self.report_71_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_72_name = None
        else:
            self.report_72_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_73_name = None
        else:
            self.report_73_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_74_name = None
        else:
            self.report_74_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_75_name = None
        else:
            self.report_75_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_76_name = None
        else:
            self.report_76_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_77_name = None
        else:
            self.report_77_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_78_name = None
        else:
            self.report_78_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_79_name = None
        else:
            self.report_79_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_80_name = None
        else:
            self.report_80_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_81_name = None
        else:
            self.report_81_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_82_name = None
        else:
            self.report_82_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_83_name = None
        else:
            self.report_83_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def report_1_name(self):
        """Get report_1_name

        Returns:
            str: the value of `report_1_name` or None if not set
        """
        return self._data["Report 1 Name"]

    @report_1_name.setter
    def report_1_name(self, value=None):
        """  Corresponds to IDD Field `Report 1 Name`

        Args:
            value (str): value for IDD Field `Report 1 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_1_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_1_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 1 Name"] = value

    @property
    def report_2_name(self):
        """Get report_2_name

        Returns:
            str: the value of `report_2_name` or None if not set
        """
        return self._data["Report 2 Name"]

    @report_2_name.setter
    def report_2_name(self, value=None):
        """  Corresponds to IDD Field `Report 2 Name`

        Args:
            value (str): value for IDD Field `Report 2 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_2_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_2_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 2 Name"] = value

    @property
    def report_3_name(self):
        """Get report_3_name

        Returns:
            str: the value of `report_3_name` or None if not set
        """
        return self._data["Report 3 Name"]

    @report_3_name.setter
    def report_3_name(self, value=None):
        """  Corresponds to IDD Field `Report 3 Name`

        Args:
            value (str): value for IDD Field `Report 3 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_3_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_3_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 3 Name"] = value

    @property
    def report_4_name(self):
        """Get report_4_name

        Returns:
            str: the value of `report_4_name` or None if not set
        """
        return self._data["Report 4 Name"]

    @report_4_name.setter
    def report_4_name(self, value=None):
        """  Corresponds to IDD Field `Report 4 Name`

        Args:
            value (str): value for IDD Field `Report 4 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_4_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_4_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 4 Name"] = value

    @property
    def report_5_name(self):
        """Get report_5_name

        Returns:
            str: the value of `report_5_name` or None if not set
        """
        return self._data["Report 5 Name"]

    @report_5_name.setter
    def report_5_name(self, value=None):
        """  Corresponds to IDD Field `Report 5 Name`

        Args:
            value (str): value for IDD Field `Report 5 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_5_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_5_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 5 Name"] = value

    @property
    def report_6_name(self):
        """Get report_6_name

        Returns:
            str: the value of `report_6_name` or None if not set
        """
        return self._data["Report 6 Name"]

    @report_6_name.setter
    def report_6_name(self, value=None):
        """  Corresponds to IDD Field `Report 6 Name`

        Args:
            value (str): value for IDD Field `Report 6 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_6_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_6_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 6 Name"] = value

    @property
    def report_7_name(self):
        """Get report_7_name

        Returns:
            str: the value of `report_7_name` or None if not set
        """
        return self._data["Report 7 Name"]

    @report_7_name.setter
    def report_7_name(self, value=None):
        """  Corresponds to IDD Field `Report 7 Name`

        Args:
            value (str): value for IDD Field `Report 7 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_7_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_7_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 7 Name"] = value

    @property
    def report_8_name(self):
        """Get report_8_name

        Returns:
            str: the value of `report_8_name` or None if not set
        """
        return self._data["Report 8 Name"]

    @report_8_name.setter
    def report_8_name(self, value=None):
        """  Corresponds to IDD Field `Report 8 Name`

        Args:
            value (str): value for IDD Field `Report 8 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_8_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_8_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 8 Name"] = value

    @property
    def report_9_name(self):
        """Get report_9_name

        Returns:
            str: the value of `report_9_name` or None if not set
        """
        return self._data["Report 9 Name"]

    @report_9_name.setter
    def report_9_name(self, value=None):
        """  Corresponds to IDD Field `Report 9 Name`

        Args:
            value (str): value for IDD Field `Report 9 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_9_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_9_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 9 Name"] = value

    @property
    def report_10_name(self):
        """Get report_10_name

        Returns:
            str: the value of `report_10_name` or None if not set
        """
        return self._data["Report 10 Name"]

    @report_10_name.setter
    def report_10_name(self, value=None):
        """  Corresponds to IDD Field `Report 10 Name`

        Args:
            value (str): value for IDD Field `Report 10 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_10_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_10_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 10 Name"] = value

    @property
    def report_11_name(self):
        """Get report_11_name

        Returns:
            str: the value of `report_11_name` or None if not set
        """
        return self._data["Report 11 Name"]

    @report_11_name.setter
    def report_11_name(self, value=None):
        """  Corresponds to IDD Field `Report 11 Name`

        Args:
            value (str): value for IDD Field `Report 11 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_11_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_11_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 11 Name"] = value

    @property
    def report_12_name(self):
        """Get report_12_name

        Returns:
            str: the value of `report_12_name` or None if not set
        """
        return self._data["Report 12 Name"]

    @report_12_name.setter
    def report_12_name(self, value=None):
        """  Corresponds to IDD Field `Report 12 Name`

        Args:
            value (str): value for IDD Field `Report 12 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_12_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_12_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 12 Name"] = value

    @property
    def report_13_name(self):
        """Get report_13_name

        Returns:
            str: the value of `report_13_name` or None if not set
        """
        return self._data["Report 13 Name"]

    @report_13_name.setter
    def report_13_name(self, value=None):
        """  Corresponds to IDD Field `Report 13 Name`

        Args:
            value (str): value for IDD Field `Report 13 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_13_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_13_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 13 Name"] = value

    @property
    def report_14_name(self):
        """Get report_14_name

        Returns:
            str: the value of `report_14_name` or None if not set
        """
        return self._data["Report 14 Name"]

    @report_14_name.setter
    def report_14_name(self, value=None):
        """  Corresponds to IDD Field `Report 14 Name`

        Args:
            value (str): value for IDD Field `Report 14 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_14_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_14_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 14 Name"] = value

    @property
    def report_15_name(self):
        """Get report_15_name

        Returns:
            str: the value of `report_15_name` or None if not set
        """
        return self._data["Report 15 Name"]

    @report_15_name.setter
    def report_15_name(self, value=None):
        """  Corresponds to IDD Field `Report 15 Name`

        Args:
            value (str): value for IDD Field `Report 15 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_15_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_15_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 15 Name"] = value

    @property
    def report_16_name(self):
        """Get report_16_name

        Returns:
            str: the value of `report_16_name` or None if not set
        """
        return self._data["Report 16 Name"]

    @report_16_name.setter
    def report_16_name(self, value=None):
        """  Corresponds to IDD Field `Report 16 Name`

        Args:
            value (str): value for IDD Field `Report 16 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_16_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_16_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 16 Name"] = value

    @property
    def report_17_name(self):
        """Get report_17_name

        Returns:
            str: the value of `report_17_name` or None if not set
        """
        return self._data["Report 17 Name"]

    @report_17_name.setter
    def report_17_name(self, value=None):
        """  Corresponds to IDD Field `Report 17 Name`

        Args:
            value (str): value for IDD Field `Report 17 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_17_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_17_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 17 Name"] = value

    @property
    def report_18_name(self):
        """Get report_18_name

        Returns:
            str: the value of `report_18_name` or None if not set
        """
        return self._data["Report 18 Name"]

    @report_18_name.setter
    def report_18_name(self, value=None):
        """  Corresponds to IDD Field `Report 18 Name`

        Args:
            value (str): value for IDD Field `Report 18 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_18_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_18_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 18 Name"] = value

    @property
    def report_19_name(self):
        """Get report_19_name

        Returns:
            str: the value of `report_19_name` or None if not set
        """
        return self._data["Report 19 Name"]

    @report_19_name.setter
    def report_19_name(self, value=None):
        """  Corresponds to IDD Field `Report 19 Name`

        Args:
            value (str): value for IDD Field `Report 19 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_19_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_19_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 19 Name"] = value

    @property
    def report_20_name(self):
        """Get report_20_name

        Returns:
            str: the value of `report_20_name` or None if not set
        """
        return self._data["Report 20 Name"]

    @report_20_name.setter
    def report_20_name(self, value=None):
        """  Corresponds to IDD Field `Report 20 Name`

        Args:
            value (str): value for IDD Field `Report 20 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_20_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_20_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 20 Name"] = value

    @property
    def report_21_name(self):
        """Get report_21_name

        Returns:
            str: the value of `report_21_name` or None if not set
        """
        return self._data["Report 21 Name"]

    @report_21_name.setter
    def report_21_name(self, value=None):
        """  Corresponds to IDD Field `Report 21 Name`

        Args:
            value (str): value for IDD Field `Report 21 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_21_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_21_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 21 Name"] = value

    @property
    def report_22_name(self):
        """Get report_22_name

        Returns:
            str: the value of `report_22_name` or None if not set
        """
        return self._data["Report 22 Name"]

    @report_22_name.setter
    def report_22_name(self, value=None):
        """  Corresponds to IDD Field `Report 22 Name`

        Args:
            value (str): value for IDD Field `Report 22 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_22_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_22_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 22 Name"] = value

    @property
    def report_23_name(self):
        """Get report_23_name

        Returns:
            str: the value of `report_23_name` or None if not set
        """
        return self._data["Report 23 Name"]

    @report_23_name.setter
    def report_23_name(self, value=None):
        """  Corresponds to IDD Field `Report 23 Name`

        Args:
            value (str): value for IDD Field `Report 23 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_23_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_23_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 23 Name"] = value

    @property
    def report_24_name(self):
        """Get report_24_name

        Returns:
            str: the value of `report_24_name` or None if not set
        """
        return self._data["Report 24 Name"]

    @report_24_name.setter
    def report_24_name(self, value=None):
        """  Corresponds to IDD Field `Report 24 Name`

        Args:
            value (str): value for IDD Field `Report 24 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_24_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_24_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 24 Name"] = value

    @property
    def report_25_name(self):
        """Get report_25_name

        Returns:
            str: the value of `report_25_name` or None if not set
        """
        return self._data["Report 25 Name"]

    @report_25_name.setter
    def report_25_name(self, value=None):
        """  Corresponds to IDD Field `Report 25 Name`

        Args:
            value (str): value for IDD Field `Report 25 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_25_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_25_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 25 Name"] = value

    @property
    def report_26_name(self):
        """Get report_26_name

        Returns:
            str: the value of `report_26_name` or None if not set
        """
        return self._data["Report 26 Name"]

    @report_26_name.setter
    def report_26_name(self, value=None):
        """  Corresponds to IDD Field `Report 26 Name`

        Args:
            value (str): value for IDD Field `Report 26 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_26_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_26_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_26_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_26_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 26 Name"] = value

    @property
    def report_27_name(self):
        """Get report_27_name

        Returns:
            str: the value of `report_27_name` or None if not set
        """
        return self._data["Report 27 Name"]

    @report_27_name.setter
    def report_27_name(self, value=None):
        """  Corresponds to IDD Field `Report 27 Name`

        Args:
            value (str): value for IDD Field `Report 27 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_27_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_27_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_27_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_27_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 27 Name"] = value

    @property
    def report_28_name(self):
        """Get report_28_name

        Returns:
            str: the value of `report_28_name` or None if not set
        """
        return self._data["Report 28 Name"]

    @report_28_name.setter
    def report_28_name(self, value=None):
        """  Corresponds to IDD Field `Report 28 Name`

        Args:
            value (str): value for IDD Field `Report 28 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_28_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_28_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_28_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_28_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 28 Name"] = value

    @property
    def report_29_name(self):
        """Get report_29_name

        Returns:
            str: the value of `report_29_name` or None if not set
        """
        return self._data["Report 29 Name"]

    @report_29_name.setter
    def report_29_name(self, value=None):
        """  Corresponds to IDD Field `Report 29 Name`

        Args:
            value (str): value for IDD Field `Report 29 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_29_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_29_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_29_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_29_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 29 Name"] = value

    @property
    def report_30_name(self):
        """Get report_30_name

        Returns:
            str: the value of `report_30_name` or None if not set
        """
        return self._data["Report 30 Name"]

    @report_30_name.setter
    def report_30_name(self, value=None):
        """  Corresponds to IDD Field `Report 30 Name`

        Args:
            value (str): value for IDD Field `Report 30 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_30_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_30_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_30_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_30_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 30 Name"] = value

    @property
    def report_31_name(self):
        """Get report_31_name

        Returns:
            str: the value of `report_31_name` or None if not set
        """
        return self._data["Report 31 Name"]

    @report_31_name.setter
    def report_31_name(self, value=None):
        """  Corresponds to IDD Field `Report 31 Name`

        Args:
            value (str): value for IDD Field `Report 31 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_31_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_31_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_31_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_31_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 31 Name"] = value

    @property
    def report_32_name(self):
        """Get report_32_name

        Returns:
            str: the value of `report_32_name` or None if not set
        """
        return self._data["Report 32 Name"]

    @report_32_name.setter
    def report_32_name(self, value=None):
        """  Corresponds to IDD Field `Report 32 Name`

        Args:
            value (str): value for IDD Field `Report 32 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_32_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_32_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_32_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_32_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 32 Name"] = value

    @property
    def report_33_name(self):
        """Get report_33_name

        Returns:
            str: the value of `report_33_name` or None if not set
        """
        return self._data["Report 33 Name"]

    @report_33_name.setter
    def report_33_name(self, value=None):
        """  Corresponds to IDD Field `Report 33 Name`

        Args:
            value (str): value for IDD Field `Report 33 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_33_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_33_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_33_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_33_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 33 Name"] = value

    @property
    def report_34_name(self):
        """Get report_34_name

        Returns:
            str: the value of `report_34_name` or None if not set
        """
        return self._data["Report 34 Name"]

    @report_34_name.setter
    def report_34_name(self, value=None):
        """  Corresponds to IDD Field `Report 34 Name`

        Args:
            value (str): value for IDD Field `Report 34 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_34_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_34_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_34_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_34_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 34 Name"] = value

    @property
    def report_35_name(self):
        """Get report_35_name

        Returns:
            str: the value of `report_35_name` or None if not set
        """
        return self._data["Report 35 Name"]

    @report_35_name.setter
    def report_35_name(self, value=None):
        """  Corresponds to IDD Field `Report 35 Name`

        Args:
            value (str): value for IDD Field `Report 35 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_35_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_35_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_35_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_35_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 35 Name"] = value

    @property
    def report_36_name(self):
        """Get report_36_name

        Returns:
            str: the value of `report_36_name` or None if not set
        """
        return self._data["Report 36 Name"]

    @report_36_name.setter
    def report_36_name(self, value=None):
        """  Corresponds to IDD Field `Report 36 Name`

        Args:
            value (str): value for IDD Field `Report 36 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_36_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_36_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_36_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_36_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 36 Name"] = value

    @property
    def report_37_name(self):
        """Get report_37_name

        Returns:
            str: the value of `report_37_name` or None if not set
        """
        return self._data["Report 37 Name"]

    @report_37_name.setter
    def report_37_name(self, value=None):
        """  Corresponds to IDD Field `Report 37 Name`

        Args:
            value (str): value for IDD Field `Report 37 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_37_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_37_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_37_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_37_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 37 Name"] = value

    @property
    def report_38_name(self):
        """Get report_38_name

        Returns:
            str: the value of `report_38_name` or None if not set
        """
        return self._data["Report 38 Name"]

    @report_38_name.setter
    def report_38_name(self, value=None):
        """  Corresponds to IDD Field `Report 38 Name`

        Args:
            value (str): value for IDD Field `Report 38 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_38_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_38_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_38_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_38_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 38 Name"] = value

    @property
    def report_39_name(self):
        """Get report_39_name

        Returns:
            str: the value of `report_39_name` or None if not set
        """
        return self._data["Report 39 Name"]

    @report_39_name.setter
    def report_39_name(self, value=None):
        """  Corresponds to IDD Field `Report 39 Name`

        Args:
            value (str): value for IDD Field `Report 39 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_39_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_39_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_39_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_39_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 39 Name"] = value

    @property
    def report_40_name(self):
        """Get report_40_name

        Returns:
            str: the value of `report_40_name` or None if not set
        """
        return self._data["Report 40 Name"]

    @report_40_name.setter
    def report_40_name(self, value=None):
        """  Corresponds to IDD Field `Report 40 Name`

        Args:
            value (str): value for IDD Field `Report 40 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_40_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_40_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_40_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_40_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 40 Name"] = value

    @property
    def report_41_name(self):
        """Get report_41_name

        Returns:
            str: the value of `report_41_name` or None if not set
        """
        return self._data["Report 41 Name"]

    @report_41_name.setter
    def report_41_name(self, value=None):
        """  Corresponds to IDD Field `Report 41 Name`

        Args:
            value (str): value for IDD Field `Report 41 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_41_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_41_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_41_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_41_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 41 Name"] = value

    @property
    def report_42_name(self):
        """Get report_42_name

        Returns:
            str: the value of `report_42_name` or None if not set
        """
        return self._data["Report 42 Name"]

    @report_42_name.setter
    def report_42_name(self, value=None):
        """  Corresponds to IDD Field `Report 42 Name`

        Args:
            value (str): value for IDD Field `Report 42 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_42_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_42_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_42_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_42_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 42 Name"] = value

    @property
    def report_43_name(self):
        """Get report_43_name

        Returns:
            str: the value of `report_43_name` or None if not set
        """
        return self._data["Report 43 Name"]

    @report_43_name.setter
    def report_43_name(self, value=None):
        """  Corresponds to IDD Field `Report 43 Name`

        Args:
            value (str): value for IDD Field `Report 43 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_43_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_43_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_43_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_43_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 43 Name"] = value

    @property
    def report_44_name(self):
        """Get report_44_name

        Returns:
            str: the value of `report_44_name` or None if not set
        """
        return self._data["Report 44 Name"]

    @report_44_name.setter
    def report_44_name(self, value=None):
        """  Corresponds to IDD Field `Report 44 Name`

        Args:
            value (str): value for IDD Field `Report 44 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_44_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_44_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_44_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_44_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 44 Name"] = value

    @property
    def report_45_name(self):
        """Get report_45_name

        Returns:
            str: the value of `report_45_name` or None if not set
        """
        return self._data["Report 45 Name"]

    @report_45_name.setter
    def report_45_name(self, value=None):
        """  Corresponds to IDD Field `Report 45 Name`

        Args:
            value (str): value for IDD Field `Report 45 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_45_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_45_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_45_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_45_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 45 Name"] = value

    @property
    def report_46_name(self):
        """Get report_46_name

        Returns:
            str: the value of `report_46_name` or None if not set
        """
        return self._data["Report 46 Name"]

    @report_46_name.setter
    def report_46_name(self, value=None):
        """  Corresponds to IDD Field `Report 46 Name`

        Args:
            value (str): value for IDD Field `Report 46 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_46_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_46_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_46_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_46_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 46 Name"] = value

    @property
    def report_47_name(self):
        """Get report_47_name

        Returns:
            str: the value of `report_47_name` or None if not set
        """
        return self._data["Report 47 Name"]

    @report_47_name.setter
    def report_47_name(self, value=None):
        """  Corresponds to IDD Field `Report 47 Name`

        Args:
            value (str): value for IDD Field `Report 47 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_47_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_47_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_47_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_47_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 47 Name"] = value

    @property
    def report_48_name(self):
        """Get report_48_name

        Returns:
            str: the value of `report_48_name` or None if not set
        """
        return self._data["Report 48 Name"]

    @report_48_name.setter
    def report_48_name(self, value=None):
        """  Corresponds to IDD Field `Report 48 Name`

        Args:
            value (str): value for IDD Field `Report 48 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_48_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_48_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_48_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_48_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 48 Name"] = value

    @property
    def report_49_name(self):
        """Get report_49_name

        Returns:
            str: the value of `report_49_name` or None if not set
        """
        return self._data["Report 49 Name"]

    @report_49_name.setter
    def report_49_name(self, value=None):
        """  Corresponds to IDD Field `Report 49 Name`

        Args:
            value (str): value for IDD Field `Report 49 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_49_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_49_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_49_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_49_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 49 Name"] = value

    @property
    def report_50_name(self):
        """Get report_50_name

        Returns:
            str: the value of `report_50_name` or None if not set
        """
        return self._data["Report 50 Name"]

    @report_50_name.setter
    def report_50_name(self, value=None):
        """  Corresponds to IDD Field `Report 50 Name`

        Args:
            value (str): value for IDD Field `Report 50 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_50_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_50_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_50_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_50_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 50 Name"] = value

    @property
    def report_51_name(self):
        """Get report_51_name

        Returns:
            str: the value of `report_51_name` or None if not set
        """
        return self._data["Report 51 Name"]

    @report_51_name.setter
    def report_51_name(self, value=None):
        """  Corresponds to IDD Field `Report 51 Name`

        Args:
            value (str): value for IDD Field `Report 51 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_51_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_51_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_51_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_51_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 51 Name"] = value

    @property
    def report_52_name(self):
        """Get report_52_name

        Returns:
            str: the value of `report_52_name` or None if not set
        """
        return self._data["Report 52 Name"]

    @report_52_name.setter
    def report_52_name(self, value=None):
        """  Corresponds to IDD Field `Report 52 Name`

        Args:
            value (str): value for IDD Field `Report 52 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_52_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_52_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_52_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_52_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 52 Name"] = value

    @property
    def report_53_name(self):
        """Get report_53_name

        Returns:
            str: the value of `report_53_name` or None if not set
        """
        return self._data["Report 53 Name"]

    @report_53_name.setter
    def report_53_name(self, value=None):
        """  Corresponds to IDD Field `Report 53 Name`

        Args:
            value (str): value for IDD Field `Report 53 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_53_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_53_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_53_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_53_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 53 Name"] = value

    @property
    def report_54_name(self):
        """Get report_54_name

        Returns:
            str: the value of `report_54_name` or None if not set
        """
        return self._data["Report 54 Name"]

    @report_54_name.setter
    def report_54_name(self, value=None):
        """  Corresponds to IDD Field `Report 54 Name`

        Args:
            value (str): value for IDD Field `Report 54 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_54_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_54_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_54_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_54_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 54 Name"] = value

    @property
    def report_55_name(self):
        """Get report_55_name

        Returns:
            str: the value of `report_55_name` or None if not set
        """
        return self._data["Report 55 Name"]

    @report_55_name.setter
    def report_55_name(self, value=None):
        """  Corresponds to IDD Field `Report 55 Name`

        Args:
            value (str): value for IDD Field `Report 55 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_55_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_55_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_55_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_55_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 55 Name"] = value

    @property
    def report_56_name(self):
        """Get report_56_name

        Returns:
            str: the value of `report_56_name` or None if not set
        """
        return self._data["Report 56 Name"]

    @report_56_name.setter
    def report_56_name(self, value=None):
        """  Corresponds to IDD Field `Report 56 Name`

        Args:
            value (str): value for IDD Field `Report 56 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_56_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_56_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_56_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_56_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 56 Name"] = value

    @property
    def report_57_name(self):
        """Get report_57_name

        Returns:
            str: the value of `report_57_name` or None if not set
        """
        return self._data["Report 57 Name"]

    @report_57_name.setter
    def report_57_name(self, value=None):
        """  Corresponds to IDD Field `Report 57 Name`

        Args:
            value (str): value for IDD Field `Report 57 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_57_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_57_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_57_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_57_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 57 Name"] = value

    @property
    def report_58_name(self):
        """Get report_58_name

        Returns:
            str: the value of `report_58_name` or None if not set
        """
        return self._data["Report 58 Name"]

    @report_58_name.setter
    def report_58_name(self, value=None):
        """  Corresponds to IDD Field `Report 58 Name`

        Args:
            value (str): value for IDD Field `Report 58 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_58_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_58_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_58_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_58_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 58 Name"] = value

    @property
    def report_59_name(self):
        """Get report_59_name

        Returns:
            str: the value of `report_59_name` or None if not set
        """
        return self._data["Report 59 Name"]

    @report_59_name.setter
    def report_59_name(self, value=None):
        """  Corresponds to IDD Field `Report 59 Name`

        Args:
            value (str): value for IDD Field `Report 59 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_59_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_59_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_59_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_59_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 59 Name"] = value

    @property
    def report_60_name(self):
        """Get report_60_name

        Returns:
            str: the value of `report_60_name` or None if not set
        """
        return self._data["Report 60 Name"]

    @report_60_name.setter
    def report_60_name(self, value=None):
        """  Corresponds to IDD Field `Report 60 Name`

        Args:
            value (str): value for IDD Field `Report 60 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_60_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_60_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_60_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_60_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 60 Name"] = value

    @property
    def report_61_name(self):
        """Get report_61_name

        Returns:
            str: the value of `report_61_name` or None if not set
        """
        return self._data["Report 61 Name"]

    @report_61_name.setter
    def report_61_name(self, value=None):
        """  Corresponds to IDD Field `Report 61 Name`

        Args:
            value (str): value for IDD Field `Report 61 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_61_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_61_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_61_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_61_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 61 Name"] = value

    @property
    def report_62_name(self):
        """Get report_62_name

        Returns:
            str: the value of `report_62_name` or None if not set
        """
        return self._data["Report 62 Name"]

    @report_62_name.setter
    def report_62_name(self, value=None):
        """  Corresponds to IDD Field `Report 62 Name`

        Args:
            value (str): value for IDD Field `Report 62 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_62_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_62_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_62_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_62_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 62 Name"] = value

    @property
    def report_63_name(self):
        """Get report_63_name

        Returns:
            str: the value of `report_63_name` or None if not set
        """
        return self._data["Report 63 Name"]

    @report_63_name.setter
    def report_63_name(self, value=None):
        """  Corresponds to IDD Field `Report 63 Name`

        Args:
            value (str): value for IDD Field `Report 63 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_63_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_63_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_63_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_63_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 63 Name"] = value

    @property
    def report_64_name(self):
        """Get report_64_name

        Returns:
            str: the value of `report_64_name` or None if not set
        """
        return self._data["Report 64 Name"]

    @report_64_name.setter
    def report_64_name(self, value=None):
        """  Corresponds to IDD Field `Report 64 Name`

        Args:
            value (str): value for IDD Field `Report 64 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_64_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_64_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_64_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_64_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 64 Name"] = value

    @property
    def report_65_name(self):
        """Get report_65_name

        Returns:
            str: the value of `report_65_name` or None if not set
        """
        return self._data["Report 65 Name"]

    @report_65_name.setter
    def report_65_name(self, value=None):
        """  Corresponds to IDD Field `Report 65 Name`

        Args:
            value (str): value for IDD Field `Report 65 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_65_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_65_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_65_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_65_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 65 Name"] = value

    @property
    def report_66_name(self):
        """Get report_66_name

        Returns:
            str: the value of `report_66_name` or None if not set
        """
        return self._data["Report 66 Name"]

    @report_66_name.setter
    def report_66_name(self, value=None):
        """  Corresponds to IDD Field `Report 66 Name`

        Args:
            value (str): value for IDD Field `Report 66 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_66_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_66_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_66_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_66_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 66 Name"] = value

    @property
    def report_67_name(self):
        """Get report_67_name

        Returns:
            str: the value of `report_67_name` or None if not set
        """
        return self._data["Report 67 Name"]

    @report_67_name.setter
    def report_67_name(self, value=None):
        """  Corresponds to IDD Field `Report 67 Name`

        Args:
            value (str): value for IDD Field `Report 67 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_67_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_67_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_67_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_67_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 67 Name"] = value

    @property
    def report_68_name(self):
        """Get report_68_name

        Returns:
            str: the value of `report_68_name` or None if not set
        """
        return self._data["Report 68 Name"]

    @report_68_name.setter
    def report_68_name(self, value=None):
        """  Corresponds to IDD Field `Report 68 Name`

        Args:
            value (str): value for IDD Field `Report 68 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_68_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_68_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_68_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_68_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 68 Name"] = value

    @property
    def report_69_name(self):
        """Get report_69_name

        Returns:
            str: the value of `report_69_name` or None if not set
        """
        return self._data["Report 69 Name"]

    @report_69_name.setter
    def report_69_name(self, value=None):
        """  Corresponds to IDD Field `Report 69 Name`

        Args:
            value (str): value for IDD Field `Report 69 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_69_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_69_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_69_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_69_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 69 Name"] = value

    @property
    def report_70_name(self):
        """Get report_70_name

        Returns:
            str: the value of `report_70_name` or None if not set
        """
        return self._data["Report 70 Name"]

    @report_70_name.setter
    def report_70_name(self, value=None):
        """  Corresponds to IDD Field `Report 70 Name`

        Args:
            value (str): value for IDD Field `Report 70 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_70_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_70_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_70_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_70_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 70 Name"] = value

    @property
    def report_71_name(self):
        """Get report_71_name

        Returns:
            str: the value of `report_71_name` or None if not set
        """
        return self._data["Report 71 Name"]

    @report_71_name.setter
    def report_71_name(self, value=None):
        """  Corresponds to IDD Field `Report 71 Name`

        Args:
            value (str): value for IDD Field `Report 71 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_71_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_71_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_71_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_71_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 71 Name"] = value

    @property
    def report_72_name(self):
        """Get report_72_name

        Returns:
            str: the value of `report_72_name` or None if not set
        """
        return self._data["Report 72 Name"]

    @report_72_name.setter
    def report_72_name(self, value=None):
        """  Corresponds to IDD Field `Report 72 Name`

        Args:
            value (str): value for IDD Field `Report 72 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_72_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_72_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_72_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_72_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 72 Name"] = value

    @property
    def report_73_name(self):
        """Get report_73_name

        Returns:
            str: the value of `report_73_name` or None if not set
        """
        return self._data["Report 73 Name"]

    @report_73_name.setter
    def report_73_name(self, value=None):
        """  Corresponds to IDD Field `Report 73 Name`

        Args:
            value (str): value for IDD Field `Report 73 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_73_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_73_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_73_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_73_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 73 Name"] = value

    @property
    def report_74_name(self):
        """Get report_74_name

        Returns:
            str: the value of `report_74_name` or None if not set
        """
        return self._data["Report 74 Name"]

    @report_74_name.setter
    def report_74_name(self, value=None):
        """  Corresponds to IDD Field `Report 74 Name`

        Args:
            value (str): value for IDD Field `Report 74 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_74_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_74_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_74_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_74_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 74 Name"] = value

    @property
    def report_75_name(self):
        """Get report_75_name

        Returns:
            str: the value of `report_75_name` or None if not set
        """
        return self._data["Report 75 Name"]

    @report_75_name.setter
    def report_75_name(self, value=None):
        """  Corresponds to IDD Field `Report 75 Name`

        Args:
            value (str): value for IDD Field `Report 75 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_75_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_75_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_75_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_75_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 75 Name"] = value

    @property
    def report_76_name(self):
        """Get report_76_name

        Returns:
            str: the value of `report_76_name` or None if not set
        """
        return self._data["Report 76 Name"]

    @report_76_name.setter
    def report_76_name(self, value=None):
        """  Corresponds to IDD Field `Report 76 Name`

        Args:
            value (str): value for IDD Field `Report 76 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_76_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_76_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_76_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_76_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 76 Name"] = value

    @property
    def report_77_name(self):
        """Get report_77_name

        Returns:
            str: the value of `report_77_name` or None if not set
        """
        return self._data["Report 77 Name"]

    @report_77_name.setter
    def report_77_name(self, value=None):
        """  Corresponds to IDD Field `Report 77 Name`

        Args:
            value (str): value for IDD Field `Report 77 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_77_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_77_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_77_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_77_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 77 Name"] = value

    @property
    def report_78_name(self):
        """Get report_78_name

        Returns:
            str: the value of `report_78_name` or None if not set
        """
        return self._data["Report 78 Name"]

    @report_78_name.setter
    def report_78_name(self, value=None):
        """  Corresponds to IDD Field `Report 78 Name`

        Args:
            value (str): value for IDD Field `Report 78 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_78_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_78_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_78_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_78_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 78 Name"] = value

    @property
    def report_79_name(self):
        """Get report_79_name

        Returns:
            str: the value of `report_79_name` or None if not set
        """
        return self._data["Report 79 Name"]

    @report_79_name.setter
    def report_79_name(self, value=None):
        """  Corresponds to IDD Field `Report 79 Name`

        Args:
            value (str): value for IDD Field `Report 79 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_79_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_79_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_79_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_79_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 79 Name"] = value

    @property
    def report_80_name(self):
        """Get report_80_name

        Returns:
            str: the value of `report_80_name` or None if not set
        """
        return self._data["Report 80 Name"]

    @report_80_name.setter
    def report_80_name(self, value=None):
        """  Corresponds to IDD Field `Report 80 Name`

        Args:
            value (str): value for IDD Field `Report 80 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_80_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_80_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_80_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_80_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 80 Name"] = value

    @property
    def report_81_name(self):
        """Get report_81_name

        Returns:
            str: the value of `report_81_name` or None if not set
        """
        return self._data["Report 81 Name"]

    @report_81_name.setter
    def report_81_name(self, value=None):
        """  Corresponds to IDD Field `Report 81 Name`

        Args:
            value (str): value for IDD Field `Report 81 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_81_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_81_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_81_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_81_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 81 Name"] = value

    @property
    def report_82_name(self):
        """Get report_82_name

        Returns:
            str: the value of `report_82_name` or None if not set
        """
        return self._data["Report 82 Name"]

    @report_82_name.setter
    def report_82_name(self, value=None):
        """  Corresponds to IDD Field `Report 82 Name`

        Args:
            value (str): value for IDD Field `Report 82 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_82_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_82_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_82_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_82_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 82 Name"] = value

    @property
    def report_83_name(self):
        """Get report_83_name

        Returns:
            str: the value of `report_83_name` or None if not set
        """
        return self._data["Report 83 Name"]

    @report_83_name.setter
    def report_83_name(self, value=None):
        """  Corresponds to IDD Field `Report 83 Name`

        Args:
            value (str): value for IDD Field `Report 83 Name`
                Accepted values are:
                      - AllSummary
                      - AllSummaryAndSizingPeriod
                      - AllMonthly
                      - AllSummaryAndMonthly
                      - AllSummaryMonthlyAndSizingPeriod
                      - AnnualBuildingUtilityPerformanceSummary
                      - InputVerificationandResultsSummary
                      - DemandEndUseComponentsSummary
                      - SourceEnergyEndUseComponentsSummary
                      - ClimaticDataSummary
                      - EquipmentSummary
                      - EnvelopeSummary
                      - SurfaceShadowingSummary
                      - ShadingSummary
                      - LightingSummary
                      - HVACSizingSummary
                      - SystemSummary
                      - ComponentSizingSummary
                      - OutdoorAirSummary
                      - ObjectCountSummary
                      - ComponentCostEconomicsSummary
                      - AdaptiveComfortSummary
                      - SensibleHeatGainSummary
                      - ZoneComponentLoadSummary
                      - Standard62.1Summary
                      - EnergyMeters
                      - LEEDSummary
                      - ZoneCoolingSummaryMonthly
                      - ZoneHeatingSummaryMonthly
                      - ZoneElectricSummaryMonthly
                      - SpaceGainsMonthly
                      - PeakSpaceGainsMonthly
                      - SpaceGainComponentsAtCoolingPeakMonthly
                      - EnergyConsumptionElectricityNaturalGasMonthly
                      - EnergyConsumptionElectricityGeneratedPropaneMonthly
                      - EnergyConsumptionDieselFuelOilMonthly
                      - EnergyConsumptionDistrictHeatingCoolingMonthly
                      - EnergyConsumptionCoalGasolineMonthly
                      - EnergyConsumptionOtherFuelsMonthly
                      - EndUseEnergyConsumptionElectricityMonthly
                      - EndUseEnergyConsumptionNaturalGasMonthly
                      - EndUseEnergyConsumptionDieselMonthly
                      - EndUseEnergyConsumptionFuelOilMonthly
                      - EndUseEnergyConsumptionCoalMonthly
                      - EndUseEnergyConsumptionPropaneMonthly
                      - EndUseEnergyConsumptionGasolineMonthly
                      - EndUseEnergyConsumptionOtherFuelsMonthly
                      - PeakEnergyEndUseElectricityPart1Monthly
                      - PeakEnergyEndUseElectricityPart2Monthly
                      - ElectricComponentsOfPeakDemandMonthly
                      - PeakEnergyEndUseNaturalGasMonthly
                      - PeakEnergyEndUseDieselMonthly
                      - PeakEnergyEndUseFuelOilMonthly
                      - PeakEnergyEndUseCoalMonthly
                      - PeakEnergyEndUsePropaneMonthly
                      - PeakEnergyEndUseGasolineMonthly
                      - PeakEnergyEndUseOtherFuelsMonthly
                      - SetpointsNotMetWithTemperaturesMonthly
                      - ComfortReportSimple55Monthly
                      - UnglazedTranspiredSolarCollectorSummaryMonthly
                      - OccupantComfortDataSummaryMonthly
                      - ChillerReportMonthly
                      - TowerReportMonthly
                      - BoilerReportMonthly
                      - DXReportMonthly
                      - WindowReportMonthly
                      - WindowEnergyReportMonthly
                      - WindowZoneSummaryMonthly
                      - WindowEnergyZoneSummaryMonthly
                      - AverageOutdoorConditionsMonthly
                      - OutdoorConditionsMaximumDryBulbMonthly
                      - OutdoorConditionsMinimumDryBulbMonthly
                      - OutdoorConditionsMaximumWetBulbMonthly
                      - OutdoorConditionsMaximumDewPointMonthly
                      - OutdoorGroundConditionsMonthly
                      - WindowACReportMonthly
                      - WaterHeaterReportMonthly
                      - GeneratorReportMonthly
                      - DaylightingReportMonthly
                      - CoilReportMonthly
                      - PlantLoopDemandReportMonthly
                      - FanReportMonthly
                      - PumpReportMonthly
                      - CondLoopDemandReportMonthly
                      - ZoneTemperatureOscillationReportMonthly
                      - AirLoopSystemEnergyAndWaterUseMonthly
                      - AirLoopSystemComponentLoadsMonthly
                      - AirLoopSystemComponentEnergyUseMonthly
                      - MechanicalVentilationLoadsMonthly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `report_83_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `report_83_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `report_83_name`')
            vals = {}
            vals["allsummary"] = "AllSummary"
            vals["allsummaryandsizingperiod"] = "AllSummaryAndSizingPeriod"
            vals["allmonthly"] = "AllMonthly"
            vals["allsummaryandmonthly"] = "AllSummaryAndMonthly"
            vals["allsummarymonthlyandsizingperiod"] = "AllSummaryMonthlyAndSizingPeriod"
            vals["annualbuildingutilityperformancesummary"] = "AnnualBuildingUtilityPerformanceSummary"
            vals["inputverificationandresultssummary"] = "InputVerificationandResultsSummary"
            vals["demandendusecomponentssummary"] = "DemandEndUseComponentsSummary"
            vals["sourceenergyendusecomponentssummary"] = "SourceEnergyEndUseComponentsSummary"
            vals["climaticdatasummary"] = "ClimaticDataSummary"
            vals["equipmentsummary"] = "EquipmentSummary"
            vals["envelopesummary"] = "EnvelopeSummary"
            vals["surfaceshadowingsummary"] = "SurfaceShadowingSummary"
            vals["shadingsummary"] = "ShadingSummary"
            vals["lightingsummary"] = "LightingSummary"
            vals["hvacsizingsummary"] = "HVACSizingSummary"
            vals["systemsummary"] = "SystemSummary"
            vals["componentsizingsummary"] = "ComponentSizingSummary"
            vals["outdoorairsummary"] = "OutdoorAirSummary"
            vals["objectcountsummary"] = "ObjectCountSummary"
            vals["componentcosteconomicssummary"] = "ComponentCostEconomicsSummary"
            vals["adaptivecomfortsummary"] = "AdaptiveComfortSummary"
            vals["sensibleheatgainsummary"] = "SensibleHeatGainSummary"
            vals["zonecomponentloadsummary"] = "ZoneComponentLoadSummary"
            vals["standard62.1summary"] = "Standard62.1Summary"
            vals["energymeters"] = "EnergyMeters"
            vals["leedsummary"] = "LEEDSummary"
            vals["zonecoolingsummarymonthly"] = "ZoneCoolingSummaryMonthly"
            vals["zoneheatingsummarymonthly"] = "ZoneHeatingSummaryMonthly"
            vals["zoneelectricsummarymonthly"] = "ZoneElectricSummaryMonthly"
            vals["spacegainsmonthly"] = "SpaceGainsMonthly"
            vals["peakspacegainsmonthly"] = "PeakSpaceGainsMonthly"
            vals["spacegaincomponentsatcoolingpeakmonthly"] = "SpaceGainComponentsAtCoolingPeakMonthly"
            vals["energyconsumptionelectricitynaturalgasmonthly"] = "EnergyConsumptionElectricityNaturalGasMonthly"
            vals["energyconsumptionelectricitygeneratedpropanemonthly"] = "EnergyConsumptionElectricityGeneratedPropaneMonthly"
            vals["energyconsumptiondieselfueloilmonthly"] = "EnergyConsumptionDieselFuelOilMonthly"
            vals["energyconsumptiondistrictheatingcoolingmonthly"] = "EnergyConsumptionDistrictHeatingCoolingMonthly"
            vals["energyconsumptioncoalgasolinemonthly"] = "EnergyConsumptionCoalGasolineMonthly"
            vals["energyconsumptionotherfuelsmonthly"] = "EnergyConsumptionOtherFuelsMonthly"
            vals["enduseenergyconsumptionelectricitymonthly"] = "EndUseEnergyConsumptionElectricityMonthly"
            vals["enduseenergyconsumptionnaturalgasmonthly"] = "EndUseEnergyConsumptionNaturalGasMonthly"
            vals["enduseenergyconsumptiondieselmonthly"] = "EndUseEnergyConsumptionDieselMonthly"
            vals["enduseenergyconsumptionfueloilmonthly"] = "EndUseEnergyConsumptionFuelOilMonthly"
            vals["enduseenergyconsumptioncoalmonthly"] = "EndUseEnergyConsumptionCoalMonthly"
            vals["enduseenergyconsumptionpropanemonthly"] = "EndUseEnergyConsumptionPropaneMonthly"
            vals["enduseenergyconsumptiongasolinemonthly"] = "EndUseEnergyConsumptionGasolineMonthly"
            vals["enduseenergyconsumptionotherfuelsmonthly"] = "EndUseEnergyConsumptionOtherFuelsMonthly"
            vals["peakenergyenduseelectricitypart1monthly"] = "PeakEnergyEndUseElectricityPart1Monthly"
            vals["peakenergyenduseelectricitypart2monthly"] = "PeakEnergyEndUseElectricityPart2Monthly"
            vals["electriccomponentsofpeakdemandmonthly"] = "ElectricComponentsOfPeakDemandMonthly"
            vals["peakenergyendusenaturalgasmonthly"] = "PeakEnergyEndUseNaturalGasMonthly"
            vals["peakenergyendusedieselmonthly"] = "PeakEnergyEndUseDieselMonthly"
            vals["peakenergyendusefueloilmonthly"] = "PeakEnergyEndUseFuelOilMonthly"
            vals["peakenergyendusecoalmonthly"] = "PeakEnergyEndUseCoalMonthly"
            vals["peakenergyendusepropanemonthly"] = "PeakEnergyEndUsePropaneMonthly"
            vals["peakenergyendusegasolinemonthly"] = "PeakEnergyEndUseGasolineMonthly"
            vals["peakenergyenduseotherfuelsmonthly"] = "PeakEnergyEndUseOtherFuelsMonthly"
            vals["setpointsnotmetwithtemperaturesmonthly"] = "SetpointsNotMetWithTemperaturesMonthly"
            vals["comfortreportsimple55monthly"] = "ComfortReportSimple55Monthly"
            vals["unglazedtranspiredsolarcollectorsummarymonthly"] = "UnglazedTranspiredSolarCollectorSummaryMonthly"
            vals["occupantcomfortdatasummarymonthly"] = "OccupantComfortDataSummaryMonthly"
            vals["chillerreportmonthly"] = "ChillerReportMonthly"
            vals["towerreportmonthly"] = "TowerReportMonthly"
            vals["boilerreportmonthly"] = "BoilerReportMonthly"
            vals["dxreportmonthly"] = "DXReportMonthly"
            vals["windowreportmonthly"] = "WindowReportMonthly"
            vals["windowenergyreportmonthly"] = "WindowEnergyReportMonthly"
            vals["windowzonesummarymonthly"] = "WindowZoneSummaryMonthly"
            vals["windowenergyzonesummarymonthly"] = "WindowEnergyZoneSummaryMonthly"
            vals["averageoutdoorconditionsmonthly"] = "AverageOutdoorConditionsMonthly"
            vals["outdoorconditionsmaximumdrybulbmonthly"] = "OutdoorConditionsMaximumDryBulbMonthly"
            vals["outdoorconditionsminimumdrybulbmonthly"] = "OutdoorConditionsMinimumDryBulbMonthly"
            vals["outdoorconditionsmaximumwetbulbmonthly"] = "OutdoorConditionsMaximumWetBulbMonthly"
            vals["outdoorconditionsmaximumdewpointmonthly"] = "OutdoorConditionsMaximumDewPointMonthly"
            vals["outdoorgroundconditionsmonthly"] = "OutdoorGroundConditionsMonthly"
            vals["windowacreportmonthly"] = "WindowACReportMonthly"
            vals["waterheaterreportmonthly"] = "WaterHeaterReportMonthly"
            vals["generatorreportmonthly"] = "GeneratorReportMonthly"
            vals["daylightingreportmonthly"] = "DaylightingReportMonthly"
            vals["coilreportmonthly"] = "CoilReportMonthly"
            vals["plantloopdemandreportmonthly"] = "PlantLoopDemandReportMonthly"
            vals["fanreportmonthly"] = "FanReportMonthly"
            vals["pumpreportmonthly"] = "PumpReportMonthly"
            vals["condloopdemandreportmonthly"] = "CondLoopDemandReportMonthly"
            vals["zonetemperatureoscillationreportmonthly"] = "ZoneTemperatureOscillationReportMonthly"
            vals["airloopsystemenergyandwaterusemonthly"] = "AirLoopSystemEnergyAndWaterUseMonthly"
            vals["airloopsystemcomponentloadsmonthly"] = "AirLoopSystemComponentLoadsMonthly"
            vals["airloopsystemcomponentenergyusemonthly"] = "AirLoopSystemComponentEnergyUseMonthly"
            vals["mechanicalventilationloadsmonthly"] = "MechanicalVentilationLoadsMonthly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `report_83_name`'.format(value))
            value = vals[value_lower]
        self._data["Report 83 Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputTableTimeBins(object):
    """ Corresponds to IDD object `Output:Table:TimeBins`
        Produces a bin report in the table output file which shows the amount of time in hours
        that occurs in different bins for a single specific output variable or meter.
        Two different types of binning are reported: by month and by hour of the day.
    
    """
    internal_name = "Output:Table:TimeBins"
    field_count = 7
    required_fields = ["Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Table:TimeBins`
        """
        self._data = OrderedDict()
        self._data["Key Value"] = None
        self._data["Variable Name"] = None
        self._data["Interval Start"] = None
        self._data["Interval Size"] = None
        self._data["Interval Count"] = None
        self._data["Schedule Name"] = None
        self._data["Variable Type"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.key_value = None
        else:
            self.key_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.interval_start = None
        else:
            self.interval_start = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.interval_size = None
        else:
            self.interval_size = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.interval_count = None
        else:
            self.interval_count = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_type = None
        else:
            self.variable_type = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def key_value(self):
        """Get key_value

        Returns:
            str: the value of `key_value` or None if not set
        """
        return self._data["Key Value"]

    @key_value.setter
    def key_value(self, value="*"):
        """  Corresponds to IDD Field `Key Value`
        use '*' (without quotes) to apply this variable to all keys

        Args:
            value (str): value for IDD Field `Key Value`
                Default value: *
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_value`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_value`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_value`')
        self._data["Key Value"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `Variable Name`

        Args:
            value (str): value for IDD Field `Variable Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_name`')
        self._data["Variable Name"] = value

    @property
    def interval_start(self):
        """Get interval_start

        Returns:
            float: the value of `interval_start` or None if not set
        """
        return self._data["Interval Start"]

    @interval_start.setter
    def interval_start(self, value=None):
        """  Corresponds to IDD Field `Interval Start`
        The lowest value for the intervals being binned into.

        Args:
            value (float): value for IDD Field `Interval Start`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `interval_start`'.format(value))
        self._data["Interval Start"] = value

    @property
    def interval_size(self):
        """Get interval_size

        Returns:
            float: the value of `interval_size` or None if not set
        """
        return self._data["Interval Size"]

    @interval_size.setter
    def interval_size(self, value=None):
        """  Corresponds to IDD Field `Interval Size`
        The size of the bins starting with Interval start.

        Args:
            value (float): value for IDD Field `Interval Size`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `interval_size`'.format(value))
        self._data["Interval Size"] = value

    @property
    def interval_count(self):
        """Get interval_count

        Returns:
            int: the value of `interval_count` or None if not set
        """
        return self._data["Interval Count"]

    @interval_count.setter
    def interval_count(self, value=None):
        """  Corresponds to IDD Field `Interval Count`
        The number of bins used. The number of hours below the start of the
        Lowest bin and above the value of the last bin are also shown.

        Args:
            value (int): value for IDD Field `Interval Count`
                value >= 1
                value <= 20
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `interval_count`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `interval_count`')
            if value > 20:
                raise ValueError('value need to be smaller 20 '
                                 'for field `interval_count`')
        self._data["Interval Count"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `Schedule Name`
        Optional schedule name. Binning is performed for non-zero hours.
        Binning always performed if left blank.

        Args:
            value (str): value for IDD Field `Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `schedule_name`')
        self._data["Schedule Name"] = value

    @property
    def variable_type(self):
        """Get variable_type

        Returns:
            str: the value of `variable_type` or None if not set
        """
        return self._data["Variable Type"]

    @variable_type.setter
    def variable_type(self, value=None):
        """  Corresponds to IDD Field `Variable Type`
        Optional input on the type of units for the variable used by other fields in the object.

        Args:
            value (str): value for IDD Field `Variable Type`
                Accepted values are:
                      - Energy
                      - Temperature
                      - VolumetricFlow
                      - Power
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_type`')
            vals = {}
            vals["energy"] = "Energy"
            vals["temperature"] = "Temperature"
            vals["volumetricflow"] = "VolumetricFlow"
            vals["power"] = "Power"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `variable_type`'.format(value))
            value = vals[value_lower]
        self._data["Variable Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputTableMonthly(object):
    """ Corresponds to IDD object `Output:Table:Monthly`
        has multiple columns that are each defined using a repeated group of fields for any
        number of columns. A single Output:Table:Monthly object often produces multiple
        tables in the output. A table is produced for every instance of a particular output
        variable. For example, a table defined with zone variables will be produced once for
        every zone.
    
    """
    internal_name = "Output:Table:Monthly"
    field_count = 52
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Table:Monthly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Digits After Decimal"] = None
        self._data["Variable or Meter 1 Name"] = None
        self._data["Aggregation Type for Variable or Meter 1"] = None
        self._data["Variable or Meter 2 Name"] = None
        self._data["Aggregation Type for Variable or Meter 2"] = None
        self._data["Variable or Meter 3 Name"] = None
        self._data["Aggregation Type for Variable or Meter 3"] = None
        self._data["Variable or Meter 4 Name"] = None
        self._data["Aggregation Type for Variable or Meter 4"] = None
        self._data["Variable or Meter 5 Name"] = None
        self._data["Aggregation Type for Variable or Meter 5"] = None
        self._data["Variable or Meter 6 Name"] = None
        self._data["Aggregation Type for Variable or Meter 6"] = None
        self._data["Variable or Meter 7 Name"] = None
        self._data["Aggregation Type for Variable or Meter 7"] = None
        self._data["Variable or Meter 8 Name"] = None
        self._data["Aggregation Type for Variable or Meter 8"] = None
        self._data["Variable or Meter 9 Name"] = None
        self._data["Aggregation Type for Variable or Meter 9"] = None
        self._data["Variable or Meter 10 Name"] = None
        self._data["Aggregation Type for Variable or Meter 10"] = None
        self._data["Variable or Meter 11 Name"] = None
        self._data["Aggregation Type for Variable or Meter 11"] = None
        self._data["Variable or Meter 12 Name"] = None
        self._data["Aggregation Type for Variable or Meter 12"] = None
        self._data["Variable or Meter 13 Name"] = None
        self._data["Aggregation Type for Variable or Meter 13"] = None
        self._data["Variable or Meter 14 Name"] = None
        self._data["Aggregation Type for Variable or Meter 14"] = None
        self._data["Variable or Meter 15 Name"] = None
        self._data["Aggregation Type for Variable or Meter 15"] = None
        self._data["Variable or Meter 16 Name"] = None
        self._data["Aggregation Type for Variable or Meter 16"] = None
        self._data["Variable or Meter 17 Name"] = None
        self._data["Aggregation Type for Variable or Meter 17"] = None
        self._data["Variable or Meter 18 Name"] = None
        self._data["Aggregation Type for Variable or Meter 18"] = None
        self._data["Variable or Meter 19 Name"] = None
        self._data["Aggregation Type for Variable or Meter 19"] = None
        self._data["Variable or Meter 20 Name"] = None
        self._data["Aggregation Type for Variable or Meter 20"] = None
        self._data["Variable or Meter 21 Name"] = None
        self._data["Aggregation Type for Variable or Meter 21"] = None
        self._data["Variable or Meter 22 Name"] = None
        self._data["Aggregation Type for Variable or Meter 22"] = None
        self._data["Variable or Meter 23 Name"] = None
        self._data["Aggregation Type for Variable or Meter 23"] = None
        self._data["Variable or Meter 24 Name"] = None
        self._data["Aggregation Type for Variable or Meter 24"] = None
        self._data["Variable or Meter 25 Name"] = None
        self._data["Aggregation Type for Variable or Meter 25"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.digits_after_decimal = None
        else:
            self.digits_after_decimal = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_1_name = None
        else:
            self.variable_or_meter_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_1 = None
        else:
            self.aggregation_type_for_variable_or_meter_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_2_name = None
        else:
            self.variable_or_meter_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_2 = None
        else:
            self.aggregation_type_for_variable_or_meter_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_3_name = None
        else:
            self.variable_or_meter_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_3 = None
        else:
            self.aggregation_type_for_variable_or_meter_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_4_name = None
        else:
            self.variable_or_meter_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_4 = None
        else:
            self.aggregation_type_for_variable_or_meter_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_5_name = None
        else:
            self.variable_or_meter_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_5 = None
        else:
            self.aggregation_type_for_variable_or_meter_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_6_name = None
        else:
            self.variable_or_meter_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_6 = None
        else:
            self.aggregation_type_for_variable_or_meter_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_7_name = None
        else:
            self.variable_or_meter_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_7 = None
        else:
            self.aggregation_type_for_variable_or_meter_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_8_name = None
        else:
            self.variable_or_meter_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_8 = None
        else:
            self.aggregation_type_for_variable_or_meter_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_9_name = None
        else:
            self.variable_or_meter_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_9 = None
        else:
            self.aggregation_type_for_variable_or_meter_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_10_name = None
        else:
            self.variable_or_meter_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_10 = None
        else:
            self.aggregation_type_for_variable_or_meter_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_11_name = None
        else:
            self.variable_or_meter_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_11 = None
        else:
            self.aggregation_type_for_variable_or_meter_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_12_name = None
        else:
            self.variable_or_meter_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_12 = None
        else:
            self.aggregation_type_for_variable_or_meter_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_13_name = None
        else:
            self.variable_or_meter_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_13 = None
        else:
            self.aggregation_type_for_variable_or_meter_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_14_name = None
        else:
            self.variable_or_meter_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_14 = None
        else:
            self.aggregation_type_for_variable_or_meter_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_15_name = None
        else:
            self.variable_or_meter_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_15 = None
        else:
            self.aggregation_type_for_variable_or_meter_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_16_name = None
        else:
            self.variable_or_meter_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_16 = None
        else:
            self.aggregation_type_for_variable_or_meter_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_17_name = None
        else:
            self.variable_or_meter_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_17 = None
        else:
            self.aggregation_type_for_variable_or_meter_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_18_name = None
        else:
            self.variable_or_meter_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_18 = None
        else:
            self.aggregation_type_for_variable_or_meter_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_19_name = None
        else:
            self.variable_or_meter_19_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_19 = None
        else:
            self.aggregation_type_for_variable_or_meter_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_20_name = None
        else:
            self.variable_or_meter_20_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_20 = None
        else:
            self.aggregation_type_for_variable_or_meter_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_21_name = None
        else:
            self.variable_or_meter_21_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_21 = None
        else:
            self.aggregation_type_for_variable_or_meter_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_22_name = None
        else:
            self.variable_or_meter_22_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_22 = None
        else:
            self.aggregation_type_for_variable_or_meter_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_23_name = None
        else:
            self.variable_or_meter_23_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_23 = None
        else:
            self.aggregation_type_for_variable_or_meter_23 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_24_name = None
        else:
            self.variable_or_meter_24_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_24 = None
        else:
            self.aggregation_type_for_variable_or_meter_24 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_or_meter_25_name = None
        else:
            self.variable_or_meter_25_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.aggregation_type_for_variable_or_meter_25 = None
        else:
            self.aggregation_type_for_variable_or_meter_25 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def digits_after_decimal(self):
        """Get digits_after_decimal

        Returns:
            int: the value of `digits_after_decimal` or None if not set
        """
        return self._data["Digits After Decimal"]

    @digits_after_decimal.setter
    def digits_after_decimal(self, value=2):
        """  Corresponds to IDD Field `Digits After Decimal`

        Args:
            value (int): value for IDD Field `Digits After Decimal`
                Default value: 2
                value >= 0
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `digits_after_decimal`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `digits_after_decimal`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `digits_after_decimal`')
        self._data["Digits After Decimal"] = value

    @property
    def variable_or_meter_1_name(self):
        """Get variable_or_meter_1_name

        Returns:
            str: the value of `variable_or_meter_1_name` or None if not set
        """
        return self._data["Variable or Meter 1 Name"]

    @variable_or_meter_1_name.setter
    def variable_or_meter_1_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 1 Name`
        The name of an output variable or  meter that is available in the RDD file.

        Args:
            value (str): value for IDD Field `Variable or Meter 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_1_name`')
        self._data["Variable or Meter 1 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_1(self):
        """Get aggregation_type_for_variable_or_meter_1

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_1` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 1"]

    @aggregation_type_for_variable_or_meter_1.setter
    def aggregation_type_for_variable_or_meter_1(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 1`
        The method of aggregation for the selected variable or meter.
        SumOrAverage adds up the values for every timestep in the month if the variable
        is a sum variable. If the variable is an average variable it reports the average value.
        This is probably the most common Aggregation Type option to choose.
        Maximum and Minimum find the maximum and minimum value for the month and report it
        along with the time that it first occurred.  When Maximum or Minimum are selected a
        column is automatically shown in the output report for the time that it occurred.
        When Maximum or Minimum are used with an average variable the value is divided
        by the length of the timestep.
        ValueWhenMaxMin looks at the previous variable in the report that sets a maximum or minimum
        and displays the value of the current variable at that same timestep.
        Order of the variables in the report is important when using ValueWhenMaxMin.
        This can be used when an outdoor temperature should be reported for the time of the
        maximum cooling load.
        HoursNonZero adds up the elapsed time during the month that this variable is non-zero
        and would be appropriate to determine the number of hour that a fan operates.
        HoursZero - The HoursZero option adds up the elapsed time during the month that this
        variable has a zero value and would be appropriate to determine the number of hour
        that a fan does not operate.
        HoursPositive - The HoursPositive option adds up the elapsed time during the month that
        this variable has a positive value.  Hours with a zero value are not included.
        HoursNonPositive - The HoursNonPositive option adds up the elaspsed time during the month
        that this variable has non-positive value. Hours with a negative value and hours with a
        zero value are all included.
        HoursNegative - The HoursNegative option adds up the elapsed time during the month that
        this variable has a negative value.  Hours with a zero value are not included.
        HoursNonNegative - The HoursNonNegative option adds up the elaspsed time during the month
        that this variable has non-negative value. Hours with a positive value and
        hours with a zero value are all included.
        SumOrAverageDuringHoursShown - Provides the sum or average of the named variable when
        during the hours that the previous variable displayed with any of the Aggregation Types
        starting with "Hours". For "sum" type variables adds up the values for each timestep
        and reports the sum of the value monthly during the hours reported on the previous
        variable. For "average" type variables, the value shown will be the average for the month
        during the hours reported on the previous variable.  Order of the variables in
        the report is important when using this Aggregation Type.
        MaximumDuringHoursShown - Reports the maximum value and the time that the maximum value
        occurred but only during the hours reported with the previous "hours-" Aggregation Type.
        When the Maximum option is used with an average variable the value is divided
        by the length of the timestep.  Order of the variables in the report is important
        when using this Aggregation Type.
        MinimumDuringHoursShown - Reports the minimum value and the time that the minimum value
        occurred but only during the hours reported with the previous "hours-" Aggregation Type.
        When the Minimum option is used with an average variable the value is divided
        by the length of the timestep.  Order of the variables in the report is important
        when using this Aggregation Type.

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 1`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_1`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_1`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 1"] = value

    @property
    def variable_or_meter_2_name(self):
        """Get variable_or_meter_2_name

        Returns:
            str: the value of `variable_or_meter_2_name` or None if not set
        """
        return self._data["Variable or Meter 2 Name"]

    @variable_or_meter_2_name.setter
    def variable_or_meter_2_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 2 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_2_name`')
        self._data["Variable or Meter 2 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_2(self):
        """Get aggregation_type_for_variable_or_meter_2

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_2` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 2"]

    @aggregation_type_for_variable_or_meter_2.setter
    def aggregation_type_for_variable_or_meter_2(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 2`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 2`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_2`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_2`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 2"] = value

    @property
    def variable_or_meter_3_name(self):
        """Get variable_or_meter_3_name

        Returns:
            str: the value of `variable_or_meter_3_name` or None if not set
        """
        return self._data["Variable or Meter 3 Name"]

    @variable_or_meter_3_name.setter
    def variable_or_meter_3_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 3 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_3_name`')
        self._data["Variable or Meter 3 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_3(self):
        """Get aggregation_type_for_variable_or_meter_3

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_3` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 3"]

    @aggregation_type_for_variable_or_meter_3.setter
    def aggregation_type_for_variable_or_meter_3(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 3`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 3`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_3`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_3`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 3"] = value

    @property
    def variable_or_meter_4_name(self):
        """Get variable_or_meter_4_name

        Returns:
            str: the value of `variable_or_meter_4_name` or None if not set
        """
        return self._data["Variable or Meter 4 Name"]

    @variable_or_meter_4_name.setter
    def variable_or_meter_4_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 4 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_4_name`')
        self._data["Variable or Meter 4 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_4(self):
        """Get aggregation_type_for_variable_or_meter_4

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_4` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 4"]

    @aggregation_type_for_variable_or_meter_4.setter
    def aggregation_type_for_variable_or_meter_4(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 4`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 4`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_4`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_4`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 4"] = value

    @property
    def variable_or_meter_5_name(self):
        """Get variable_or_meter_5_name

        Returns:
            str: the value of `variable_or_meter_5_name` or None if not set
        """
        return self._data["Variable or Meter 5 Name"]

    @variable_or_meter_5_name.setter
    def variable_or_meter_5_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 5 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_5_name`')
        self._data["Variable or Meter 5 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_5(self):
        """Get aggregation_type_for_variable_or_meter_5

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_5` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 5"]

    @aggregation_type_for_variable_or_meter_5.setter
    def aggregation_type_for_variable_or_meter_5(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 5`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 5`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_5`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_5`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 5"] = value

    @property
    def variable_or_meter_6_name(self):
        """Get variable_or_meter_6_name

        Returns:
            str: the value of `variable_or_meter_6_name` or None if not set
        """
        return self._data["Variable or Meter 6 Name"]

    @variable_or_meter_6_name.setter
    def variable_or_meter_6_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 6 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_6_name`')
        self._data["Variable or Meter 6 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_6(self):
        """Get aggregation_type_for_variable_or_meter_6

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_6` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 6"]

    @aggregation_type_for_variable_or_meter_6.setter
    def aggregation_type_for_variable_or_meter_6(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 6`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 6`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_6`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_6`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 6"] = value

    @property
    def variable_or_meter_7_name(self):
        """Get variable_or_meter_7_name

        Returns:
            str: the value of `variable_or_meter_7_name` or None if not set
        """
        return self._data["Variable or Meter 7 Name"]

    @variable_or_meter_7_name.setter
    def variable_or_meter_7_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 7 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_7_name`')
        self._data["Variable or Meter 7 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_7(self):
        """Get aggregation_type_for_variable_or_meter_7

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_7` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 7"]

    @aggregation_type_for_variable_or_meter_7.setter
    def aggregation_type_for_variable_or_meter_7(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 7`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 7`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_7`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_7`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 7"] = value

    @property
    def variable_or_meter_8_name(self):
        """Get variable_or_meter_8_name

        Returns:
            str: the value of `variable_or_meter_8_name` or None if not set
        """
        return self._data["Variable or Meter 8 Name"]

    @variable_or_meter_8_name.setter
    def variable_or_meter_8_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 8 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_8_name`')
        self._data["Variable or Meter 8 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_8(self):
        """Get aggregation_type_for_variable_or_meter_8

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_8` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 8"]

    @aggregation_type_for_variable_or_meter_8.setter
    def aggregation_type_for_variable_or_meter_8(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 8`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 8`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_8`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_8`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 8"] = value

    @property
    def variable_or_meter_9_name(self):
        """Get variable_or_meter_9_name

        Returns:
            str: the value of `variable_or_meter_9_name` or None if not set
        """
        return self._data["Variable or Meter 9 Name"]

    @variable_or_meter_9_name.setter
    def variable_or_meter_9_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 9 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_9_name`')
        self._data["Variable or Meter 9 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_9(self):
        """Get aggregation_type_for_variable_or_meter_9

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_9` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 9"]

    @aggregation_type_for_variable_or_meter_9.setter
    def aggregation_type_for_variable_or_meter_9(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 9`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 9`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_9`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_9`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 9"] = value

    @property
    def variable_or_meter_10_name(self):
        """Get variable_or_meter_10_name

        Returns:
            str: the value of `variable_or_meter_10_name` or None if not set
        """
        return self._data["Variable or Meter 10 Name"]

    @variable_or_meter_10_name.setter
    def variable_or_meter_10_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 10 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_10_name`')
        self._data["Variable or Meter 10 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_10(self):
        """Get aggregation_type_for_variable_or_meter_10

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_10` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 10"]

    @aggregation_type_for_variable_or_meter_10.setter
    def aggregation_type_for_variable_or_meter_10(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 10`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 10`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_10`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_10`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 10"] = value

    @property
    def variable_or_meter_11_name(self):
        """Get variable_or_meter_11_name

        Returns:
            str: the value of `variable_or_meter_11_name` or None if not set
        """
        return self._data["Variable or Meter 11 Name"]

    @variable_or_meter_11_name.setter
    def variable_or_meter_11_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 11 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_11_name`')
        self._data["Variable or Meter 11 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_11(self):
        """Get aggregation_type_for_variable_or_meter_11

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_11` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 11"]

    @aggregation_type_for_variable_or_meter_11.setter
    def aggregation_type_for_variable_or_meter_11(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 11`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 11`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_11`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_11`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 11"] = value

    @property
    def variable_or_meter_12_name(self):
        """Get variable_or_meter_12_name

        Returns:
            str: the value of `variable_or_meter_12_name` or None if not set
        """
        return self._data["Variable or Meter 12 Name"]

    @variable_or_meter_12_name.setter
    def variable_or_meter_12_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 12 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_12_name`')
        self._data["Variable or Meter 12 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_12(self):
        """Get aggregation_type_for_variable_or_meter_12

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_12` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 12"]

    @aggregation_type_for_variable_or_meter_12.setter
    def aggregation_type_for_variable_or_meter_12(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 12`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 12`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_12`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_12`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 12"] = value

    @property
    def variable_or_meter_13_name(self):
        """Get variable_or_meter_13_name

        Returns:
            str: the value of `variable_or_meter_13_name` or None if not set
        """
        return self._data["Variable or Meter 13 Name"]

    @variable_or_meter_13_name.setter
    def variable_or_meter_13_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 13 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_13_name`')
        self._data["Variable or Meter 13 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_13(self):
        """Get aggregation_type_for_variable_or_meter_13

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_13` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 13"]

    @aggregation_type_for_variable_or_meter_13.setter
    def aggregation_type_for_variable_or_meter_13(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 13`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 13`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_13`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_13`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 13"] = value

    @property
    def variable_or_meter_14_name(self):
        """Get variable_or_meter_14_name

        Returns:
            str: the value of `variable_or_meter_14_name` or None if not set
        """
        return self._data["Variable or Meter 14 Name"]

    @variable_or_meter_14_name.setter
    def variable_or_meter_14_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 14 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_14_name`')
        self._data["Variable or Meter 14 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_14(self):
        """Get aggregation_type_for_variable_or_meter_14

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_14` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 14"]

    @aggregation_type_for_variable_or_meter_14.setter
    def aggregation_type_for_variable_or_meter_14(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 14`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 14`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_14`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_14`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 14"] = value

    @property
    def variable_or_meter_15_name(self):
        """Get variable_or_meter_15_name

        Returns:
            str: the value of `variable_or_meter_15_name` or None if not set
        """
        return self._data["Variable or Meter 15 Name"]

    @variable_or_meter_15_name.setter
    def variable_or_meter_15_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 15 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_15_name`')
        self._data["Variable or Meter 15 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_15(self):
        """Get aggregation_type_for_variable_or_meter_15

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_15` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 15"]

    @aggregation_type_for_variable_or_meter_15.setter
    def aggregation_type_for_variable_or_meter_15(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 15`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 15`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_15`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_15`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 15"] = value

    @property
    def variable_or_meter_16_name(self):
        """Get variable_or_meter_16_name

        Returns:
            str: the value of `variable_or_meter_16_name` or None if not set
        """
        return self._data["Variable or Meter 16 Name"]

    @variable_or_meter_16_name.setter
    def variable_or_meter_16_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 16 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_16_name`')
        self._data["Variable or Meter 16 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_16(self):
        """Get aggregation_type_for_variable_or_meter_16

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_16` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 16"]

    @aggregation_type_for_variable_or_meter_16.setter
    def aggregation_type_for_variable_or_meter_16(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 16`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 16`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_16`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_16`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 16"] = value

    @property
    def variable_or_meter_17_name(self):
        """Get variable_or_meter_17_name

        Returns:
            str: the value of `variable_or_meter_17_name` or None if not set
        """
        return self._data["Variable or Meter 17 Name"]

    @variable_or_meter_17_name.setter
    def variable_or_meter_17_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 17 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_17_name`')
        self._data["Variable or Meter 17 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_17(self):
        """Get aggregation_type_for_variable_or_meter_17

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_17` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 17"]

    @aggregation_type_for_variable_or_meter_17.setter
    def aggregation_type_for_variable_or_meter_17(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 17`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 17`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_17`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_17`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 17"] = value

    @property
    def variable_or_meter_18_name(self):
        """Get variable_or_meter_18_name

        Returns:
            str: the value of `variable_or_meter_18_name` or None if not set
        """
        return self._data["Variable or Meter 18 Name"]

    @variable_or_meter_18_name.setter
    def variable_or_meter_18_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 18 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_18_name`')
        self._data["Variable or Meter 18 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_18(self):
        """Get aggregation_type_for_variable_or_meter_18

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_18` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 18"]

    @aggregation_type_for_variable_or_meter_18.setter
    def aggregation_type_for_variable_or_meter_18(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 18`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 18`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_18`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_18`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 18"] = value

    @property
    def variable_or_meter_19_name(self):
        """Get variable_or_meter_19_name

        Returns:
            str: the value of `variable_or_meter_19_name` or None if not set
        """
        return self._data["Variable or Meter 19 Name"]

    @variable_or_meter_19_name.setter
    def variable_or_meter_19_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 19 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 19 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_19_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_19_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_19_name`')
        self._data["Variable or Meter 19 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_19(self):
        """Get aggregation_type_for_variable_or_meter_19

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_19` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 19"]

    @aggregation_type_for_variable_or_meter_19.setter
    def aggregation_type_for_variable_or_meter_19(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 19`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 19`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_19`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_19`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 19"] = value

    @property
    def variable_or_meter_20_name(self):
        """Get variable_or_meter_20_name

        Returns:
            str: the value of `variable_or_meter_20_name` or None if not set
        """
        return self._data["Variable or Meter 20 Name"]

    @variable_or_meter_20_name.setter
    def variable_or_meter_20_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 20 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 20 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_20_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_20_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_20_name`')
        self._data["Variable or Meter 20 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_20(self):
        """Get aggregation_type_for_variable_or_meter_20

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_20` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 20"]

    @aggregation_type_for_variable_or_meter_20.setter
    def aggregation_type_for_variable_or_meter_20(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 20`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 20`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_20`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_20`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 20"] = value

    @property
    def variable_or_meter_21_name(self):
        """Get variable_or_meter_21_name

        Returns:
            str: the value of `variable_or_meter_21_name` or None if not set
        """
        return self._data["Variable or Meter 21 Name"]

    @variable_or_meter_21_name.setter
    def variable_or_meter_21_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 21 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 21 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_21_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_21_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_21_name`')
        self._data["Variable or Meter 21 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_21(self):
        """Get aggregation_type_for_variable_or_meter_21

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_21` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 21"]

    @aggregation_type_for_variable_or_meter_21.setter
    def aggregation_type_for_variable_or_meter_21(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 21`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 21`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_21`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_21`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_21`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 21"] = value

    @property
    def variable_or_meter_22_name(self):
        """Get variable_or_meter_22_name

        Returns:
            str: the value of `variable_or_meter_22_name` or None if not set
        """
        return self._data["Variable or Meter 22 Name"]

    @variable_or_meter_22_name.setter
    def variable_or_meter_22_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 22 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 22 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_22_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_22_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_22_name`')
        self._data["Variable or Meter 22 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_22(self):
        """Get aggregation_type_for_variable_or_meter_22

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_22` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 22"]

    @aggregation_type_for_variable_or_meter_22.setter
    def aggregation_type_for_variable_or_meter_22(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 22`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 22`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_22`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_22`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_22`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 22"] = value

    @property
    def variable_or_meter_23_name(self):
        """Get variable_or_meter_23_name

        Returns:
            str: the value of `variable_or_meter_23_name` or None if not set
        """
        return self._data["Variable or Meter 23 Name"]

    @variable_or_meter_23_name.setter
    def variable_or_meter_23_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 23 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 23 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_23_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_23_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_23_name`')
        self._data["Variable or Meter 23 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_23(self):
        """Get aggregation_type_for_variable_or_meter_23

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_23` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 23"]

    @aggregation_type_for_variable_or_meter_23.setter
    def aggregation_type_for_variable_or_meter_23(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 23`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 23`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_23`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_23`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_23`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_23`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 23"] = value

    @property
    def variable_or_meter_24_name(self):
        """Get variable_or_meter_24_name

        Returns:
            str: the value of `variable_or_meter_24_name` or None if not set
        """
        return self._data["Variable or Meter 24 Name"]

    @variable_or_meter_24_name.setter
    def variable_or_meter_24_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 24 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 24 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_24_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_24_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_24_name`')
        self._data["Variable or Meter 24 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_24(self):
        """Get aggregation_type_for_variable_or_meter_24

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_24` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 24"]

    @aggregation_type_for_variable_or_meter_24.setter
    def aggregation_type_for_variable_or_meter_24(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 24`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 24`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_24`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_24`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_24`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_24`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 24"] = value

    @property
    def variable_or_meter_25_name(self):
        """Get variable_or_meter_25_name

        Returns:
            str: the value of `variable_or_meter_25_name` or None if not set
        """
        return self._data["Variable or Meter 25 Name"]

    @variable_or_meter_25_name.setter
    def variable_or_meter_25_name(self, value=None):
        """  Corresponds to IDD Field `Variable or Meter 25 Name`

        Args:
            value (str): value for IDD Field `Variable or Meter 25 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_or_meter_25_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_or_meter_25_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_or_meter_25_name`')
        self._data["Variable or Meter 25 Name"] = value

    @property
    def aggregation_type_for_variable_or_meter_25(self):
        """Get aggregation_type_for_variable_or_meter_25

        Returns:
            str: the value of `aggregation_type_for_variable_or_meter_25` or None if not set
        """
        return self._data["Aggregation Type for Variable or Meter 25"]

    @aggregation_type_for_variable_or_meter_25.setter
    def aggregation_type_for_variable_or_meter_25(self, value=None):
        """  Corresponds to IDD Field `Aggregation Type for Variable or Meter 25`
        See instructions under AggregationType01

        Args:
            value (str): value for IDD Field `Aggregation Type for Variable or Meter 25`
                Accepted values are:
                      - SumOrAverage
                      - Maximum
                      - Minimum
                      - ValueWhenMaximumOrMinimum
                      - HoursNonZero
                      - HoursZero
                      - HoursPositive
                      - HoursNonPositive
                      - HoursNegative
                      - HoursNonNegative
                      - SumOrAverageDuringHoursShown
                      - MaximumDuringHoursShown
                      - MinimumDuringHoursShown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `aggregation_type_for_variable_or_meter_25`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `aggregation_type_for_variable_or_meter_25`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `aggregation_type_for_variable_or_meter_25`')
            vals = {}
            vals["sumoraverage"] = "SumOrAverage"
            vals["maximum"] = "Maximum"
            vals["minimum"] = "Minimum"
            vals["valuewhenmaximumorminimum"] = "ValueWhenMaximumOrMinimum"
            vals["hoursnonzero"] = "HoursNonZero"
            vals["hourszero"] = "HoursZero"
            vals["hourspositive"] = "HoursPositive"
            vals["hoursnonpositive"] = "HoursNonPositive"
            vals["hoursnegative"] = "HoursNegative"
            vals["hoursnonnegative"] = "HoursNonNegative"
            vals["sumoraverageduringhoursshown"] = "SumOrAverageDuringHoursShown"
            vals["maximumduringhoursshown"] = "MaximumDuringHoursShown"
            vals["minimumduringhoursshown"] = "MinimumDuringHoursShown"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `aggregation_type_for_variable_or_meter_25`'.format(value))
            value = vals[value_lower]
        self._data["Aggregation Type for Variable or Meter 25"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputControlTableStyle(object):
    """ Corresponds to IDD object `OutputControl:Table:Style`
        default style for the OutputControl:Table:Style is comma -- this works well for
        importing into spreadsheet programs such as Excel(tm) but not so well for word
        processing progams -- there tab may be a better choice.  fixed puts spaces between
        the "columns".  HTML produces tables in HTML. XML produces an XML file.
        note - if no OutputControl:Table:Style is included, the defaults are comma and None.
    
    """
    internal_name = "OutputControl:Table:Style"
    field_count = 2
    required_fields = ["Column Separator"]

    def __init__(self):
        """ Init data dictionary object for IDD  `OutputControl:Table:Style`
        """
        self._data = OrderedDict()
        self._data["Column Separator"] = None
        self._data["Unit Conversion"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.column_separator = None
        else:
            self.column_separator = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.unit_conversion = None
        else:
            self.unit_conversion = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def column_separator(self):
        """Get column_separator

        Returns:
            str: the value of `column_separator` or None if not set
        """
        return self._data["Column Separator"]

    @column_separator.setter
    def column_separator(self, value="Comma"):
        """  Corresponds to IDD Field `Column Separator`

        Args:
            value (str): value for IDD Field `Column Separator`
                Accepted values are:
                      - Comma
                      - Tab
                      - Fixed
                      - HTML
                      - XML
                      - CommaAndHTML
                      - CommaAndXML
                      - TabAndHTML
                      - XMLandHTML
                      - All
                Default value: Comma
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `column_separator`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `column_separator`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `column_separator`')
            vals = {}
            vals["comma"] = "Comma"
            vals["tab"] = "Tab"
            vals["fixed"] = "Fixed"
            vals["html"] = "HTML"
            vals["xml"] = "XML"
            vals["commaandhtml"] = "CommaAndHTML"
            vals["commaandxml"] = "CommaAndXML"
            vals["tabandhtml"] = "TabAndHTML"
            vals["xmlandhtml"] = "XMLandHTML"
            vals["all"] = "All"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `column_separator`'.format(value))
            value = vals[value_lower]
        self._data["Column Separator"] = value

    @property
    def unit_conversion(self):
        """Get unit_conversion

        Returns:
            str: the value of `unit_conversion` or None if not set
        """
        return self._data["Unit Conversion"]

    @unit_conversion.setter
    def unit_conversion(self, value="None"):
        """  Corresponds to IDD Field `Unit Conversion`

        Args:
            value (str): value for IDD Field `Unit Conversion`
                Accepted values are:
                      - None
                      - JtoKWH
                      - JtoMJ
                      - JtoGJ
                      - InchPound
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `unit_conversion`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `unit_conversion`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `unit_conversion`')
            vals = {}
            vals["none"] = "None"
            vals["jtokwh"] = "JtoKWH"
            vals["jtomj"] = "JtoMJ"
            vals["jtogj"] = "JtoGJ"
            vals["inchpound"] = "InchPound"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `unit_conversion`'.format(value))
            value = vals[value_lower]
        self._data["Unit Conversion"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputControlReportingTolerances(object):
    """ Corresponds to IDD object `OutputControl:ReportingTolerances`
        Calculations of the time that setpoints are not met use a tolerance of 0.2C.
        This object allows changing the tolerance used to determine when setpoints are being met.
    
    """
    internal_name = "OutputControl:ReportingTolerances"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `OutputControl:ReportingTolerances`
        """
        self._data = OrderedDict()
        self._data["Tolerance for Time Heating Setpoint Not Met"] = None
        self._data["Tolerance for Time Cooling Setpoint Not Met"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.tolerance_for_time_heating_setpoint_not_met = None
        else:
            self.tolerance_for_time_heating_setpoint_not_met = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tolerance_for_time_cooling_setpoint_not_met = None
        else:
            self.tolerance_for_time_cooling_setpoint_not_met = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def tolerance_for_time_heating_setpoint_not_met(self):
        """Get tolerance_for_time_heating_setpoint_not_met

        Returns:
            float: the value of `tolerance_for_time_heating_setpoint_not_met` or None if not set
        """
        return self._data["Tolerance for Time Heating Setpoint Not Met"]

    @tolerance_for_time_heating_setpoint_not_met.setter
    def tolerance_for_time_heating_setpoint_not_met(self, value=0.2):
        """  Corresponds to IDD Field `Tolerance for Time Heating Setpoint Not Met`
        If the zone temperature is below the heating setpoint by more than
        this value, the following output variables will increment as appropriate
        Zone Heating Setpoint Not Met Time
        Zone Heating Setpoint Not Met While Occupied Time
        This also impacts table report "Annual Building Utility Performance Summary"
        subtable "Comfort and Setpoint Not Met Summary"

        Args:
            value (float): value for IDD Field `Tolerance for Time Heating Setpoint Not Met`
                Units: deltaC
                Default value: 0.2
                value >= 0.0
                value <= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tolerance_for_time_heating_setpoint_not_met`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tolerance_for_time_heating_setpoint_not_met`')
            if value > 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `tolerance_for_time_heating_setpoint_not_met`')
        self._data["Tolerance for Time Heating Setpoint Not Met"] = value

    @property
    def tolerance_for_time_cooling_setpoint_not_met(self):
        """Get tolerance_for_time_cooling_setpoint_not_met

        Returns:
            float: the value of `tolerance_for_time_cooling_setpoint_not_met` or None if not set
        """
        return self._data["Tolerance for Time Cooling Setpoint Not Met"]

    @tolerance_for_time_cooling_setpoint_not_met.setter
    def tolerance_for_time_cooling_setpoint_not_met(self, value=0.2):
        """  Corresponds to IDD Field `Tolerance for Time Cooling Setpoint Not Met`
        If the zone temperature is above the cooling setpoint by more than
        this value, the following output variables will increment as appropriate
        Zone Cooling Setpoint Not Met Time
        Zone Cooling Setpoint Not Met While Occupied Time
        This also impacts table report "Annual Building Utility Performance Summary"
        subtable "Comfort and Setpoint Not Met Summary"

        Args:
            value (float): value for IDD Field `Tolerance for Time Cooling Setpoint Not Met`
                Units: deltaC
                Default value: 0.2
                value >= 0.0
                value <= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tolerance_for_time_cooling_setpoint_not_met`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tolerance_for_time_cooling_setpoint_not_met`')
            if value > 10.0:
                raise ValueError('value need to be smaller 10.0 '
                                 'for field `tolerance_for_time_cooling_setpoint_not_met`')
        self._data["Tolerance for Time Cooling Setpoint Not Met"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputVariable(object):
    """ Corresponds to IDD object `Output:Variable`
        each Output:Variable command picks variables to be put onto the standard output file (.eso)
        some variables may not be reported for every simulation.
        a list of variables that can be reported are available after a run on
        the report dictionary file (.rdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Variable"
    field_count = 4
    required_fields = ["Variable Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Variable`
        """
        self._data = OrderedDict()
        self._data["Key Value"] = None
        self._data["Variable Name"] = None
        self._data["Reporting Frequency"] = None
        self._data["Schedule Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.key_value = None
        else:
            self.key_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.variable_name = None
        else:
            self.variable_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def key_value(self):
        """Get key_value

        Returns:
            str: the value of `key_value` or None if not set
        """
        return self._data["Key Value"]

    @key_value.setter
    def key_value(self, value="*"):
        """  Corresponds to IDD Field `Key Value`
        use '*' (without quotes) to apply this variable to all keys

        Args:
            value (str): value for IDD Field `Key Value`
                Default value: *
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_value`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_value`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_value`')
        self._data["Key Value"] = value

    @property
    def variable_name(self):
        """Get variable_name

        Returns:
            str: the value of `variable_name` or None if not set
        """
        return self._data["Variable Name"]

    @variable_name.setter
    def variable_name(self, value=None):
        """  Corresponds to IDD Field `Variable Name`

        Args:
            value (str): value for IDD Field `Variable Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `variable_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `variable_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `variable_name`')
        self._data["Variable Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `Reporting Frequency`
        Detailed lists every instance (i.e. HVAC variable timesteps)
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `Reporting Frequency`
                Accepted values are:
                      - Detailed
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reporting_frequency`')
            vals = {}
            vals["detailed"] = "Detailed"
            vals["timestep"] = "Timestep"
            vals["hourly"] = "Hourly"
            vals["daily"] = "Daily"
            vals["monthly"] = "Monthly"
            vals["runperiod"] = "RunPeriod"
            vals["environment"] = "Environment"
            vals["annual"] = "Annual"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `reporting_frequency`'.format(value))
            value = vals[value_lower]
        self._data["Reporting Frequency"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `Schedule Name`

        Args:
            value (str): value for IDD Field `Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `schedule_name`')
        self._data["Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputMeter(object):
    """ Corresponds to IDD object `Output:Meter`
        Each Output:Meter command picks meters to be put onto the standard output file (.eso) and
        meter file (.mtr). Not all meters are reported in every simulation. A list of
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter puts results on both the eplusout.mtr and eplusout.eso files

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `Reporting Frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `Reporting Frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reporting_frequency`')
            vals = {}
            vals["timestep"] = "Timestep"
            vals["hourly"] = "Hourly"
            vals["daily"] = "Daily"
            vals["monthly"] = "Monthly"
            vals["runperiod"] = "RunPeriod"
            vals["environment"] = "Environment"
            vals["annual"] = "Annual"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `reporting_frequency`'.format(value))
            value = vals[value_lower]
        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputMeterMeterFileOnly(object):
    """ Corresponds to IDD object `Output:Meter:MeterFileOnly`
        Each Output:Meter:MeterFileOnly command picks meters to be put only onto meter file (.mtr).
        Not all meters are reported in every simulation. A list of meters that can be reported
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter:MeterFileOnly"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter:MeterFileOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:MeterFileOnly puts results on the eplusout.mtr file only

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `Reporting Frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `Reporting Frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reporting_frequency`')
            vals = {}
            vals["timestep"] = "Timestep"
            vals["hourly"] = "Hourly"
            vals["daily"] = "Daily"
            vals["monthly"] = "Monthly"
            vals["runperiod"] = "RunPeriod"
            vals["environment"] = "Environment"
            vals["annual"] = "Annual"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `reporting_frequency`'.format(value))
            value = vals[value_lower]
        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputMeterCumulative(object):
    """ Corresponds to IDD object `Output:Meter:Cumulative`
        Each Output:Meter:Cumulative command picks meters to be reported cumulatively onto the
        standard output file (.eso) and meter file (.mtr). Not all meters are reported in every
        simulation.
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter:Cumulative"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter:Cumulative`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:Cumulative puts results on both the eplusout.mtr and eplusout.eso files

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `Reporting Frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `Reporting Frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reporting_frequency`')
            vals = {}
            vals["timestep"] = "Timestep"
            vals["hourly"] = "Hourly"
            vals["daily"] = "Daily"
            vals["monthly"] = "Monthly"
            vals["runperiod"] = "RunPeriod"
            vals["environment"] = "Environment"
            vals["annual"] = "Annual"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `reporting_frequency`'.format(value))
            value = vals[value_lower]
        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputMeterCumulativeMeterFileOnly(object):
    """ Corresponds to IDD object `Output:Meter:Cumulative:MeterFileOnly`
        Each Output:Meter:Cumulative:MeterFileOnly command picks meters to be reported cumulatively
        onto the standard output file (.eso) and meter file (.mtr). Not all meters are reported in
        every simulation.
        a list of meters that can be reported are available after a run on
        the meter dictionary file (.mdd) if the Output:VariableDictionary has been requested.
    
    """
    internal_name = "Output:Meter:Cumulative:MeterFileOnly"
    field_count = 2
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Meter:Cumulative:MeterFileOnly`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Reporting Frequency"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Form is EnergyUseType:..., e.g. Electricity:* for all Electricity meters
        or EndUse:..., e.g. GeneralLights:* for all General Lights
        Output:Meter:Cumulative:MeterFileOnly puts results on the eplusout.mtr file only

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value="Hourly"):
        """  Corresponds to IDD Field `Reporting Frequency`
        Timestep refers to the zone Timestep/Number of Timesteps in hour value
        RunPeriod, Environment, and Annual are the same
        RunPeriod, Environment, and Annual are synonymous

        Args:
            value (str): value for IDD Field `Reporting Frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                      - Environment
                      - Annual
                Default value: Hourly
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reporting_frequency`')
            vals = {}
            vals["timestep"] = "Timestep"
            vals["hourly"] = "Hourly"
            vals["daily"] = "Daily"
            vals["monthly"] = "Monthly"
            vals["runperiod"] = "RunPeriod"
            vals["environment"] = "Environment"
            vals["annual"] = "Annual"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `reporting_frequency`'.format(value))
            value = vals[value_lower]
        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class MeterCustom(object):
    """ Corresponds to IDD object `Meter:Custom`
        Used to allow users to combine specific variables and/or meters into
        "custom" meter configurations. To access these meters by name, one must
        first run a simulation to generate the RDD/MDD files and names.
    
    """
    internal_name = "Meter:Custom"
    field_count = 46
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Meter:Custom`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Key Name 1"] = None
        self._data["Output Variable or Meter Name 1"] = None
        self._data["Key Name 2"] = None
        self._data["Output Variable or Meter Name 2"] = None
        self._data["Key Name 3"] = None
        self._data["Output Variable or Meter Name 3"] = None
        self._data["Key Name 4"] = None
        self._data["Output Variable or Meter Name 4"] = None
        self._data["Key Name 5"] = None
        self._data["Output Variable or Meter Name 5"] = None
        self._data["Key Name 6"] = None
        self._data["Output Variable or Meter Name 6"] = None
        self._data["Key Name 7"] = None
        self._data["Output Variable or Meter Name 7"] = None
        self._data["Key Name 8"] = None
        self._data["Output Variable or Meter Name 8"] = None
        self._data["Key Name 9"] = None
        self._data["Output Variable or Meter Name 9"] = None
        self._data["Key Name 10"] = None
        self._data["Output Variable or Meter Name 10"] = None
        self._data["Key Name 11"] = None
        self._data["Output Variable or Meter Name 11"] = None
        self._data["Key Name 12"] = None
        self._data["Output Variable or Meter Name 12"] = None
        self._data["Key Name 13"] = None
        self._data["Output Variable or Meter Name 13"] = None
        self._data["Key Name 14"] = None
        self._data["Output Variable or Meter Name 14"] = None
        self._data["Key Name 15"] = None
        self._data["Output Variable or Meter Name 15"] = None
        self._data["Key Name 16"] = None
        self._data["Output Variable or Meter Name 16"] = None
        self._data["Key Name 17"] = None
        self._data["Output Variable or Meter Name 17"] = None
        self._data["Key Name 18"] = None
        self._data["Output Variable or Meter Name 18"] = None
        self._data["Key Name 19"] = None
        self._data["Output Variable or Meter Name 19"] = None
        self._data["Key Name 20"] = None
        self._data["Output Variable or Meter Name 20"] = None
        self._data["Key Name 21"] = None
        self._data["Output Variable or Meter Name 21"] = None
        self._data["Key Name 22"] = None
        self._data["Output Variable or Meter Name 22"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_1 = None
        else:
            self.key_name_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_1 = None
        else:
            self.output_variable_or_meter_name_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_2 = None
        else:
            self.key_name_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_2 = None
        else:
            self.output_variable_or_meter_name_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_3 = None
        else:
            self.key_name_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_3 = None
        else:
            self.output_variable_or_meter_name_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_4 = None
        else:
            self.key_name_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_4 = None
        else:
            self.output_variable_or_meter_name_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_5 = None
        else:
            self.key_name_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_5 = None
        else:
            self.output_variable_or_meter_name_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_6 = None
        else:
            self.key_name_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_6 = None
        else:
            self.output_variable_or_meter_name_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_7 = None
        else:
            self.key_name_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_7 = None
        else:
            self.output_variable_or_meter_name_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_8 = None
        else:
            self.key_name_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_8 = None
        else:
            self.output_variable_or_meter_name_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_9 = None
        else:
            self.key_name_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_9 = None
        else:
            self.output_variable_or_meter_name_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_10 = None
        else:
            self.key_name_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_10 = None
        else:
            self.output_variable_or_meter_name_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_11 = None
        else:
            self.key_name_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_11 = None
        else:
            self.output_variable_or_meter_name_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_12 = None
        else:
            self.key_name_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_12 = None
        else:
            self.output_variable_or_meter_name_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_13 = None
        else:
            self.key_name_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_13 = None
        else:
            self.output_variable_or_meter_name_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_14 = None
        else:
            self.key_name_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_14 = None
        else:
            self.output_variable_or_meter_name_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_15 = None
        else:
            self.key_name_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_15 = None
        else:
            self.output_variable_or_meter_name_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_16 = None
        else:
            self.key_name_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_16 = None
        else:
            self.output_variable_or_meter_name_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_17 = None
        else:
            self.key_name_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_17 = None
        else:
            self.output_variable_or_meter_name_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_18 = None
        else:
            self.key_name_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_18 = None
        else:
            self.output_variable_or_meter_name_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_19 = None
        else:
            self.key_name_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_19 = None
        else:
            self.output_variable_or_meter_name_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_20 = None
        else:
            self.key_name_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_20 = None
        else:
            self.output_variable_or_meter_name_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_21 = None
        else:
            self.key_name_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_21 = None
        else:
            self.output_variable_or_meter_name_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_22 = None
        else:
            self.key_name_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_22 = None
        else:
            self.output_variable_or_meter_name_22 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - Water
                      - Generic
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["coal"] = "Coal"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["water"] = "Water"
            vals["generic"] = "Generic"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def key_name_1(self):
        """Get key_name_1

        Returns:
            str: the value of `key_name_1` or None if not set
        """
        return self._data["Key Name 1"]

    @key_name_1.setter
    def key_name_1(self, value=None):
        """  Corresponds to IDD Field `Key Name 1`

        Args:
            value (str): value for IDD Field `Key Name 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_1`')
        self._data["Key Name 1"] = value

    @property
    def output_variable_or_meter_name_1(self):
        """Get output_variable_or_meter_name_1

        Returns:
            str: the value of `output_variable_or_meter_name_1` or None if not set
        """
        return self._data["Output Variable or Meter Name 1"]

    @output_variable_or_meter_name_1.setter
    def output_variable_or_meter_name_1(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 1`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_1`')
        self._data["Output Variable or Meter Name 1"] = value

    @property
    def key_name_2(self):
        """Get key_name_2

        Returns:
            str: the value of `key_name_2` or None if not set
        """
        return self._data["Key Name 2"]

    @key_name_2.setter
    def key_name_2(self, value=None):
        """  Corresponds to IDD Field `Key Name 2`

        Args:
            value (str): value for IDD Field `Key Name 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_2`')
        self._data["Key Name 2"] = value

    @property
    def output_variable_or_meter_name_2(self):
        """Get output_variable_or_meter_name_2

        Returns:
            str: the value of `output_variable_or_meter_name_2` or None if not set
        """
        return self._data["Output Variable or Meter Name 2"]

    @output_variable_or_meter_name_2.setter
    def output_variable_or_meter_name_2(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 2`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_2`')
        self._data["Output Variable or Meter Name 2"] = value

    @property
    def key_name_3(self):
        """Get key_name_3

        Returns:
            str: the value of `key_name_3` or None if not set
        """
        return self._data["Key Name 3"]

    @key_name_3.setter
    def key_name_3(self, value=None):
        """  Corresponds to IDD Field `Key Name 3`

        Args:
            value (str): value for IDD Field `Key Name 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_3`')
        self._data["Key Name 3"] = value

    @property
    def output_variable_or_meter_name_3(self):
        """Get output_variable_or_meter_name_3

        Returns:
            str: the value of `output_variable_or_meter_name_3` or None if not set
        """
        return self._data["Output Variable or Meter Name 3"]

    @output_variable_or_meter_name_3.setter
    def output_variable_or_meter_name_3(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 3`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_3`')
        self._data["Output Variable or Meter Name 3"] = value

    @property
    def key_name_4(self):
        """Get key_name_4

        Returns:
            str: the value of `key_name_4` or None if not set
        """
        return self._data["Key Name 4"]

    @key_name_4.setter
    def key_name_4(self, value=None):
        """  Corresponds to IDD Field `Key Name 4`

        Args:
            value (str): value for IDD Field `Key Name 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_4`')
        self._data["Key Name 4"] = value

    @property
    def output_variable_or_meter_name_4(self):
        """Get output_variable_or_meter_name_4

        Returns:
            str: the value of `output_variable_or_meter_name_4` or None if not set
        """
        return self._data["Output Variable or Meter Name 4"]

    @output_variable_or_meter_name_4.setter
    def output_variable_or_meter_name_4(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 4`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_4`')
        self._data["Output Variable or Meter Name 4"] = value

    @property
    def key_name_5(self):
        """Get key_name_5

        Returns:
            str: the value of `key_name_5` or None if not set
        """
        return self._data["Key Name 5"]

    @key_name_5.setter
    def key_name_5(self, value=None):
        """  Corresponds to IDD Field `Key Name 5`

        Args:
            value (str): value for IDD Field `Key Name 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_5`')
        self._data["Key Name 5"] = value

    @property
    def output_variable_or_meter_name_5(self):
        """Get output_variable_or_meter_name_5

        Returns:
            str: the value of `output_variable_or_meter_name_5` or None if not set
        """
        return self._data["Output Variable or Meter Name 5"]

    @output_variable_or_meter_name_5.setter
    def output_variable_or_meter_name_5(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 5`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_5`')
        self._data["Output Variable or Meter Name 5"] = value

    @property
    def key_name_6(self):
        """Get key_name_6

        Returns:
            str: the value of `key_name_6` or None if not set
        """
        return self._data["Key Name 6"]

    @key_name_6.setter
    def key_name_6(self, value=None):
        """  Corresponds to IDD Field `Key Name 6`

        Args:
            value (str): value for IDD Field `Key Name 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_6`')
        self._data["Key Name 6"] = value

    @property
    def output_variable_or_meter_name_6(self):
        """Get output_variable_or_meter_name_6

        Returns:
            str: the value of `output_variable_or_meter_name_6` or None if not set
        """
        return self._data["Output Variable or Meter Name 6"]

    @output_variable_or_meter_name_6.setter
    def output_variable_or_meter_name_6(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 6`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_6`')
        self._data["Output Variable or Meter Name 6"] = value

    @property
    def key_name_7(self):
        """Get key_name_7

        Returns:
            str: the value of `key_name_7` or None if not set
        """
        return self._data["Key Name 7"]

    @key_name_7.setter
    def key_name_7(self, value=None):
        """  Corresponds to IDD Field `Key Name 7`

        Args:
            value (str): value for IDD Field `Key Name 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_7`')
        self._data["Key Name 7"] = value

    @property
    def output_variable_or_meter_name_7(self):
        """Get output_variable_or_meter_name_7

        Returns:
            str: the value of `output_variable_or_meter_name_7` or None if not set
        """
        return self._data["Output Variable or Meter Name 7"]

    @output_variable_or_meter_name_7.setter
    def output_variable_or_meter_name_7(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 7`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_7`')
        self._data["Output Variable or Meter Name 7"] = value

    @property
    def key_name_8(self):
        """Get key_name_8

        Returns:
            str: the value of `key_name_8` or None if not set
        """
        return self._data["Key Name 8"]

    @key_name_8.setter
    def key_name_8(self, value=None):
        """  Corresponds to IDD Field `Key Name 8`

        Args:
            value (str): value for IDD Field `Key Name 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_8`')
        self._data["Key Name 8"] = value

    @property
    def output_variable_or_meter_name_8(self):
        """Get output_variable_or_meter_name_8

        Returns:
            str: the value of `output_variable_or_meter_name_8` or None if not set
        """
        return self._data["Output Variable or Meter Name 8"]

    @output_variable_or_meter_name_8.setter
    def output_variable_or_meter_name_8(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 8`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_8`')
        self._data["Output Variable or Meter Name 8"] = value

    @property
    def key_name_9(self):
        """Get key_name_9

        Returns:
            str: the value of `key_name_9` or None if not set
        """
        return self._data["Key Name 9"]

    @key_name_9.setter
    def key_name_9(self, value=None):
        """  Corresponds to IDD Field `Key Name 9`

        Args:
            value (str): value for IDD Field `Key Name 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_9`')
        self._data["Key Name 9"] = value

    @property
    def output_variable_or_meter_name_9(self):
        """Get output_variable_or_meter_name_9

        Returns:
            str: the value of `output_variable_or_meter_name_9` or None if not set
        """
        return self._data["Output Variable or Meter Name 9"]

    @output_variable_or_meter_name_9.setter
    def output_variable_or_meter_name_9(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 9`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_9`')
        self._data["Output Variable or Meter Name 9"] = value

    @property
    def key_name_10(self):
        """Get key_name_10

        Returns:
            str: the value of `key_name_10` or None if not set
        """
        return self._data["Key Name 10"]

    @key_name_10.setter
    def key_name_10(self, value=None):
        """  Corresponds to IDD Field `Key Name 10`

        Args:
            value (str): value for IDD Field `Key Name 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_10`')
        self._data["Key Name 10"] = value

    @property
    def output_variable_or_meter_name_10(self):
        """Get output_variable_or_meter_name_10

        Returns:
            str: the value of `output_variable_or_meter_name_10` or None if not set
        """
        return self._data["Output Variable or Meter Name 10"]

    @output_variable_or_meter_name_10.setter
    def output_variable_or_meter_name_10(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 10`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_10`')
        self._data["Output Variable or Meter Name 10"] = value

    @property
    def key_name_11(self):
        """Get key_name_11

        Returns:
            str: the value of `key_name_11` or None if not set
        """
        return self._data["Key Name 11"]

    @key_name_11.setter
    def key_name_11(self, value=None):
        """  Corresponds to IDD Field `Key Name 11`

        Args:
            value (str): value for IDD Field `Key Name 11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_11`')
        self._data["Key Name 11"] = value

    @property
    def output_variable_or_meter_name_11(self):
        """Get output_variable_or_meter_name_11

        Returns:
            str: the value of `output_variable_or_meter_name_11` or None if not set
        """
        return self._data["Output Variable or Meter Name 11"]

    @output_variable_or_meter_name_11.setter
    def output_variable_or_meter_name_11(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 11`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_11`')
        self._data["Output Variable or Meter Name 11"] = value

    @property
    def key_name_12(self):
        """Get key_name_12

        Returns:
            str: the value of `key_name_12` or None if not set
        """
        return self._data["Key Name 12"]

    @key_name_12.setter
    def key_name_12(self, value=None):
        """  Corresponds to IDD Field `Key Name 12`

        Args:
            value (str): value for IDD Field `Key Name 12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_12`')
        self._data["Key Name 12"] = value

    @property
    def output_variable_or_meter_name_12(self):
        """Get output_variable_or_meter_name_12

        Returns:
            str: the value of `output_variable_or_meter_name_12` or None if not set
        """
        return self._data["Output Variable or Meter Name 12"]

    @output_variable_or_meter_name_12.setter
    def output_variable_or_meter_name_12(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 12`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_12`')
        self._data["Output Variable or Meter Name 12"] = value

    @property
    def key_name_13(self):
        """Get key_name_13

        Returns:
            str: the value of `key_name_13` or None if not set
        """
        return self._data["Key Name 13"]

    @key_name_13.setter
    def key_name_13(self, value=None):
        """  Corresponds to IDD Field `Key Name 13`

        Args:
            value (str): value for IDD Field `Key Name 13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_13`')
        self._data["Key Name 13"] = value

    @property
    def output_variable_or_meter_name_13(self):
        """Get output_variable_or_meter_name_13

        Returns:
            str: the value of `output_variable_or_meter_name_13` or None if not set
        """
        return self._data["Output Variable or Meter Name 13"]

    @output_variable_or_meter_name_13.setter
    def output_variable_or_meter_name_13(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 13`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_13`')
        self._data["Output Variable or Meter Name 13"] = value

    @property
    def key_name_14(self):
        """Get key_name_14

        Returns:
            str: the value of `key_name_14` or None if not set
        """
        return self._data["Key Name 14"]

    @key_name_14.setter
    def key_name_14(self, value=None):
        """  Corresponds to IDD Field `Key Name 14`

        Args:
            value (str): value for IDD Field `Key Name 14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_14`')
        self._data["Key Name 14"] = value

    @property
    def output_variable_or_meter_name_14(self):
        """Get output_variable_or_meter_name_14

        Returns:
            str: the value of `output_variable_or_meter_name_14` or None if not set
        """
        return self._data["Output Variable or Meter Name 14"]

    @output_variable_or_meter_name_14.setter
    def output_variable_or_meter_name_14(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 14`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_14`')
        self._data["Output Variable or Meter Name 14"] = value

    @property
    def key_name_15(self):
        """Get key_name_15

        Returns:
            str: the value of `key_name_15` or None if not set
        """
        return self._data["Key Name 15"]

    @key_name_15.setter
    def key_name_15(self, value=None):
        """  Corresponds to IDD Field `Key Name 15`

        Args:
            value (str): value for IDD Field `Key Name 15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_15`')
        self._data["Key Name 15"] = value

    @property
    def output_variable_or_meter_name_15(self):
        """Get output_variable_or_meter_name_15

        Returns:
            str: the value of `output_variable_or_meter_name_15` or None if not set
        """
        return self._data["Output Variable or Meter Name 15"]

    @output_variable_or_meter_name_15.setter
    def output_variable_or_meter_name_15(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 15`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_15`')
        self._data["Output Variable or Meter Name 15"] = value

    @property
    def key_name_16(self):
        """Get key_name_16

        Returns:
            str: the value of `key_name_16` or None if not set
        """
        return self._data["Key Name 16"]

    @key_name_16.setter
    def key_name_16(self, value=None):
        """  Corresponds to IDD Field `Key Name 16`

        Args:
            value (str): value for IDD Field `Key Name 16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_16`')
        self._data["Key Name 16"] = value

    @property
    def output_variable_or_meter_name_16(self):
        """Get output_variable_or_meter_name_16

        Returns:
            str: the value of `output_variable_or_meter_name_16` or None if not set
        """
        return self._data["Output Variable or Meter Name 16"]

    @output_variable_or_meter_name_16.setter
    def output_variable_or_meter_name_16(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 16`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_16`')
        self._data["Output Variable or Meter Name 16"] = value

    @property
    def key_name_17(self):
        """Get key_name_17

        Returns:
            str: the value of `key_name_17` or None if not set
        """
        return self._data["Key Name 17"]

    @key_name_17.setter
    def key_name_17(self, value=None):
        """  Corresponds to IDD Field `Key Name 17`

        Args:
            value (str): value for IDD Field `Key Name 17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_17`')
        self._data["Key Name 17"] = value

    @property
    def output_variable_or_meter_name_17(self):
        """Get output_variable_or_meter_name_17

        Returns:
            str: the value of `output_variable_or_meter_name_17` or None if not set
        """
        return self._data["Output Variable or Meter Name 17"]

    @output_variable_or_meter_name_17.setter
    def output_variable_or_meter_name_17(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 17`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_17`')
        self._data["Output Variable or Meter Name 17"] = value

    @property
    def key_name_18(self):
        """Get key_name_18

        Returns:
            str: the value of `key_name_18` or None if not set
        """
        return self._data["Key Name 18"]

    @key_name_18.setter
    def key_name_18(self, value=None):
        """  Corresponds to IDD Field `Key Name 18`

        Args:
            value (str): value for IDD Field `Key Name 18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_18`')
        self._data["Key Name 18"] = value

    @property
    def output_variable_or_meter_name_18(self):
        """Get output_variable_or_meter_name_18

        Returns:
            str: the value of `output_variable_or_meter_name_18` or None if not set
        """
        return self._data["Output Variable or Meter Name 18"]

    @output_variable_or_meter_name_18.setter
    def output_variable_or_meter_name_18(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 18`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_18`')
        self._data["Output Variable or Meter Name 18"] = value

    @property
    def key_name_19(self):
        """Get key_name_19

        Returns:
            str: the value of `key_name_19` or None if not set
        """
        return self._data["Key Name 19"]

    @key_name_19.setter
    def key_name_19(self, value=None):
        """  Corresponds to IDD Field `Key Name 19`

        Args:
            value (str): value for IDD Field `Key Name 19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_19`')
        self._data["Key Name 19"] = value

    @property
    def output_variable_or_meter_name_19(self):
        """Get output_variable_or_meter_name_19

        Returns:
            str: the value of `output_variable_or_meter_name_19` or None if not set
        """
        return self._data["Output Variable or Meter Name 19"]

    @output_variable_or_meter_name_19.setter
    def output_variable_or_meter_name_19(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 19`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_19`')
        self._data["Output Variable or Meter Name 19"] = value

    @property
    def key_name_20(self):
        """Get key_name_20

        Returns:
            str: the value of `key_name_20` or None if not set
        """
        return self._data["Key Name 20"]

    @key_name_20.setter
    def key_name_20(self, value=None):
        """  Corresponds to IDD Field `Key Name 20`

        Args:
            value (str): value for IDD Field `Key Name 20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_20`')
        self._data["Key Name 20"] = value

    @property
    def output_variable_or_meter_name_20(self):
        """Get output_variable_or_meter_name_20

        Returns:
            str: the value of `output_variable_or_meter_name_20` or None if not set
        """
        return self._data["Output Variable or Meter Name 20"]

    @output_variable_or_meter_name_20.setter
    def output_variable_or_meter_name_20(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 20`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_20`')
        self._data["Output Variable or Meter Name 20"] = value

    @property
    def key_name_21(self):
        """Get key_name_21

        Returns:
            str: the value of `key_name_21` or None if not set
        """
        return self._data["Key Name 21"]

    @key_name_21.setter
    def key_name_21(self, value=None):
        """  Corresponds to IDD Field `Key Name 21`

        Args:
            value (str): value for IDD Field `Key Name 21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_21`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_21`')
        self._data["Key Name 21"] = value

    @property
    def output_variable_or_meter_name_21(self):
        """Get output_variable_or_meter_name_21

        Returns:
            str: the value of `output_variable_or_meter_name_21` or None if not set
        """
        return self._data["Output Variable or Meter Name 21"]

    @output_variable_or_meter_name_21.setter
    def output_variable_or_meter_name_21(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 21`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_21`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_21`')
        self._data["Output Variable or Meter Name 21"] = value

    @property
    def key_name_22(self):
        """Get key_name_22

        Returns:
            str: the value of `key_name_22` or None if not set
        """
        return self._data["Key Name 22"]

    @key_name_22.setter
    def key_name_22(self, value=None):
        """  Corresponds to IDD Field `Key Name 22`

        Args:
            value (str): value for IDD Field `Key Name 22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_22`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_22`')
        self._data["Key Name 22"] = value

    @property
    def output_variable_or_meter_name_22(self):
        """Get output_variable_or_meter_name_22

        Returns:
            str: the value of `output_variable_or_meter_name_22` or None if not set
        """
        return self._data["Output Variable or Meter Name 22"]

    @output_variable_or_meter_name_22.setter
    def output_variable_or_meter_name_22(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 22`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_22`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_22`')
        self._data["Output Variable or Meter Name 22"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class MeterCustomDecrement(object):
    """ Corresponds to IDD object `Meter:CustomDecrement`
        Used to allow users to combine specific variables and/or meters into
        "custom" meter configurations. To access these meters by name, one must
        first run a simulation to generate the RDD/MDD files and names.
    
    """
    internal_name = "Meter:CustomDecrement"
    field_count = 47
    required_fields = ["Name", "Source Meter Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Meter:CustomDecrement`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Fuel Type"] = None
        self._data["Source Meter Name"] = None
        self._data["Key Name 1"] = None
        self._data["Output Variable or Meter Name 1"] = None
        self._data["Key Name 2"] = None
        self._data["Output Variable or Meter Name 2"] = None
        self._data["Key Name 3"] = None
        self._data["Output Variable or Meter Name 3"] = None
        self._data["Key Name 4"] = None
        self._data["Output Variable or Meter Name 4"] = None
        self._data["Key Name 5"] = None
        self._data["Output Variable or Meter Name 5"] = None
        self._data["Key Name 6"] = None
        self._data["Output Variable or Meter Name 6"] = None
        self._data["Key Name 7"] = None
        self._data["Output Variable or Meter Name 7"] = None
        self._data["Key Name 8"] = None
        self._data["Output Variable or Meter Name 8"] = None
        self._data["Key Name 9"] = None
        self._data["Output Variable or Meter Name 9"] = None
        self._data["Key Name 10"] = None
        self._data["Output Variable or Meter Name 10"] = None
        self._data["Key Name 11"] = None
        self._data["Output Variable or Meter Name 11"] = None
        self._data["Key Name 12"] = None
        self._data["Output Variable or Meter Name 12"] = None
        self._data["Key Name 13"] = None
        self._data["Output Variable or Meter Name 13"] = None
        self._data["Key Name 14"] = None
        self._data["Output Variable or Meter Name 14"] = None
        self._data["Key Name 15"] = None
        self._data["Output Variable or Meter Name 15"] = None
        self._data["Key Name 16"] = None
        self._data["Output Variable or Meter Name 16"] = None
        self._data["Key Name 17"] = None
        self._data["Output Variable or Meter Name 17"] = None
        self._data["Key Name 18"] = None
        self._data["Output Variable or Meter Name 18"] = None
        self._data["Key Name 19"] = None
        self._data["Output Variable or Meter Name 19"] = None
        self._data["Key Name 20"] = None
        self._data["Output Variable or Meter Name 20"] = None
        self._data["Key Name 21"] = None
        self._data["Output Variable or Meter Name 21"] = None
        self._data["Key Name 22"] = None
        self._data["Output Variable or Meter Name 22"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_meter_name = None
        else:
            self.source_meter_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_1 = None
        else:
            self.key_name_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_1 = None
        else:
            self.output_variable_or_meter_name_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_2 = None
        else:
            self.key_name_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_2 = None
        else:
            self.output_variable_or_meter_name_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_3 = None
        else:
            self.key_name_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_3 = None
        else:
            self.output_variable_or_meter_name_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_4 = None
        else:
            self.key_name_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_4 = None
        else:
            self.output_variable_or_meter_name_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_5 = None
        else:
            self.key_name_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_5 = None
        else:
            self.output_variable_or_meter_name_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_6 = None
        else:
            self.key_name_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_6 = None
        else:
            self.output_variable_or_meter_name_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_7 = None
        else:
            self.key_name_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_7 = None
        else:
            self.output_variable_or_meter_name_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_8 = None
        else:
            self.key_name_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_8 = None
        else:
            self.output_variable_or_meter_name_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_9 = None
        else:
            self.key_name_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_9 = None
        else:
            self.output_variable_or_meter_name_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_10 = None
        else:
            self.key_name_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_10 = None
        else:
            self.output_variable_or_meter_name_10 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_11 = None
        else:
            self.key_name_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_11 = None
        else:
            self.output_variable_or_meter_name_11 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_12 = None
        else:
            self.key_name_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_12 = None
        else:
            self.output_variable_or_meter_name_12 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_13 = None
        else:
            self.key_name_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_13 = None
        else:
            self.output_variable_or_meter_name_13 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_14 = None
        else:
            self.key_name_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_14 = None
        else:
            self.output_variable_or_meter_name_14 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_15 = None
        else:
            self.key_name_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_15 = None
        else:
            self.output_variable_or_meter_name_15 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_16 = None
        else:
            self.key_name_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_16 = None
        else:
            self.output_variable_or_meter_name_16 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_17 = None
        else:
            self.key_name_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_17 = None
        else:
            self.output_variable_or_meter_name_17 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_18 = None
        else:
            self.key_name_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_18 = None
        else:
            self.output_variable_or_meter_name_18 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_19 = None
        else:
            self.key_name_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_19 = None
        else:
            self.output_variable_or_meter_name_19 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_20 = None
        else:
            self.key_name_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_20 = None
        else:
            self.output_variable_or_meter_name_20 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_21 = None
        else:
            self.key_name_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_21 = None
        else:
            self.output_variable_or_meter_name_21 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_name_22 = None
        else:
            self.key_name_22 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.output_variable_or_meter_name_22 = None
        else:
            self.output_variable_or_meter_name_22 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """  Corresponds to IDD Field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Diesel
                      - Gasoline
                      - Water
                      - Generic
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["coal"] = "Coal"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["water"] = "Water"
            vals["generic"] = "Generic"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def source_meter_name(self):
        """Get source_meter_name

        Returns:
            str: the value of `source_meter_name` or None if not set
        """
        return self._data["Source Meter Name"]

    @source_meter_name.setter
    def source_meter_name(self, value=None):
        """  Corresponds to IDD Field `Source Meter Name`

        Args:
            value (str): value for IDD Field `Source Meter Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_meter_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_meter_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_meter_name`')
        self._data["Source Meter Name"] = value

    @property
    def key_name_1(self):
        """Get key_name_1

        Returns:
            str: the value of `key_name_1` or None if not set
        """
        return self._data["Key Name 1"]

    @key_name_1.setter
    def key_name_1(self, value=None):
        """  Corresponds to IDD Field `Key Name 1`

        Args:
            value (str): value for IDD Field `Key Name 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_1`')
        self._data["Key Name 1"] = value

    @property
    def output_variable_or_meter_name_1(self):
        """Get output_variable_or_meter_name_1

        Returns:
            str: the value of `output_variable_or_meter_name_1` or None if not set
        """
        return self._data["Output Variable or Meter Name 1"]

    @output_variable_or_meter_name_1.setter
    def output_variable_or_meter_name_1(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 1`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_1`')
        self._data["Output Variable or Meter Name 1"] = value

    @property
    def key_name_2(self):
        """Get key_name_2

        Returns:
            str: the value of `key_name_2` or None if not set
        """
        return self._data["Key Name 2"]

    @key_name_2.setter
    def key_name_2(self, value=None):
        """  Corresponds to IDD Field `Key Name 2`

        Args:
            value (str): value for IDD Field `Key Name 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_2`')
        self._data["Key Name 2"] = value

    @property
    def output_variable_or_meter_name_2(self):
        """Get output_variable_or_meter_name_2

        Returns:
            str: the value of `output_variable_or_meter_name_2` or None if not set
        """
        return self._data["Output Variable or Meter Name 2"]

    @output_variable_or_meter_name_2.setter
    def output_variable_or_meter_name_2(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 2`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_2`')
        self._data["Output Variable or Meter Name 2"] = value

    @property
    def key_name_3(self):
        """Get key_name_3

        Returns:
            str: the value of `key_name_3` or None if not set
        """
        return self._data["Key Name 3"]

    @key_name_3.setter
    def key_name_3(self, value=None):
        """  Corresponds to IDD Field `Key Name 3`

        Args:
            value (str): value for IDD Field `Key Name 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_3`')
        self._data["Key Name 3"] = value

    @property
    def output_variable_or_meter_name_3(self):
        """Get output_variable_or_meter_name_3

        Returns:
            str: the value of `output_variable_or_meter_name_3` or None if not set
        """
        return self._data["Output Variable or Meter Name 3"]

    @output_variable_or_meter_name_3.setter
    def output_variable_or_meter_name_3(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 3`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_3`')
        self._data["Output Variable or Meter Name 3"] = value

    @property
    def key_name_4(self):
        """Get key_name_4

        Returns:
            str: the value of `key_name_4` or None if not set
        """
        return self._data["Key Name 4"]

    @key_name_4.setter
    def key_name_4(self, value=None):
        """  Corresponds to IDD Field `Key Name 4`

        Args:
            value (str): value for IDD Field `Key Name 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_4`')
        self._data["Key Name 4"] = value

    @property
    def output_variable_or_meter_name_4(self):
        """Get output_variable_or_meter_name_4

        Returns:
            str: the value of `output_variable_or_meter_name_4` or None if not set
        """
        return self._data["Output Variable or Meter Name 4"]

    @output_variable_or_meter_name_4.setter
    def output_variable_or_meter_name_4(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 4`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_4`')
        self._data["Output Variable or Meter Name 4"] = value

    @property
    def key_name_5(self):
        """Get key_name_5

        Returns:
            str: the value of `key_name_5` or None if not set
        """
        return self._data["Key Name 5"]

    @key_name_5.setter
    def key_name_5(self, value=None):
        """  Corresponds to IDD Field `Key Name 5`

        Args:
            value (str): value for IDD Field `Key Name 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_5`')
        self._data["Key Name 5"] = value

    @property
    def output_variable_or_meter_name_5(self):
        """Get output_variable_or_meter_name_5

        Returns:
            str: the value of `output_variable_or_meter_name_5` or None if not set
        """
        return self._data["Output Variable or Meter Name 5"]

    @output_variable_or_meter_name_5.setter
    def output_variable_or_meter_name_5(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 5`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_5`')
        self._data["Output Variable or Meter Name 5"] = value

    @property
    def key_name_6(self):
        """Get key_name_6

        Returns:
            str: the value of `key_name_6` or None if not set
        """
        return self._data["Key Name 6"]

    @key_name_6.setter
    def key_name_6(self, value=None):
        """  Corresponds to IDD Field `Key Name 6`

        Args:
            value (str): value for IDD Field `Key Name 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_6`')
        self._data["Key Name 6"] = value

    @property
    def output_variable_or_meter_name_6(self):
        """Get output_variable_or_meter_name_6

        Returns:
            str: the value of `output_variable_or_meter_name_6` or None if not set
        """
        return self._data["Output Variable or Meter Name 6"]

    @output_variable_or_meter_name_6.setter
    def output_variable_or_meter_name_6(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 6`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_6`')
        self._data["Output Variable or Meter Name 6"] = value

    @property
    def key_name_7(self):
        """Get key_name_7

        Returns:
            str: the value of `key_name_7` or None if not set
        """
        return self._data["Key Name 7"]

    @key_name_7.setter
    def key_name_7(self, value=None):
        """  Corresponds to IDD Field `Key Name 7`

        Args:
            value (str): value for IDD Field `Key Name 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_7`')
        self._data["Key Name 7"] = value

    @property
    def output_variable_or_meter_name_7(self):
        """Get output_variable_or_meter_name_7

        Returns:
            str: the value of `output_variable_or_meter_name_7` or None if not set
        """
        return self._data["Output Variable or Meter Name 7"]

    @output_variable_or_meter_name_7.setter
    def output_variable_or_meter_name_7(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 7`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_7`')
        self._data["Output Variable or Meter Name 7"] = value

    @property
    def key_name_8(self):
        """Get key_name_8

        Returns:
            str: the value of `key_name_8` or None if not set
        """
        return self._data["Key Name 8"]

    @key_name_8.setter
    def key_name_8(self, value=None):
        """  Corresponds to IDD Field `Key Name 8`

        Args:
            value (str): value for IDD Field `Key Name 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_8`')
        self._data["Key Name 8"] = value

    @property
    def output_variable_or_meter_name_8(self):
        """Get output_variable_or_meter_name_8

        Returns:
            str: the value of `output_variable_or_meter_name_8` or None if not set
        """
        return self._data["Output Variable or Meter Name 8"]

    @output_variable_or_meter_name_8.setter
    def output_variable_or_meter_name_8(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 8`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_8`')
        self._data["Output Variable or Meter Name 8"] = value

    @property
    def key_name_9(self):
        """Get key_name_9

        Returns:
            str: the value of `key_name_9` or None if not set
        """
        return self._data["Key Name 9"]

    @key_name_9.setter
    def key_name_9(self, value=None):
        """  Corresponds to IDD Field `Key Name 9`

        Args:
            value (str): value for IDD Field `Key Name 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_9`')
        self._data["Key Name 9"] = value

    @property
    def output_variable_or_meter_name_9(self):
        """Get output_variable_or_meter_name_9

        Returns:
            str: the value of `output_variable_or_meter_name_9` or None if not set
        """
        return self._data["Output Variable or Meter Name 9"]

    @output_variable_or_meter_name_9.setter
    def output_variable_or_meter_name_9(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 9`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_9`')
        self._data["Output Variable or Meter Name 9"] = value

    @property
    def key_name_10(self):
        """Get key_name_10

        Returns:
            str: the value of `key_name_10` or None if not set
        """
        return self._data["Key Name 10"]

    @key_name_10.setter
    def key_name_10(self, value=None):
        """  Corresponds to IDD Field `Key Name 10`

        Args:
            value (str): value for IDD Field `Key Name 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_10`')
        self._data["Key Name 10"] = value

    @property
    def output_variable_or_meter_name_10(self):
        """Get output_variable_or_meter_name_10

        Returns:
            str: the value of `output_variable_or_meter_name_10` or None if not set
        """
        return self._data["Output Variable or Meter Name 10"]

    @output_variable_or_meter_name_10.setter
    def output_variable_or_meter_name_10(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 10`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_10`')
        self._data["Output Variable or Meter Name 10"] = value

    @property
    def key_name_11(self):
        """Get key_name_11

        Returns:
            str: the value of `key_name_11` or None if not set
        """
        return self._data["Key Name 11"]

    @key_name_11.setter
    def key_name_11(self, value=None):
        """  Corresponds to IDD Field `Key Name 11`

        Args:
            value (str): value for IDD Field `Key Name 11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_11`')
        self._data["Key Name 11"] = value

    @property
    def output_variable_or_meter_name_11(self):
        """Get output_variable_or_meter_name_11

        Returns:
            str: the value of `output_variable_or_meter_name_11` or None if not set
        """
        return self._data["Output Variable or Meter Name 11"]

    @output_variable_or_meter_name_11.setter
    def output_variable_or_meter_name_11(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 11`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 11`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_11`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_11`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_11`')
        self._data["Output Variable or Meter Name 11"] = value

    @property
    def key_name_12(self):
        """Get key_name_12

        Returns:
            str: the value of `key_name_12` or None if not set
        """
        return self._data["Key Name 12"]

    @key_name_12.setter
    def key_name_12(self, value=None):
        """  Corresponds to IDD Field `Key Name 12`

        Args:
            value (str): value for IDD Field `Key Name 12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_12`')
        self._data["Key Name 12"] = value

    @property
    def output_variable_or_meter_name_12(self):
        """Get output_variable_or_meter_name_12

        Returns:
            str: the value of `output_variable_or_meter_name_12` or None if not set
        """
        return self._data["Output Variable or Meter Name 12"]

    @output_variable_or_meter_name_12.setter
    def output_variable_or_meter_name_12(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 12`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 12`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_12`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_12`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_12`')
        self._data["Output Variable or Meter Name 12"] = value

    @property
    def key_name_13(self):
        """Get key_name_13

        Returns:
            str: the value of `key_name_13` or None if not set
        """
        return self._data["Key Name 13"]

    @key_name_13.setter
    def key_name_13(self, value=None):
        """  Corresponds to IDD Field `Key Name 13`

        Args:
            value (str): value for IDD Field `Key Name 13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_13`')
        self._data["Key Name 13"] = value

    @property
    def output_variable_or_meter_name_13(self):
        """Get output_variable_or_meter_name_13

        Returns:
            str: the value of `output_variable_or_meter_name_13` or None if not set
        """
        return self._data["Output Variable or Meter Name 13"]

    @output_variable_or_meter_name_13.setter
    def output_variable_or_meter_name_13(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 13`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 13`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_13`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_13`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_13`')
        self._data["Output Variable or Meter Name 13"] = value

    @property
    def key_name_14(self):
        """Get key_name_14

        Returns:
            str: the value of `key_name_14` or None if not set
        """
        return self._data["Key Name 14"]

    @key_name_14.setter
    def key_name_14(self, value=None):
        """  Corresponds to IDD Field `Key Name 14`

        Args:
            value (str): value for IDD Field `Key Name 14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_14`')
        self._data["Key Name 14"] = value

    @property
    def output_variable_or_meter_name_14(self):
        """Get output_variable_or_meter_name_14

        Returns:
            str: the value of `output_variable_or_meter_name_14` or None if not set
        """
        return self._data["Output Variable or Meter Name 14"]

    @output_variable_or_meter_name_14.setter
    def output_variable_or_meter_name_14(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 14`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 14`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_14`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_14`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_14`')
        self._data["Output Variable or Meter Name 14"] = value

    @property
    def key_name_15(self):
        """Get key_name_15

        Returns:
            str: the value of `key_name_15` or None if not set
        """
        return self._data["Key Name 15"]

    @key_name_15.setter
    def key_name_15(self, value=None):
        """  Corresponds to IDD Field `Key Name 15`

        Args:
            value (str): value for IDD Field `Key Name 15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_15`')
        self._data["Key Name 15"] = value

    @property
    def output_variable_or_meter_name_15(self):
        """Get output_variable_or_meter_name_15

        Returns:
            str: the value of `output_variable_or_meter_name_15` or None if not set
        """
        return self._data["Output Variable or Meter Name 15"]

    @output_variable_or_meter_name_15.setter
    def output_variable_or_meter_name_15(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 15`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 15`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_15`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_15`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_15`')
        self._data["Output Variable or Meter Name 15"] = value

    @property
    def key_name_16(self):
        """Get key_name_16

        Returns:
            str: the value of `key_name_16` or None if not set
        """
        return self._data["Key Name 16"]

    @key_name_16.setter
    def key_name_16(self, value=None):
        """  Corresponds to IDD Field `Key Name 16`

        Args:
            value (str): value for IDD Field `Key Name 16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_16`')
        self._data["Key Name 16"] = value

    @property
    def output_variable_or_meter_name_16(self):
        """Get output_variable_or_meter_name_16

        Returns:
            str: the value of `output_variable_or_meter_name_16` or None if not set
        """
        return self._data["Output Variable or Meter Name 16"]

    @output_variable_or_meter_name_16.setter
    def output_variable_or_meter_name_16(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 16`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 16`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_16`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_16`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_16`')
        self._data["Output Variable or Meter Name 16"] = value

    @property
    def key_name_17(self):
        """Get key_name_17

        Returns:
            str: the value of `key_name_17` or None if not set
        """
        return self._data["Key Name 17"]

    @key_name_17.setter
    def key_name_17(self, value=None):
        """  Corresponds to IDD Field `Key Name 17`

        Args:
            value (str): value for IDD Field `Key Name 17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_17`')
        self._data["Key Name 17"] = value

    @property
    def output_variable_or_meter_name_17(self):
        """Get output_variable_or_meter_name_17

        Returns:
            str: the value of `output_variable_or_meter_name_17` or None if not set
        """
        return self._data["Output Variable or Meter Name 17"]

    @output_variable_or_meter_name_17.setter
    def output_variable_or_meter_name_17(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 17`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 17`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_17`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_17`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_17`')
        self._data["Output Variable or Meter Name 17"] = value

    @property
    def key_name_18(self):
        """Get key_name_18

        Returns:
            str: the value of `key_name_18` or None if not set
        """
        return self._data["Key Name 18"]

    @key_name_18.setter
    def key_name_18(self, value=None):
        """  Corresponds to IDD Field `Key Name 18`

        Args:
            value (str): value for IDD Field `Key Name 18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_18`')
        self._data["Key Name 18"] = value

    @property
    def output_variable_or_meter_name_18(self):
        """Get output_variable_or_meter_name_18

        Returns:
            str: the value of `output_variable_or_meter_name_18` or None if not set
        """
        return self._data["Output Variable or Meter Name 18"]

    @output_variable_or_meter_name_18.setter
    def output_variable_or_meter_name_18(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 18`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 18`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_18`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_18`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_18`')
        self._data["Output Variable or Meter Name 18"] = value

    @property
    def key_name_19(self):
        """Get key_name_19

        Returns:
            str: the value of `key_name_19` or None if not set
        """
        return self._data["Key Name 19"]

    @key_name_19.setter
    def key_name_19(self, value=None):
        """  Corresponds to IDD Field `Key Name 19`

        Args:
            value (str): value for IDD Field `Key Name 19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_19`')
        self._data["Key Name 19"] = value

    @property
    def output_variable_or_meter_name_19(self):
        """Get output_variable_or_meter_name_19

        Returns:
            str: the value of `output_variable_or_meter_name_19` or None if not set
        """
        return self._data["Output Variable or Meter Name 19"]

    @output_variable_or_meter_name_19.setter
    def output_variable_or_meter_name_19(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 19`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 19`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_19`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_19`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_19`')
        self._data["Output Variable or Meter Name 19"] = value

    @property
    def key_name_20(self):
        """Get key_name_20

        Returns:
            str: the value of `key_name_20` or None if not set
        """
        return self._data["Key Name 20"]

    @key_name_20.setter
    def key_name_20(self, value=None):
        """  Corresponds to IDD Field `Key Name 20`

        Args:
            value (str): value for IDD Field `Key Name 20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_20`')
        self._data["Key Name 20"] = value

    @property
    def output_variable_or_meter_name_20(self):
        """Get output_variable_or_meter_name_20

        Returns:
            str: the value of `output_variable_or_meter_name_20` or None if not set
        """
        return self._data["Output Variable or Meter Name 20"]

    @output_variable_or_meter_name_20.setter
    def output_variable_or_meter_name_20(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 20`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 20`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_20`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_20`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_20`')
        self._data["Output Variable or Meter Name 20"] = value

    @property
    def key_name_21(self):
        """Get key_name_21

        Returns:
            str: the value of `key_name_21` or None if not set
        """
        return self._data["Key Name 21"]

    @key_name_21.setter
    def key_name_21(self, value=None):
        """  Corresponds to IDD Field `Key Name 21`

        Args:
            value (str): value for IDD Field `Key Name 21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_21`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_21`')
        self._data["Key Name 21"] = value

    @property
    def output_variable_or_meter_name_21(self):
        """Get output_variable_or_meter_name_21

        Returns:
            str: the value of `output_variable_or_meter_name_21` or None if not set
        """
        return self._data["Output Variable or Meter Name 21"]

    @output_variable_or_meter_name_21.setter
    def output_variable_or_meter_name_21(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 21`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 21`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_21`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_21`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_21`')
        self._data["Output Variable or Meter Name 21"] = value

    @property
    def key_name_22(self):
        """Get key_name_22

        Returns:
            str: the value of `key_name_22` or None if not set
        """
        return self._data["Key Name 22"]

    @key_name_22.setter
    def key_name_22(self, value=None):
        """  Corresponds to IDD Field `Key Name 22`

        Args:
            value (str): value for IDD Field `Key Name 22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_name_22`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_name_22`')
        self._data["Key Name 22"] = value

    @property
    def output_variable_or_meter_name_22(self):
        """Get output_variable_or_meter_name_22

        Returns:
            str: the value of `output_variable_or_meter_name_22` or None if not set
        """
        return self._data["Output Variable or Meter Name 22"]

    @output_variable_or_meter_name_22.setter
    def output_variable_or_meter_name_22(self, value=None):
        """  Corresponds to IDD Field `Output Variable or Meter Name 22`

        Args:
            value (str): value for IDD Field `Output Variable or Meter Name 22`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `output_variable_or_meter_name_22`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `output_variable_or_meter_name_22`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `output_variable_or_meter_name_22`')
        self._data["Output Variable or Meter Name 22"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputSqlite(object):
    """ Corresponds to IDD object `Output:SQLite`
        Output from EnergyPlus can be written to an SQLite format file.
    
    """
    internal_name = "Output:SQLite"
    field_count = 1
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:SQLite`
        """
        self._data = OrderedDict()
        self._data["Option Type"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.option_type = None
        else:
            self.option_type = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def option_type(self):
        """Get option_type

        Returns:
            str: the value of `option_type` or None if not set
        """
        return self._data["Option Type"]

    @option_type.setter
    def option_type(self, value=None):
        """  Corresponds to IDD Field `Option Type`

        Args:
            value (str): value for IDD Field `Option Type`
                Accepted values are:
                      - Simple
                      - SimpleAndTabular
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `option_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `option_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `option_type`')
            vals = {}
            vals["simple"] = "Simple"
            vals["simpleandtabular"] = "SimpleAndTabular"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `option_type`'.format(value))
            value = vals[value_lower]
        self._data["Option Type"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputEnvironmentalImpactFactors(object):
    """ Corresponds to IDD object `Output:EnvironmentalImpactFactors`
        This is used to Automatically report the facility meters and turn on the Environmental Impact Report calculations
        for all of the Environmental Factors.
    
    """
    internal_name = "Output:EnvironmentalImpactFactors"
    field_count = 1
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:EnvironmentalImpactFactors`
        """
        self._data = OrderedDict()
        self._data["Reporting Frequency"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.reporting_frequency = None
        else:
            self.reporting_frequency = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def reporting_frequency(self):
        """Get reporting_frequency

        Returns:
            str: the value of `reporting_frequency` or None if not set
        """
        return self._data["Reporting Frequency"]

    @reporting_frequency.setter
    def reporting_frequency(self, value=None):
        """  Corresponds to IDD Field `Reporting Frequency`

        Args:
            value (str): value for IDD Field `Reporting Frequency`
                Accepted values are:
                      - Timestep
                      - Hourly
                      - Daily
                      - Monthly
                      - RunPeriod
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `reporting_frequency`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `reporting_frequency`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `reporting_frequency`')
            vals = {}
            vals["timestep"] = "Timestep"
            vals["hourly"] = "Hourly"
            vals["daily"] = "Daily"
            vals["monthly"] = "Monthly"
            vals["runperiod"] = "RunPeriod"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `reporting_frequency`'.format(value))
            value = vals[value_lower]
        self._data["Reporting Frequency"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class EnvironmentalImpactFactors(object):
    """ Corresponds to IDD object `EnvironmentalImpactFactors`
        Used to help convert district and ideal energy use to a fuel type and provide total carbon equivalent with coefficients
        Also used in Source=>Site conversions.
    
    """
    internal_name = "EnvironmentalImpactFactors"
    field_count = 6
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `EnvironmentalImpactFactors`
        """
        self._data = OrderedDict()
        self._data["District Heating Efficiency"] = None
        self._data["District Cooling COP"] = None
        self._data["Steam Conversion Efficiency"] = None
        self._data["Total Carbon Equivalent Emission Factor From N2O"] = None
        self._data["Total Carbon Equivalent Emission Factor From CH4"] = None
        self._data["Total Carbon Equivalent Emission Factor From CO2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.district_heating_efficiency = None
        else:
            self.district_heating_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.district_cooling_cop = None
        else:
            self.district_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.steam_conversion_efficiency = None
        else:
            self.steam_conversion_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_carbon_equivalent_emission_factor_from_n2o = None
        else:
            self.total_carbon_equivalent_emission_factor_from_n2o = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_carbon_equivalent_emission_factor_from_ch4 = None
        else:
            self.total_carbon_equivalent_emission_factor_from_ch4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_carbon_equivalent_emission_factor_from_co2 = None
        else:
            self.total_carbon_equivalent_emission_factor_from_co2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def district_heating_efficiency(self):
        """Get district_heating_efficiency

        Returns:
            float: the value of `district_heating_efficiency` or None if not set
        """
        return self._data["District Heating Efficiency"]

    @district_heating_efficiency.setter
    def district_heating_efficiency(self, value=0.3):
        """  Corresponds to IDD Field `District Heating Efficiency`
        District heating efficiency used when converted to natural gas

        Args:
            value (float): value for IDD Field `District Heating Efficiency`
                Default value: 0.3
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `district_heating_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `district_heating_efficiency`')
        self._data["District Heating Efficiency"] = value

    @property
    def district_cooling_cop(self):
        """Get district_cooling_cop

        Returns:
            float: the value of `district_cooling_cop` or None if not set
        """
        return self._data["District Cooling COP"]

    @district_cooling_cop.setter
    def district_cooling_cop(self, value=3.0):
        """  Corresponds to IDD Field `District Cooling COP`
        District cooling COP used when converted to electricity

        Args:
            value (float): value for IDD Field `District Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `district_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `district_cooling_cop`')
        self._data["District Cooling COP"] = value

    @property
    def steam_conversion_efficiency(self):
        """Get steam_conversion_efficiency

        Returns:
            float: the value of `steam_conversion_efficiency` or None if not set
        """
        return self._data["Steam Conversion Efficiency"]

    @steam_conversion_efficiency.setter
    def steam_conversion_efficiency(self, value=0.25):
        """  Corresponds to IDD Field `Steam Conversion Efficiency`
        Steam conversion efficiency used to convert steam usage to natural gas

        Args:
            value (float): value for IDD Field `Steam Conversion Efficiency`
                Default value: 0.25
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `steam_conversion_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `steam_conversion_efficiency`')
        self._data["Steam Conversion Efficiency"] = value

    @property
    def total_carbon_equivalent_emission_factor_from_n2o(self):
        """Get total_carbon_equivalent_emission_factor_from_n2o

        Returns:
            float: the value of `total_carbon_equivalent_emission_factor_from_n2o` or None if not set
        """
        return self._data["Total Carbon Equivalent Emission Factor From N2O"]

    @total_carbon_equivalent_emission_factor_from_n2o.setter
    def total_carbon_equivalent_emission_factor_from_n2o(self, value=80.7272):
        """  Corresponds to IDD Field `Total Carbon Equivalent Emission Factor From N2O`

        Args:
            value (float): value for IDD Field `Total Carbon Equivalent Emission Factor From N2O`
                Units: kg/kg
                Default value: 80.7272
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_carbon_equivalent_emission_factor_from_n2o`'.format(value))
        self._data["Total Carbon Equivalent Emission Factor From N2O"] = value

    @property
    def total_carbon_equivalent_emission_factor_from_ch4(self):
        """Get total_carbon_equivalent_emission_factor_from_ch4

        Returns:
            float: the value of `total_carbon_equivalent_emission_factor_from_ch4` or None if not set
        """
        return self._data["Total Carbon Equivalent Emission Factor From CH4"]

    @total_carbon_equivalent_emission_factor_from_ch4.setter
    def total_carbon_equivalent_emission_factor_from_ch4(self, value=6.2727):
        """  Corresponds to IDD Field `Total Carbon Equivalent Emission Factor From CH4`

        Args:
            value (float): value for IDD Field `Total Carbon Equivalent Emission Factor From CH4`
                Units: kg/kg
                Default value: 6.2727
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_carbon_equivalent_emission_factor_from_ch4`'.format(value))
        self._data["Total Carbon Equivalent Emission Factor From CH4"] = value

    @property
    def total_carbon_equivalent_emission_factor_from_co2(self):
        """Get total_carbon_equivalent_emission_factor_from_co2

        Returns:
            float: the value of `total_carbon_equivalent_emission_factor_from_co2` or None if not set
        """
        return self._data["Total Carbon Equivalent Emission Factor From CO2"]

    @total_carbon_equivalent_emission_factor_from_co2.setter
    def total_carbon_equivalent_emission_factor_from_co2(self, value=0.2727):
        """  Corresponds to IDD Field `Total Carbon Equivalent Emission Factor From CO2`

        Args:
            value (float): value for IDD Field `Total Carbon Equivalent Emission Factor From CO2`
                Units: kg/kg
                Default value: 0.2727
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_carbon_equivalent_emission_factor_from_co2`'.format(value))
        self._data["Total Carbon Equivalent Emission Factor From CO2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FuelFactors(object):
    """ Corresponds to IDD object `FuelFactors`
        Provides Fuel Factors for Emissions as well as Source=>Site conversions.
        OtherFuel1, OtherFuel2 provide options for users who want to create and use
        fuels that may not be mainstream (biomass, wood, pellets).
    
    """
    internal_name = "FuelFactors"
    field_count = 37
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `FuelFactors`
        """
        self._data = OrderedDict()
        self._data["Existing Fuel Resource Name"] = None
        self._data["Units of Measure"] = None
        self._data["Energy per Unit Factor"] = None
        self._data["Source Energy Factor"] = None
        self._data["Source Energy Schedule Name"] = None
        self._data["CO2 Emission Factor"] = None
        self._data["CO2 Emission Factor Schedule Name"] = None
        self._data["CO Emission Factor"] = None
        self._data["CO Emission Factor Schedule Name"] = None
        self._data["CH4 Emission Factor"] = None
        self._data["CH4 Emission Factor Schedule Name"] = None
        self._data["NOx Emission Factor"] = None
        self._data["NOx Emission Factor Schedule Name"] = None
        self._data["N2O Emission Factor"] = None
        self._data["N2O Emission Factor Schedule Name"] = None
        self._data["SO2 Emission Factor"] = None
        self._data["SO2 Emission Factor Schedule Name"] = None
        self._data["PM Emission Factor"] = None
        self._data["PM Emission Factor Schedule Name"] = None
        self._data["PM10 Emission Factor"] = None
        self._data["PM10 Emission Factor Schedule Name"] = None
        self._data["PM2.5 Emission Factor"] = None
        self._data["PM2.5 Emission Factor Schedule Name"] = None
        self._data["NH3 Emission Factor"] = None
        self._data["NH3 Emission Factor Schedule Name"] = None
        self._data["NMVOC Emission Factor"] = None
        self._data["NMVOC Emission Factor Schedule Name"] = None
        self._data["Hg Emission Factor"] = None
        self._data["Hg Emission Factor Schedule Name"] = None
        self._data["Pb Emission Factor"] = None
        self._data["Pb Emission Factor Schedule Name"] = None
        self._data["Water Emission Factor"] = None
        self._data["Water Emission Factor Schedule Name"] = None
        self._data["Nuclear High Level Emission Factor"] = None
        self._data["Nuclear High Level Emission Factor Schedule Name"] = None
        self._data["Nuclear Low Level Emission Factor"] = None
        self._data["Nuclear Low Level Emission Factor Schedule Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.existing_fuel_resource_name = None
        else:
            self.existing_fuel_resource_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.units_of_measure = None
        else:
            self.units_of_measure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_per_unit_factor = None
        else:
            self.energy_per_unit_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_energy_factor = None
        else:
            self.source_energy_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_energy_schedule_name = None
        else:
            self.source_energy_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.co2_emission_factor = None
        else:
            self.co2_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.co2_emission_factor_schedule_name = None
        else:
            self.co2_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.co_emission_factor = None
        else:
            self.co_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.co_emission_factor_schedule_name = None
        else:
            self.co_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ch4_emission_factor = None
        else:
            self.ch4_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ch4_emission_factor_schedule_name = None
        else:
            self.ch4_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nox_emission_factor = None
        else:
            self.nox_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nox_emission_factor_schedule_name = None
        else:
            self.nox_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.n2o_emission_factor = None
        else:
            self.n2o_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.n2o_emission_factor_schedule_name = None
        else:
            self.n2o_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.so2_emission_factor = None
        else:
            self.so2_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.so2_emission_factor_schedule_name = None
        else:
            self.so2_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pm_emission_factor = None
        else:
            self.pm_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pm_emission_factor_schedule_name = None
        else:
            self.pm_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pm10_emission_factor = None
        else:
            self.pm10_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pm10_emission_factor_schedule_name = None
        else:
            self.pm10_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pm2_5_emission_factor = None
        else:
            self.pm2_5_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pm2_5_emission_factor_schedule_name = None
        else:
            self.pm2_5_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nh3_emission_factor = None
        else:
            self.nh3_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nh3_emission_factor_schedule_name = None
        else:
            self.nh3_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nmvoc_emission_factor = None
        else:
            self.nmvoc_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nmvoc_emission_factor_schedule_name = None
        else:
            self.nmvoc_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hg_emission_factor = None
        else:
            self.hg_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.hg_emission_factor_schedule_name = None
        else:
            self.hg_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pb_emission_factor = None
        else:
            self.pb_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pb_emission_factor_schedule_name = None
        else:
            self.pb_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_emission_factor = None
        else:
            self.water_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_emission_factor_schedule_name = None
        else:
            self.water_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nuclear_high_level_emission_factor = None
        else:
            self.nuclear_high_level_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nuclear_high_level_emission_factor_schedule_name = None
        else:
            self.nuclear_high_level_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nuclear_low_level_emission_factor = None
        else:
            self.nuclear_low_level_emission_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nuclear_low_level_emission_factor_schedule_name = None
        else:
            self.nuclear_low_level_emission_factor_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def existing_fuel_resource_name(self):
        """Get existing_fuel_resource_name

        Returns:
            str: the value of `existing_fuel_resource_name` or None if not set
        """
        return self._data["Existing Fuel Resource Name"]

    @existing_fuel_resource_name.setter
    def existing_fuel_resource_name(self, value=None):
        """  Corresponds to IDD Field `Existing Fuel Resource Name`

        Args:
            value (str): value for IDD Field `Existing Fuel Resource Name`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - FuelOil#1
                      - FuelOil#2
                      - Coal
                      - Gasoline
                      - Propane
                      - Diesel
                      - OtherFuel1
                      - OtherFuel2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `existing_fuel_resource_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `existing_fuel_resource_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `existing_fuel_resource_name`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["coal"] = "Coal"
            vals["gasoline"] = "Gasoline"
            vals["propane"] = "Propane"
            vals["diesel"] = "Diesel"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `existing_fuel_resource_name`'.format(value))
            value = vals[value_lower]
        self._data["Existing Fuel Resource Name"] = value

    @property
    def units_of_measure(self):
        """Get units_of_measure

        Returns:
            str: the value of `units_of_measure` or None if not set
        """
        return self._data["Units of Measure"]

    @units_of_measure.setter
    def units_of_measure(self, value=None):
        """  Corresponds to IDD Field `Units of Measure`

        Args:
            value (str): value for IDD Field `Units of Measure`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `units_of_measure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `units_of_measure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `units_of_measure`')
        self._data["Units of Measure"] = value

    @property
    def energy_per_unit_factor(self):
        """Get energy_per_unit_factor

        Returns:
            float: the value of `energy_per_unit_factor` or None if not set
        """
        return self._data["Energy per Unit Factor"]

    @energy_per_unit_factor.setter
    def energy_per_unit_factor(self, value=None):
        """  Corresponds to IDD Field `Energy per Unit Factor`

        Args:
            value (float): value for IDD Field `Energy per Unit Factor`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `energy_per_unit_factor`'.format(value))
        self._data["Energy per Unit Factor"] = value

    @property
    def source_energy_factor(self):
        """Get source_energy_factor

        Returns:
            float: the value of `source_energy_factor` or None if not set
        """
        return self._data["Source Energy Factor"]

    @source_energy_factor.setter
    def source_energy_factor(self, value=None):
        """  Corresponds to IDD Field `Source Energy Factor`

        Args:
            value (float): value for IDD Field `Source Energy Factor`
                Units: J/J
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_energy_factor`'.format(value))
        self._data["Source Energy Factor"] = value

    @property
    def source_energy_schedule_name(self):
        """Get source_energy_schedule_name

        Returns:
            str: the value of `source_energy_schedule_name` or None if not set
        """
        return self._data["Source Energy Schedule Name"]

    @source_energy_schedule_name.setter
    def source_energy_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Source Energy Schedule Name`

        Args:
            value (str): value for IDD Field `Source Energy Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `source_energy_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `source_energy_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `source_energy_schedule_name`')
        self._data["Source Energy Schedule Name"] = value

    @property
    def co2_emission_factor(self):
        """Get co2_emission_factor

        Returns:
            float: the value of `co2_emission_factor` or None if not set
        """
        return self._data["CO2 Emission Factor"]

    @co2_emission_factor.setter
    def co2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `CO2 Emission Factor`

        Args:
            value (float): value for IDD Field `CO2 Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `co2_emission_factor`'.format(value))
        self._data["CO2 Emission Factor"] = value

    @property
    def co2_emission_factor_schedule_name(self):
        """Get co2_emission_factor_schedule_name

        Returns:
            str: the value of `co2_emission_factor_schedule_name` or None if not set
        """
        return self._data["CO2 Emission Factor Schedule Name"]

    @co2_emission_factor_schedule_name.setter
    def co2_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `CO2 Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `CO2 Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `co2_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `co2_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `co2_emission_factor_schedule_name`')
        self._data["CO2 Emission Factor Schedule Name"] = value

    @property
    def co_emission_factor(self):
        """Get co_emission_factor

        Returns:
            float: the value of `co_emission_factor` or None if not set
        """
        return self._data["CO Emission Factor"]

    @co_emission_factor.setter
    def co_emission_factor(self, value=None):
        """  Corresponds to IDD Field `CO Emission Factor`

        Args:
            value (float): value for IDD Field `CO Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `co_emission_factor`'.format(value))
        self._data["CO Emission Factor"] = value

    @property
    def co_emission_factor_schedule_name(self):
        """Get co_emission_factor_schedule_name

        Returns:
            str: the value of `co_emission_factor_schedule_name` or None if not set
        """
        return self._data["CO Emission Factor Schedule Name"]

    @co_emission_factor_schedule_name.setter
    def co_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `CO Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `CO Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `co_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `co_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `co_emission_factor_schedule_name`')
        self._data["CO Emission Factor Schedule Name"] = value

    @property
    def ch4_emission_factor(self):
        """Get ch4_emission_factor

        Returns:
            float: the value of `ch4_emission_factor` or None if not set
        """
        return self._data["CH4 Emission Factor"]

    @ch4_emission_factor.setter
    def ch4_emission_factor(self, value=None):
        """  Corresponds to IDD Field `CH4 Emission Factor`

        Args:
            value (float): value for IDD Field `CH4 Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ch4_emission_factor`'.format(value))
        self._data["CH4 Emission Factor"] = value

    @property
    def ch4_emission_factor_schedule_name(self):
        """Get ch4_emission_factor_schedule_name

        Returns:
            str: the value of `ch4_emission_factor_schedule_name` or None if not set
        """
        return self._data["CH4 Emission Factor Schedule Name"]

    @ch4_emission_factor_schedule_name.setter
    def ch4_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `CH4 Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `CH4 Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `ch4_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `ch4_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `ch4_emission_factor_schedule_name`')
        self._data["CH4 Emission Factor Schedule Name"] = value

    @property
    def nox_emission_factor(self):
        """Get nox_emission_factor

        Returns:
            float: the value of `nox_emission_factor` or None if not set
        """
        return self._data["NOx Emission Factor"]

    @nox_emission_factor.setter
    def nox_emission_factor(self, value=None):
        """  Corresponds to IDD Field `NOx Emission Factor`

        Args:
            value (float): value for IDD Field `NOx Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nox_emission_factor`'.format(value))
        self._data["NOx Emission Factor"] = value

    @property
    def nox_emission_factor_schedule_name(self):
        """Get nox_emission_factor_schedule_name

        Returns:
            str: the value of `nox_emission_factor_schedule_name` or None if not set
        """
        return self._data["NOx Emission Factor Schedule Name"]

    @nox_emission_factor_schedule_name.setter
    def nox_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `NOx Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `NOx Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `nox_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nox_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `nox_emission_factor_schedule_name`')
        self._data["NOx Emission Factor Schedule Name"] = value

    @property
    def n2o_emission_factor(self):
        """Get n2o_emission_factor

        Returns:
            float: the value of `n2o_emission_factor` or None if not set
        """
        return self._data["N2O Emission Factor"]

    @n2o_emission_factor.setter
    def n2o_emission_factor(self, value=None):
        """  Corresponds to IDD Field `N2O Emission Factor`

        Args:
            value (float): value for IDD Field `N2O Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `n2o_emission_factor`'.format(value))
        self._data["N2O Emission Factor"] = value

    @property
    def n2o_emission_factor_schedule_name(self):
        """Get n2o_emission_factor_schedule_name

        Returns:
            str: the value of `n2o_emission_factor_schedule_name` or None if not set
        """
        return self._data["N2O Emission Factor Schedule Name"]

    @n2o_emission_factor_schedule_name.setter
    def n2o_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `N2O Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `N2O Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `n2o_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `n2o_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `n2o_emission_factor_schedule_name`')
        self._data["N2O Emission Factor Schedule Name"] = value

    @property
    def so2_emission_factor(self):
        """Get so2_emission_factor

        Returns:
            float: the value of `so2_emission_factor` or None if not set
        """
        return self._data["SO2 Emission Factor"]

    @so2_emission_factor.setter
    def so2_emission_factor(self, value=None):
        """  Corresponds to IDD Field `SO2 Emission Factor`

        Args:
            value (float): value for IDD Field `SO2 Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `so2_emission_factor`'.format(value))
        self._data["SO2 Emission Factor"] = value

    @property
    def so2_emission_factor_schedule_name(self):
        """Get so2_emission_factor_schedule_name

        Returns:
            str: the value of `so2_emission_factor_schedule_name` or None if not set
        """
        return self._data["SO2 Emission Factor Schedule Name"]

    @so2_emission_factor_schedule_name.setter
    def so2_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `SO2 Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `SO2 Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `so2_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `so2_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `so2_emission_factor_schedule_name`')
        self._data["SO2 Emission Factor Schedule Name"] = value

    @property
    def pm_emission_factor(self):
        """Get pm_emission_factor

        Returns:
            float: the value of `pm_emission_factor` or None if not set
        """
        return self._data["PM Emission Factor"]

    @pm_emission_factor.setter
    def pm_emission_factor(self, value=None):
        """  Corresponds to IDD Field `PM Emission Factor`

        Args:
            value (float): value for IDD Field `PM Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pm_emission_factor`'.format(value))
        self._data["PM Emission Factor"] = value

    @property
    def pm_emission_factor_schedule_name(self):
        """Get pm_emission_factor_schedule_name

        Returns:
            str: the value of `pm_emission_factor_schedule_name` or None if not set
        """
        return self._data["PM Emission Factor Schedule Name"]

    @pm_emission_factor_schedule_name.setter
    def pm_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `PM Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `PM Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `pm_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pm_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `pm_emission_factor_schedule_name`')
        self._data["PM Emission Factor Schedule Name"] = value

    @property
    def pm10_emission_factor(self):
        """Get pm10_emission_factor

        Returns:
            float: the value of `pm10_emission_factor` or None if not set
        """
        return self._data["PM10 Emission Factor"]

    @pm10_emission_factor.setter
    def pm10_emission_factor(self, value=None):
        """  Corresponds to IDD Field `PM10 Emission Factor`

        Args:
            value (float): value for IDD Field `PM10 Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pm10_emission_factor`'.format(value))
        self._data["PM10 Emission Factor"] = value

    @property
    def pm10_emission_factor_schedule_name(self):
        """Get pm10_emission_factor_schedule_name

        Returns:
            str: the value of `pm10_emission_factor_schedule_name` or None if not set
        """
        return self._data["PM10 Emission Factor Schedule Name"]

    @pm10_emission_factor_schedule_name.setter
    def pm10_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `PM10 Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `PM10 Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `pm10_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pm10_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `pm10_emission_factor_schedule_name`')
        self._data["PM10 Emission Factor Schedule Name"] = value

    @property
    def pm2_5_emission_factor(self):
        """Get pm2_5_emission_factor

        Returns:
            float: the value of `pm2_5_emission_factor` or None if not set
        """
        return self._data["PM2.5 Emission Factor"]

    @pm2_5_emission_factor.setter
    def pm2_5_emission_factor(self, value=None):
        """  Corresponds to IDD Field `PM2.5 Emission Factor`

        Args:
            value (float): value for IDD Field `PM2.5 Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pm2_5_emission_factor`'.format(value))
        self._data["PM2.5 Emission Factor"] = value

    @property
    def pm2_5_emission_factor_schedule_name(self):
        """Get pm2_5_emission_factor_schedule_name

        Returns:
            str: the value of `pm2_5_emission_factor_schedule_name` or None if not set
        """
        return self._data["PM2.5 Emission Factor Schedule Name"]

    @pm2_5_emission_factor_schedule_name.setter
    def pm2_5_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `PM2.5 Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `PM2.5 Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `pm2_5_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pm2_5_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `pm2_5_emission_factor_schedule_name`')
        self._data["PM2.5 Emission Factor Schedule Name"] = value

    @property
    def nh3_emission_factor(self):
        """Get nh3_emission_factor

        Returns:
            float: the value of `nh3_emission_factor` or None if not set
        """
        return self._data["NH3 Emission Factor"]

    @nh3_emission_factor.setter
    def nh3_emission_factor(self, value=None):
        """  Corresponds to IDD Field `NH3 Emission Factor`

        Args:
            value (float): value for IDD Field `NH3 Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nh3_emission_factor`'.format(value))
        self._data["NH3 Emission Factor"] = value

    @property
    def nh3_emission_factor_schedule_name(self):
        """Get nh3_emission_factor_schedule_name

        Returns:
            str: the value of `nh3_emission_factor_schedule_name` or None if not set
        """
        return self._data["NH3 Emission Factor Schedule Name"]

    @nh3_emission_factor_schedule_name.setter
    def nh3_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `NH3 Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `NH3 Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `nh3_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nh3_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `nh3_emission_factor_schedule_name`')
        self._data["NH3 Emission Factor Schedule Name"] = value

    @property
    def nmvoc_emission_factor(self):
        """Get nmvoc_emission_factor

        Returns:
            float: the value of `nmvoc_emission_factor` or None if not set
        """
        return self._data["NMVOC Emission Factor"]

    @nmvoc_emission_factor.setter
    def nmvoc_emission_factor(self, value=None):
        """  Corresponds to IDD Field `NMVOC Emission Factor`

        Args:
            value (float): value for IDD Field `NMVOC Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nmvoc_emission_factor`'.format(value))
        self._data["NMVOC Emission Factor"] = value

    @property
    def nmvoc_emission_factor_schedule_name(self):
        """Get nmvoc_emission_factor_schedule_name

        Returns:
            str: the value of `nmvoc_emission_factor_schedule_name` or None if not set
        """
        return self._data["NMVOC Emission Factor Schedule Name"]

    @nmvoc_emission_factor_schedule_name.setter
    def nmvoc_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `NMVOC Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `NMVOC Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `nmvoc_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nmvoc_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `nmvoc_emission_factor_schedule_name`')
        self._data["NMVOC Emission Factor Schedule Name"] = value

    @property
    def hg_emission_factor(self):
        """Get hg_emission_factor

        Returns:
            float: the value of `hg_emission_factor` or None if not set
        """
        return self._data["Hg Emission Factor"]

    @hg_emission_factor.setter
    def hg_emission_factor(self, value=None):
        """  Corresponds to IDD Field `Hg Emission Factor`

        Args:
            value (float): value for IDD Field `Hg Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `hg_emission_factor`'.format(value))
        self._data["Hg Emission Factor"] = value

    @property
    def hg_emission_factor_schedule_name(self):
        """Get hg_emission_factor_schedule_name

        Returns:
            str: the value of `hg_emission_factor_schedule_name` or None if not set
        """
        return self._data["Hg Emission Factor Schedule Name"]

    @hg_emission_factor_schedule_name.setter
    def hg_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Hg Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `Hg Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `hg_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `hg_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `hg_emission_factor_schedule_name`')
        self._data["Hg Emission Factor Schedule Name"] = value

    @property
    def pb_emission_factor(self):
        """Get pb_emission_factor

        Returns:
            float: the value of `pb_emission_factor` or None if not set
        """
        return self._data["Pb Emission Factor"]

    @pb_emission_factor.setter
    def pb_emission_factor(self, value=None):
        """  Corresponds to IDD Field `Pb Emission Factor`

        Args:
            value (float): value for IDD Field `Pb Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pb_emission_factor`'.format(value))
        self._data["Pb Emission Factor"] = value

    @property
    def pb_emission_factor_schedule_name(self):
        """Get pb_emission_factor_schedule_name

        Returns:
            str: the value of `pb_emission_factor_schedule_name` or None if not set
        """
        return self._data["Pb Emission Factor Schedule Name"]

    @pb_emission_factor_schedule_name.setter
    def pb_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Pb Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `Pb Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `pb_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `pb_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `pb_emission_factor_schedule_name`')
        self._data["Pb Emission Factor Schedule Name"] = value

    @property
    def water_emission_factor(self):
        """Get water_emission_factor

        Returns:
            float: the value of `water_emission_factor` or None if not set
        """
        return self._data["Water Emission Factor"]

    @water_emission_factor.setter
    def water_emission_factor(self, value=None):
        """  Corresponds to IDD Field `Water Emission Factor`

        Args:
            value (float): value for IDD Field `Water Emission Factor`
                Units: L/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_emission_factor`'.format(value))
        self._data["Water Emission Factor"] = value

    @property
    def water_emission_factor_schedule_name(self):
        """Get water_emission_factor_schedule_name

        Returns:
            str: the value of `water_emission_factor_schedule_name` or None if not set
        """
        return self._data["Water Emission Factor Schedule Name"]

    @water_emission_factor_schedule_name.setter
    def water_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Water Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `Water Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_emission_factor_schedule_name`')
        self._data["Water Emission Factor Schedule Name"] = value

    @property
    def nuclear_high_level_emission_factor(self):
        """Get nuclear_high_level_emission_factor

        Returns:
            float: the value of `nuclear_high_level_emission_factor` or None if not set
        """
        return self._data["Nuclear High Level Emission Factor"]

    @nuclear_high_level_emission_factor.setter
    def nuclear_high_level_emission_factor(self, value=None):
        """  Corresponds to IDD Field `Nuclear High Level Emission Factor`

        Args:
            value (float): value for IDD Field `Nuclear High Level Emission Factor`
                Units: g/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nuclear_high_level_emission_factor`'.format(value))
        self._data["Nuclear High Level Emission Factor"] = value

    @property
    def nuclear_high_level_emission_factor_schedule_name(self):
        """Get nuclear_high_level_emission_factor_schedule_name

        Returns:
            str: the value of `nuclear_high_level_emission_factor_schedule_name` or None if not set
        """
        return self._data["Nuclear High Level Emission Factor Schedule Name"]

    @nuclear_high_level_emission_factor_schedule_name.setter
    def nuclear_high_level_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Nuclear High Level Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `Nuclear High Level Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `nuclear_high_level_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nuclear_high_level_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `nuclear_high_level_emission_factor_schedule_name`')
        self._data["Nuclear High Level Emission Factor Schedule Name"] = value

    @property
    def nuclear_low_level_emission_factor(self):
        """Get nuclear_low_level_emission_factor

        Returns:
            float: the value of `nuclear_low_level_emission_factor` or None if not set
        """
        return self._data["Nuclear Low Level Emission Factor"]

    @nuclear_low_level_emission_factor.setter
    def nuclear_low_level_emission_factor(self, value=None):
        """  Corresponds to IDD Field `Nuclear Low Level Emission Factor`

        Args:
            value (float): value for IDD Field `Nuclear Low Level Emission Factor`
                Units: m3/MJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nuclear_low_level_emission_factor`'.format(value))
        self._data["Nuclear Low Level Emission Factor"] = value

    @property
    def nuclear_low_level_emission_factor_schedule_name(self):
        """Get nuclear_low_level_emission_factor_schedule_name

        Returns:
            str: the value of `nuclear_low_level_emission_factor_schedule_name` or None if not set
        """
        return self._data["Nuclear Low Level Emission Factor Schedule Name"]

    @nuclear_low_level_emission_factor_schedule_name.setter
    def nuclear_low_level_emission_factor_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Nuclear Low Level Emission Factor Schedule Name`

        Args:
            value (str): value for IDD Field `Nuclear Low Level Emission Factor Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `nuclear_low_level_emission_factor_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `nuclear_low_level_emission_factor_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `nuclear_low_level_emission_factor_schedule_name`')
        self._data["Nuclear Low Level Emission Factor Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputDiagnostics(object):
    """ Corresponds to IDD object `Output:Diagnostics`
        Special keys to produce certain warning messages or effect certain simulation characteristics.
    
    """
    internal_name = "Output:Diagnostics"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:Diagnostics`
        """
        self._data = OrderedDict()
        self._data["Key 1"] = None
        self._data["Key 2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.key_1 = None
        else:
            self.key_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.key_2 = None
        else:
            self.key_2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def key_1(self):
        """Get key_1

        Returns:
            str: the value of `key_1` or None if not set
        """
        return self._data["Key 1"]

    @key_1.setter
    def key_1(self, value=None):
        """  Corresponds to IDD Field `Key 1`

        Args:
            value (str): value for IDD Field `Key 1`
                Accepted values are:
                      - DisplayAllWarnings
                      - DisplayExtraWarnings
                      - DisplayUnusedSchedules
                      - DisplayUnusedObjects
                      - DisplayAdvancedReportVariables
                      - DisplayZoneAirHeatBalanceOffBalance
                      - DoNotMirrorDetachedShading
                      - DisplayWeatherMissingDataWarnings
                      - ReportDuringWarmup
                      - ReportDetailedWarmupConvergence
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_1`')
            vals = {}
            vals["displayallwarnings"] = "DisplayAllWarnings"
            vals["displayextrawarnings"] = "DisplayExtraWarnings"
            vals["displayunusedschedules"] = "DisplayUnusedSchedules"
            vals["displayunusedobjects"] = "DisplayUnusedObjects"
            vals["displayadvancedreportvariables"] = "DisplayAdvancedReportVariables"
            vals["displayzoneairheatbalanceoffbalance"] = "DisplayZoneAirHeatBalanceOffBalance"
            vals["donotmirrordetachedshading"] = "DoNotMirrorDetachedShading"
            vals["displayweathermissingdatawarnings"] = "DisplayWeatherMissingDataWarnings"
            vals["reportduringwarmup"] = "ReportDuringWarmup"
            vals["reportdetailedwarmupconvergence"] = "ReportDetailedWarmupConvergence"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `key_1`'.format(value))
            value = vals[value_lower]
        self._data["Key 1"] = value

    @property
    def key_2(self):
        """Get key_2

        Returns:
            str: the value of `key_2` or None if not set
        """
        return self._data["Key 2"]

    @key_2.setter
    def key_2(self, value=None):
        """  Corresponds to IDD Field `Key 2`

        Args:
            value (str): value for IDD Field `Key 2`
                Accepted values are:
                      - DisplayAllWarnings
                      - DisplayExtraWarnings
                      - DisplayUnusedSchedules
                      - DisplayUnusedObjects
                      - DisplayAdvancedReportVariables
                      - DisplayZoneAirHeatBalanceOffBalance
                      - DoNotMirrorDetachedShading
                      - DisplayWeatherMissingDataWarnings
                      - ReportDuringWarmup
                      - ReportDetailedWarmupConvergence
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `key_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `key_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `key_2`')
            vals = {}
            vals["displayallwarnings"] = "DisplayAllWarnings"
            vals["displayextrawarnings"] = "DisplayExtraWarnings"
            vals["displayunusedschedules"] = "DisplayUnusedSchedules"
            vals["displayunusedobjects"] = "DisplayUnusedObjects"
            vals["displayadvancedreportvariables"] = "DisplayAdvancedReportVariables"
            vals["displayzoneairheatbalanceoffbalance"] = "DisplayZoneAirHeatBalanceOffBalance"
            vals["donotmirrordetachedshading"] = "DoNotMirrorDetachedShading"
            vals["displayweathermissingdatawarnings"] = "DisplayWeatherMissingDataWarnings"
            vals["reportduringwarmup"] = "ReportDuringWarmup"
            vals["reportdetailedwarmupconvergence"] = "ReportDetailedWarmupConvergence"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `key_2`'.format(value))
            value = vals[value_lower]
        self._data["Key 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputDebuggingData(object):
    """ Corresponds to IDD object `Output:DebuggingData`
        switch eplusout.dbg file on or off
    
    """
    internal_name = "Output:DebuggingData"
    field_count = 2
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:DebuggingData`
        """
        self._data = OrderedDict()
        self._data["Report Debugging Data"] = None
        self._data["Report During Warmup"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.report_debugging_data = None
        else:
            self.report_debugging_data = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.report_during_warmup = None
        else:
            self.report_during_warmup = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def report_debugging_data(self):
        """Get report_debugging_data

        Returns:
            float: the value of `report_debugging_data` or None if not set
        """
        return self._data["Report Debugging Data"]

    @report_debugging_data.setter
    def report_debugging_data(self, value=None):
        """  Corresponds to IDD Field `Report Debugging Data`
        value=1 then yes all others no

        Args:
            value (float): value for IDD Field `Report Debugging Data`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `report_debugging_data`'.format(value))
        self._data["Report Debugging Data"] = value

    @property
    def report_during_warmup(self):
        """Get report_during_warmup

        Returns:
            float: the value of `report_during_warmup` or None if not set
        """
        return self._data["Report During Warmup"]

    @report_during_warmup.setter
    def report_during_warmup(self, value=None):
        """  Corresponds to IDD Field `Report During Warmup`
        value=1 then always even during warmup  all others no

        Args:
            value (float): value for IDD Field `Report During Warmup`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `report_during_warmup`'.format(value))
        self._data["Report During Warmup"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class OutputPreprocessorMessage(object):
    """ Corresponds to IDD object `Output:PreprocessorMessage`
        This object does not come from a user input.  This is generated by a pre-processor
        so that various conditions can be gracefully passed on by the InputProcessor.
    
    """
    internal_name = "Output:PreprocessorMessage"
    field_count = 12
    required_fields = []

    def __init__(self):
        """ Init data dictionary object for IDD  `Output:PreprocessorMessage`
        """
        self._data = OrderedDict()
        self._data["Preprocessor Name"] = None
        self._data["Error Severity"] = None
        self._data["Message Line 1"] = None
        self._data["Message Line 2"] = None
        self._data["Message Line 3"] = None
        self._data["Message Line 4"] = None
        self._data["Message Line 5"] = None
        self._data["Message Line 6"] = None
        self._data["Message Line 7"] = None
        self._data["Message Line 8"] = None
        self._data["Message Line 9"] = None
        self._data["Message Line 10"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.preprocessor_name = None
        else:
            self.preprocessor_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.error_severity = None
        else:
            self.error_severity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_1 = None
        else:
            self.message_line_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_2 = None
        else:
            self.message_line_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_3 = None
        else:
            self.message_line_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_4 = None
        else:
            self.message_line_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_5 = None
        else:
            self.message_line_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_6 = None
        else:
            self.message_line_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_7 = None
        else:
            self.message_line_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_8 = None
        else:
            self.message_line_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_9 = None
        else:
            self.message_line_9 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.message_line_10 = None
        else:
            self.message_line_10 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def preprocessor_name(self):
        """Get preprocessor_name

        Returns:
            str: the value of `preprocessor_name` or None if not set
        """
        return self._data["Preprocessor Name"]

    @preprocessor_name.setter
    def preprocessor_name(self, value=None):
        """  Corresponds to IDD Field `Preprocessor Name`

        Args:
            value (str): value for IDD Field `Preprocessor Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `preprocessor_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `preprocessor_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `preprocessor_name`')
        self._data["Preprocessor Name"] = value

    @property
    def error_severity(self):
        """Get error_severity

        Returns:
            str: the value of `error_severity` or None if not set
        """
        return self._data["Error Severity"]

    @error_severity.setter
    def error_severity(self, value=None):
        """  Corresponds to IDD Field `Error Severity`
        Depending on type, InputProcessor may terminate the program.

        Args:
            value (str): value for IDD Field `Error Severity`
                Accepted values are:
                      - Information
                      - Warning
                      - Severe
                      - Fatal
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `error_severity`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `error_severity`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `error_severity`')
            vals = {}
            vals["information"] = "Information"
            vals["warning"] = "Warning"
            vals["severe"] = "Severe"
            vals["fatal"] = "Fatal"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `error_severity`'.format(value))
            value = vals[value_lower]
        self._data["Error Severity"] = value

    @property
    def message_line_1(self):
        """Get message_line_1

        Returns:
            str: the value of `message_line_1` or None if not set
        """
        return self._data["Message Line 1"]

    @message_line_1.setter
    def message_line_1(self, value=None):
        """  Corresponds to IDD Field `Message Line 1`

        Args:
            value (str): value for IDD Field `Message Line 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_1`')
        self._data["Message Line 1"] = value

    @property
    def message_line_2(self):
        """Get message_line_2

        Returns:
            str: the value of `message_line_2` or None if not set
        """
        return self._data["Message Line 2"]

    @message_line_2.setter
    def message_line_2(self, value=None):
        """  Corresponds to IDD Field `Message Line 2`

        Args:
            value (str): value for IDD Field `Message Line 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_2`')
        self._data["Message Line 2"] = value

    @property
    def message_line_3(self):
        """Get message_line_3

        Returns:
            str: the value of `message_line_3` or None if not set
        """
        return self._data["Message Line 3"]

    @message_line_3.setter
    def message_line_3(self, value=None):
        """  Corresponds to IDD Field `Message Line 3`

        Args:
            value (str): value for IDD Field `Message Line 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_3`')
        self._data["Message Line 3"] = value

    @property
    def message_line_4(self):
        """Get message_line_4

        Returns:
            str: the value of `message_line_4` or None if not set
        """
        return self._data["Message Line 4"]

    @message_line_4.setter
    def message_line_4(self, value=None):
        """  Corresponds to IDD Field `Message Line 4`

        Args:
            value (str): value for IDD Field `Message Line 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_4`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_4`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_4`')
        self._data["Message Line 4"] = value

    @property
    def message_line_5(self):
        """Get message_line_5

        Returns:
            str: the value of `message_line_5` or None if not set
        """
        return self._data["Message Line 5"]

    @message_line_5.setter
    def message_line_5(self, value=None):
        """  Corresponds to IDD Field `Message Line 5`

        Args:
            value (str): value for IDD Field `Message Line 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_5`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_5`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_5`')
        self._data["Message Line 5"] = value

    @property
    def message_line_6(self):
        """Get message_line_6

        Returns:
            str: the value of `message_line_6` or None if not set
        """
        return self._data["Message Line 6"]

    @message_line_6.setter
    def message_line_6(self, value=None):
        """  Corresponds to IDD Field `Message Line 6`

        Args:
            value (str): value for IDD Field `Message Line 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_6`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_6`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_6`')
        self._data["Message Line 6"] = value

    @property
    def message_line_7(self):
        """Get message_line_7

        Returns:
            str: the value of `message_line_7` or None if not set
        """
        return self._data["Message Line 7"]

    @message_line_7.setter
    def message_line_7(self, value=None):
        """  Corresponds to IDD Field `Message Line 7`

        Args:
            value (str): value for IDD Field `Message Line 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_7`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_7`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_7`')
        self._data["Message Line 7"] = value

    @property
    def message_line_8(self):
        """Get message_line_8

        Returns:
            str: the value of `message_line_8` or None if not set
        """
        return self._data["Message Line 8"]

    @message_line_8.setter
    def message_line_8(self, value=None):
        """  Corresponds to IDD Field `Message Line 8`

        Args:
            value (str): value for IDD Field `Message Line 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_8`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_8`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_8`')
        self._data["Message Line 8"] = value

    @property
    def message_line_9(self):
        """Get message_line_9

        Returns:
            str: the value of `message_line_9` or None if not set
        """
        return self._data["Message Line 9"]

    @message_line_9.setter
    def message_line_9(self, value=None):
        """  Corresponds to IDD Field `Message Line 9`

        Args:
            value (str): value for IDD Field `Message Line 9`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_9`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_9`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_9`')
        self._data["Message Line 9"] = value

    @property
    def message_line_10(self):
        """Get message_line_10

        Returns:
            str: the value of `message_line_10` or None if not set
        """
        return self._data["Message Line 10"]

    @message_line_10.setter
    def message_line_10(self, value=None):
        """  Corresponds to IDD Field `Message Line 10`

        Args:
            value (str): value for IDD Field `Message Line 10`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `message_line_10`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `message_line_10`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `message_line_10`')
        self._data["Message Line 10"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])